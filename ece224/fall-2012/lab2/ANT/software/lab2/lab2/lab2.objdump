
lab2.elf:     file format elf32-littlenios2
lab2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012a10 memsz 0x00012a10 flags r-x
    LOAD off    0x00013a30 vaddr 0x00812a30 paddr 0x008146f8 align 2**12
         filesz 0x00001cc8 memsz 0x00001cc8 flags rw-
    LOAD off    0x000163c0 vaddr 0x008163c0 paddr 0x008163c0 align 2**12
         filesz 0x00000000 memsz 0x00000408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117cc  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000010b0  00811980  00811980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc8  00812a30  008146f8  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000408  008163c0  008163c0  000163c0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000156f8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ed8  00000000  00000000  00015720  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001d2f  00000000  00000000  000165f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002973d  00000000  00000000  00018327  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090ef  00000000  00000000  00041a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000196e3  00000000  00000000  0004ab53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000200c  00000000  00000000  00064238  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e90  00000000  00000000  00066244  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dcdc  00000000  00000000  000690d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00076db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c18  00000000  00000000  00076e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007baf9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007bafc  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007bb01  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007bb02  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007bb06  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007bb0a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0007bb0e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0007bb19  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0007bb24  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  0007bb2f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000013  00000000  00000000  0007bb3c  2**0
                  CONTENTS, READONLY
 28 .jdi          00004111  00000000  00000000  0007bb4f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00811980 l    d  .rodata	00000000 .rodata
00812a30 l    d  .rwdata	00000000 .rwdata
008163c0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 Open_I2C.c
00000000 l    df *ABS*	00000000 lab2.c
00800a04 l     F .text	000000cc button_ISR
00000000 l    df *ABS*	00000000 wm8731.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080347c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00803d6c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00812b30 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804f38 l     F .text	00000058 __sprint_r
008125e2 l     O .rodata	00000010 blanks.3452
008125d2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00806fb4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00807168 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00808b90 l     F .text	00000058 std
00808c9c l     F .text	00000008 __fp_lock
00808ca4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
008146bc l     O .rwdata	00000004 charset
00812610 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00812758 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080dde0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080de40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080de6c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080dfa4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e288 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e368 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e4c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e6f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008146e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080e9e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008134ec l     O .rwdata	00001060 jtag_uart_0
0081454c l     O .rwdata	00000120 lcd_display
0080eae8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ed28 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080ef50 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008146e8 l     O .rwdata	00000004 colstart
0080f5cc l     F .text	000000b8 lcd_write_command
0080f684 l     F .text	000000d4 lcd_write_data
0080f758 l     F .text	000000d8 lcd_clear_screen
0080f830 l     F .text	00000214 lcd_repaint_screen
0080fa44 l     F .text	000000e0 lcd_scroll_up
0080fb24 l     F .text	000002e4 lcd_handle_escape
00810344 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008105a4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810a24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00810e48 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00810f98 l     F .text	000000f8 alt_file_locked
0081121c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008128ad l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0080aa34 g     F .text	00000094 _mprec_log10
0080ab20 g     F .text	00000088 __any_on
0080c554 g     F .text	00000070 _isatty_r
00812730 g     O .rodata	00000028 __mprec_tinytens
0080e528 g     F .text	0000006c alt_main
008047bc g     F .text	0000008c strcpy
008163e0 g     O .bss	00000001 BS_BootSig_32
008163e4 g     O .bss	00000004 FAT32ClusEntryVal
0080464c g     F .text	000000a0 _puts_r
00816538 g     O .bss	00000100 alt_irq
0080c5c4 g     F .text	00000078 _lseek_r
008163e8 g     O .bss	00000001 MBR_Bootable
008146f8 g       *ABS*	00000000 __flash_rwdata_start
0080d99c g     F .text	00000088 __eqdf2
0081469e g     O .rwdata	00000005 acmd51
008167c8 g       *ABS*	00000000 __alt_heap_start
00801220 g     F .text	000001a4 get_rel_sector
008045d4 g     F .text	00000044 printf
008163e9 g     O .bss	00000008 BS_FilSysType_16
008163f1 g     O .bss	00000001 BPB_SecPerClus
0080bf7c g     F .text	00000068 __sseek
00808bf8 g     F .text	000000a4 __sinit
0080c0c0 g     F .text	00000130 __swbuf_r
00809a50 g     F .text	00000084 _setlocale_r
00808cf8 g     F .text	0000009c __sfmoreglue
0080e5b4 g     F .text	00000020 __malloc_unlock
00804848 g     F .text	00000674 strerror
0080075c g     F .text	00000010 I2C_Read_Ctrl
0080a548 g     F .text	000000e0 memmove
008163d4 g     O .bss	00000004 sect_num
00808ce8 g     F .text	00000010 _cleanup
0080aba8 g     F .text	000000bc _Balloc
008163d8 g     O .bss	00000004 reverse
008163f4 g     O .bss	00000004 BPB_RootEntCnt
008002e8 g     F .text	00000104 LCD_Test
00803980 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
008163f8 g     O .bss	00000004 FATOffset
00802120 g     F .text	00000474 SD_card_init
00803044 g     F .text	00000214 ceil
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c4e0 g     F .text	00000074 _fstat_r
008164c8 g     O .bss	00000004 errno
00803258 g     F .text	00000224 floor
00800fc4 g     F .text	0000025c SD_read_lba
008164d4 g     O .bss	00000004 alt_argv
0081c66c g       *ABS*	00000000 _gp
0080e88c g     F .text	00000030 usleep
008163fc g     O .bss	00000004 BPB_RootClus
0081336c g     O .rwdata	00000180 alt_fd_list
00816400 g     O .bss	00000004 BPB_ExtFlags
00800e30 g     F .text	00000194 info_bs
0081650c g     O .bss	00000014 response_buffer
00811440 g     F .text	00000094 alt_find_dev
0080a4a8 g     F .text	000000a0 memcpy
00816404 g     O .bss	00000004 FirstRootDirSecNum
00808cdc g     F .text	0000000c _cleanup_r
00803a08 g     F .text	000000f8 __floatsidf
008008cc g     F .text	00000138 get_play_mode
008045c0 g     F .text	00000014 perror
00810f20 g     F .text	00000078 alt_io_redirect
0080db34 g     F .text	00000088 __ltdf2
00811980 g       *ABS*	00000000 __DTOR_END__
008046ec g     F .text	00000014 puts
00816408 g     O .bss	00000001 BS_DrvNum_32
00811420 g     F .text	00000020 altera_nios2_irq_init
0080a984 g     F .text	000000b0 __ratio
00800bd4 g     F .text	000001ec response_R
00800dc0 g     F .text	0000004c Ncc
0080f168 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804618 g     F .text	00000034 _printf_r
00803ea8 g     F .text	00000008 __udivsi3
0080e1c4 g     F .text	000000c4 isatty
0081640c g     O .bss	00000004 BPB_SecPerTrk
00812640 g     O .rodata	000000c8 __mprec_tens
00816410 g     O .bss	00000004 BPB_HiddSec
00809a2c g     F .text	00000008 __locale_charset
008116c4 g     F .text	00000090 alt_icache_flush
008164bc g     O .bss	00000004 __malloc_top_pad
008146b8 g     O .rwdata	00000004 __mb_cur_max
00809a34 g     F .text	0000000c _localeconv_r
0080b30c g     F .text	0000003c __i2b
00809410 g     F .text	0000049c __sfvwrite_r
00816414 g     O .bss	00000008 BS_FilSysType_32
0081641c g     O .bss	00000001 MBR_Partition_Type
0080bf04 g     F .text	00000070 _sbrk_r
0080c63c g     F .text	00000078 _read_r
00812f30 g     O .rwdata	0000000c __lc_ctype
008146d8 g     O .rwdata	00000004 alt_max_fd
00804284 g     F .text	00000138 __unpack_d
0080c3bc g     F .text	00000110 _fclose_r
0081468a g     O .rwdata	00000005 cmd16
00808b5c g     F .text	00000034 fflush
008164c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0081641d g     O .bss	00000003 BS_JmpBoot
00816420 g     O .bss	00000004 FirstDataSector
0080e004 g     F .text	000001c0 alt_irq_register
00800890 g     F .text	0000003c isEOF
0080390c g     F .text	00000074 __adddf3
00816424 g     O .bss	00000001 BPB_NumFATs
0080a864 g     F .text	00000120 __b2d
0080cd20 g     F .text	00000660 __umoddi3
00816428 g     O .bss	00000004 BPB_FATSz16
0080e3d4 g     F .text	000000f4 lseek
008146b4 g     O .rwdata	00000004 _global_impure_ptr
0081642c g     O .bss	00000004 FAT16ClusEntryVal
0080b8a0 g     F .text	000005f4 _realloc_r
008167c8 g       *ABS*	00000000 __bss_end
00810d50 g     F .text	000000f8 alt_iic_isr_register
00811314 g     F .text	0000010c alt_tick
008163cc g     O .bss	00000004 prev_track
0080c6b4 g     F .text	0000066c __udivdi3
00812708 g     O .rodata	00000028 __mprec_bigtens
0080b594 g     F .text	00000120 __s2b
00803bd8 g     F .text	00000194 __floatunsidf
00814671 g     O .rwdata	00000005 cmd55
0080a784 g     F .text	00000060 __mcmp
00816430 g     O .bss	00000004 ThisFATEntOffset
0081466c g     O .rwdata	00000005 cmd0
008146f4 g     O .rwdata	00000004 __ctype_ptr
00808cc4 g     F .text	00000018 __fp_lock_all
00810d08 g     F .text	00000048 alt_ic_irq_enabled
0081127c g     F .text	00000098 alt_alarm_stop
00814699 g     O .rwdata	00000005 acmd41
008164cc g     O .bss	00000004 alt_irq_active
00800838 g     F .text	00000028 I2C_Init
008000ec g     F .exceptions	000000c8 alt_irq_handler
00813344 g     O .rwdata	00000028 alt_dev_null
00800528 g     F .text	00000204 LCD_Display
008003ec g     F .text	0000013c LCD_File_Buffering
00810954 g     F .text	0000001c alt_dcache_flush_all
0080a650 g     F .text	00000070 __hi0bits
00803b00 g     F .text	000000d8 __fixdfsi
008007c0 g     F .text	0000001c I2C_Write_Period
00816434 g     O .bss	00000004 BS_VOLID_16
008146f8 g       *ABS*	00000000 __ram_rwdata_end
008146d0 g     O .rwdata	00000008 alt_dev_list
00808ee8 g     F .text	00000058 _fputc_r
0080e8bc g     F .text	00000124 write
0080b7b8 g     F .text	000000e8 _putc_r
00812a30 g       *ABS*	00000000 __ram_rodata_end
0080decc g     F .text	000000d8 fstat
0080b474 g     F .text	00000120 __pow5mult
008164b0 g     O .bss	00000004 __nlocale_changed
008013c4 g     F .text	00000440 search_for_filetype
00803eb0 g     F .text	00000008 __umodsi3
008167c8 g       *ABS*	00000000 end
00816438 g     O .bss	00000004 BPB_BytsPerSec
0080fe08 g     F .text	0000053c altera_avalon_lcd_16207_write
00814685 g     O .rwdata	00000005 cmd9
0081643c g     O .bss	00000004 BPB_FATSz32
0080ec68 g     F .text	000000c0 altera_avalon_jtag_uart_init
0081197c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810614 g     F .text	00000090 alt_avalon_timer_sc_init
00803ef0 g     F .text	00000080 __clzsi2
0080f38c g     F .text	00000240 altera_avalon_jtag_uart_write
00808be8 g     F .text	00000004 __sfp_lock_acquire
0080a3c4 g     F .text	000000e4 memchr
00804f90 g     F .text	00001ec4 ___vfprintf_internal_r
008090fc g     F .text	00000314 _free_r
00816520 g     O .bss	0000000b BS_VOLLab_32
00806fb8 g     F .text	000001b0 __call_exitprocs
008164b4 g     O .bss	00000004 __mlocale_changed
008146c4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
008164dc g     O .bss	00000004 _alt_tick_rate
00804f30 g     F .text	00000008 _user_strerror
0080af6c g     F .text	0000014c __lshift
00802018 g     F .text	00000108 init_mbr
008164e0 g     O .bss	00000004 _alt_nticks
00816440 g     O .bss	00000004 FATSz
0080e5d4 g     F .text	00000124 read
0080ea74 g     F .text	00000074 alt_sys_init
00816444 g     O .bss	00000004 BPB_BkBootSec
008117dc g     F .text	00000134 __register_exitproc
00816448 g     O .bss	00000004 FAT12ClusEntryVal
0081644c g     O .bss	00000001 BS_BootSig_16
0080076c g     F .text	00000024 I2C_Read_Period
0081468f g     O .rwdata	00000005 cmd17
0080b0b8 g     F .text	00000254 __multiply
0080f000 g     F .text	00000074 altera_avalon_jtag_uart_close
00803eb8 g     F .text	00000038 __mulsi3
00812a30 g       *ABS*	00000000 __ram_rwdata_start
00811980 g       *ABS*	00000000 __ram_rodata_start
008164e4 g     O .bss	00000028 __malloc_current_mallinfo
0080ac64 g     F .text	0000017c __d2b
0080eb20 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008115f4 g     F .text	000000d0 alt_get_fd
008007b0 g     F .text	00000010 I2C_Write_Ctrl
008107f8 g     F .text	0000015c alt_busy_sleep
008043bc g     F .text	000000c8 __fpcmp_parts_d
00816450 g     O .bss	00000004 FATClusEntryVal
0080c34c g     F .text	00000070 _close_r
0080073c g     F .text	00000010 I2C_Read_Status
00811768 g     F .text	00000074 memcmp
0080ebd0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008167c8 g       *ABS*	00000000 __alt_stack_base
0080ec18 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00806e78 g     F .text	0000013c __swsetup_r
00802594 g     F .text	00000184 init
0080d744 g     F .text	00000258 __divdf3
00808d94 g     F .text	000000f0 __sfp
0080aac8 g     F .text	00000058 __copybits
0080074c g     F .text	00000010 I2C_Read_RX
00812f3c g     O .rwdata	00000408 __malloc_av_
00808bf4 g     F .text	00000004 __sinit_lock_release
0080d380 g     F .text	000003c4 __muldf3
0080c060 g     F .text	00000060 __sread
008114d4 g     F .text	00000120 alt_find_file
00810970 g     F .text	000000b4 alt_dev_llist_insert
0080e594 g     F .text	00000020 __malloc_lock
0080e7d0 g     F .text	000000bc sbrk
008163d0 g     O .bss	00000004 pressed
00808960 g     F .text	000001fc _fflush_r
0080c284 g     F .text	000000c8 _calloc_r
00816454 g     O .bss	00000004 BPB_TotSec16
00816458 g     O .bss	00000005 cmd_buffer
0081645d g     O .bss	00000001 read_status
00812a30 g     O .rwdata	00000100 __divsi3_table
008163c0 g       *ABS*	00000000 __bss_start
00814694 g     O .rwdata	00000005 acmd6
00800208 g     F .text	0000007c LCD_Init
00814676 g     O .rwdata	00000005 cmd2
008044bc g     F .text	00000098 memset
0081645e g     O .bss	00000008 BS_OEMName
00802718 g     F .text	000007cc main
008164d8 g     O .bss	00000004 alt_envp
008164c4 g     O .bss	00000004 __malloc_max_total_mem
0080eb78 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080c1f0 g     F .text	0000001c __swbuf
00810410 g     F .text	0000013c altera_avalon_lcd_16207_init
008001f0 g     F .text	00000018 LCD_Line2
0080bf74 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c4cc g     F .text	00000014 fclose
00816638 g     O .bss	00000190 _atexit0
008073ac g     F .text	000015b4 _dtoa_r
008146ac g     O .rwdata	00000004 data_rate_incr
00809c84 g     F .text	00000740 _malloc_r
00816466 g     O .bss	00000006 FATType
0081646c g     O .bss	00000004 ThisFATSecNum
008146dc g     O .rwdata	00000004 alt_errno
00809974 g     F .text	000000b8 _fwalk
008163c4 g     O .bss	00000004 file_number
008163dc g     O .bss	00000004 dly_channel
0080b6b4 g     F .text	00000104 putc
00803de8 g     F .text	00000060 __divsi3
00816470 g     O .bss	00000004 MBR_Partition_Len
00811cb4 g     O .rodata	00000014 __thenan_df
00808fd0 g     F .text	0000012c _malloc_trim_r
00811980 g       *ABS*	00000000 __CTOR_END__
00804700 g     F .text	000000bc strcmp
00811980 g       *ABS*	00000000 __flash_rodata_start
00811980 g       *ABS*	00000000 __DTOR_LIST__
00816474 g     O .bss	00000003 MBR_End_End
0080da24 g     F .text	00000088 __nedf2
0080ea40 g     F .text	00000034 alt_irq_init
00800284 g     F .text	00000064 LCD_Show_Text
008146a4 g     O .rwdata	00000004 next_track
0080e758 g     F .text	00000078 alt_release_fd
0081467b g     O .rwdata	00000005 cmd3
00811cc8 g     O .rodata	00000100 __clz_tab
008164b8 g     O .bss	00000004 _PathLocale
008007a0 g     F .text	00000010 I2C_Write_TX
00811754 g     F .text	00000014 atexit
0080c20c g     F .text	00000078 _write_r
00809ad4 g     F .text	0000001c setlocale
008146b0 g     O .rwdata	00000004 _impure_ptr
008164d0 g     O .bss	00000004 alt_argc
00810ae8 g     F .text	00000064 _do_dtors
008007dc g     F .text	0000005c I2C_Send
00816478 g     O .bss	00000004 BPB_TotSec32
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080a7e4 g     F .text	00000080 __ulp
0080be94 g     F .text	00000040 __isinfd
00808cac g     F .text	00000018 __fp_unlock_all
0081054c g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00808e84 g     F .text	00000064 fputc
008146c8 g     O .rwdata	00000008 alt_fs_list
0081647c g     O .bss	00000004 DataSec
00801af0 g     F .text	00000528 init_bs
00816480 g     O .bss	00000004 TotSec
00816484 g     O .bss	00000004 CountofClusters
00800ad0 g     F .text	00000104 send_cmd
008146a8 g     O .rwdata	00000004 data_rate
00800020 g       *ABS*	00000000 __ram_exceptions_start
00809a40 g     F .text	00000010 localeconv
008163c0 g     O .bss	00000004 file_count
00801804 g     F .text	0000020c CalcFATSecAndOffset
00810b7c g     F .text	00000050 alt_ic_isr_register
008146f8 g       *ABS*	00000000 _edata
008167c8 g       *ABS*	00000000 _end
00816488 g     O .bss	00000004 RootDirSectors
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080f074 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00808f40 g     F .text	00000074 _fputs_r
00810c68 g     F .text	000000a0 alt_ic_irq_disable
0081648c g     O .bss	00000004 BPB_RsvdSecCnt
00816490 g     O .bss	00000002 RCA
0080bfe4 g     F .text	0000007c __swrite
008146c0 g     O .rwdata	00000004 __malloc_trim_threshold
00804554 g     F .text	0000006c _perror_r
00804484 g     F .text	00000038 exit
008098ac g     F .text	000000c8 _fwalk_reent
0080ade0 g     F .text	0000018c __mdiff
00816494 g     O .bss	00000004 BPB_NumHeads
00803e48 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00808bec g     F .text	00000004 __sfp_lock_release
00816498 g     O .bss	00000004 BS_VOLID_32
008127ac g     O .rodata	00000101 _ctype_
0080072c g     F .text	00000010 I2C_Read_CMD
008163c8 g     O .bss	00000004 PLAY
00814680 g     O .rwdata	00000005 cmd7
0081649c g     O .bss	00000001 BS_DrvNum_16
0080bed4 g     F .text	00000030 __isnand
0080deac g     F .text	00000020 _exit
008106a4 g     F .text	00000154 alt_alarm_start
0080dbbc g     F .text	00000124 __muldi3
00800860 g     F .text	00000030 FirstSectorofCluster
00809af0 g     F .text	00000194 __smakebuf_r
00804ebc g     F .text	00000074 strlen
008164a0 g     O .bss	00000004 BPB_FSInfo
00811090 g     F .text	0000018c open
008164a4 g     O .bss	00000001 BPB_Media
0080daac g     F .text	00000088 __gedf2
008164a5 g     O .bss	00000003 MBR_Start_Sector
00802ee4 g     F .text	00000160 init_audio_codec
00810b4c g     F .text	00000030 alt_icache_flush_all
00808fb4 g     F .text	0000001c fputs
008146e0 g     O .rwdata	00000004 alt_priority_mask
008164a8 g     O .bss	00000004 BPB_FSVer
00810bcc g     F .text	0000009c alt_ic_irq_enable
00806e54 g     F .text	00000024 __vfprintf_internal
0081652b g     O .bss	0000000b BS_VOLLab_16
0080388c g     F .text	00000080 __subdf3
00800790 g     F .text	00000010 I2C_Write_CMD
0080a6c0 g     F .text	000000c4 __lo0bits
008146ec g     O .rwdata	00000008 alt_alarm_list
00810a84 g     F .text	00000064 _do_ctors
00800e0c g     F .text	00000024 Ncr
00801a10 g     F .text	000000e0 build_cluster_chain
0080dce0 g     F .text	00000100 close
0080e2e8 g     F .text	00000080 alt_load
00803f70 g     F .text	00000314 __pack_d
008164ac g     O .bss	00000004 MBR_BS_Location
00000000  w      *UND*	00000000 free
00808bf0 g     F .text	00000004 __sinit_lock_acquire
0080b348 g     F .text	0000012c __multadd
0080a628 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d94e04 	addi	r3,r3,25912
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d94e04 	addi	r3,r3,25912
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6b19b14 	ori	gp,gp,50796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	1098f014 	ori	r2,r2,25536

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18d9f214 	ori	r3,r3,26568

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080e2e80 	call	80e2e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080e5280 	call	80e528 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <LCD_Line2>:
  }
}
//-------------------------------------------------------------------------
void LCD_Line2()
{
  lcd_write_cmd(LCD_DISPLAY_BASE,0xC0);
  8001f0:	00c03004 	movi	r3,192
  8001f4:	00804034 	movhi	r2,256
  8001f8:	10841004 	addi	r2,r2,4160
  8001fc:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
  800200:	0101f404 	movi	r4,2000
  800204:	080e88c1 	jmpi	80e88c <usleep>

00800208 <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
  800208:	defffd04 	addi	sp,sp,-12
  80020c:	dc800115 	stw	r18,4(sp)
  lcd_write_cmd(LCD_DISPLAY_BASE,0x38);
  800210:	00800e04 	movi	r2,56
  800214:	04804034 	movhi	r18,256
  800218:	94841004 	addi	r18,r18,4160
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
  80021c:	dfc00215 	stw	ra,8(sp)
  800220:	dc400015 	stw	r17,0(sp)
  lcd_write_cmd(LCD_DISPLAY_BASE,0x38);
  800224:	90800035 	stwio	r2,0(r18)
  usleep(2000);
  800228:	0441f404 	movi	r17,2000
  80022c:	8809883a 	mov	r4,r17
  800230:	080e88c0 	call	80e88c <usleep>
  lcd_write_cmd(LCD_DISPLAY_BASE,0x0C);
  800234:	00c00304 	movi	r3,12
  800238:	90c00035 	stwio	r3,0(r18)
  usleep(2000);
  80023c:	8809883a 	mov	r4,r17
  800240:	080e88c0 	call	80e88c <usleep>
  lcd_write_cmd(LCD_DISPLAY_BASE,0x01);
  800244:	00c00044 	movi	r3,1
  800248:	90c00035 	stwio	r3,0(r18)
  usleep(2000);
  80024c:	8809883a 	mov	r4,r17
  800250:	080e88c0 	call	80e88c <usleep>
  lcd_write_cmd(LCD_DISPLAY_BASE,0x06);
  800254:	00c00184 	movi	r3,6
  800258:	90c00035 	stwio	r3,0(r18)
  usleep(2000);
  80025c:	8809883a 	mov	r4,r17
  800260:	080e88c0 	call	80e88c <usleep>
  lcd_write_cmd(LCD_DISPLAY_BASE,0x80);
  800264:	00c02004 	movi	r3,128
  800268:	90c00035 	stwio	r3,0(r18)
  usleep(2000);
  80026c:	8809883a 	mov	r4,r17
}
  800270:	dfc00217 	ldw	ra,8(sp)
  800274:	dc800117 	ldw	r18,4(sp)
  800278:	dc400017 	ldw	r17,0(sp)
  80027c:	dec00304 	addi	sp,sp,12
  lcd_write_cmd(LCD_DISPLAY_BASE,0x01);
  usleep(2000);
  lcd_write_cmd(LCD_DISPLAY_BASE,0x06);
  usleep(2000);
  lcd_write_cmd(LCD_DISPLAY_BASE,0x80);
  usleep(2000);
  800280:	080e88c1 	jmpi	80e88c <usleep>

00800284 <LCD_Show_Text>:
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  800284:	defffc04 	addi	sp,sp,-16
  800288:	dc800215 	stw	r18,8(sp)
  80028c:	dc400115 	stw	r17,4(sp)
  800290:	dc000015 	stw	r16,0(sp)
  800294:	2023883a 	mov	r17,r4
  800298:	0021883a 	mov	r16,zero
  80029c:	04804034 	movhi	r18,256
  8002a0:	94841204 	addi	r18,r18,4168
  8002a4:	dfc00315 	stw	ra,12(sp)
  8002a8:	00000506 	br	8002c0 <LCD_Show_Text+0x3c>
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8002ac:	18800007 	ldb	r2,0(r3)
  8002b0:	90800035 	stwio	r2,0(r18)
    usleep(2000);
  8002b4:	0101f404 	movi	r4,2000
  8002b8:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8002bc:	84000044 	addi	r16,r16,1
  8002c0:	8809883a 	mov	r4,r17
  8002c4:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8002c8:	8c07883a 	add	r3,r17,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8002cc:	80bff736 	bltu	r16,r2,8002ac <LCD_Show_Text+0x28>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
    usleep(2000);
  }
}
  8002d0:	dfc00317 	ldw	ra,12(sp)
  8002d4:	dc800217 	ldw	r18,8(sp)
  8002d8:	dc400117 	ldw	r17,4(sp)
  8002dc:	dc000017 	ldw	r16,0(sp)
  8002e0:	dec00404 	addi	sp,sp,16
  8002e4:	f800283a 	ret

008002e8 <LCD_Test>:
  usleep(2000);
}
//-------------------------------------------------------------------------
void LCD_Test()
{
  char Text1[16] = "1234567890 ABCD!";
  8002e8:	00802074 	movhi	r2,129
  8002ec:	10866004 	addi	r2,r2,6528
  char Text2[16] = "dcba 0987654321!";
  8002f0:	00c02074 	movhi	r3,129
  8002f4:	18c66504 	addi	r3,r3,6548
  usleep(2000);
}
//-------------------------------------------------------------------------
void LCD_Test()
{
  char Text1[16] = "1234567890 ABCD!";
  8002f8:	12400317 	ldw	r9,12(r2)
  8002fc:	11000017 	ldw	r4,0(r2)
  800300:	11400117 	ldw	r5,4(r2)
  800304:	11800217 	ldw	r6,8(r2)
  char Text2[16] = "dcba 0987654321!";
  800308:	1a800317 	ldw	r10,12(r3)
  80030c:	19c00017 	ldw	r7,0(r3)
  800310:	18800117 	ldw	r2,4(r3)
  800314:	1a000217 	ldw	r8,8(r3)
  lcd_write_cmd(LCD_DISPLAY_BASE,0xC0);
  usleep(2000);
}
//-------------------------------------------------------------------------
void LCD_Test()
{
  800318:	defff404 	addi	sp,sp,-48
  80031c:	dc800a15 	stw	r18,40(sp)
  800320:	dc400915 	stw	r17,36(sp)
  800324:	dc000815 	stw	r16,32(sp)
  800328:	dfc00b15 	stw	ra,44(sp)
  char Text1[16] = "1234567890 ABCD!";
  80032c:	d9000415 	stw	r4,16(sp)
  800330:	d9400515 	stw	r5,20(sp)
  800334:	d9800615 	stw	r6,24(sp)
  800338:	da400715 	stw	r9,28(sp)
  char Text2[16] = "dcba 0987654321!";
  80033c:	d9c00015 	stw	r7,0(sp)
  800340:	d8800115 	stw	r2,4(sp)
  800344:	da000215 	stw	r8,8(sp)
  800348:	da800315 	stw	r10,12(sp)
  //  Initial LCD
  LCD_Init();
  80034c:	0021883a 	mov	r16,zero
  800350:	08002080 	call	800208 <LCD_Init>
  800354:	dc400404 	addi	r17,sp,16
  800358:	04804034 	movhi	r18,256
  80035c:	94841204 	addi	r18,r18,4168
  800360:	00000506 	br	800378 <LCD_Test+0x90>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800364:	18800007 	ldb	r2,0(r3)
  800368:	90800035 	stwio	r2,0(r18)
    usleep(2000);
  80036c:	0101f404 	movi	r4,2000
  800370:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  800374:	84000044 	addi	r16,r16,1
  800378:	8809883a 	mov	r4,r17
  80037c:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800380:	8c07883a 	add	r3,r17,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  800384:	80bff736 	bltu	r16,r2,800364 <LCD_Test+0x7c>
  }
}
//-------------------------------------------------------------------------
void LCD_Line2()
{
  lcd_write_cmd(LCD_DISPLAY_BASE,0xC0);
  800388:	00c03004 	movi	r3,192
  80038c:	00804034 	movhi	r2,256
  800390:	10841004 	addi	r2,r2,4160
  800394:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
  800398:	0101f404 	movi	r4,2000
  80039c:	080e88c0 	call	80e88c <usleep>
  8003a0:	0021883a 	mov	r16,zero
  8003a4:	04404034 	movhi	r17,256
  8003a8:	8c441204 	addi	r17,r17,4168
  8003ac:	00000506 	br	8003c4 <LCD_Test+0xdc>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8003b0:	18800007 	ldb	r2,0(r3)
  8003b4:	88800035 	stwio	r2,0(r17)
    usleep(2000);
  8003b8:	0101f404 	movi	r4,2000
  8003bc:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8003c0:	84000044 	addi	r16,r16,1
  8003c4:	d809883a 	mov	r4,sp
  8003c8:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8003cc:	dc07883a 	add	r3,sp,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8003d0:	80bff736 	bltu	r16,r2,8003b0 <LCD_Test+0xc8>
  LCD_Show_Text(Text1);
  //  Change Line2
  LCD_Line2();
  //  Show Text to LCD
  LCD_Show_Text(Text2);
}
  8003d4:	dfc00b17 	ldw	ra,44(sp)
  8003d8:	dc800a17 	ldw	r18,40(sp)
  8003dc:	dc400917 	ldw	r17,36(sp)
  8003e0:	dc000817 	ldw	r16,32(sp)
  8003e4:	dec00c04 	addi	sp,sp,48
  8003e8:	f800283a 	ret

008003ec <LCD_File_Buffering>:
  LCD_Show_Text(Text2);
}

//-------------------------------------------------------------------------
void LCD_File_Buffering(char* Text)
{
  8003ec:	defff504 	addi	sp,sp,-44
  8003f0:	dfc00a15 	stw	ra,40(sp)
  8003f4:	dc400815 	stw	r17,32(sp)
  8003f8:	dc800915 	stw	r18,36(sp)
  8003fc:	dc000715 	stw	r16,28(sp)
  char parsed_text[12];
  char Text2[16] = {"Buffering"};
  800400:	00802074 	movhi	r2,129
  800404:	10866a04 	addi	r2,r2,6568
  800408:	13c0020b 	ldhu	r15,8(r2)
  int i;
    
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text[i];
  80040c:	24000283 	ldbu	r16,10(r4)

//-------------------------------------------------------------------------
void LCD_File_Buffering(char* Text)
{
  char parsed_text[12];
  char Text2[16] = {"Buffering"};
  800410:	10c00017 	ldw	r3,0(r2)
  800414:	11400117 	ldw	r5,4(r2)
  int i;
    
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text[i];
  800418:	21800003 	ldbu	r6,0(r4)
  80041c:	20800043 	ldbu	r2,1(r4)
  800420:	21c00083 	ldbu	r7,2(r4)
  800424:	220000c3 	ldbu	r8,3(r4)
  800428:	22400103 	ldbu	r9,4(r4)
  80042c:	22800143 	ldbu	r10,5(r4)
  800430:	22c00183 	ldbu	r11,6(r4)
  800434:	230001c3 	ldbu	r12,7(r4)
  800438:	23400203 	ldbu	r13,8(r4)
  80043c:	23800243 	ldbu	r14,9(r4)

//-------------------------------------------------------------------------
void LCD_File_Buffering(char* Text)
{
  char parsed_text[12];
  char Text2[16] = {"Buffering"};
  800440:	d8c00315 	stw	r3,12(sp)
  800444:	d9400415 	stw	r5,16(sp)
  800448:	dbc0050d 	sth	r15,20(sp)
  int i;
    
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text[i];
  80044c:	d9800005 	stb	r6,0(sp)
  800450:	d8800045 	stb	r2,1(sp)
  800454:	d9c00085 	stb	r7,2(sp)
  800458:	da0000c5 	stb	r8,3(sp)
  80045c:	da400105 	stb	r9,4(sp)
  800460:	da800145 	stb	r10,5(sp)
  800464:	dac00185 	stb	r11,6(sp)
  800468:	db0001c5 	stb	r12,7(sp)
  80046c:	db400205 	stb	r13,8(sp)
  800470:	db800245 	stb	r14,9(sp)
  800474:	dc000285 	stb	r16,10(sp)

//-------------------------------------------------------------------------
void LCD_File_Buffering(char* Text)
{
  char parsed_text[12];
  char Text2[16] = {"Buffering"};
  800478:	d800058d 	sth	zero,22(sp)
  80047c:	d800060d 	sth	zero,24(sp)
    parsed_text[i] = Text[i];
  }
    
  parsed_text[11] = '\0';
  
  LCD_Init();
  800480:	0021883a 	mov	r16,zero

//-------------------------------------------------------------------------
void LCD_File_Buffering(char* Text)
{
  char parsed_text[12];
  char Text2[16] = {"Buffering"};
  800484:	d800068d 	sth	zero,26(sp)
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text[i];
  }
    
  parsed_text[11] = '\0';
  800488:	d80002c5 	stb	zero,11(sp)
  80048c:	04404034 	movhi	r17,256
  800490:	8c441204 	addi	r17,r17,4168
  
  LCD_Init();
  800494:	08002080 	call	800208 <LCD_Init>
  800498:	00000506 	br	8004b0 <LCD_File_Buffering+0xc4>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  80049c:	18800007 	ldb	r2,0(r3)
  8004a0:	88800035 	stwio	r2,0(r17)
    usleep(2000);
  8004a4:	0101f404 	movi	r4,2000
  8004a8:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8004ac:	84000044 	addi	r16,r16,1
  8004b0:	d809883a 	mov	r4,sp
  8004b4:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8004b8:	dc07883a 	add	r3,sp,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8004bc:	80bff736 	bltu	r16,r2,80049c <LCD_File_Buffering+0xb0>
  }
}
//-------------------------------------------------------------------------
void LCD_Line2()
{
  lcd_write_cmd(LCD_DISPLAY_BASE,0xC0);
  8004c0:	00c03004 	movi	r3,192
  8004c4:	00804034 	movhi	r2,256
  8004c8:	10841004 	addi	r2,r2,4160
  8004cc:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
  8004d0:	0101f404 	movi	r4,2000
  8004d4:	080e88c0 	call	80e88c <usleep>
  8004d8:	0021883a 	mov	r16,zero
  8004dc:	dc400304 	addi	r17,sp,12
  8004e0:	04804034 	movhi	r18,256
  8004e4:	94841204 	addi	r18,r18,4168
  8004e8:	00000506 	br	800500 <LCD_File_Buffering+0x114>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8004ec:	18800007 	ldb	r2,0(r3)
  8004f0:	90800035 	stwio	r2,0(r18)
    usleep(2000);
  8004f4:	0101f404 	movi	r4,2000
  8004f8:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  8004fc:	84000044 	addi	r16,r16,1
  800500:	8809883a 	mov	r4,r17
  800504:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800508:	8c07883a 	add	r3,r17,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  80050c:	80bff736 	bltu	r16,r2,8004ec <LCD_File_Buffering+0x100>
  
  LCD_Init();
  LCD_Show_Text(parsed_text);
  LCD_Line2();
  LCD_Show_Text(Text2);
}
  800510:	dfc00a17 	ldw	ra,40(sp)
  800514:	dc800917 	ldw	r18,36(sp)
  800518:	dc400817 	ldw	r17,32(sp)
  80051c:	dc000717 	ldw	r16,28(sp)
  800520:	dec00b04 	addi	sp,sp,44
  800524:	f800283a 	ret

00800528 <LCD_Display>:
  //  Show Text to LCD
  LCD_Show_Text(Text2);
}
//-------------------------------------------------------------------------
void LCD_Display(char* Text1, int play_speed)
{
  800528:	defff504 	addi	sp,sp,-44
  80052c:	dfc00a15 	stw	ra,40(sp)
  800530:	dc800915 	stw	r18,36(sp)
  800534:	dc400815 	stw	r17,32(sp)
  800538:	dc000715 	stw	r16,28(sp)
  char Text2[16] = {0};
  int i;
  
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text1[i];
  80053c:	23800283 	ldbu	r14,10(r4)
  800540:	20800003 	ldbu	r2,0(r4)
  800544:	20c00043 	ldbu	r3,1(r4)
  800548:	21800083 	ldbu	r6,2(r4)
  80054c:	21c000c3 	ldbu	r7,3(r4)
  800550:	22000103 	ldbu	r8,4(r4)
  800554:	22400143 	ldbu	r9,5(r4)
  800558:	22800183 	ldbu	r10,6(r4)
  80055c:	22c001c3 	ldbu	r11,7(r4)
  800560:	23000203 	ldbu	r12,8(r4)
  800564:	23400243 	ldbu	r13,9(r4)
  }
  
  parsed_text[11] = '\0';
  
  switch (play_speed)
  800568:	01000084 	movi	r4,2
  char Text2[16] = {0};
  int i;
  
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text1[i];
  80056c:	d8800005 	stb	r2,0(sp)
  800570:	d8c00045 	stb	r3,1(sp)
  800574:	d9800085 	stb	r6,2(sp)
  800578:	d9c000c5 	stb	r7,3(sp)
  80057c:	da000105 	stb	r8,4(sp)
  800580:	da400145 	stb	r9,5(sp)
  800584:	da800185 	stb	r10,6(sp)
  800588:	dac001c5 	stb	r11,7(sp)
  80058c:	db000205 	stb	r12,8(sp)
  800590:	db400245 	stb	r13,9(sp)
  800594:	db800285 	stb	r14,10(sp)
}
//-------------------------------------------------------------------------
void LCD_Display(char* Text1, int play_speed)
{
  char parsed_text[12];
  char Text2[16] = {0};
  800598:	d8000315 	stw	zero,12(sp)
  80059c:	d8000415 	stw	zero,16(sp)
  8005a0:	d8000515 	stw	zero,20(sp)
  8005a4:	d8000615 	stw	zero,24(sp)
  for(i=0;i<11;i++)
  {
    parsed_text[i] = Text1[i];
  }
  
  parsed_text[11] = '\0';
  8005a8:	d80002c5 	stb	zero,11(sp)
  
  switch (play_speed)
  8005ac:	29004126 	beq	r5,r4,8006b4 <LCD_Display+0x18c>
  8005b0:	21403416 	blt	r4,r5,800684 <LCD_Display+0x15c>
  8005b4:	00800044 	movi	r2,1
  8005b8:	28805026 	beq	r5,r2,8006fc <LCD_Display+0x1d4>
    break;
    case 4:
    strcpy(Text2,"Reverse");
    break;
    default:
    strcpy(Text2,"Normal Speed");
  8005bc:	009b5cb4 	movhi	r2,28018
  8005c0:	109bd384 	addi	r2,r2,28494
  8005c4:	d8800315 	stw	r2,12(sp)
  8005c8:	00d4c834 	movhi	r3,21280
  8005cc:	18db1844 	addi	r3,r3,27745
  8005d0:	00991974 	movhi	r2,25701
  8005d4:	10995c04 	addi	r2,r2,25968
  8005d8:	d8c00415 	stw	r3,16(sp)
  8005dc:	d8800515 	stw	r2,20(sp)
  8005e0:	d8000605 	stb	zero,24(sp)
  8005e4:	dc800304 	addi	r18,sp,12
    break;
  }
  
  LCD_Init();
  8005e8:	08002080 	call	800208 <LCD_Init>
  8005ec:	0021883a 	mov	r16,zero
  8005f0:	04404034 	movhi	r17,256
  8005f4:	8c441204 	addi	r17,r17,4168
  8005f8:	00000506 	br	800610 <LCD_Display+0xe8>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  8005fc:	18800007 	ldb	r2,0(r3)
  800600:	88800035 	stwio	r2,0(r17)
    usleep(2000);
  800604:	0101f404 	movi	r4,2000
  800608:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  80060c:	84000044 	addi	r16,r16,1
  800610:	d809883a 	mov	r4,sp
  800614:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800618:	dc07883a 	add	r3,sp,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  80061c:	80bff736 	bltu	r16,r2,8005fc <LCD_Display+0xd4>
  }
}
//-------------------------------------------------------------------------
void LCD_Line2()
{
  lcd_write_cmd(LCD_DISPLAY_BASE,0xC0);
  800620:	00c03004 	movi	r3,192
  800624:	00804034 	movhi	r2,256
  800628:	10841004 	addi	r2,r2,4160
  80062c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
  800630:	0101f404 	movi	r4,2000
  800634:	080e88c0 	call	80e88c <usleep>
  800638:	0021883a 	mov	r16,zero
  80063c:	04404034 	movhi	r17,256
  800640:	8c441204 	addi	r17,r17,4168
  800644:	00000506 	br	80065c <LCD_Display+0x134>
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800648:	18800007 	ldb	r2,0(r3)
  80064c:	88800035 	stwio	r2,0(r17)
    usleep(2000);
  800650:	0101f404 	movi	r4,2000
  800654:	080e88c0 	call	80e88c <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  800658:	84000044 	addi	r16,r16,1
  80065c:	9009883a 	mov	r4,r18
  800660:	0804ebc0 	call	804ebc <strlen>
  {
    lcd_write_data(LCD_DISPLAY_BASE,Text[i]);
  800664:	9407883a 	add	r3,r18,r16
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
  800668:	80bff736 	bltu	r16,r2,800648 <LCD_Display+0x120>
  
  LCD_Init();
  LCD_Show_Text(parsed_text);
  LCD_Line2();
  LCD_Show_Text(Text2);
}
  80066c:	dfc00a17 	ldw	ra,40(sp)
  800670:	dc800917 	ldw	r18,36(sp)
  800674:	dc400817 	ldw	r17,32(sp)
  800678:	dc000717 	ldw	r16,28(sp)
  80067c:	dec00b04 	addi	sp,sp,44
  800680:	f800283a 	ret
    parsed_text[i] = Text1[i];
  }
  
  parsed_text[11] = '\0';
  
  switch (play_speed)
  800684:	008000c4 	movi	r2,3
  800688:	28801526 	beq	r5,r2,8006e0 <LCD_Display+0x1b8>
  80068c:	00800104 	movi	r2,4
  800690:	28bfca1e 	bne	r5,r2,8005bc <LCD_Display+0x94>
    break;
    case 3:
    strcpy(Text2,"Delay");
    break;
    case 4:
    strcpy(Text2,"Reverse");
  800694:	00995db4 	movhi	r2,25974
  800698:	10995484 	addi	r2,r2,25938
  80069c:	00c01974 	movhi	r3,101
  8006a0:	18dcdc84 	addi	r3,r3,29554
  8006a4:	dc800304 	addi	r18,sp,12
  8006a8:	d8800315 	stw	r2,12(sp)
  8006ac:	d8c00415 	stw	r3,16(sp)
  8006b0:	003fcd06 	br	8005e8 <LCD_Display+0xc0>
  {
    case 1:
    strcpy(Text2,"Double Speed");
    break;
    case 2:
    strcpy(Text2,"Half Speed");
  8006b4:	00999b34 	movhi	r2,26220
  8006b8:	10985204 	addi	r2,r2,24904
  8006bc:	d8800315 	stw	r2,12(sp)
  8006c0:	00d95c34 	movhi	r3,25968
  8006c4:	18d4c804 	addi	r3,r3,21280
  8006c8:	00991944 	movi	r2,25701
  8006cc:	dc800304 	addi	r18,sp,12
  8006d0:	d8c00415 	stw	r3,16(sp)
  8006d4:	d880050d 	sth	r2,20(sp)
  8006d8:	d8000585 	stb	zero,22(sp)
  8006dc:	003fc206 	br	8005e8 <LCD_Display+0xc0>
    break;
    case 3:
    strcpy(Text2,"Delay");
  8006e0:	00985b34 	movhi	r2,24940
  8006e4:	10995104 	addi	r2,r2,25924
  8006e8:	00c01e44 	movi	r3,121
  8006ec:	dc800304 	addi	r18,sp,12
  8006f0:	d8800315 	stw	r2,12(sp)
  8006f4:	d8c0040d 	sth	r3,16(sp)
  8006f8:	003fbb06 	br	8005e8 <LCD_Display+0xc0>
  parsed_text[11] = '\0';
  
  switch (play_speed)
  {
    case 1:
    strcpy(Text2,"Double Speed");
  8006fc:	00989d74 	movhi	r2,25205
  800700:	109bd104 	addi	r2,r2,28484
  800704:	d8800315 	stw	r2,12(sp)
  800708:	00d4c834 	movhi	r3,21280
  80070c:	18d95b04 	addi	r3,r3,25964
  800710:	00991974 	movhi	r2,25701
  800714:	10995c04 	addi	r2,r2,25968
  800718:	dc800304 	addi	r18,sp,12
  80071c:	d8c00415 	stw	r3,16(sp)
  800720:	d8800515 	stw	r2,20(sp)
  800724:	d8000605 	stb	zero,24(sp)
  800728:	003faf06 	br	8005e8 <LCD_Display+0xc0>

0080072c <I2C_Read_CMD>:
  IOWR(OPEN_I2C_0_BASE,I2C_CR,value);
}
//-------------------------------------------------------------------------
unsigned char I2C_Read_CMD()
{
  return  IORD(OPEN_I2C_0_BASE, I2C_CR);
  80072c:	00c00c04 	movi	r3,48
  800730:	18800037 	ldwio	r2,0(r3)
}
  800734:	10803fcc 	andi	r2,r2,255
  800738:	f800283a 	ret

0080073c <I2C_Read_Status>:
  return  IORD(OPEN_I2C_0_BASE,I2C_RXR);
}
//-------------------------------------------------------------------------
unsigned char I2C_Read_Status()
{
  return  IORD(OPEN_I2C_0_BASE,I2C_SR);
  80073c:	00c00c04 	movi	r3,48
  800740:	18800037 	ldwio	r2,0(r3)
}
  800744:	10803fcc 	andi	r2,r2,255
  800748:	f800283a 	ret

0080074c <I2C_Read_RX>:
  return  IORD(OPEN_I2C_0_BASE,I2C_CTR);
}
//-------------------------------------------------------------------------
unsigned char I2C_Read_RX()
{
  return  IORD(OPEN_I2C_0_BASE,I2C_RXR);
  80074c:	00c00b04 	movi	r3,44
  800750:	18800037 	ldwio	r2,0(r3)
}
  800754:	10803fcc 	andi	r2,r2,255
  800758:	f800283a 	ret

0080075c <I2C_Read_Ctrl>:
  return (high<<16)+low;
}
//-------------------------------------------------------------------------
unsigned char I2C_Read_Ctrl()
{
  return  IORD(OPEN_I2C_0_BASE,I2C_CTR);
  80075c:	00c00a04 	movi	r3,40
  800760:	18800037 	ldwio	r2,0(r3)
}
  800764:	10803fcc 	andi	r2,r2,255
  800768:	f800283a 	ret

0080076c <I2C_Read_Period>:
#include "Open_I2C.h"
//-------------------------------------------------------------------------
unsigned int I2C_Read_Period()
{
  unsigned char low,high;
  low = IORD(OPEN_I2C_0_BASE,I2C_PRER_LO);
  80076c:	00800804 	movi	r2,32
  800770:	11000037 	ldwio	r4,0(r2)
  high= IORD(OPEN_I2C_0_BASE,I2C_PRER_HI);
  800774:	00c00904 	movi	r3,36
  800778:	18800037 	ldwio	r2,0(r3)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1004943a 	slli	r2,r2,16
  800784:	21003fcc 	andi	r4,r4,255
  return (high<<16)+low;
}
  800788:	1105883a 	add	r2,r2,r4
  80078c:	f800283a 	ret

00800790 <I2C_Write_CMD>:
  IOWR(OPEN_I2C_0_BASE,I2C_TXR,value);
}
//-------------------------------------------------------------------------
void  I2C_Write_CMD(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_CR,value);
  800790:	21003fcc 	andi	r4,r4,255
  800794:	00800c04 	movi	r2,48
  800798:	11000035 	stwio	r4,0(r2)
}
  80079c:	f800283a 	ret

008007a0 <I2C_Write_TX>:
  IOWR(OPEN_I2C_0_BASE,I2C_CTR,value);
}
//-------------------------------------------------------------------------
void  I2C_Write_TX(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_TXR,value);
  8007a0:	21003fcc 	andi	r4,r4,255
  8007a4:	00800b04 	movi	r2,44
  8007a8:	11000035 	stwio	r4,0(r2)
}
  8007ac:	f800283a 	ret

008007b0 <I2C_Write_Ctrl>:
  IOWR(OPEN_I2C_0_BASE,I2C_PRER_HI,Period>>16);
}
//-------------------------------------------------------------------------
void  I2C_Write_Ctrl(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_CTR,value);
  8007b0:	21003fcc 	andi	r4,r4,255
  8007b4:	00800a04 	movi	r2,40
  8007b8:	11000035 	stwio	r4,0(r2)
}
  8007bc:	f800283a 	ret

008007c0 <I2C_Write_Period>:
  return  IORD(OPEN_I2C_0_BASE,I2C_SR);
}
//-------------------------------------------------------------------------
void I2C_Write_Period(unsigned int Period)
{
  IOWR(OPEN_I2C_0_BASE,I2C_PRER_LO,Period&0xFF);
  8007c0:	20c03fcc 	andi	r3,r4,255
  8007c4:	00800804 	movi	r2,32
  8007c8:	10c00035 	stwio	r3,0(r2)
  IOWR(OPEN_I2C_0_BASE,I2C_PRER_HI,Period>>16);
  8007cc:	2008d43a 	srli	r4,r4,16
  8007d0:	00800904 	movi	r2,36
  8007d4:	11000035 	stwio	r4,0(r2)
}
  8007d8:	f800283a 	ret

008007dc <I2C_Send>:
  IOWR(OPEN_I2C_0_BASE,I2C_CTR,value);
}
//-------------------------------------------------------------------------
void  I2C_Write_TX(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_TXR,value);
  8007dc:	21003fcc 	andi	r4,r4,255
  8007e0:	00800b04 	movi	r2,44
  8007e4:	11000035 	stwio	r4,0(r2)
  I2C_Status_Reg  I2C_Status;
  //IOWR(LEDR_PIO_BASE, 0, 7); //THREE LEDS
  I2C_Write_TX(value);
  //IOWR(LEDR_PIO_BASE, 0, 15); //FOUR LEDS
  I2C_CMD.Value=0;
  if(STA!=0)
  8007e8:	29403fcc 	andi	r5,r5,255
  I2C_CMD_Reg     I2C_CMD;
  I2C_Status_Reg  I2C_Status;
  //IOWR(LEDR_PIO_BASE, 0, 7); //THREE LEDS
  I2C_Write_TX(value);
  //IOWR(LEDR_PIO_BASE, 0, 15); //FOUR LEDS
  I2C_CMD.Value=0;
  8007ec:	0007883a 	mov	r3,zero
  if(STA!=0)
  8007f0:	28000126 	beq	r5,zero,8007f8 <I2C_Send+0x1c>
    I2C_CMD.I2C_CMD_Flags.STA=1;
  8007f4:	00ffe004 	movi	r3,-128
  if(STO!=0)
  8007f8:	30803fcc 	andi	r2,r6,255
  8007fc:	10000126 	beq	r2,zero,800804 <I2C_Send+0x28>
    I2C_CMD.I2C_CMD_Flags.STO=1;
  800800:	18c01014 	ori	r3,r3,64
  I2C_CMD.I2C_CMD_Flags.WR=1;
  800804:	18c00414 	ori	r3,r3,16
  IOWR(OPEN_I2C_0_BASE,I2C_TXR,value);
}
//-------------------------------------------------------------------------
void  I2C_Write_CMD(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_CR,value);
  800808:	18c03fcc 	andi	r3,r3,255
  80080c:	00800c04 	movi	r2,48
  800810:	10c00035 	stwio	r3,0(r2)
  800814:	1009883a 	mov	r4,r2
  return  IORD(OPEN_I2C_0_BASE,I2C_RXR);
}
//-------------------------------------------------------------------------
unsigned char I2C_Read_Status()
{
  return  IORD(OPEN_I2C_0_BASE,I2C_SR);
  800818:	20800037 	ldwio	r2,0(r4)
  //I2C_Status.Value=I2C_Read_Status();
  //printf("sr = %d\n", I2C_Status.Value);
  
  do
  {
    I2C_Status.Value=I2C_Read_Status();
  80081c:	10803fcc 	andi	r2,r2,255
  }
  while(I2C_Status.I2C_Status_Flags.TIP);
  800820:	10c0008c 	andi	r3,r2,2
  800824:	183ffc1e 	bne	r3,zero,800818 <I2C_Send+0x3c>
  800828:	0084303a 	nor	r2,zero,r2
  80082c:	10803fcc 	andi	r2,r2,255
  if(!I2C_Status.I2C_Status_Flags.RXACK)
  ACK=1;
  else
  ACK=0;
  return ACK;
}
  800830:	1004d1fa 	srli	r2,r2,7
  800834:	f800283a 	ret

00800838 <I2C_Init>:
  return  IORD(OPEN_I2C_0_BASE,I2C_SR);
}
//-------------------------------------------------------------------------
void I2C_Write_Period(unsigned int Period)
{
  IOWR(OPEN_I2C_0_BASE,I2C_PRER_LO,Period&0xFF);
  800838:	20c03fcc 	andi	r3,r4,255
  80083c:	00800804 	movi	r2,32
  800840:	10c00035 	stwio	r3,0(r2)
  IOWR(OPEN_I2C_0_BASE,I2C_PRER_HI,Period>>16);
  800844:	2008d43a 	srli	r4,r4,16
  800848:	00800904 	movi	r2,36
  80084c:	11000035 	stwio	r4,0(r2)
}
//-------------------------------------------------------------------------
void  I2C_Write_Ctrl(unsigned char value)
{
  IOWR(OPEN_I2C_0_BASE,I2C_CTR,value);
  800850:	00c03004 	movi	r3,192
  800854:	00800a04 	movi	r2,40
  800858:	10c00035 	stwio	r3,0(r2)
  I2C_Write_Period(Period);
  a.I2C_Ctrl_Flags.CORE_ENABLE=1;
  a.I2C_Ctrl_Flags.INT_ENABLE=1;
  a.I2C_Ctrl_Flags.RESERVED=0;
  I2C_Write_Ctrl(a.Value);
}
  80085c:	f800283a 	ret

00800860 <FirstSectorofCluster>:
  printf("\nFirstRootDirSecNum: 0x%04X (%d)10",FirstRootDirSecNum,FirstRootDirSecNum);
}  
//-------------------------------------------------------------------------
// Calculates the First Sector of Cluster number 'N'
UINT32 FirstSectorofCluster(UINT32 N)
{
  800860:	d1676143 	ldbu	r5,-25211(gp)
  800864:	deffff04 	addi	sp,sp,-4
  800868:	213fff84 	addi	r4,r4,-2
  80086c:	dfc00015 	stw	ra,0(sp)
  800870:	0803eb80 	call	803eb8 <__mulsi3>
  800874:	d0e76d17 	ldw	r3,-25164(gp)
  800878:	d1279017 	ldw	r4,-25024(gp)
  80087c:	1907883a 	add	r3,r3,r4
  return(((N-2) * BPB_SecPerClus) + FirstDataSector + MBR_BS_Location);
}
  800880:	10c5883a 	add	r2,r2,r3
  800884:	dfc00017 	ldw	ra,0(sp)
  800888:	dec00104 	addi	sp,sp,4
  80088c:	f800283a 	ret

00800890 <isEOF>:
// Returns 0 if there are more clusters
BYTE  isEOF(UINT32  FATContent)
{
  BYTE IsEOF = 0;
  
  if(CountofClusters < 4085)
  800890:	d1678617 	ldw	r5,-25064(gp)
  800894:	0083fdc4 	movi	r2,4087
  800898:	00c3fd04 	movi	r3,4084
  80089c:	1105803a 	cmpltu	r2,r2,r4
  8008a0:	1940082e 	bgeu	r3,r5,8008c4 <isEOF+0x34>
  {
    //FAT12
    if(FATContent >= 0x0FF8)
    IsEOF = 1;
  }
  else if(CountofClusters < 65525)
  8008a4:	00c40034 	movhi	r3,4096
  8008a8:	18fffdc4 	addi	r3,r3,-9
  8008ac:	00bffdd4 	movui	r2,65527
  8008b0:	1105803a 	cmpltu	r2,r2,r4
  8008b4:	1909803a 	cmpltu	r4,r3,r4
  8008b8:	00fffd14 	movui	r3,65524
  8008bc:	1940012e 	bgeu	r3,r5,8008c4 <isEOF+0x34>
  8008c0:	2005883a 	mov	r2,r4
  8008c4:	10803fcc 	andi	r2,r2,255
    //FAT32
    if(FATContent >= 0x0FFFFFF8)
    IsEOF = 1;
  }
  return IsEOF;
}
  8008c8:	f800283a 	ret

008008cc <get_play_mode>:
		}
	}
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
}

int get_play_mode(data_file df) {
  8008cc:	defff804 	addi	sp,sp,-32
  8008d0:	dfc00315 	stw	ra,12(sp)
  8008d4:	dc800215 	stw	r18,8(sp)
  8008d8:	dc400115 	stw	r17,4(sp)
  8008dc:	dc000015 	stw	r16,0(sp)
  8008e0:	d9000415 	stw	r4,16(sp)
  8008e4:	d9400515 	stw	r5,20(sp)
  8008e8:	d9800615 	stw	r6,24(sp)
  8008ec:	d9c00715 	stw	r7,28(sp)
	int switches = IORD(SWITCH_PIO_BASE, 0);
  8008f0:	00804034 	movhi	r2,256
  8008f4:	10843004 	addi	r2,r2,4288
  8008f8:	10c00037 	ldwio	r3,0(r2)

	if (switches == 1) {
  8008fc:	04400044 	movi	r17,1
		data_rate = DOUBLE_SPEED;
  800900:	00800104 	movi	r2,4
		data_rate_incr = DOUBLE_SPEED;
		LCD_Display(df.Name, 1);
  800904:	d9000404 	addi	r4,sp,16
  800908:	880b883a 	mov	r5,r17
		return 1;
	} else if (switches == 2) {
  80090c:	04000084 	movi	r16,2
}

int get_play_mode(data_file df) {
	int switches = IORD(SWITCH_PIO_BASE, 0);

	if (switches == 1) {
  800910:	1c401c26 	beq	r3,r17,800984 <get_play_mode+0xb8>
		return 1;
	} else if (switches == 2) {
		data_rate = HALF_SPEED;
		// set data rate increment to normal speed, the half speed is accounted for elsewhere
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 2);
  800914:	d9000404 	addi	r4,sp,16
  800918:	800b883a 	mov	r5,r16
		return 2;
	} else if (switches == 4) {
  80091c:	04800104 	movi	r18,4
	if (switches == 1) {
		data_rate = DOUBLE_SPEED;
		data_rate_incr = DOUBLE_SPEED;
		LCD_Display(df.Name, 1);
		return 1;
	} else if (switches == 2) {
  800920:	1c000a1e 	bne	r3,r16,80094c <get_play_mode+0x80>
		data_rate = HALF_SPEED;
  800924:	d0200f15 	stw	zero,-32708(gp)
		// set data rate increment to normal speed, the half speed is accounted for elsewhere
		data_rate_incr = NORMAL_SPEED;
  800928:	d4201015 	stw	r16,-32704(gp)
		LCD_Display(df.Name, 2);
  80092c:	08005280 	call	800528 <LCD_Display>
  800930:	8005883a 	mov	r2,r16
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 5);
		return 5;
	}

}
  800934:	dfc00317 	ldw	ra,12(sp)
  800938:	dc800217 	ldw	r18,8(sp)
  80093c:	dc400117 	ldw	r17,4(sp)
  800940:	dc000017 	ldw	r16,0(sp)
  800944:	dec00804 	addi	sp,sp,32
  800948:	f800283a 	ret
		return 2;
	} else if (switches == 4) {
		dly_channel = 1;
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 3);
  80094c:	d9000404 	addi	r4,sp,16
  800950:	014000c4 	movi	r5,3
		data_rate = HALF_SPEED;
		// set data rate increment to normal speed, the half speed is accounted for elsewhere
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 2);
		return 2;
	} else if (switches == 4) {
  800954:	1c80151e 	bne	r3,r18,8009ac <get_play_mode+0xe0>
		dly_channel = 1;
  800958:	d4675c15 	stw	r17,-25232(gp)
		data_rate = NORMAL_SPEED;
  80095c:	d4200f15 	stw	r16,-32708(gp)
		data_rate_incr = NORMAL_SPEED;
  800960:	d4201015 	stw	r16,-32704(gp)
		LCD_Display(df.Name, 3);
  800964:	08005280 	call	800528 <LCD_Display>
  800968:	008000c4 	movi	r2,3
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 5);
		return 5;
	}

}
  80096c:	dfc00317 	ldw	ra,12(sp)
  800970:	dc800217 	ldw	r18,8(sp)
  800974:	dc400117 	ldw	r17,4(sp)
  800978:	dc000017 	ldw	r16,0(sp)
  80097c:	dec00804 	addi	sp,sp,32
  800980:	f800283a 	ret

int get_play_mode(data_file df) {
	int switches = IORD(SWITCH_PIO_BASE, 0);

	if (switches == 1) {
		data_rate = DOUBLE_SPEED;
  800984:	d0a00f15 	stw	r2,-32708(gp)
		data_rate_incr = DOUBLE_SPEED;
  800988:	d0a01015 	stw	r2,-32704(gp)
		LCD_Display(df.Name, 1);
  80098c:	08005280 	call	800528 <LCD_Display>
  800990:	8805883a 	mov	r2,r17
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 5);
		return 5;
	}

}
  800994:	dfc00317 	ldw	ra,12(sp)
  800998:	dc800217 	ldw	r18,8(sp)
  80099c:	dc400117 	ldw	r17,4(sp)
  8009a0:	dc000017 	ldw	r16,0(sp)
  8009a4:	dec00804 	addi	sp,sp,32
  8009a8:	f800283a 	ret
		dly_channel = 1;
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 3);
		return 3;
	} else if (switches == 8) {
  8009ac:	00800204 	movi	r2,8
		LCD_Display(df.Name, 4);
		return 4;
	} else {
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 5);
  8009b0:	d9000404 	addi	r4,sp,16
  8009b4:	01400144 	movi	r5,5
		dly_channel = 1;
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 3);
		return 3;
	} else if (switches == 8) {
  8009b8:	18800526 	beq	r3,r2,8009d0 <get_play_mode+0x104>
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 4);
		return 4;
	} else {
		data_rate = NORMAL_SPEED;
  8009bc:	d4200f15 	stw	r16,-32708(gp)
		data_rate_incr = NORMAL_SPEED;
  8009c0:	d4201015 	stw	r16,-32704(gp)
		LCD_Display(df.Name, 5);
  8009c4:	08005280 	call	800528 <LCD_Display>
  8009c8:	00800144 	movi	r2,5
  8009cc:	003fd906 	br	800934 <get_play_mode+0x68>
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 3);
		return 3;
	} else if (switches == 8) {
		reverse = 1;
		sect_num = df.FileSize/BPB_BytsPerSec - 1;
  8009d0:	d9000817 	ldw	r4,32(sp)
  8009d4:	d1677317 	ldw	r5,-25140(gp)
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 3);
		return 3;
	} else if (switches == 8) {
		reverse = 1;
  8009d8:	d4675b15 	stw	r17,-25236(gp)
		sect_num = df.FileSize/BPB_BytsPerSec - 1;
  8009dc:	0803ea80 	call	803ea8 <__udivsi3>
  8009e0:	10bfffc4 	addi	r2,r2,-1
  8009e4:	d0a75a15 	stw	r2,-25240(gp)
		data_rate = NORMAL_SPEED;
  8009e8:	d4200f15 	stw	r16,-32708(gp)
		data_rate_incr = NORMAL_SPEED;
		LCD_Display(df.Name, 4);
  8009ec:	d9000404 	addi	r4,sp,16
  8009f0:	900b883a 	mov	r5,r18
		return 3;
	} else if (switches == 8) {
		reverse = 1;
		sect_num = df.FileSize/BPB_BytsPerSec - 1;
		data_rate = NORMAL_SPEED;
		data_rate_incr = NORMAL_SPEED;
  8009f4:	d4201015 	stw	r16,-32704(gp)
		LCD_Display(df.Name, 4);
  8009f8:	08005280 	call	800528 <LCD_Display>
  8009fc:	9005883a 	mov	r2,r18
  800a00:	003fcc06 	br	800934 <get_play_mode+0x68>

00800a04 <button_ISR>:
volatile int dly_channel = 0;

static void button_ISR(void* context, alt_u32 id)
{
	int buttons = 0;
	buttons = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE) & 0xf;
  800a04:	00804034 	movhi	r2,256
  800a08:	10841f04 	addi	r2,r2,4220
  800a0c:	11000037 	ldwio	r4,0(r2)

	if (buttons & 0x01) {
  800a10:	20c0004c 	andi	r3,r4,1
  800a14:	1807003a 	cmpeq	r3,r3,zero
volatile int dly_channel = 0;

static void button_ISR(void* context, alt_u32 id)
{
	int buttons = 0;
	buttons = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE) & 0xf;
  800a18:	210003cc 	andi	r4,r4,15

	if (buttons & 0x01) {
  800a1c:	1800031e 	bne	r3,zero,800a2c <button_ISR+0x28>
		if (!pressed) {
  800a20:	d0a75917 	ldw	r2,-25244(gp)
  800a24:	10001926 	beq	r2,zero,800a8c <button_ISR+0x88>
			PLAY = 0;
			pressed = 1;
		} else {
			pressed = 0;
  800a28:	d0275915 	stw	zero,-25244(gp)
		}
	}
	if (PLAY == 0) {
  800a2c:	d0a75717 	ldw	r2,-25252(gp)
  800a30:	10000b1e 	bne	r2,zero,800a60 <button_ISR+0x5c>
		if (buttons & 0x02){
  800a34:	2080008c 	andi	r2,r4,2
  800a38:	10000d1e 	bne	r2,zero,800a70 <button_ISR+0x6c>
				PLAY = 1;
				pressed = 1;
			} else {
				pressed = 0;
			}
		} else if (buttons & 0x04) {
  800a3c:	2080010c 	andi	r2,r4,4
  800a40:	1000161e 	bne	r2,zero,800a9c <button_ISR+0x98>
				next_track = 1;
				pressed = 1;
			} else {
				pressed = 0;
			}
		} else if (buttons & 0x08) {
  800a44:	2080020c 	andi	r2,r4,8
  800a48:	10000526 	beq	r2,zero,800a60 <button_ISR+0x5c>
			if (!pressed) {
  800a4c:	d0a75917 	ldw	r2,-25244(gp)
  800a50:	1000091e 	bne	r2,zero,800a78 <button_ISR+0x74>
				prev_track = 1;
  800a54:	00800044 	movi	r2,1
  800a58:	d0a75815 	stw	r2,-25248(gp)
				pressed = 1;
  800a5c:	d0a75915 	stw	r2,-25244(gp)
			} else {
				pressed = 0;
			}
		}
	}
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
  800a60:	00804034 	movhi	r2,256
  800a64:	10841f04 	addi	r2,r2,4220
  800a68:	10000035 	stwio	zero,0(r2)
}
  800a6c:	f800283a 	ret
			pressed = 0;
		}
	}
	if (PLAY == 0) {
		if (buttons & 0x02){
			if (!pressed) {
  800a70:	d0a75917 	ldw	r2,-25244(gp)
  800a74:	10000f26 	beq	r2,zero,800ab4 <button_ISR+0xb0>
			} else {
				pressed = 0;
			}
		}
	}
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
  800a78:	00804034 	movhi	r2,256
  800a7c:	10841f04 	addi	r2,r2,4220
		} else if (buttons & 0x08) {
			if (!pressed) {
				prev_track = 1;
				pressed = 1;
			} else {
				pressed = 0;
  800a80:	d0275915 	stw	zero,-25244(gp)
			}
		}
	}
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
  800a84:	10000035 	stwio	zero,0(r2)
}
  800a88:	f800283a 	ret
	int buttons = 0;
	buttons = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE) & 0xf;

	if (buttons & 0x01) {
		if (!pressed) {
			PLAY = 0;
  800a8c:	d0275715 	stw	zero,-25252(gp)
			pressed = 1;
  800a90:	00800044 	movi	r2,1
  800a94:	d0a75915 	stw	r2,-25244(gp)
  800a98:	003fe406 	br	800a2c <button_ISR+0x28>
				pressed = 1;
			} else {
				pressed = 0;
			}
		} else if (buttons & 0x04) {
			if (!pressed) {
  800a9c:	d0a75917 	ldw	r2,-25244(gp)
  800aa0:	103ff51e 	bne	r2,zero,800a78 <button_ISR+0x74>
				next_track = 1;
  800aa4:	00800044 	movi	r2,1
  800aa8:	d0a00e15 	stw	r2,-32712(gp)
				pressed = 1;
  800aac:	d0a75915 	stw	r2,-25244(gp)
  800ab0:	003feb06 	br	800a60 <button_ISR+0x5c>
		}
	}
	if (PLAY == 0) {
		if (buttons & 0x02){
			if (!pressed) {
				PLAY = 1;
  800ab4:	00800044 	movi	r2,1
  800ab8:	d0a75715 	stw	r2,-25252(gp)
				pressed = 1;
  800abc:	d0a75915 	stw	r2,-25244(gp)
			} else {
				pressed = 0;
			}
		}
	}
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
  800ac0:	00804034 	movhi	r2,256
  800ac4:	10841f04 	addi	r2,r2,4220
  800ac8:	10000035 	stwio	zero,0(r2)
}
  800acc:	f800283a 	ret

00800ad0 <send_cmd>:
//-------------------------------------------------------------------------
BYTE send_cmd(BYTE *in)
{
  int i,j;
  BYTE b,crc=0;
  SD_CMD_OUT;
  800ad0:	00c00044 	movi	r3,1
  800ad4:	00801504 	movi	r2,84
  800ad8:	10c00035 	stwio	r3,0(r2)
  800adc:	0019883a 	mov	r12,zero
  800ae0:	000f883a 	mov	r7,zero
  800ae4:	02401804 	movi	r9,96
  800ae8:	02c01404 	movi	r11,80
  800aec:	02800204 	movi	r10,8
  800af0:	03400144 	movi	r13,5
  for(i=0; i < 5; i++)
  {
    b = in[i];
  800af4:	6105883a 	add	r2,r12,r4
  800af8:	11800003 	ldbu	r6,0(r2)
  800afc:	0011883a 	mov	r8,zero
    for(j=0; j<8; j++)
    {
      SD_CLK_LOW;
  800b00:	48000035 	stwio	zero,0(r9)
      if(b&0x80)
  800b04:	30803fcc 	andi	r2,r6,255
  800b08:	1080201c 	xori	r2,r2,128
  800b0c:	10bfe004 	addi	r2,r2,-128
  800b10:	10002e16 	blt	r2,zero,800bcc <send_cmd+0xfc>
      SD_CMD_HIGH;
      else
      SD_CMD_LOW; 
  800b14:	58000035 	stwio	zero,0(r11)
      crc <<= 1;
  800b18:	39cb883a 	add	r5,r7,r7
  800b1c:	280f883a 	mov	r7,r5
      SD_CLK_HIGH;
  800b20:	48c00035 	stwio	r3,0(r9)
      if((crc ^ b) & 0x80)
  800b24:	2984f03a 	xor	r2,r5,r6
  800b28:	10803fcc 	andi	r2,r2,255
  800b2c:	1080201c 	xori	r2,r2,128
  800b30:	10bfe004 	addi	r2,r2,-128
      crc ^= 0x09;
      b<<=1;
  800b34:	318d883a 	add	r6,r6,r6
  BYTE b,crc=0;
  SD_CMD_OUT;
  for(i=0; i < 5; i++)
  {
    b = in[i];
    for(j=0; j<8; j++)
  800b38:	42000044 	addi	r8,r8,1
      SD_CMD_HIGH;
      else
      SD_CMD_LOW; 
      crc <<= 1;
      SD_CLK_HIGH;
      if((crc ^ b) & 0x80)
  800b3c:	10002016 	blt	r2,zero,800bc0 <send_cmd+0xf0>
  BYTE b,crc=0;
  SD_CMD_OUT;
  for(i=0; i < 5; i++)
  {
    b = in[i];
    for(j=0; j<8; j++)
  800b40:	42bfef1e 	bne	r8,r10,800b00 <send_cmd+0x30>
BYTE send_cmd(BYTE *in)
{
  int i,j;
  BYTE b,crc=0;
  SD_CMD_OUT;
  for(i=0; i < 5; i++)
  800b44:	63000044 	addi	r12,r12,1
      SD_CLK_HIGH;
      if((crc ^ b) & 0x80)
      crc ^= 0x09;
      b<<=1;
    } 
    crc &= 0x7f; 
  800b48:	39c01fcc 	andi	r7,r7,127
BYTE send_cmd(BYTE *in)
{
  int i,j;
  BYTE b,crc=0;
  SD_CMD_OUT;
  for(i=0; i < 5; i++)
  800b4c:	637fe91e 	bne	r12,r13,800af4 <send_cmd+0x24>
      crc ^= 0x09;
      b<<=1;
    } 
    crc &= 0x7f; 
  }  
  crc =((crc<<1)|0x01);
  800b50:	38803fcc 	andi	r2,r7,255
  800b54:	1085883a 	add	r2,r2,r2
  800b58:	10800054 	ori	r2,r2,1
  800b5c:	1007883a 	mov	r3,r2
  800b60:	1013883a 	mov	r9,r2
  800b64:	0009883a 	mov	r4,zero
  800b68:	01401804 	movi	r5,96
  800b6c:	02001404 	movi	r8,80
  800b70:	01800044 	movi	r6,1
  800b74:	01c00204 	movi	r7,8
  800b78:	00000506 	br	800b90 <send_cmd+0xc0>
  {
    SD_CLK_LOW;
    if(crc&0x80)
    SD_CMD_HIGH;
    else
    SD_CMD_LOW; 
  800b7c:	40000035 	stwio	zero,0(r8)
    SD_CLK_HIGH;
  800b80:	29800035 	stwio	r6,0(r5)
    } 
    crc &= 0x7f; 
  }  
  crc =((crc<<1)|0x01);
  b = crc; 
  for(j=0; j<8; j++)
  800b84:	21000044 	addi	r4,r4,1
    if(crc&0x80)
    SD_CMD_HIGH;
    else
    SD_CMD_LOW; 
    SD_CLK_HIGH;
    crc<<=1;
  800b88:	18c7883a 	add	r3,r3,r3
    } 
    crc &= 0x7f; 
  }  
  crc =((crc<<1)|0x01);
  b = crc; 
  for(j=0; j<8; j++)
  800b8c:	21c00a26 	beq	r4,r7,800bb8 <send_cmd+0xe8>
  {
    SD_CLK_LOW;
  800b90:	28000035 	stwio	zero,0(r5)
    if(crc&0x80)
  800b94:	18803fcc 	andi	r2,r3,255
  800b98:	1080201c 	xori	r2,r2,128
  800b9c:	10bfe004 	addi	r2,r2,-128
  800ba0:	103ff60e 	bge	r2,zero,800b7c <send_cmd+0xac>
    SD_CMD_HIGH;
  800ba4:	41800035 	stwio	r6,0(r8)
    else
    SD_CMD_LOW; 
    SD_CLK_HIGH;
  800ba8:	29800035 	stwio	r6,0(r5)
    } 
    crc &= 0x7f; 
  }  
  crc =((crc<<1)|0x01);
  b = crc; 
  for(j=0; j<8; j++)
  800bac:	21000044 	addi	r4,r4,1
    if(crc&0x80)
    SD_CMD_HIGH;
    else
    SD_CMD_LOW; 
    SD_CLK_HIGH;
    crc<<=1;
  800bb0:	18c7883a 	add	r3,r3,r3
    } 
    crc &= 0x7f; 
  }  
  crc =((crc<<1)|0x01);
  b = crc; 
  for(j=0; j<8; j++)
  800bb4:	21fff61e 	bne	r4,r7,800b90 <send_cmd+0xc0>
    SD_CMD_LOW; 
    SD_CLK_HIGH;
    crc<<=1;
  }    
  return b;   
}
  800bb8:	48803fcc 	andi	r2,r9,255
  800bbc:	f800283a 	ret
      else
      SD_CMD_LOW; 
      crc <<= 1;
      SD_CLK_HIGH;
      if((crc ^ b) & 0x80)
      crc ^= 0x09;
  800bc0:	29c0025c 	xori	r7,r5,9
  BYTE b,crc=0;
  SD_CMD_OUT;
  for(i=0; i < 5; i++)
  {
    b = in[i];
    for(j=0; j<8; j++)
  800bc4:	42bfce1e 	bne	r8,r10,800b00 <send_cmd+0x30>
  800bc8:	003fde06 	br	800b44 <send_cmd+0x74>
    {
      SD_CLK_LOW;
      if(b&0x80)
      SD_CMD_HIGH;
  800bcc:	58c00035 	stwio	r3,0(r11)
  800bd0:	003fd106 	br	800b18 <send_cmd+0x48>

00800bd4 <response_R>:
  read_status = 1;  //SD data next in
  return 0;
}
//-------------------------------------------------------------------------
BYTE response_R(BYTE s)
{
  800bd4:	defffc04 	addi	sp,sp,-16
  800bd8:	000b883a 	mov	r5,zero
  800bdc:	01801804 	movi	r6,96
  800be0:	02400044 	movi	r9,1
  800be4:	02001404 	movi	r8,80
  800be8:	01c01944 	movi	r7,101
  800bec:	dcc00315 	stw	r19,12(sp)
  800bf0:	dc800215 	stw	r18,8(sp)
  800bf4:	dc400115 	stw	r17,4(sp)
  800bf8:	dc000015 	stw	r16,0(sp)
  800bfc:	00000106 	br	800c04 <response_R+0x30>
  {
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if(!(SD_TEST_CMD))
    break;
    if(crc++ >100)
  800c00:	19c06626 	beq	r3,r7,800d9c <response_R+0x1c8>
{
  BYTE a=0,b=0,c=0,r=0,crc=0;
  BYTE i,j=6,k;
  while(1)
  {
    SD_CLK_LOW;
  800c04:	30000035 	stwio	zero,0(r6)
    SD_CLK_HIGH;
  800c08:	32400035 	stwio	r9,0(r6)
    if(!(SD_TEST_CMD))
  800c0c:	40800037 	ldwio	r2,0(r8)
    break;
    if(crc++ >100)
  800c10:	28c03fcc 	andi	r3,r5,255
  800c14:	29400044 	addi	r5,r5,1
  BYTE i,j=6,k;
  while(1)
  {
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if(!(SD_TEST_CMD))
  800c18:	103ff91e 	bne	r2,zero,800c00 <response_R+0x2c>
    break;
    if(crc++ >100)
    return 2;
  } 
  crc =0;
  if(s == 2)
  800c1c:	24003fcc 	andi	r16,r4,255
  800c20:	00800084 	movi	r2,2
  800c24:	80806426 	beq	r16,r2,800db8 <response_R+0x1e4>
  800c28:	00800184 	movi	r2,6
  800c2c:	14403fcc 	andi	r17,r2,255
  800c30:	0017883a 	mov	r11,zero
  800c34:	0027883a 	mov	r19,zero
  800c38:	000b883a 	mov	r5,zero
  800c3c:	0015883a 	mov	r10,zero
  800c40:	0009883a 	mov	r4,zero
  800c44:	04802074 	movhi	r18,129
  800c48:	94994304 	addi	r18,r18,25868
  j = 17;

  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
  800c4c:	23003fcc 	andi	r12,r4,255
  800c50:	60000226 	beq	r12,zero,800c5c <response_R+0x88>
    b = response_buffer[k-1];    
  800c54:	6485883a 	add	r2,r12,r18
  800c58:	12ffffc3 	ldbu	r11,-1(r2)
  800c5c:	0011883a 	mov	r8,zero
  800c60:	000d883a 	mov	r6,zero
  800c64:	02401804 	movi	r9,96
  800c68:	03800044 	movi	r14,1
  800c6c:	03401404 	movi	r13,80
  800c70:	03c001c4 	movi	r15,7
  800c74:	60001e1e 	bne	r12,zero,800cf0 <response_R+0x11c>
    for(i=0; i<8; i++)
    {
      SD_CLK_LOW;
  800c78:	48000035 	stwio	zero,0(r9)
      if(a > 0)
  800c7c:	50803fcc 	andi	r2,r10,255
  800c80:	10003526 	beq	r2,zero,800d58 <response_R+0x184>
      c <<= 1; 
  800c84:	4211883a 	add	r8,r8,r8
      else
      i++; 
      a++; 
  800c88:	52800044 	addi	r10,r10,1
      SD_CLK_HIGH;
  800c8c:	4b800035 	stwio	r14,0(r9)
      if(SD_TEST_CMD)
  800c90:	69c00037 	ldwio	r7,0(r13)
  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
  800c94:	31800044 	addi	r6,r6,1
  800c98:	30c03fcc 	andi	r3,r6,255
      c <<= 1; 
      else
      i++; 
      a++; 
      SD_CLK_HIGH;
      if(SD_TEST_CMD)
  800c9c:	38000126 	beq	r7,zero,800ca4 <response_R+0xd0>
      c |= 0x01;
  800ca0:	42000054 	ori	r8,r8,1
  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
  800ca4:	78fff42e 	bgeu	r15,r3,800c78 <response_R+0xa4>
        crc ^= 0x09;
        b <<= 1;
        crc &= 0x7f;
      }
    }
    if(s==3)
  800ca8:	008000c4 	movi	r2,3
  800cac:	80802e26 	beq	r16,r2,800d68 <response_R+0x194>
    { 
      if( k==1 &&(!(c&0x80)))
      r=1;
    }
    response_buffer[k] = c;
  800cb0:	21000044 	addi	r4,r4,1
  800cb4:	6485883a 	add	r2,r12,r18
  } 
  crc =0;
  if(s == 2)
  j = 17;

  for(k=0; k<j; k++)
  800cb8:	20c03fcc 	andi	r3,r4,255
    if(s==3)
    { 
      if( k==1 &&(!(c&0x80)))
      r=1;
    }
    response_buffer[k] = c;
  800cbc:	12000005 	stb	r8,0(r2)
  } 
  crc =0;
  if(s == 2)
  j = 17;

  for(k=0; k<j; k++)
  800cc0:	1c7fe236 	bltu	r3,r17,800c4c <response_R+0x78>
      if( k==1 &&(!(c&0x80)))
      r=1;
    }
    response_buffer[k] = c;
  }
  if(s==1 || s==6)
  800cc4:	00800044 	movi	r2,1
  800cc8:	80802f26 	beq	r16,r2,800d88 <response_R+0x1b4>
  800ccc:	00800184 	movi	r2,6
  800cd0:	80802d26 	beq	r16,r2,800d88 <response_R+0x1b4>
  {
    if(c != ((crc<<1)+1))
  800cd4:	98803fcc 	andi	r2,r19,255
    r=2;
  } 
  return r; 
}
  800cd8:	dcc00317 	ldw	r19,12(sp)
  800cdc:	dc800217 	ldw	r18,8(sp)
  800ce0:	dc400117 	ldw	r17,4(sp)
  800ce4:	dc000017 	ldw	r16,0(sp)
  800ce8:	dec00404 	addi	sp,sp,16
  800cec:	f800283a 	ret
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
    {
      SD_CLK_LOW;
  800cf0:	48000035 	stwio	zero,0(r9)
      if(a > 0)
  800cf4:	50803fcc 	andi	r2,r10,255
  800cf8:	1000151e 	bne	r2,zero,800d50 <response_R+0x17c>
      c <<= 1; 
      else
      i++; 
  800cfc:	31800044 	addi	r6,r6,1
      a++; 
  800d00:	52800044 	addi	r10,r10,1
      SD_CLK_HIGH;
  800d04:	4b800035 	stwio	r14,0(r9)
      if(SD_TEST_CMD)
  800d08:	69c00037 	ldwio	r7,0(r13)
      c |= 0x01;
      if(k > 0)
      {
        crc <<= 1;
  800d0c:	294b883a 	add	r5,r5,r5
        if((crc ^ b) & 0x80)
  800d10:	2ac4f03a 	xor	r2,r5,r11
  800d14:	10803fcc 	andi	r2,r2,255
  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
  800d18:	31800044 	addi	r6,r6,1
      if(SD_TEST_CMD)
      c |= 0x01;
      if(k > 0)
      {
        crc <<= 1;
        if((crc ^ b) & 0x80)
  800d1c:	1080201c 	xori	r2,r2,128
  800d20:	10bfe004 	addi	r2,r2,-128
  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
  800d24:	30c03fcc 	andi	r3,r6,255
      c <<= 1; 
      else
      i++; 
      a++; 
      SD_CLK_HIGH;
      if(SD_TEST_CMD)
  800d28:	38000126 	beq	r7,zero,800d30 <response_R+0x15c>
      c |= 0x01;
  800d2c:	42000054 	ori	r8,r8,1
      if(k > 0)
      {
        crc <<= 1;
  800d30:	280f883a 	mov	r7,r5
        if((crc ^ b) & 0x80)
  800d34:	10000a16 	blt	r2,zero,800d60 <response_R+0x18c>
        crc ^= 0x09;
        b <<= 1;
        crc &= 0x7f;
  800d38:	39401fcc 	andi	r5,r7,127
      if(k > 0)
      {
        crc <<= 1;
        if((crc ^ b) & 0x80)
        crc ^= 0x09;
        b <<= 1;
  800d3c:	5ad7883a 	add	r11,r11,r11
  for(k=0; k<j; k++)
  {
    c = 0;
    if(k > 0)                      //for crc culcar
    b = response_buffer[k-1];    
    for(i=0; i<8; i++)
  800d40:	78ffd936 	bltu	r15,r3,800ca8 <response_R+0xd4>
    {
      SD_CLK_LOW;
  800d44:	48000035 	stwio	zero,0(r9)
      if(a > 0)
  800d48:	50803fcc 	andi	r2,r10,255
  800d4c:	103feb26 	beq	r2,zero,800cfc <response_R+0x128>
      c <<= 1; 
  800d50:	4211883a 	add	r8,r8,r8
  800d54:	003fea06 	br	800d00 <response_R+0x12c>
      else
      i++; 
  800d58:	31800044 	addi	r6,r6,1
  800d5c:	003fca06 	br	800c88 <response_R+0xb4>
      c |= 0x01;
      if(k > 0)
      {
        crc <<= 1;
        if((crc ^ b) & 0x80)
        crc ^= 0x09;
  800d60:	29c0025c 	xori	r7,r5,9
  800d64:	003ff406 	br	800d38 <response_R+0x164>
        crc &= 0x7f;
      }
    }
    if(s==3)
    { 
      if( k==1 &&(!(c&0x80)))
  800d68:	00800044 	movi	r2,1
  800d6c:	60bfd01e 	bne	r12,r2,800cb0 <response_R+0xdc>
  800d70:	40803fcc 	andi	r2,r8,255
  800d74:	1080201c 	xori	r2,r2,128
  800d78:	10bfe004 	addi	r2,r2,-128
  800d7c:	103fcc16 	blt	r2,zero,800cb0 <response_R+0xdc>
  800d80:	6027883a 	mov	r19,r12
  800d84:	003fca06 	br	800cb0 <response_R+0xdc>
    }
    response_buffer[k] = c;
  }
  if(s==1 || s==6)
  {
    if(c != ((crc<<1)+1))
  800d88:	28803fcc 	andi	r2,r5,255
  800d8c:	1085883a 	add	r2,r2,r2
  800d90:	40c03fcc 	andi	r3,r8,255
  800d94:	10800044 	addi	r2,r2,1
  800d98:	18bfce26 	beq	r3,r2,800cd4 <response_R+0x100>
  {
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if(!(SD_TEST_CMD))
    break;
    if(crc++ >100)
  800d9c:	00800084 	movi	r2,2
  {
    if(c != ((crc<<1)+1))
    r=2;
  } 
  return r; 
}
  800da0:	dcc00317 	ldw	r19,12(sp)
  800da4:	dc800217 	ldw	r18,8(sp)
  800da8:	dc400117 	ldw	r17,4(sp)
  800dac:	dc000017 	ldw	r16,0(sp)
  800db0:	dec00404 	addi	sp,sp,16
  800db4:	f800283a 	ret
    break;
    if(crc++ >100)
    return 2;
  } 
  crc =0;
  if(s == 2)
  800db8:	00800444 	movi	r2,17
  800dbc:	003f9b06 	br	800c2c <response_R+0x58>

00800dc0 <Ncc>:
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800dc0:	00801804 	movi	r2,96
  800dc4:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800dc8:	00c00044 	movi	r3,1
  800dcc:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800dd0:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800dd4:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800dd8:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800ddc:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800de0:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800de4:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800de8:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800dec:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800df0:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800df4:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800df8:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800dfc:	10c00035 	stwio	r3,0(r2)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  800e00:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  800e04:	10c00035 	stwio	r3,0(r2)
  }
}
  800e08:	f800283a 	ret

00800e0c <Ncr>:
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  800e0c:	00801504 	movi	r2,84
  800e10:	10000035 	stwio	zero,0(r2)
  SD_CLK_LOW;
  800e14:	00c01804 	movi	r3,96
  800e18:	18000035 	stwio	zero,0(r3)
  SD_CLK_HIGH;
  800e1c:	00800044 	movi	r2,1
  800e20:	18800035 	stwio	r2,0(r3)
  SD_CLK_LOW;
  800e24:	18000035 	stwio	zero,0(r3)
  SD_CLK_HIGH;
  800e28:	18800035 	stwio	r2,0(r3)
} 
  800e2c:	f800283a 	ret

00800e30 <info_bs>:
  }
}
//-------------------------------------------------------------------------
// Prints Boot Sector information
void info_bs()
{
  800e30:	deffff04 	addi	sp,sp,-4
  //Stored in Boot Sector
  printf("\n\nBoot Sector Data Structure Summary:");
  800e34:	01002074 	movhi	r4,129
  800e38:	21066e04 	addi	r4,r4,6584
  }
}
//-------------------------------------------------------------------------
// Prints Boot Sector information
void info_bs()
{
  800e3c:	dfc00015 	stw	ra,0(sp)
  //Stored in Boot Sector
  printf("\n\nBoot Sector Data Structure Summary:");
  800e40:	08045d40 	call	8045d4 <printf>
  printf("\nBS_JmpBoot: 0x%02X 0x%02X 0x%02X",BS_JmpBoot[0],BS_JmpBoot[1],
  800e44:	d0e76c44 	addi	r3,gp,-25167
  800e48:	19800043 	ldbu	r6,1(r3)
  800e4c:	19c00083 	ldbu	r7,2(r3)
  800e50:	d1676c43 	ldbu	r5,-25167(gp)
  800e54:	01002074 	movhi	r4,129
  800e58:	21067804 	addi	r4,r4,6624
  800e5c:	08045d40 	call	8045d4 <printf>
        BS_JmpBoot[2]);
  printf("\nBS_OEMName: %s",BS_OEMName);
  800e60:	01002074 	movhi	r4,129
  800e64:	21068104 	addi	r4,r4,6660
  800e68:	d1677c84 	addi	r5,gp,-25102
  800e6c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_BytsPerSec: %d",BPB_BytsPerSec);
  800e70:	d1677317 	ldw	r5,-25140(gp)
  800e74:	01002074 	movhi	r4,129
  800e78:	21068504 	addi	r4,r4,6676
  800e7c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_SecPerClus: %d",BPB_SecPerClus);
  800e80:	d1676143 	ldbu	r5,-25211(gp)
  800e84:	01002074 	movhi	r4,129
  800e88:	21068a04 	addi	r4,r4,6696
  800e8c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_RsvdSecCnt: %d",BPB_RsvdSecCnt);
  800e90:	d1678817 	ldw	r5,-25056(gp)
  800e94:	01002074 	movhi	r4,129
  800e98:	21068f04 	addi	r4,r4,6716
  800e9c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_NumFATs: %d",BPB_NumFATs);
  800ea0:	d1676e03 	ldbu	r5,-25160(gp)
  800ea4:	01002074 	movhi	r4,129
  800ea8:	21069404 	addi	r4,r4,6736
  800eac:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_RootEntCnt: %d",BPB_RootEntCnt);
  800eb0:	d1676217 	ldw	r5,-25208(gp)
  800eb4:	01002074 	movhi	r4,129
  800eb8:	21069904 	addi	r4,r4,6756
  800ebc:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_TotSec16: %d",BPB_TotSec16);
  800ec0:	d1677a17 	ldw	r5,-25112(gp)
  800ec4:	01002074 	movhi	r4,129
  800ec8:	21069e04 	addi	r4,r4,6776
  800ecc:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_Media: %d",BPB_Media);
  800ed0:	d1678e03 	ldbu	r5,-25032(gp)
  800ed4:	01002074 	movhi	r4,129
  800ed8:	2106a304 	addi	r4,r4,6796
  800edc:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_FATSz16: %d",BPB_FATSz16);
  800ee0:	d1676f17 	ldw	r5,-25156(gp)
  800ee4:	01002074 	movhi	r4,129
  800ee8:	2106a704 	addi	r4,r4,6812
  800eec:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_SecPerTrk: %d",BPB_SecPerTrk);
  800ef0:	d1676817 	ldw	r5,-25184(gp)
  800ef4:	01002074 	movhi	r4,129
  800ef8:	2106ac04 	addi	r4,r4,6832
  800efc:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_NumHeads: %d",BPB_NumHeads);
  800f00:	d1678a17 	ldw	r5,-25048(gp)
  800f04:	01002074 	movhi	r4,129
  800f08:	2106b104 	addi	r4,r4,6852
  800f0c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_HiddSec: %d",BPB_HiddSec);
  800f10:	d1676917 	ldw	r5,-25180(gp)
  800f14:	01002074 	movhi	r4,129
  800f18:	2106b604 	addi	r4,r4,6872
  800f1c:	08045d40 	call	8045d4 <printf>
  printf("\nBPB_TotSec32: %d",BPB_TotSec32);
  800f20:	d1678317 	ldw	r5,-25076(gp)
  800f24:	01002074 	movhi	r4,129
  800f28:	2106bb04 	addi	r4,r4,6892
  800f2c:	08045d40 	call	8045d4 <printf>
  
  //Calculated based on Boot Sector Values
  printf("\nRootDirSectors: 0x%04X (%d)10",RootDirSectors,RootDirSectors);
  800f30:	d1678717 	ldw	r5,-25060(gp)
  800f34:	01002074 	movhi	r4,129
  800f38:	2106c004 	addi	r4,r4,6912
  800f3c:	280d883a 	mov	r6,r5
  800f40:	08045d40 	call	8045d4 <printf>
  printf("\nFATSz: 0x%04X (%d)10",FATSz,FATSz);
  800f44:	d1677517 	ldw	r5,-25132(gp)
  800f48:	01002074 	movhi	r4,129
  800f4c:	2106c804 	addi	r4,r4,6944
  800f50:	280d883a 	mov	r6,r5
  800f54:	08045d40 	call	8045d4 <printf>
  printf("\nFirstDataSector: 0x%04X (%d)10",FirstDataSector,FirstDataSector);
  800f58:	d1676d17 	ldw	r5,-25164(gp)
  800f5c:	01002074 	movhi	r4,129
  800f60:	2106ce04 	addi	r4,r4,6968
  800f64:	280d883a 	mov	r6,r5
  800f68:	08045d40 	call	8045d4 <printf>
  printf("\nTotSec: 0x%04X (%d)10",TotSec,TotSec);
  800f6c:	d1678517 	ldw	r5,-25068(gp)
  800f70:	01002074 	movhi	r4,129
  800f74:	2106d604 	addi	r4,r4,7000
  800f78:	280d883a 	mov	r6,r5
  800f7c:	08045d40 	call	8045d4 <printf>
  printf("\nDataSec: 0x%04X (%d)10",DataSec,DataSec);
  800f80:	d1678417 	ldw	r5,-25072(gp)
  800f84:	01002074 	movhi	r4,129
  800f88:	2106dc04 	addi	r4,r4,7024
  800f8c:	280d883a 	mov	r6,r5
  800f90:	08045d40 	call	8045d4 <printf>
  printf("\nCountofClusters: 0x%04X (%d)10",CountofClusters,CountofClusters);
  800f94:	d1678617 	ldw	r5,-25064(gp)
  800f98:	01002074 	movhi	r4,129
  800f9c:	2106e204 	addi	r4,r4,7048
  800fa0:	280d883a 	mov	r6,r5
  800fa4:	08045d40 	call	8045d4 <printf>
  printf("\nFirstRootDirSecNum: 0x%04X (%d)10",FirstRootDirSecNum,FirstRootDirSecNum);
  800fa8:	d1676617 	ldw	r5,-25192(gp)
  800fac:	01002074 	movhi	r4,129
  800fb0:	2106ea04 	addi	r4,r4,7080
  800fb4:	280d883a 	mov	r6,r5
}  
  800fb8:	dfc00017 	ldw	ra,0(sp)
  800fbc:	dec00104 	addi	sp,sp,4
  printf("\nFATSz: 0x%04X (%d)10",FATSz,FATSz);
  printf("\nFirstDataSector: 0x%04X (%d)10",FirstDataSector,FirstDataSector);
  printf("\nTotSec: 0x%04X (%d)10",TotSec,TotSec);
  printf("\nDataSec: 0x%04X (%d)10",DataSec,DataSec);
  printf("\nCountofClusters: 0x%04X (%d)10",CountofClusters,CountofClusters);
  printf("\nFirstRootDirSecNum: 0x%04X (%d)10",FirstRootDirSecNum,FirstRootDirSecNum);
  800fc0:	08045d41 	jmpi	8045d4 <printf>

00800fc4 <SD_read_lba>:
    read_status =1; //sd card ready
    return 0;
}
//-------------------------------------------------------------------------
BYTE SD_read_lba(BYTE *buff,UINT32 lba,UINT32 seccnt)
{
  800fc4:	defff704 	addi	sp,sp,-36
  800fc8:	ddc00715 	stw	r23,28(sp)
  800fcc:	dd400515 	stw	r21,20(sp)
  800fd0:	dcc00315 	stw	r19,12(sp)
  800fd4:	dfc00815 	stw	ra,32(sp)
  800fd8:	dd800615 	stw	r22,24(sp)
  800fdc:	dd000415 	stw	r20,16(sp)
  800fe0:	dc800215 	stw	r18,8(sp)
  800fe4:	dc400115 	stw	r17,4(sp)
  800fe8:	dc000015 	stw	r16,0(sp)
  800fec:	302f883a 	mov	r23,r6
  800ff0:	202b883a 	mov	r21,r4
  800ff4:	2827883a 	mov	r19,r5
  BYTE c=0;
  UINT32  i,j;
  for(j=0;j<seccnt;j++)
  800ff8:	30007b26 	beq	r6,zero,8011e8 <SD_read_lba+0x224>
    {
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
  }
  read_status = 1;  //SD data next in
  800ffc:	0029883a 	mov	r20,zero
  801000:	0025883a 	mov	r18,zero
  801004:	d5a77b04 	addi	r22,gp,-25108
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801008:	04001804 	movi	r16,96
  80100c:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  801010:	04400044 	movi	r17,1
  801014:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801018:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80101c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801020:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  801024:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801028:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80102c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801030:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  801034:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801038:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80103c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801040:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  801044:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  801048:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80104c:	84400035 	stwio	r17,0(r16)
  for(j=0;j<seccnt;j++)
  {
    {
      Ncc();
      cmd_buffer[0] = cmd17[0];
      cmd_buffer[1] = (lba>>15)&0xff;
  801050:	9806d3fa 	srli	r3,r19,15
      cmd_buffer[2] = (lba>>7)&0xff;
  801054:	980ad1fa 	srli	r5,r19,7
      cmd_buffer[3] = (lba<<1)&0xff;
  801058:	9ccd883a 	add	r6,r19,r19
      cmd_buffer[4] = 0;
      lba++;
      send_cmd(cmd_buffer); 
  80105c:	d1277b04 	addi	r4,gp,-25108
  UINT32  i,j;
  for(j=0;j<seccnt;j++)
  {
    {
      Ncc();
      cmd_buffer[0] = cmd17[0];
  801060:	00801444 	movi	r2,81
      cmd_buffer[1] = (lba>>15)&0xff;
  801064:	b0c00045 	stb	r3,1(r22)
      cmd_buffer[2] = (lba>>7)&0xff;
  801068:	b1400085 	stb	r5,2(r22)
      cmd_buffer[3] = (lba<<1)&0xff;
  80106c:	b18000c5 	stb	r6,3(r22)
      cmd_buffer[4] = 0;
  801070:	b0000105 	stb	zero,4(r22)
  UINT32  i,j;
  for(j=0;j<seccnt;j++)
  {
    {
      Ncc();
      cmd_buffer[0] = cmd17[0];
  801074:	d0a77b05 	stb	r2,-25108(gp)
      cmd_buffer[1] = (lba>>15)&0xff;
      cmd_buffer[2] = (lba>>7)&0xff;
      cmd_buffer[3] = (lba<<1)&0xff;
      cmd_buffer[4] = 0;
      lba++;
      send_cmd(cmd_buffer); 
  801078:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  80107c:	00c01504 	movi	r3,84
  801080:	18000035 	stwio	zero,0(r3)
  SD_CLK_LOW;
  801084:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  801088:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  80108c:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  801090:	84400035 	stwio	r17,0(r16)
      send_cmd(cmd_buffer); 
      Ncr();
    } 
    while(1)
    {
      SD_CLK_LOW;
  801094:	01001804 	movi	r4,96
  801098:	20000035 	stwio	zero,0(r4)
      SD_CLK_HIGH;
  80109c:	00800044 	movi	r2,1
  8010a0:	20800035 	stwio	r2,0(r4)
      if(!(SD_TEST_DAT))
  8010a4:	00c01004 	movi	r3,64
  8010a8:	18800037 	ldwio	r2,0(r3)
  8010ac:	103ff91e 	bne	r2,zero,801094 <SD_read_lba+0xd0>
{
  SD_CMD_IN;
  SD_CLK_LOW;
  SD_CLK_HIGH;
  SD_CLK_LOW;
  SD_CLK_HIGH;
  8010b0:	a813883a 	mov	r9,r21
  8010b4:	0011883a 	mov	r8,zero
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  8010b8:	01001804 	movi	r4,96
  8010bc:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  8010c0:	01c00044 	movi	r7,1
  8010c4:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  8010c8:	948b883a 	add	r5,r18,r18
  8010cc:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  8010d0:	01801004 	movi	r6,64
  8010d4:	30800037 	ldwio	r2,0(r6)
  8010d8:	10000126 	beq	r2,zero,8010e0 <SD_read_lba+0x11c>
        c |= 0x01;
  8010dc:	29c6b03a 	or	r3,r5,r7
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  8010e0:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  8010e4:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  8010e8:	18cb883a 	add	r5,r3,r3
  8010ec:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  8010f0:	30800037 	ldwio	r2,0(r6)
  8010f4:	10000126 	beq	r2,zero,8010fc <SD_read_lba+0x138>
        c |= 0x01;
  8010f8:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  8010fc:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  801100:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  801104:	18cb883a 	add	r5,r3,r3
  801108:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  80110c:	30800037 	ldwio	r2,0(r6)
  801110:	10000126 	beq	r2,zero,801118 <SD_read_lba+0x154>
        c |= 0x01;
  801114:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  801118:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  80111c:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  801120:	18cb883a 	add	r5,r3,r3
  801124:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  801128:	30800037 	ldwio	r2,0(r6)
  80112c:	10000126 	beq	r2,zero,801134 <SD_read_lba+0x170>
        c |= 0x01;
  801130:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  801134:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  801138:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  80113c:	18cb883a 	add	r5,r3,r3
  801140:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  801144:	30800037 	ldwio	r2,0(r6)
  801148:	10000126 	beq	r2,zero,801150 <SD_read_lba+0x18c>
        c |= 0x01;
  80114c:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  801150:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  801154:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  801158:	18cb883a 	add	r5,r3,r3
  80115c:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  801160:	30800037 	ldwio	r2,0(r6)
  801164:	10000126 	beq	r2,zero,80116c <SD_read_lba+0x1a8>
        c |= 0x01;
  801168:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  80116c:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  801170:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  801174:	18cb883a 	add	r5,r3,r3
  801178:	2807883a 	mov	r3,r5
        if(SD_TEST_DAT)
  80117c:	30800037 	ldwio	r2,0(r6)
  801180:	10000126 	beq	r2,zero,801188 <SD_read_lba+0x1c4>
        c |= 0x01;
  801184:	28c00054 	ori	r3,r5,1
    for(i=0;i<512;i++)
    {
      BYTE j;
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
  801188:	20000035 	stwio	zero,0(r4)
        SD_CLK_HIGH;
  80118c:	21c00035 	stwio	r7,0(r4)
        c <<= 1; 
  801190:	18e5883a 	add	r18,r3,r3
        if(SD_TEST_DAT)
  801194:	30800037 	ldwio	r2,0(r6)
  801198:	10000126 	beq	r2,zero,8011a0 <SD_read_lba+0x1dc>
        c |= 0x01;
  80119c:	94800054 	ori	r18,r18,1
      SD_CLK_LOW;
      SD_CLK_HIGH;
      if(!(SD_TEST_DAT))
      break;
    }
    for(i=0;i<512;i++)
  8011a0:	42000044 	addi	r8,r8,1
  8011a4:	00808004 	movi	r2,512
        SD_CLK_HIGH;
        c <<= 1; 
        if(SD_TEST_DAT)
        c |= 0x01;
      } 
      *buff=c;
  8011a8:	4c800005 	stb	r18,0(r9)
      buff++;
  8011ac:	4a400044 	addi	r9,r9,1
      SD_CLK_LOW;
      SD_CLK_HIGH;
      if(!(SD_TEST_DAT))
      break;
    }
    for(i=0;i<512;i++)
  8011b0:	40bfc11e 	bne	r8,r2,8010b8 <SD_read_lba+0xf4>
  8011b4:	aa2b883a 	add	r21,r21,r8
  8011b8:	0005883a 	mov	r2,zero
  8011bc:	00c01804 	movi	r3,96
  8011c0:	01400044 	movi	r5,1
  8011c4:	01000404 	movi	r4,16
      *buff=c;
      buff++;
    } 
    for(i=0; i<16; i++)
    {
        SD_CLK_LOW;
  8011c8:	18000035 	stwio	zero,0(r3)
        SD_CLK_HIGH;
  8011cc:	19400035 	stwio	r5,0(r3)
        c |= 0x01;
      } 
      *buff=c;
      buff++;
    } 
    for(i=0; i<16; i++)
  8011d0:	10800044 	addi	r2,r2,1
  8011d4:	113ffc1e 	bne	r2,r4,8011c8 <SD_read_lba+0x204>
//-------------------------------------------------------------------------
BYTE SD_read_lba(BYTE *buff,UINT32 lba,UINT32 seccnt)
{
  BYTE c=0;
  UINT32  i,j;
  for(j=0;j<seccnt;j++)
  8011d8:	a5000044 	addi	r20,r20,1
  8011dc:	bd000226 	beq	r23,r20,8011e8 <SD_read_lba+0x224>
      cmd_buffer[0] = cmd17[0];
      cmd_buffer[1] = (lba>>15)&0xff;
      cmd_buffer[2] = (lba>>7)&0xff;
      cmd_buffer[3] = (lba<<1)&0xff;
      cmd_buffer[4] = 0;
      lba++;
  8011e0:	9cc00044 	addi	r19,r19,1
  8011e4:	003f8806 	br	801008 <SD_read_lba+0x44>
    {
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
  }
  read_status = 1;  //SD data next in
  8011e8:	00800044 	movi	r2,1
  8011ec:	d0a77c45 	stb	r2,-25103(gp)
  return 0;
}
  8011f0:	0005883a 	mov	r2,zero
  8011f4:	dfc00817 	ldw	ra,32(sp)
  8011f8:	ddc00717 	ldw	r23,28(sp)
  8011fc:	dd800617 	ldw	r22,24(sp)
  801200:	dd400517 	ldw	r21,20(sp)
  801204:	dd000417 	ldw	r20,16(sp)
  801208:	dcc00317 	ldw	r19,12(sp)
  80120c:	dc800217 	ldw	r18,8(sp)
  801210:	dc400117 	ldw	r17,4(sp)
  801214:	dc000017 	ldw	r16,0(sp)
  801218:	dec00904 	addi	sp,sp,36
  80121c:	f800283a 	ret

00801220 <get_rel_sector>:
    return 1;//entry not found
  }
}
//-------------------------------------------------------------------------
int get_rel_sector(data_file *df, BYTE *buffer, int cc[], int sector)
{
  801220:	defff604 	addi	sp,sp,-40
  801224:	dd000415 	stw	r20,16(sp)
  801228:	dc800215 	stw	r18,8(sp)
  80122c:	2829883a 	mov	r20,r5
  801230:	2025883a 	mov	r18,r4
  //relative sector address start from sector 0 not 1!!!
  //return 0 valid sector
  //return -1 sector is out of range
  //return <bytes in last sector> valid/last sector
  
  int Total_Sectors = ceil(df->FileSize / BPB_BytsPerSec);
  801234:	d1677317 	ldw	r5,-25140(gp)
  801238:	21000417 	ldw	r4,16(r4)
    return 1;//entry not found
  }
}
//-------------------------------------------------------------------------
int get_rel_sector(data_file *df, BYTE *buffer, int cc[], int sector)
{
  80123c:	dfc00915 	stw	ra,36(sp)
  801240:	dcc00315 	stw	r19,12(sp)
  801244:	dc400115 	stw	r17,4(sp)
  801248:	3027883a 	mov	r19,r6
  80124c:	dc000015 	stw	r16,0(sp)
  801250:	df000815 	stw	fp,32(sp)
  801254:	3821883a 	mov	r16,r7
  801258:	ddc00715 	stw	r23,28(sp)
  80125c:	dd800615 	stw	r22,24(sp)
  801260:	dd400515 	stw	r21,20(sp)
  //relative sector address start from sector 0 not 1!!!
  //return 0 valid sector
  //return -1 sector is out of range
  //return <bytes in last sector> valid/last sector
  
  int Total_Sectors = ceil(df->FileSize / BPB_BytsPerSec);
  801264:	0803ea80 	call	803ea8 <__udivsi3>
  801268:	1009883a 	mov	r4,r2
  80126c:	0803bd80 	call	803bd8 <__floatunsidf>
  801270:	180b883a 	mov	r5,r3
  801274:	1009883a 	mov	r4,r2
  801278:	08030440 	call	803044 <ceil>
  80127c:	180b883a 	mov	r5,r3
  801280:	1009883a 	mov	r4,r2
  801284:	0803b000 	call	803b00 <__fixdfsi>
  801288:	1023883a 	mov	r17,r2
  int Return_Sector;
  
  if( ( sector >= Total_Sectors ) || ( sector < 0 ) )
  80128c:	80800d16 	blt	r16,r2,8012c4 <get_rel_sector+0xa4>
    Return_Sector = (sector % BPB_SecPerClus) + FirstSectorofCluster(cc[(int)(floor(sector / BPB_SecPerClus))]);
    SD_read_lba(buffer,Return_Sector,1);
    
    if(sector == (Total_Sectors - 1) )
    {
      return (df->FileSize - ((sector+1) * BPB_BytsPerSec));
  801290:	00bfffc4 	movi	r2,-1
    else
    {
      return 0; //valid sector
    }
  }
}
  801294:	dfc00917 	ldw	ra,36(sp)
  801298:	df000817 	ldw	fp,32(sp)
  80129c:	ddc00717 	ldw	r23,28(sp)
  8012a0:	dd800617 	ldw	r22,24(sp)
  8012a4:	dd400517 	ldw	r21,20(sp)
  8012a8:	dd000417 	ldw	r20,16(sp)
  8012ac:	dcc00317 	ldw	r19,12(sp)
  8012b0:	dc800217 	ldw	r18,8(sp)
  8012b4:	dc400117 	ldw	r17,4(sp)
  8012b8:	dc000017 	ldw	r16,0(sp)
  8012bc:	dec00a04 	addi	sp,sp,40
  8012c0:	f800283a 	ret
  //return <bytes in last sector> valid/last sector
  
  int Total_Sectors = ceil(df->FileSize / BPB_BytsPerSec);
  int Return_Sector;
  
  if( ( sector >= Total_Sectors ) || ( sector < 0 ) )
  8012c4:	803ff216 	blt	r16,zero,801290 <get_rel_sector+0x70>
    return -1; //sector is out of range
  }
  else
  {
    //get sector
    Return_Sector = (sector % BPB_SecPerClus) + FirstSectorofCluster(cc[(int)(floor(sector / BPB_SecPerClus))]);
  8012c8:	d5676143 	ldbu	r21,-25211(gp)
    SD_read_lba(buffer,Return_Sector,1);
  8012cc:	d0a76d17 	ldw	r2,-25164(gp)
  8012d0:	d0e79017 	ldw	r3,-25024(gp)
  8012d4:	856cb03a 	or	r22,r16,r21
  8012d8:	010003c4 	movi	r4,15
  8012dc:	10f9883a 	add	fp,r2,r3
  8012e0:	25802836 	bltu	r4,r22,801384 <get_rel_sector+0x164>
  8012e4:	8004913a 	slli	r2,r16,4
  8012e8:	00c02074 	movhi	r3,129
  8012ec:	18ca8c04 	addi	r3,r3,10800
  8012f0:	1544b03a 	or	r2,r2,r21
  8012f4:	10c5883a 	add	r2,r2,r3
  8012f8:	11000003 	ldbu	r4,0(r2)
  8012fc:	a80b883a 	mov	r5,r21
  801300:	0803eb80 	call	803eb8 <__mulsi3>
  801304:	80afc83a 	sub	r23,r16,r2
    return -1; //sector is out of range
  }
  else
  {
    //get sector
    Return_Sector = (sector % BPB_SecPerClus) + FirstSectorofCluster(cc[(int)(floor(sector / BPB_SecPerClus))]);
  801308:	008003c4 	movi	r2,15
  80130c:	15802236 	bltu	r2,r22,801398 <get_rel_sector+0x178>
  801310:	8004913a 	slli	r2,r16,4
  801314:	00c02074 	movhi	r3,129
  801318:	18ca8c04 	addi	r3,r3,10800
  80131c:	1544b03a 	or	r2,r2,r21
  801320:	10c5883a 	add	r2,r2,r3
  801324:	11000003 	ldbu	r4,0(r2)
  801328:	0803a080 	call	803a08 <__floatsidf>
  80132c:	180b883a 	mov	r5,r3
  801330:	1009883a 	mov	r4,r2
  801334:	08032580 	call	803258 <floor>
  801338:	180b883a 	mov	r5,r3
  80133c:	1009883a 	mov	r4,r2
  801340:	0803b000 	call	803b00 <__fixdfsi>
  801344:	1085883a 	add	r2,r2,r2
  801348:	1085883a 	add	r2,r2,r2
  80134c:	14c5883a 	add	r2,r2,r19
  801350:	11000017 	ldw	r4,0(r2)
  801354:	a80b883a 	mov	r5,r21
  801358:	213fff84 	addi	r4,r4,-2
  80135c:	0803eb80 	call	803eb8 <__mulsi3>
  801360:	b885883a 	add	r2,r23,r2
  801364:	e08b883a 	add	r5,fp,r2
  801368:	a009883a 	mov	r4,r20
  80136c:	01800044 	movi	r6,1
  801370:	0800fc40 	call	800fc4 <SD_read_lba>
    SD_read_lba(buffer,Return_Sector,1);
    
    if(sector == (Total_Sectors - 1) )
  801374:	88ffffc4 	addi	r3,r17,-1
  801378:	80c00c26 	beq	r16,r3,8013ac <get_rel_sector+0x18c>
  80137c:	0005883a 	mov	r2,zero
  801380:	003fc406 	br	801294 <get_rel_sector+0x74>
  }
  else
  {
    //get sector
    Return_Sector = (sector % BPB_SecPerClus) + FirstSectorofCluster(cc[(int)(floor(sector / BPB_SecPerClus))]);
    SD_read_lba(buffer,Return_Sector,1);
  801384:	8009883a 	mov	r4,r16
  801388:	a80b883a 	mov	r5,r21
  80138c:	0803de80 	call	803de8 <__divsi3>
  801390:	1009883a 	mov	r4,r2
  801394:	003fd906 	br	8012fc <get_rel_sector+0xdc>
    return -1; //sector is out of range
  }
  else
  {
    //get sector
    Return_Sector = (sector % BPB_SecPerClus) + FirstSectorofCluster(cc[(int)(floor(sector / BPB_SecPerClus))]);
  801398:	8009883a 	mov	r4,r16
  80139c:	a80b883a 	mov	r5,r21
  8013a0:	0803de80 	call	803de8 <__divsi3>
  8013a4:	1009883a 	mov	r4,r2
  8013a8:	003fdf06 	br	801328 <get_rel_sector+0x108>
    SD_read_lba(buffer,Return_Sector,1);
    
    if(sector == (Total_Sectors - 1) )
    {
      return (df->FileSize - ((sector+1) * BPB_BytsPerSec));
  8013ac:	d1677317 	ldw	r5,-25140(gp)
  8013b0:	8809883a 	mov	r4,r17
  8013b4:	0803eb80 	call	803eb8 <__mulsi3>
  8013b8:	90c00417 	ldw	r3,16(r18)
  8013bc:	1885c83a 	sub	r2,r3,r2
  8013c0:	003fb406 	br	801294 <get_rel_sector+0x74>

008013c4 <search_for_filetype>:
//-------------------------------------------------------------------------
// Searches for a particular file extension specified by "extension"
// To browse from the start of the file system use
// search_for_filetye("extension",0,1);
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root)
{
  8013c4:	deff7004 	addi	sp,sp,-576
  8013c8:	dcc08915 	stw	r19,548(sp)
  UINT16  directory;
  BYTE  Buffer[512]={0};
  8013cc:	dcc00404 	addi	r19,sp,16
//-------------------------------------------------------------------------
// Searches for a particular file extension specified by "extension"
// To browse from the start of the file system use
// search_for_filetye("extension",0,1);
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root)
{
  8013d0:	ddc08d15 	stw	r23,564(sp)
  8013d4:	dc008615 	stw	r16,536(sp)
  8013d8:	d9408415 	stw	r5,528(sp)
  8013dc:	202f883a 	mov	r23,r4
  8013e0:	3021883a 	mov	r16,r6
  UINT16  directory;
  BYTE  Buffer[512]={0};
  8013e4:	9809883a 	mov	r4,r19
  8013e8:	000b883a 	mov	r5,zero
  8013ec:	01808004 	movi	r6,512
//-------------------------------------------------------------------------
// Searches for a particular file extension specified by "extension"
// To browse from the start of the file system use
// search_for_filetye("extension",0,1);
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root)
{
  8013f0:	dfc08f15 	stw	ra,572(sp)
  8013f4:	df008e15 	stw	fp,568(sp)
  8013f8:	dd808c15 	stw	r22,560(sp)
  8013fc:	dd408b15 	stw	r21,556(sp)
  801400:	dd008a15 	stw	r20,552(sp)
  801404:	dc808815 	stw	r18,544(sp)
  801408:	dc408715 	stw	r17,540(sp)
  80140c:	d9c08515 	stw	r7,532(sp)
  UINT16  directory;
  BYTE  Buffer[512]={0};
  801410:	08044bc0 	call	8044bc <memset>
  char fileext[4];
  char longname[255] = {0};
  int i,root_sector_count=0,longname_blocks,ATTR_LONG_NAME,ATTR_LONG_NAME_MASK;
  
  
  if(search_root)
  801414:	d8808517 	ldw	r2,532(sp)
  801418:	1000b526 	beq	r2,zero,8016f0 <search_for_filetype+0x32c>
  {
    //Search the root directory
    directory = (MBR_BS_Location + FirstRootDirSecNum);
  80141c:	d0e79017 	ldw	r3,-25024(gp)
  801420:	d0a76617 	ldw	r2,-25192(gp)
    SD_read_lba(Buffer,directory,1);
  801424:	9809883a 	mov	r4,r19
  801428:	01800044 	movi	r6,1
  
  
  if(search_root)
  {
    //Search the root directory
    directory = (MBR_BS_Location + FirstRootDirSecNum);
  80142c:	18ab883a 	add	r21,r3,r2
    SD_read_lba(Buffer,directory,1);
  801430:	a80b883a 	mov	r5,r21
  801434:	0800fc40 	call	800fc4 <SD_read_lba>
  801438:	0025883a 	mov	r18,zero
  80143c:	0029883a 	mov	r20,zero
  801440:	91403fcc 	andi	r5,r18,255
    // ./ Current directory Entry and the ../ Parent directory entry
    entry_num = 2;
  }
  
  //Browse while there are still entries to browse
  while((Buffer[entry_num*32] != 0x00))
  801444:	2822917a 	slli	r17,r5,5
  801448:	9c45883a 	add	r2,r19,r17
  80144c:	11800003 	ldbu	r6,0(r2)
  801450:	30005926 	beq	r6,zero,8015b8 <search_for_filetype+0x1f4>
  {
   ATTR_LONG_NAME_MASK = Buffer[entry_num*32+attribute_offset] &0x3F;
  801454:	894002c4 	addi	r5,r17,11
  801458:	9945883a 	add	r2,r19,r5
  80145c:	11000003 	ldbu	r4,0(r2)
   ATTR_LONG_NAME = Buffer[entry_num*32+attribute_offset] &0x0F;
    
    //Determine if the entry contains a long file name
    if (((Buffer[entry_num*32+attribute_offset] & ATTR_LONG_NAME_MASK) == ATTR_LONG_NAME) && (Buffer[entry_num*32+attribute_offset] != 0x08) && (Buffer[entry_num*32] != 0xE5)) //long filename
  801460:	20c003cc 	andi	r3,r4,15
  801464:	20800fcc 	andi	r2,r4,63
  801468:	18806a26 	beq	r3,r2,801614 <search_for_filetype+0x250>
    //0x08 Indicates Volume ID
    //0xE5 Indicates and empty entry
    //0x10 Indicates a Directory
    //anything else indicates a file
    
    attribute = Buffer[entry_num*32 + attribute_offset];
  80146c:	9945883a 	add	r2,r19,r5
  801470:	14000003 	ldbu	r16,0(r2)
    
    if((attribute & 0x08)||(Buffer[entry_num*32] == 0xE5))
  801474:	81003fcc 	andi	r4,r16,255
  801478:	2080020c 	andi	r2,r4,8
  80147c:	10003e1e 	bne	r2,zero,801578 <search_for_filetype+0x1b4>
  801480:	9c45883a 	add	r2,r19,r17
  801484:	13c00003 	ldbu	r15,0(r2)
  801488:	00803944 	movi	r2,229
  80148c:	78c03fcc 	andi	r3,r15,255
  801490:	18803926 	beq	r3,r2,801578 <search_for_filetype+0x1b4>
    {
      //0x08 Indicates Volume ID
      //0xE5 Indicates and empty entry
      //Either case increment to next entry
    }   
    else if(attribute & 0x10)
  801494:	2080040c 	andi	r2,r4,16
  801498:	1000771e 	bne	r2,zero,801678 <search_for_filetype+0x2b4>
    else
    {
      //Indicates a file
      for(i=0;i<11;i++)
      {
        filename[i]=Buffer[entry_num*32 + i];
  80149c:	dac00484 	addi	r11,sp,18
  8014a0:	dd800444 	addi	r22,sp,17
  8014a4:	df0004c4 	addi	fp,sp,19
  8014a8:	da000504 	addi	r8,sp,20
  8014ac:	d9c00544 	addi	r7,sp,21
  8014b0:	d9800584 	addi	r6,sp,22
  8014b4:	d94005c4 	addi	r5,sp,23
  8014b8:	d9000604 	addi	r4,sp,24
  8014bc:	d8c00644 	addi	r3,sp,25
  8014c0:	d8800684 	addi	r2,sp,26
  8014c4:	5c55883a 	add	r10,r11,r17
  8014c8:	4451883a 	add	r8,r8,r17
  8014cc:	3c4f883a 	add	r7,r7,r17
  8014d0:	2c4b883a 	add	r5,r5,r17
  8014d4:	2449883a 	add	r4,r4,r17
  8014d8:	1c47883a 	add	r3,r3,r17
  8014dc:	1445883a 	add	r2,r2,r17
  8014e0:	b453883a 	add	r9,r22,r17
  8014e4:	344d883a 	add	r6,r6,r17
  8014e8:	e457883a 	add	r11,fp,r17
  8014ec:	23000003 	ldbu	r12,0(r4)
  8014f0:	1b400003 	ldbu	r13,0(r3)
  8014f4:	13800003 	ldbu	r14,0(r2)
  8014f8:	48c00003 	ldbu	r3,0(r9)
  8014fc:	50800003 	ldbu	r2,0(r10)
  801500:	59000003 	ldbu	r4,0(r11)
  801504:	42400003 	ldbu	r9,0(r8)
  801508:	3a800003 	ldbu	r10,0(r7)
  80150c:	32000003 	ldbu	r8,0(r6)
  801510:	29c00003 	ldbu	r7,0(r5)
  801514:	d90001c5 	stb	r4,7(sp)
  801518:	dbc00105 	stb	r15,4(sp)
  80151c:	d8c00145 	stb	r3,5(sp)
  801520:	d8800185 	stb	r2,6(sp)
  801524:	da400205 	stb	r9,8(sp)
  801528:	da800245 	stb	r10,9(sp)
  80152c:	da000285 	stb	r8,10(sp)
  801530:	d9c002c5 	stb	r7,11(sp)
      }
      filename[11] = '\0';
      
      //Grab the current entry numbers file extension
      fileext[0]=Buffer[entry_num*32 + 8];
  801534:	db000005 	stb	r12,0(sp)
      fileext[1]=Buffer[entry_num*32 + 9];
  801538:	db400045 	stb	r13,1(sp)
      fileext[2]=Buffer[entry_num*32 + 10];
  80153c:	db800085 	stb	r14,2(sp)
    else
    {
      //Indicates a file
      for(i=0;i<11;i++)
      {
        filename[i]=Buffer[entry_num*32 + i];
  801540:	db000305 	stb	r12,12(sp)
  801544:	db400345 	stb	r13,13(sp)
  801548:	db800385 	stb	r14,14(sp)
      }
      filename[11] = '\0';
  80154c:	d80003c5 	stb	zero,15(sp)
      
      //Grab the current entry numbers file extension
      fileext[0]=Buffer[entry_num*32 + 8];
      fileext[1]=Buffer[entry_num*32 + 9];
      fileext[2]=Buffer[entry_num*32 + 10];
      fileext[3] = '\0';
  801550:	d80000c5 	stb	zero,3(sp)
      
      //compare the current file's file extension to the extension to search for
      if(!strcmp(extension,fileext))
  801554:	b809883a 	mov	r4,r23
  801558:	d80b883a 	mov	r5,sp
  80155c:	08047000 	call	804700 <strcmp>
  801560:	1000051e 	bne	r2,zero,801578 <search_for_filetype+0x1b4>
      {
        if(file_count == file_number)
  801564:	d0e75517 	ldw	r3,-25260(gp)
  801568:	d0a75617 	ldw	r2,-25256(gp)
  80156c:	18806f26 	beq	r3,r2,80172c <search_for_filetype+0x368>
          df->Posn = 0;
          file_count = 0;
          file_number = file_number + 1;
          return 0; //file found
        }
        file_count++;
  801570:	18800044 	addi	r2,r3,1
  801574:	d0a75515 	stw	r2,-25260(gp)
      } 
    }
    entry_num++;
  801578:	94800044 	addi	r18,r18,1
    //if the entry number spans beyond the current sector, grab the next one
    if(entry_num*32 >= BPB_BytsPerSec)
  80157c:	91403fcc 	andi	r5,r18,255
  801580:	2806917a 	slli	r3,r5,5
  801584:	d0a77317 	ldw	r2,-25140(gp)
  801588:	18bfae36 	bltu	r3,r2,801444 <search_for_filetype+0x80>
    {
      root_sector_count++;
  80158c:	a5000044 	addi	r20,r20,1
      SD_read_lba(Buffer,directory + root_sector_count,1);
  801590:	a54b883a 	add	r5,r20,r21
  801594:	01800044 	movi	r6,1
  801598:	9809883a 	mov	r4,r19
  80159c:	0800fc40 	call	800fc4 <SD_read_lba>
  8015a0:	000b883a 	mov	r5,zero
    // ./ Current directory Entry and the ../ Parent directory entry
    entry_num = 2;
  }
  
  //Browse while there are still entries to browse
  while((Buffer[entry_num*32] != 0x00))
  8015a4:	2822917a 	slli	r17,r5,5
    entry_num++;
    //if the entry number spans beyond the current sector, grab the next one
    if(entry_num*32 >= BPB_BytsPerSec)
    {
      root_sector_count++;
      SD_read_lba(Buffer,directory + root_sector_count,1);
  8015a8:	0025883a 	mov	r18,zero
    // ./ Current directory Entry and the ../ Parent directory entry
    entry_num = 2;
  }
  
  //Browse while there are still entries to browse
  while((Buffer[entry_num*32] != 0x00))
  8015ac:	9c45883a 	add	r2,r19,r17
  8015b0:	11800003 	ldbu	r6,0(r2)
  8015b4:	303fa71e 	bne	r6,zero,801454 <search_for_filetype+0x90>
      entry_num=0;    
    }
  }
  
  //The Buffer[entry_num*32] is 0x00
  if(search_root)
  8015b8:	d8808517 	ldw	r2,532(sp)
  8015bc:	10005826 	beq	r2,zero,801720 <search_for_filetype+0x35c>
  {
    //The entire volume has been searched
    if(file_number == 0)
  8015c0:	d0a75617 	ldw	r2,-25256(gp)
  8015c4:	10005126 	beq	r2,zero,80170c <search_for_filetype+0x348>
    else
    {
      //Wrap around and find the first file
      file_number = 0;
      file_count = 0;
      search_for_filetype(extension, df, 0,1);
  8015c8:	d9408417 	ldw	r5,528(sp)
  8015cc:	b809883a 	mov	r4,r23
  8015d0:	000d883a 	mov	r6,zero
  8015d4:	01c00044 	movi	r7,1
      printf("\nFile Extension %s not found",extension);
    }
    else
    {
      //Wrap around and find the first file
      file_number = 0;
  8015d8:	d0275615 	stw	zero,-25256(gp)
      file_count = 0;
  8015dc:	d0275515 	stw	zero,-25260(gp)
      search_for_filetype(extension, df, 0,1);
  8015e0:	08013c40 	call	8013c4 <search_for_filetype>
  else
  {
    //The subdirectory doesn't contain any more entries
    return 1;//entry not found
  }
}
  8015e4:	dfc08f17 	ldw	ra,572(sp)
  8015e8:	df008e17 	ldw	fp,568(sp)
  8015ec:	ddc08d17 	ldw	r23,564(sp)
  8015f0:	dd808c17 	ldw	r22,560(sp)
  8015f4:	dd408b17 	ldw	r21,556(sp)
  8015f8:	dd008a17 	ldw	r20,552(sp)
  8015fc:	dcc08917 	ldw	r19,548(sp)
  801600:	dc808817 	ldw	r18,544(sp)
  801604:	dc408717 	ldw	r17,540(sp)
  801608:	dc008617 	ldw	r16,536(sp)
  80160c:	dec09004 	addi	sp,sp,576
  801610:	f800283a 	ret
  {
   ATTR_LONG_NAME_MASK = Buffer[entry_num*32+attribute_offset] &0x3F;
   ATTR_LONG_NAME = Buffer[entry_num*32+attribute_offset] &0x0F;
    
    //Determine if the entry contains a long file name
    if (((Buffer[entry_num*32+attribute_offset] & ATTR_LONG_NAME_MASK) == ATTR_LONG_NAME) && (Buffer[entry_num*32+attribute_offset] != 0x08) && (Buffer[entry_num*32] != 0xE5)) //long filename
  801614:	00800204 	movi	r2,8
  801618:	20bfd726 	beq	r4,r2,801578 <search_for_filetype+0x1b4>
  80161c:	00803944 	movi	r2,229
  801620:	30bf9226 	beq	r6,r2,80146c <search_for_filetype+0xa8>
    {
      //longname_blocks is the amount of entrys that contain the long filename
      longname_blocks = (Buffer[entry_num*32] & 0xBF);
  801624:	34002fcc 	andi	r16,r6,191
      {
        longname[(longname_blocks-1)*13+13] = '\0';
      }
      
      //read the file name from the buffer and store it into longname[]
      while(longname_blocks > 0)
  801628:	803f9026 	beq	r16,zero,80146c <search_for_filetype+0xa8>
        longname[(longname_blocks-1)*13+10] = Buffer[entry_num*32+24];
        longname[(longname_blocks-1)*13+11] = Buffer[entry_num*32+28];
        longname[(longname_blocks-1)*13+12] = Buffer[entry_num*32+30];
      
        longname_blocks--;
        entry_num++;
  80162c:	94800044 	addi	r18,r18,1
        
        //if the entry number spans beyond the current sector, grab the next one
        if(entry_num*32 >= BPB_BytsPerSec)
  801630:	90c03fcc 	andi	r3,r18,255
  801634:	1806917a 	slli	r3,r3,5
  801638:	d0a77317 	ldw	r2,-25140(gp)
        {
          root_sector_count++;
          SD_read_lba(Buffer,directory + root_sector_count,1);
  80163c:	9809883a 	mov	r4,r19
  801640:	01800044 	movi	r6,1
        longname[(longname_blocks-1)*13+9] = Buffer[entry_num*32+22];
        longname[(longname_blocks-1)*13+10] = Buffer[entry_num*32+24];
        longname[(longname_blocks-1)*13+11] = Buffer[entry_num*32+28];
        longname[(longname_blocks-1)*13+12] = Buffer[entry_num*32+30];
      
        longname_blocks--;
  801644:	843fffc4 	addi	r16,r16,-1
        entry_num++;
        
        //if the entry number spans beyond the current sector, grab the next one
        if(entry_num*32 >= BPB_BytsPerSec)
  801648:	1880052e 	bgeu	r3,r2,801660 <search_for_filetype+0x29c>
      {
        longname[(longname_blocks-1)*13+13] = '\0';
      }
      
      //read the file name from the buffer and store it into longname[]
      while(longname_blocks > 0)
  80164c:	803ff71e 	bne	r16,zero,80162c <search_for_filetype+0x268>
  801650:	90803fcc 	andi	r2,r18,255
  801654:	1022917a 	slli	r17,r2,5
  801658:	894002c4 	addi	r5,r17,11
  80165c:	003f8306 	br	80146c <search_for_filetype+0xa8>
        entry_num++;
        
        //if the entry number spans beyond the current sector, grab the next one
        if(entry_num*32 >= BPB_BytsPerSec)
        {
          root_sector_count++;
  801660:	a1a9883a 	add	r20,r20,r6
          SD_read_lba(Buffer,directory + root_sector_count,1);
  801664:	ad0b883a 	add	r5,r21,r20
  801668:	0025883a 	mov	r18,zero
  80166c:	0800fc40 	call	800fc4 <SD_read_lba>
      {
        longname[(longname_blocks-1)*13+13] = '\0';
      }
      
      //read the file name from the buffer and store it into longname[]
      while(longname_blocks > 0)
  801670:	803fee1e 	bne	r16,zero,80162c <search_for_filetype+0x268>
  801674:	003ff606 	br	801650 <search_for_filetype+0x28c>
      //Either case increment to next entry
    }   
    else if(attribute & 0x10)
    {
      //Indicates a Directory, search the directory
      sub_directory = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  801678:	89800504 	addi	r6,r17,20
  80167c:	89400684 	addi	r5,r17,26
            (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
            (Buffer[entry_num*32 + FstClusHi_offset]) + 
            (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
      sub_directory = FirstSectorofCluster(sub_directory);
      if(!search_for_filetype(extension, df, sub_directory,0))
  801680:	d8800444 	addi	r2,sp,17
  801684:	1189883a 	add	r4,r2,r6
  801688:	1145883a 	add	r2,r2,r5
  80168c:	11c00003 	ldbu	r7,0(r2)
  801690:	20c00003 	ldbu	r3,0(r4)
  801694:	998d883a 	add	r6,r19,r6
  801698:	994b883a 	add	r5,r19,r5
  80169c:	19c7883a 	add	r3,r3,r7
  8016a0:	30800003 	ldbu	r2,0(r6)
  8016a4:	29000003 	ldbu	r4,0(r5)
  8016a8:	1806923a 	slli	r3,r3,8
  8016ac:	d1676143 	ldbu	r5,-25211(gp)
  8016b0:	2089883a 	add	r4,r4,r2
  8016b4:	20c9883a 	add	r4,r4,r3
  8016b8:	213fff84 	addi	r4,r4,-2
  8016bc:	0803eb80 	call	803eb8 <__mulsi3>
  8016c0:	d1a76d17 	ldw	r6,-25164(gp)
  8016c4:	d0e79017 	ldw	r3,-25024(gp)
  8016c8:	d9408417 	ldw	r5,528(sp)
  8016cc:	b809883a 	mov	r4,r23
  8016d0:	30cd883a 	add	r6,r6,r3
  8016d4:	118d883a 	add	r6,r2,r6
  8016d8:	000f883a 	mov	r7,zero
  8016dc:	08013c40 	call	8013c4 <search_for_filetype>
  8016e0:	103fa51e 	bne	r2,zero,801578 <search_for_filetype+0x1b4>
  else
  {
    //The subdirectory doesn't contain any more entries
    return 1;//entry not found
  }
}
  8016e4:	000b883a 	mov	r5,zero
  8016e8:	2805883a 	mov	r2,r5
  8016ec:	003fbd06 	br	8015e4 <search_for_filetype+0x220>
    SD_read_lba(Buffer,directory,1);
  }
  else
  {
    //Search the sub directory
    SD_read_lba(Buffer,sub_directory,1);
  8016f0:	9809883a 	mov	r4,r19
  8016f4:	800b883a 	mov	r5,r16
  8016f8:	01800044 	movi	r6,1
  8016fc:	0800fc40 	call	800fc4 <SD_read_lba>
    directory = sub_directory;
  801700:	802b883a 	mov	r21,r16
  801704:	04800084 	movi	r18,2
  801708:	003f4c06 	br	80143c <search_for_filetype+0x78>
  {
    //The entire volume has been searched
    if(file_number == 0)
    {
      //No files matching the file extension have been found
      printf("\nFile Extension %s not found",extension);
  80170c:	b80b883a 	mov	r5,r23
  801710:	01002074 	movhi	r4,129
  801714:	2106f304 	addi	r4,r4,7116
  801718:	08045d40 	call	8045d4 <printf>
  80171c:	003fb106 	br	8015e4 <search_for_filetype+0x220>
      entry_num=0;    
    }
  }
  
  //The Buffer[entry_num*32] is 0x00
  if(search_root)
  801720:	01400044 	movi	r5,1
  else
  {
    //The subdirectory doesn't contain any more entries
    return 1;//entry not found
  }
}
  801724:	2805883a 	mov	r2,r5
  801728:	003fae06 	br	8015e4 <search_for_filetype+0x220>
      //compare the current file's file extension to the extension to search for
      if(!strcmp(extension,fileext))
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
  80172c:	d9008417 	ldw	r4,528(sp)
  801730:	d9400104 	addi	r5,sp,4
  801734:	08047bc0 	call	8047bc <strcpy>
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  801738:	88c00704 	addi	r3,r17,28
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  80173c:	88800684 	addi	r2,r17,26
  801740:	89400504 	addi	r5,r17,20
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  801744:	d9800484 	addi	r6,sp,18
  801748:	30d3883a 	add	r9,r6,r3
  80174c:	e0d7883a 	add	r11,fp,r3
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  801750:	b089883a 	add	r4,r22,r2
  801754:	b14f883a 	add	r7,r22,r5
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  801758:	b0d1883a 	add	r8,r22,r3
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  80175c:	23000003 	ldbu	r12,0(r4)
  801760:	39800003 	ldbu	r6,0(r7)
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  801764:	42800003 	ldbu	r10,0(r8)
  801768:	49c00003 	ldbu	r7,0(r9)
  80176c:	5a000003 	ldbu	r8,0(r11)
  801770:	98c7883a 	add	r3,r19,r3
      if(!strcmp(extension,fileext))
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
  801774:	dac08417 	ldw	r11,528(sp)
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  801778:	9885883a 	add	r2,r19,r2
  80177c:	994b883a 	add	r5,r19,r5
  801780:	2a400003 	ldbu	r9,0(r5)
  801784:	11000003 	ldbu	r4,0(r2)
  801788:	330d883a 	add	r6,r6,r12
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  80178c:	18800003 	ldbu	r2,0(r3)
  801790:	5014923a 	slli	r10,r10,8
  801794:	4010963a 	slli	r8,r8,24
  801798:	380e943a 	slli	r7,r7,16
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  80179c:	300c923a 	slli	r6,r6,8
      if(!strcmp(extension,fileext))
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
  8017a0:	5c0002c5 	stb	r16,11(r11)
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
  8017a4:	d1676143 	ldbu	r5,-25211(gp)
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  8017a8:	2249883a 	add	r4,r4,r9
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  8017ac:	1284b03a 	or	r2,r2,r10
  8017b0:	3a0eb03a 	or	r7,r7,r8
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  8017b4:	2189883a 	add	r4,r4,r6
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  8017b8:	11c4b03a 	or	r2,r2,r7
      {
        if(file_count == file_number)
        {
          strcpy(df->Name, filename);
          df->Attr = attribute;
          df->Clus = (Buffer[entry_num*32 + FstClusLo_offset]) + 
  8017bc:	59000315 	stw	r4,12(r11)
              (Buffer[entry_num*32 + FstClusLo_offset + 1]<<8) +
              (Buffer[entry_num*32 + FstClusHi_offset]) + 
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
  8017c0:	58800415 	stw	r2,16(r11)
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
  8017c4:	213fff84 	addi	r4,r4,-2
  8017c8:	0803eb80 	call	803eb8 <__mulsi3>
  8017cc:	d1279017 	ldw	r4,-25024(gp)
  8017d0:	d0e76d17 	ldw	r3,-25164(gp)
          df->Posn = 0;
          file_count = 0;
          file_number = file_number + 1;
  8017d4:	000b883a 	mov	r5,zero
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
          df->Posn = 0;
          file_count = 0;
  8017d8:	d0275515 	stw	zero,-25260(gp)
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
  8017dc:	1907883a 	add	r3,r3,r4
  8017e0:	10c5883a 	add	r2,r2,r3
          df->Posn = 0;
          file_count = 0;
          file_number = file_number + 1;
  8017e4:	d1275617 	ldw	r4,-25256(gp)
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
  8017e8:	d8c08417 	ldw	r3,528(sp)
          df->Posn = 0;
          file_count = 0;
          file_number = file_number + 1;
  8017ec:	21000044 	addi	r4,r4,1
              (Buffer[entry_num*32 + FstClusHi_offset + 1]<<8);
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
  8017f0:	18800515 	stw	r2,20(r3)
  else
  {
    //The subdirectory doesn't contain any more entries
    return 1;//entry not found
  }
}
  8017f4:	2805883a 	mov	r2,r5
          df->FileSize = (Buffer[entry_num*32 + FileSize_offset]) | 
              (Buffer[entry_num*32 + FileSize_offset + 1]<<8) |
              (Buffer[entry_num*32 + FileSize_offset + 2]<<16) |
              (Buffer[entry_num*32 + FileSize_offset + 3]<<24);
          df->Sector = FirstSectorofCluster(df->Clus);
          df->Posn = 0;
  8017f8:	18000615 	stw	zero,24(r3)
          file_count = 0;
          file_number = file_number + 1;
  8017fc:	d1275615 	stw	r4,-25256(gp)
  801800:	003f7806 	br	8015e4 <search_for_filetype+0x220>

00801804 <CalcFATSecAndOffset>:
void CalcFATSecAndOffset(UINT32 N)
{
  BYTE  Buffer[512]={0};
  //Calculate The absolute FATOffset based on which File System is in use
  //Difference between FAT12, FAT16, FAT32 is based only on CountofClusters
  if(CountofClusters < 4085)
  801804:	d0e78617 	ldw	r3,-25064(gp)
//-------------------------------------------------------------------------
// Calculates the Next Cluster after cluster 'N'
// Finds the cluster 'N' in the File Allocation Table
// Cluster 'N's data contains the Next Cluster number 
void CalcFATSecAndOffset(UINT32 N)
{
  801808:	deff7c04 	addi	sp,sp,-528
  BYTE  Buffer[512]={0};
  //Calculate The absolute FATOffset based on which File System is in use
  //Difference between FAT12, FAT16, FAT32 is based only on CountofClusters
  if(CountofClusters < 4085)
  80180c:	0083fd04 	movi	r2,4084
//-------------------------------------------------------------------------
// Calculates the Next Cluster after cluster 'N'
// Finds the cluster 'N' in the File Allocation Table
// Cluster 'N's data contains the Next Cluster number 
void CalcFATSecAndOffset(UINT32 N)
{
  801810:	dc008015 	stw	r16,512(sp)
  801814:	dfc08315 	stw	ra,524(sp)
  801818:	dcc08215 	stw	r19,520(sp)
  80181c:	dc408115 	stw	r17,516(sp)
  801820:	2021883a 	mov	r16,r4
  BYTE  Buffer[512]={0};
  //Calculate The absolute FATOffset based on which File System is in use
  //Difference between FAT12, FAT16, FAT32 is based only on CountofClusters
  if(CountofClusters < 4085)
  801824:	10c03036 	bltu	r2,r3,8018e8 <CalcFATSecAndOffset+0xe4>
  {
    //FAT12
    // Multiply by 1.5 without using floating point, the divide by 2 rounds DOWN
    FATOffset = N + (N / 2);
  801828:	2004d07a 	srli	r2,r4,1
  80182c:	2085883a 	add	r2,r4,r2
  801830:	d0a76315 	stw	r2,-25204(gp)
  801834:	1023883a 	mov	r17,r2
    //FAT32
    FATOffset = N * 4;
  }

  //FAT Sector
  ThisFATSecNum = BPB_RsvdSecCnt + (FATOffset / BPB_BytsPerSec);
  801838:	d4e77317 	ldw	r19,-25140(gp)
  80183c:	8809883a 	mov	r4,r17
  801840:	980b883a 	mov	r5,r19
  801844:	0803ea80 	call	803ea8 <__udivsi3>
  801848:	d0e78817 	ldw	r3,-25056(gp)
  //FAT Offset
  ThisFATEntOffset = FATOffset % BPB_BytsPerSec;
  80184c:	8809883a 	mov	r4,r17
  801850:	980b883a 	mov	r5,r19
    //FAT32
    FATOffset = N * 4;
  }

  //FAT Sector
  ThisFATSecNum = BPB_RsvdSecCnt + (FATOffset / BPB_BytsPerSec);
  801854:	10e3883a 	add	r17,r2,r3
  801858:	d4678015 	stw	r17,-25088(gp)
  //FAT Offset
  ThisFATEntOffset = FATOffset % BPB_BytsPerSec;
  80185c:	0803eb00 	call	803eb0 <__umodsi3>
  
  //Store the FAT Sector into Buffer[512]
  SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum,1);
  801860:	d0e79017 	ldw	r3,-25024(gp)
// Calculates the Next Cluster after cluster 'N'
// Finds the cluster 'N' in the File Allocation Table
// Cluster 'N's data contains the Next Cluster number 
void CalcFATSecAndOffset(UINT32 N)
{
  BYTE  Buffer[512]={0};
  801864:	01808004 	movi	r6,512
  801868:	d809883a 	mov	r4,sp
  ThisFATSecNum = BPB_RsvdSecCnt + (FATOffset / BPB_BytsPerSec);
  //FAT Offset
  ThisFATEntOffset = FATOffset % BPB_BytsPerSec;
  
  //Store the FAT Sector into Buffer[512]
  SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum,1);
  80186c:	88e3883a 	add	r17,r17,r3
// Calculates the Next Cluster after cluster 'N'
// Finds the cluster 'N' in the File Allocation Table
// Cluster 'N's data contains the Next Cluster number 
void CalcFATSecAndOffset(UINT32 N)
{
  BYTE  Buffer[512]={0};
  801870:	000b883a 	mov	r5,zero
  }

  //FAT Sector
  ThisFATSecNum = BPB_RsvdSecCnt + (FATOffset / BPB_BytsPerSec);
  //FAT Offset
  ThisFATEntOffset = FATOffset % BPB_BytsPerSec;
  801874:	d0a77115 	stw	r2,-25148(gp)
// Calculates the Next Cluster after cluster 'N'
// Finds the cluster 'N' in the File Allocation Table
// Cluster 'N's data contains the Next Cluster number 
void CalcFATSecAndOffset(UINT32 N)
{
  BYTE  Buffer[512]={0};
  801878:	08044bc0 	call	8044bc <memset>
  ThisFATSecNum = BPB_RsvdSecCnt + (FATOffset / BPB_BytsPerSec);
  //FAT Offset
  ThisFATEntOffset = FATOffset % BPB_BytsPerSec;
  
  //Store the FAT Sector into Buffer[512]
  SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum,1);
  80187c:	d809883a 	mov	r4,sp
  801880:	880b883a 	mov	r5,r17
  801884:	01800044 	movi	r6,1
  801888:	0800fc40 	call	800fc4 <SD_read_lba>

//FATClusEntryVal is the next cluster for cluster 'N'
if(CountofClusters < 4085)
  80188c:	d0e78617 	ldw	r3,-25064(gp)
  801890:	0083fd04 	movi	r2,4084
  801894:	10c01b36 	bltu	r2,r3,801904 <CalcFATSecAndOffset+0x100>
  {
    //FAT12
    if(ThisFATEntOffset != 511)
  801898:	d0e77117 	ldw	r3,-25148(gp)
  80189c:	00807fc4 	movi	r2,511
  8018a0:	18804a26 	beq	r3,r2,8019cc <CalcFATSecAndOffset+0x1c8>
    {
      if(N & 0x0001)
  8018a4:	8080004c 	andi	r2,r16,1
  8018a8:	1005003a 	cmpeq	r2,r2,zero
  8018ac:	10003e1e 	bne	r2,zero,8019a8 <CalcFATSecAndOffset+0x1a4>
      {
        // Cluster number is ODD
        FAT12ClusEntryVal = (((Buffer[ThisFATEntOffset] & 0xF0) |
  8018b0:	d8c5883a 	add	r2,sp,r3
  8018b4:	10c00043 	ldbu	r3,1(r2)
  8018b8:	11000003 	ldbu	r4,0(r2)
  8018bc:	1806923a 	slli	r3,r3,8
  8018c0:	20c8b03a 	or	r4,r4,r3
  8018c4:	200ed13a 	srli	r7,r4,4
  8018c8:	d1e77715 	stw	r7,-25124(gp)
    {
      FAT12ClusEntryVal = (Buffer[511] & 0xFF);
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
      FAT12ClusEntryVal = (FAT12ClusEntryVal | ((Buffer[0] & 0x0F)<<8));
    }
    FATClusEntryVal = FAT12ClusEntryVal;
  8018cc:	d1e77915 	stw	r7,-25116(gp)
                        (Buffer[ThisFATEntOffset+2]<<16) |
                        (Buffer[ThisFATEntOffset+3]<<24)) & 0x0FFFFFFF;
    FATClusEntryVal = FAT32ClusEntryVal;
  }
  
}
  8018d0:	dfc08317 	ldw	ra,524(sp)
  8018d4:	dcc08217 	ldw	r19,520(sp)
  8018d8:	dc408117 	ldw	r17,516(sp)
  8018dc:	dc008017 	ldw	r16,512(sp)
  8018e0:	dec08404 	addi	sp,sp,528
  8018e4:	f800283a 	ret
  {
    //FAT12
    // Multiply by 1.5 without using floating point, the divide by 2 rounds DOWN
    FATOffset = N + (N / 2);
  }
  else if(CountofClusters < 65525)
  8018e8:	00bffd14 	movui	r2,65524
  8018ec:	10c02a2e 	bgeu	r2,r3,801998 <CalcFATSecAndOffset+0x194>
    FATOffset = N * 2;
  }
  else
  {
    //FAT32
    FATOffset = N * 4;
  8018f0:	2105883a 	add	r2,r4,r4
  8018f4:	1085883a 	add	r2,r2,r2
  8018f8:	1023883a 	mov	r17,r2
  8018fc:	d0a76315 	stw	r2,-25204(gp)
  801900:	003fcd06 	br	801838 <CalcFATSecAndOffset+0x34>
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
      FAT12ClusEntryVal = (FAT12ClusEntryVal | ((Buffer[0] & 0x0F)<<8));
    }
    FATClusEntryVal = FAT12ClusEntryVal;
  }
  else if(CountofClusters < 65525)
  801904:	00bffd14 	movui	r2,65524
  801908:	10c00e36 	bltu	r2,r3,801944 <CalcFATSecAndOffset+0x140>
  {
    //FAT16
    FAT16ClusEntryVal = (Buffer[ThisFATEntOffset] |
  80190c:	d0e77117 	ldw	r3,-25148(gp)
  801910:	d8c9883a 	add	r4,sp,r3
  801914:	20800043 	ldbu	r2,1(r4)
  801918:	20c00003 	ldbu	r3,0(r4)
  80191c:	1004923a 	slli	r2,r2,8
  801920:	1886b03a 	or	r3,r3,r2
        (Buffer[ThisFATEntOffset+1]<<8));
    FATClusEntryVal = FAT16ClusEntryVal;
  801924:	d0e77915 	stw	r3,-25116(gp)
    FATClusEntryVal = FAT12ClusEntryVal;
  }
  else if(CountofClusters < 65525)
  {
    //FAT16
    FAT16ClusEntryVal = (Buffer[ThisFATEntOffset] |
  801928:	d0e77015 	stw	r3,-25152(gp)
                        (Buffer[ThisFATEntOffset+2]<<16) |
                        (Buffer[ThisFATEntOffset+3]<<24)) & 0x0FFFFFFF;
    FATClusEntryVal = FAT32ClusEntryVal;
  }
  
}
  80192c:	dfc08317 	ldw	ra,524(sp)
  801930:	dcc08217 	ldw	r19,520(sp)
  801934:	dc408117 	ldw	r17,516(sp)
  801938:	dc008017 	ldw	r16,512(sp)
  80193c:	dec08404 	addi	sp,sp,528
  801940:	f800283a 	ret
    FATClusEntryVal = FAT16ClusEntryVal;
  }
  else
  {
    //FAT32
    FAT32ClusEntryVal = (Buffer[ThisFATEntOffset] |
  801944:	d0a77117 	ldw	r2,-25148(gp)
  801948:	d889883a 	add	r4,sp,r2
  80194c:	214000c3 	ldbu	r5,3(r4)
  801950:	20800083 	ldbu	r2,2(r4)
  801954:	21800043 	ldbu	r6,1(r4)
  801958:	280a963a 	slli	r5,r5,24
  80195c:	1004943a 	slli	r2,r2,16
  801960:	300c923a 	slli	r6,r6,8
  801964:	20c00003 	ldbu	r3,0(r4)
  801968:	1144b03a 	or	r2,r2,r5
  80196c:	1083ffec 	andhi	r2,r2,4095
  801970:	1986b03a 	or	r3,r3,r6
  801974:	10c4b03a 	or	r2,r2,r3
                        (Buffer[ThisFATEntOffset+1]<<8) |
                        (Buffer[ThisFATEntOffset+2]<<16) |
                        (Buffer[ThisFATEntOffset+3]<<24)) & 0x0FFFFFFF;
    FATClusEntryVal = FAT32ClusEntryVal;
  801978:	d0a77915 	stw	r2,-25116(gp)
    FATClusEntryVal = FAT16ClusEntryVal;
  }
  else
  {
    //FAT32
    FAT32ClusEntryVal = (Buffer[ThisFATEntOffset] |
  80197c:	d0a75e15 	stw	r2,-25224(gp)
                        (Buffer[ThisFATEntOffset+2]<<16) |
                        (Buffer[ThisFATEntOffset+3]<<24)) & 0x0FFFFFFF;
    FATClusEntryVal = FAT32ClusEntryVal;
  }
  
}
  801980:	dfc08317 	ldw	ra,524(sp)
  801984:	dcc08217 	ldw	r19,520(sp)
  801988:	dc408117 	ldw	r17,516(sp)
  80198c:	dc008017 	ldw	r16,512(sp)
  801990:	dec08404 	addi	sp,sp,528
  801994:	f800283a 	ret
    FATOffset = N + (N / 2);
  }
  else if(CountofClusters < 65525)
  {
    //FAT16
    FATOffset = N * 2;
  801998:	2105883a 	add	r2,r4,r4
  80199c:	1023883a 	mov	r17,r2
  8019a0:	d0a76315 	stw	r2,-25204(gp)
  8019a4:	003fa406 	br	801838 <CalcFATSecAndOffset+0x34>
            (Buffer[ThisFATEntOffset+1]<<8))>>4); 
      }
      else
      {
        // Cluster number is EVEN
        FAT12ClusEntryVal = ((Buffer[ThisFATEntOffset] |
  8019a8:	d8c5883a 	add	r2,sp,r3
  8019ac:	10c00043 	ldbu	r3,1(r2)
  8019b0:	11000003 	ldbu	r4,0(r2)
  8019b4:	1806923a 	slli	r3,r3,8
  8019b8:	20c8b03a 	or	r4,r4,r3
  8019bc:	21c3ffcc 	andi	r7,r4,4095
  8019c0:	d1e77715 	stw	r7,-25124(gp)
    {
      FAT12ClusEntryVal = (Buffer[511] & 0xFF);
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
      FAT12ClusEntryVal = (FAT12ClusEntryVal | ((Buffer[0] & 0x0F)<<8));
    }
    FATClusEntryVal = FAT12ClusEntryVal;
  8019c4:	d1e77915 	stw	r7,-25116(gp)
  8019c8:	003fc106 	br	8018d0 <CalcFATSecAndOffset+0xcc>
      }
    }
    else
    {
      FAT12ClusEntryVal = (Buffer[511] & 0xFF);
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
  8019cc:	d1679017 	ldw	r5,-25024(gp)
  8019d0:	d0a78017 	ldw	r2,-25088(gp)
            (Buffer[ThisFATEntOffset+1]<<8)) & 0x0FFF); 
      }
    }
    else
    {
      FAT12ClusEntryVal = (Buffer[511] & 0xFF);
  8019d4:	d9c07fc3 	ldbu	r7,511(sp)
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
  8019d8:	29400044 	addi	r5,r5,1
  8019dc:	288b883a 	add	r5,r5,r2
  8019e0:	d809883a 	mov	r4,sp
  8019e4:	01800044 	movi	r6,1
            (Buffer[ThisFATEntOffset+1]<<8)) & 0x0FFF); 
      }
    }
    else
    {
      FAT12ClusEntryVal = (Buffer[511] & 0xFF);
  8019e8:	d1e77715 	stw	r7,-25124(gp)
      SD_read_lba(Buffer,MBR_BS_Location + ThisFATSecNum + 1,1);
  8019ec:	0800fc40 	call	800fc4 <SD_read_lba>
      FAT12ClusEntryVal = (FAT12ClusEntryVal | ((Buffer[0] & 0x0F)<<8));
  8019f0:	d8c00003 	ldbu	r3,0(sp)
  8019f4:	d1e77717 	ldw	r7,-25124(gp)
  8019f8:	18c003cc 	andi	r3,r3,15
  8019fc:	1806923a 	slli	r3,r3,8
  801a00:	38ceb03a 	or	r7,r7,r3
  801a04:	d1e77715 	stw	r7,-25124(gp)
    }
    FATClusEntryVal = FAT12ClusEntryVal;
  801a08:	d1e77915 	stw	r7,-25116(gp)
  801a0c:	003fb006 	br	8018d0 <CalcFATSecAndOffset+0xcc>

00801a10 <build_cluster_chain>:
//-------------------------------------------------------------------------
// Buffers the cluster chain of a file so that it can be streamed
void build_cluster_chain(int cc[],UINT32 length, data_file *df)
{
  int i=1;
  cc[0] = df->Clus;
  801a10:	30c00317 	ldw	r3,12(r6)
  return IsEOF;
}
//-------------------------------------------------------------------------
// Buffers the cluster chain of a file so that it can be streamed
void build_cluster_chain(int cc[],UINT32 length, data_file *df)
{
  801a14:	defff704 	addi	sp,sp,-36
  801a18:	dc000015 	stw	r16,0(sp)
  int i=1;
  cc[0] = df->Clus;
  801a1c:	20c00015 	stw	r3,0(r4)
  return IsEOF;
}
//-------------------------------------------------------------------------
// Buffers the cluster chain of a file so that it can be streamed
void build_cluster_chain(int cc[],UINT32 length, data_file *df)
{
  801a20:	2021883a 	mov	r16,r4
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);
  801a24:	1809883a 	mov	r4,r3
  return IsEOF;
}
//-------------------------------------------------------------------------
// Buffers the cluster chain of a file so that it can be streamed
void build_cluster_chain(int cc[],UINT32 length, data_file *df)
{
  801a28:	dc800215 	stw	r18,8(sp)
  801a2c:	dfc00815 	stw	ra,32(sp)
  801a30:	ddc00715 	stw	r23,28(sp)
  801a34:	dd800615 	stw	r22,24(sp)
  801a38:	dd400515 	stw	r21,20(sp)
  801a3c:	dd000415 	stw	r20,16(sp)
  801a40:	dcc00315 	stw	r19,12(sp)
  801a44:	dc400115 	stw	r17,4(sp)
  801a48:	2825883a 	mov	r18,r5
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);
  801a4c:	08018040 	call	801804 <CalcFATSecAndOffset>

  while(i<length)
  801a50:	00800044 	movi	r2,1
  801a54:	14800f2e 	bgeu	r2,r18,801a94 <build_cluster_chain+0x84>
  801a58:	1023883a 	mov	r17,r2
  801a5c:	04c3fd04 	movi	r19,4084
  801a60:	0543fdc4 	movi	r21,4087
  801a64:	053ffd14 	movui	r20,65524
  801a68:	05fffdd4 	movui	r23,65527
  801a6c:	05840034 	movhi	r22,4096
  801a70:	b5bffdc4 	addi	r22,r22,-9
  {
    cc[i]=FATClusEntryVal;
  801a74:	d1277917 	ldw	r4,-25116(gp)
// Returns 0 if there are more clusters
BYTE  isEOF(UINT32  FATContent)
{
  BYTE IsEOF = 0;
  
  if(CountofClusters < 4085)
  801a78:	d0a78617 	ldw	r2,-25064(gp)
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  {
    cc[i]=FATClusEntryVal;
  801a7c:	81000115 	stw	r4,4(r16)
// Returns 0 if there are more clusters
BYTE  isEOF(UINT32  FATContent)
{
  BYTE IsEOF = 0;
  
  if(CountofClusters < 4085)
  801a80:	98800f36 	bltu	r19,r2,801ac0 <build_cluster_chain+0xb0>
  {
    //FAT12
    if(FATContent >= 0x0FF8)
  801a84:	a900102e 	bgeu	r21,r4,801ac8 <build_cluster_chain+0xb8>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  801a88:	8c400044 	addi	r17,r17,1
  801a8c:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  801a90:	8cbff81e 	bne	r17,r18,801a74 <build_cluster_chain+0x64>
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  }
}
  801a94:	dfc00817 	ldw	ra,32(sp)
  801a98:	ddc00717 	ldw	r23,28(sp)
  801a9c:	dd800617 	ldw	r22,24(sp)
  801aa0:	dd400517 	ldw	r21,20(sp)
  801aa4:	dd000417 	ldw	r20,16(sp)
  801aa8:	dcc00317 	ldw	r19,12(sp)
  801aac:	dc800217 	ldw	r18,8(sp)
  801ab0:	dc400117 	ldw	r17,4(sp)
  801ab4:	dc000017 	ldw	r16,0(sp)
  801ab8:	dec00904 	addi	sp,sp,36
  801abc:	f800283a 	ret
  {
    //FAT12
    if(FATContent >= 0x0FF8)
    IsEOF = 1;
  }
  else if(CountofClusters < 65525)
  801ac0:	a0800636 	bltu	r20,r2,801adc <build_cluster_chain+0xcc>
  {
    //FAT16
    if(FATContent >= 0xFFF8)
  801ac4:	b93ff036 	bltu	r23,r4,801a88 <build_cluster_chain+0x78>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  801ac8:	8c400044 	addi	r17,r17,1
  while(i<length)
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
  801acc:	08018040 	call	801804 <CalcFATSecAndOffset>
    i++;
  801ad0:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  801ad4:	8cbfe71e 	bne	r17,r18,801a74 <build_cluster_chain+0x64>
  801ad8:	003fee06 	br	801a94 <build_cluster_chain+0x84>
    IsEOF = 1;
  }
  else
  {
    //FAT32
    if(FATContent >= 0x0FFFFFF8)
  801adc:	b13ffa2e 	bgeu	r22,r4,801ac8 <build_cluster_chain+0xb8>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  801ae0:	8c400044 	addi	r17,r17,1
  801ae4:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  801ae8:	8cbfe21e 	bne	r17,r18,801a74 <build_cluster_chain+0x64>
  801aec:	003fe906 	br	801a94 <build_cluster_chain+0x84>

00801af0 <init_bs>:
  }
}
//-------------------------------------------------------------------------
// Initialize the Boot Sector
BYTE init_bs(void)
{
  801af0:	deff7404 	addi	sp,sp,-560
  BYTE Buffer[512]={0};
  801af4:	000b883a 	mov	r5,zero
  801af8:	01808004 	movi	r6,512
  801afc:	d809883a 	mov	r4,sp
  }
}
//-------------------------------------------------------------------------
// Initialize the Boot Sector
BYTE init_bs(void)
{
  801b00:	dfc08b15 	stw	ra,556(sp)
  801b04:	df008a15 	stw	fp,552(sp)
  801b08:	ddc08915 	stw	r23,548(sp)
  801b0c:	dd808815 	stw	r22,544(sp)
  801b10:	dd408715 	stw	r21,540(sp)
  801b14:	dd008615 	stw	r20,536(sp)
  801b18:	dcc08515 	stw	r19,532(sp)
  801b1c:	dc808415 	stw	r18,528(sp)
  801b20:	dc408315 	stw	r17,524(sp)
  801b24:	dc008215 	stw	r16,520(sp)
  BYTE Buffer[512]={0};
  801b28:	08044bc0 	call	8044bc <memset>
  
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer
  801b2c:	d1679017 	ldw	r5,-25024(gp)
  801b30:	d809883a 	mov	r4,sp
  801b34:	01800044 	movi	r6,1
  801b38:	0800fc40 	call	800fc4 <SD_read_lba>

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  801b3c:	d8c07f83 	ldbu	r3,510(sp)
  801b40:	00801544 	movi	r2,85
  801b44:	18800e26 	beq	r3,r2,801b80 <init_bs+0x90>
    // Volume is FAT32
      strcpy(FATType,"FAT32");
      printf("\nFile System: %s",FATType);
    }
*/
    return 0; //OK
  801b48:	00c00044 	movi	r3,1
  }
  else
  {
    return 1; //error
  }
}
  801b4c:	1805883a 	mov	r2,r3
  801b50:	dfc08b17 	ldw	ra,556(sp)
  801b54:	df008a17 	ldw	fp,552(sp)
  801b58:	ddc08917 	ldw	r23,548(sp)
  801b5c:	dd808817 	ldw	r22,544(sp)
  801b60:	dd408717 	ldw	r21,540(sp)
  801b64:	dd008617 	ldw	r20,536(sp)
  801b68:	dcc08517 	ldw	r19,532(sp)
  801b6c:	dc808417 	ldw	r18,528(sp)
  801b70:	dc408317 	ldw	r17,524(sp)
  801b74:	dc008217 	ldw	r16,520(sp)
  801b78:	dec08c04 	addi	sp,sp,560
  801b7c:	f800283a 	ret
{
  BYTE Buffer[512]={0};
  
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  801b80:	d8c07fc3 	ldbu	r3,511(sp)
  801b84:	00802a84 	movi	r2,170
  801b88:	18bfef1e 	bne	r3,r2,801b48 <init_bs+0x58>
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
  801b8c:	d8800303 	ldbu	r2,12(sp)
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
  801b90:	d8c003c3 	ldbu	r3,15(sp)
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
  801b94:	d94002c3 	ldbu	r5,11(sp)
  801b98:	1004923a 	slli	r2,r2,8
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
  801b9c:	da000383 	ldbu	r8,14(sp)
  801ba0:	1806923a 	slli	r3,r3,8
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
  801ba4:	288b883a 	add	r5,r5,r2

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
  801ba8:	d8800083 	ldbu	r2,2(sp)
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
  801bac:	40f9883a 	add	fp,r8,r3
  
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
  801bb0:	d2276c44 	addi	r8,gp,-25167
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
  801bb4:	40800085 	stb	r2,2(r8)
  
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
  801bb8:	d8800003 	ldbu	r2,0(sp)
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
  801bbc:	d8c00283 	ldbu	r3,10(sp)
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
  801bc0:	d1a77c84 	addi	r6,gp,-25102
  
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
  801bc4:	d0a76c45 	stb	r2,-25167(gp)
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
  801bc8:	d88000c3 	ldbu	r2,3(sp)
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
  801bcc:	30c001c5 	stb	r3,7(r6)
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
    BS_JmpBoot[1] = Buffer[1];
  801bd0:	d8c00043 	ldbu	r3,1(sp)
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
  801bd4:	d0a77c85 	stb	r2,-25102(gp)
    BS_OEMName[1] = Buffer[4];
    BS_OEMName[2] = Buffer[5];
  801bd8:	d8800143 	ldbu	r2,5(sp)
  SD_read_lba(Buffer,MBR_BS_Location,1);  //Store boot sector in Buffer

  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    BS_JmpBoot[0] = Buffer[0];
    BS_JmpBoot[1] = Buffer[1];
  801bdc:	40c00045 	stb	r3,1(r8)
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
    BS_OEMName[1] = Buffer[4];
  801be0:	d8c00103 	ldbu	r3,4(sp)
    BS_OEMName[2] = Buffer[5];
  801be4:	30800085 	stb	r2,2(r6)
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
  801be8:	d88001c3 	ldbu	r2,7(sp)
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
  801bec:	d9000343 	ldbu	r4,13(sp)
  {
    BS_JmpBoot[0] = Buffer[0];
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
    BS_OEMName[1] = Buffer[4];
  801bf0:	30c00045 	stb	r3,1(r6)
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
  801bf4:	d8c00183 	ldbu	r3,6(sp)
    BS_OEMName[4] = Buffer[7];
  801bf8:	30800105 	stb	r2,4(r6)
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
  801bfc:	d8800243 	ldbu	r2,9(sp)
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
  801c00:	d9008145 	stb	r4,517(sp)
    BS_JmpBoot[1] = Buffer[1];
    BS_JmpBoot[2] = Buffer[2];
    BS_OEMName[0] = Buffer[3];
    BS_OEMName[1] = Buffer[4];
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
  801c04:	30c000c5 	stb	r3,3(r6)
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
  801c08:	d9000403 	ldbu	r4,16(sp)
    BS_OEMName[0] = Buffer[3];
    BS_OEMName[1] = Buffer[4];
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
  801c0c:	d8c00203 	ldbu	r3,8(sp)
    BS_OEMName[6] = Buffer[9];
  801c10:	30800185 	stb	r2,6(r6)
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
  801c14:	d8808143 	ldbu	r2,517(sp)
    BS_OEMName[0] = Buffer[3];
    BS_OEMName[1] = Buffer[4];
    BS_OEMName[2] = Buffer[5];
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
  801c18:	30c00145 	stb	r3,5(r6)
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
  801c1c:	d9008105 	stb	r4,516(sp)
    BS_OEMName[3] = Buffer[6];
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
  801c20:	d1677315 	stw	r5,-25140(gp)
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
  801c24:	d9c00483 	ldbu	r7,18(sp)
  801c28:	d9000443 	ldbu	r4,17(sp)
    BS_OEMName[4] = Buffer[7];
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
  801c2c:	d0a76145 	stb	r2,-25211(gp)
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
  801c30:	d8808103 	ldbu	r2,516(sp)
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801c34:	db000843 	ldbu	r12,33(sp)
  801c38:	da000883 	ldbu	r8,34(sp)
  801c3c:	da8008c3 	ldbu	r10,35(sp)
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
  801c40:	d0a76e05 	stb	r2,-25160(gp)
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801c44:	6018923a 	slli	r12,r12,8
  801c48:	5014963a 	slli	r10,r10,24
  801c4c:	4010943a 	slli	r8,r8,16
  801c50:	d8800803 	ldbu	r2,32(sp)
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
  801c54:	380e923a 	slli	r7,r7,8
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801c58:	4291883a 	add	r8,r8,r10
  801c5c:	1305883a 	add	r2,r2,r12
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801c60:	dc400743 	ldbu	r17,29(sp)
  801c64:	da400783 	ldbu	r9,30(sp)
  801c68:	dac007c3 	ldbu	r11,31(sp)
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801c6c:	1205883a 	add	r2,r2,r8
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
  801c70:	db400503 	ldbu	r13,20(sp)
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
  801c74:	db8005c3 	ldbu	r14,23(sp)
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
  801c78:	dbc00643 	ldbu	r15,25(sp)
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
  801c7c:	dc0006c3 	ldbu	r16,27(sp)
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
  801c80:	21c9883a 	add	r4,r4,r7
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801c84:	d8808015 	stw	r2,512(sp)
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
  801c88:	d8800543 	ldbu	r2,21(sp)
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
  801c8c:	d1276215 	stw	r4,-25208(gp)
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801c90:	5816963a 	slli	r11,r11,24
  801c94:	8822923a 	slli	r17,r17,8
  801c98:	4812943a 	slli	r9,r9,16
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
    
    //count of sectors occupied by the root directory
    RootDirSectors = ((BPB_RootEntCnt*32) + (BPB_BytsPerSec - 1))/BPB_BytsPerSec;
  801c9c:	2008917a 	slli	r4,r4,5
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801ca0:	d9c00703 	ldbu	r7,28(sp)
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
  801ca4:	681a923a 	slli	r13,r13,8
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
  801ca8:	701c923a 	slli	r14,r14,8
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
  801cac:	781e923a 	slli	r15,r15,8
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
  801cb0:	dc8004c3 	ldbu	r18,19(sp)
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
  801cb4:	8020923a 	slli	r16,r16,8
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
  801cb8:	dcc00583 	ldbu	r19,22(sp)
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
  801cbc:	d8c00603 	ldbu	r3,24(sp)
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
  801cc0:	d9800683 	ldbu	r6,26(sp)
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
  801cc4:	d0a78e05 	stb	r2,-25032(gp)
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801cc8:	d8808017 	ldw	r2,512(sp)
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801ccc:	4ad3883a 	add	r9,r9,r11
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
    
    //count of sectors occupied by the root directory
    RootDirSectors = ((BPB_RootEntCnt*32) + (BPB_BytsPerSec - 1))/BPB_BytsPerSec;
  801cd0:	2909883a 	add	r4,r5,r4
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801cd4:	3c4f883a 	add	r7,r7,r17
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
  801cd8:	936f883a 	add	r23,r18,r13
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
  801cdc:	1bc7883a 	add	r3,r3,r15
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
  801ce0:	9ba5883a 	add	r18,r19,r14
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
  801ce4:	340d883a 	add	r6,r6,r16
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801ce8:	3a4f883a 	add	r7,r7,r9
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
    
    //count of sectors occupied by the root directory
    RootDirSectors = ((BPB_RootEntCnt*32) + (BPB_BytsPerSec - 1))/BPB_BytsPerSec;
  801cec:	213fffc4 	addi	r4,r4,-1
    BS_OEMName[5] = Buffer[8];
    BS_OEMName[6] = Buffer[9];
    BS_OEMName[7] = Buffer[10];
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
  801cf0:	d7278815 	stw	fp,-25056(gp)
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
  801cf4:	d0e76815 	stw	r3,-25184(gp)
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
  801cf8:	d1a78a15 	stw	r6,-25048(gp)
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
  801cfc:	d1e76915 	stw	r7,-25180(gp)
    BPB_BytsPerSec = Buffer[11] + (Buffer[12]<<8);
    BPB_SecPerClus = Buffer[13];
    BPB_RsvdSecCnt = Buffer[14] + (Buffer[15]<<8);
    BPB_NumFATs = Buffer[16];
    BPB_RootEntCnt = Buffer[17] + (Buffer[18]<<8);
    BPB_TotSec16 = Buffer[19] + (Buffer[20]<<8);
  801d00:	d5e77a15 	stw	r23,-25112(gp)
    BPB_Media = Buffer[21];
    BPB_FATSz16 = Buffer[22] + (Buffer[23]<<8);
  801d04:	d4a76f15 	stw	r18,-25156(gp)
    BPB_SecPerTrk = Buffer[24] + (Buffer[25]<<8);
    BPB_NumHeads = Buffer[26] + (Buffer[27]<<8);
    BPB_HiddSec = Buffer[28] + (Buffer[29]<<8) + (Buffer[30]<<16) + (Buffer[31]<<24);
    BPB_TotSec32 = Buffer[32] + (Buffer[33]<<8) + (Buffer[34]<<16) + (Buffer[35]<<24);
  801d08:	d0a78315 	stw	r2,-25076(gp)
    
    //count of sectors occupied by the root directory
    RootDirSectors = ((BPB_RootEntCnt*32) + (BPB_BytsPerSec - 1))/BPB_BytsPerSec;
  801d0c:	0803ea80 	call	803ea8 <__udivsi3>
  801d10:	102d883a 	mov	r22,r2
  801d14:	d0a78715 	stw	r2,-25060(gp)
    
    if(BPB_FATSz16 != 0)
  801d18:	90007b1e 	bne	r18,zero,801f08 <init_bs+0x418>
    }
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
  801d1c:	dd400943 	ldbu	r21,37(sp)
  801d20:	d8800983 	ldbu	r2,38(sp)
  801d24:	dc4009c3 	ldbu	r17,39(sp)
  801d28:	d9000903 	ldbu	r4,36(sp)
  801d2c:	a82a923a 	slli	r21,r21,8
  801d30:	1004943a 	slli	r2,r2,16
  801d34:	8822963a 	slli	r17,r17,24
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
  801d38:	dc800b43 	ldbu	r18,45(sp)
  801d3c:	da800b83 	ldbu	r10,46(sp)
  801d40:	db400bc3 	ldbu	r13,47(sp)
    }
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
  801d44:	1445883a 	add	r2,r2,r17
  801d48:	2549883a 	add	r4,r4,r21
  801d4c:	2089883a 	add	r4,r4,r2
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801d50:	db801103 	ldbu	r14,68(sp)
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + RootDirSectors;
    }
    else
    {
      FATSz = BPB_FATSz32;
  801d54:	d0a77417 	ldw	r2,-25136(gp)
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801d58:	dac01143 	ldbu	r11,69(sp)
  801d5c:	db001183 	ldbu	r12,70(sp)
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
  801d60:	681a963a 	slli	r13,r13,24
  801d64:	d8c00b03 	ldbu	r3,44(sp)
  801d68:	9024923a 	slli	r18,r18,8
  801d6c:	5014943a 	slli	r10,r10,16
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
  801d70:	dbc00a43 	ldbu	r15,41(sp)
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
  801d74:	dc000ac3 	ldbu	r16,43(sp)
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
  801d78:	dcc00c43 	ldbu	r19,49(sp)
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
  801d7c:	dd000cc3 	ldbu	r20,51(sp)
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801d80:	701c923a 	slli	r14,r14,8
  801d84:	6018963a 	slli	r12,r12,24
  801d88:	da4010c3 	ldbu	r9,67(sp)
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
  801d8c:	5355883a 	add	r10,r10,r13
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + RootDirSectors;
    }
    else
    {
      FATSz = BPB_FATSz32;
  801d90:	d0a77515 	stw	r2,-25132(gp)
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801d94:	5816943a 	slli	r11,r11,16
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
  801d98:	d8801003 	ldbu	r2,64(sp)
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
  801d9c:	1c87883a 	add	r3,r3,r18
  801da0:	1a87883a 	add	r3,r3,r10
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
  801da4:	781e923a 	slli	r15,r15,8
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
  801da8:	8020923a 	slli	r16,r16,8
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
  801dac:	d9400a03 	ldbu	r5,40(sp)
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
  801db0:	d9800a83 	ldbu	r6,42(sp)
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
  801db4:	d9c00c03 	ldbu	r7,48(sp)
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
  801db8:	da000c83 	ldbu	r8,50(sp)
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
  801dbc:	9826923a 	slli	r19,r19,8
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
  801dc0:	a028923a 	slli	r20,r20,8
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
  801dc4:	d0e76415 	stw	r3,-25200(gp)
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
  801dc8:	d8c01083 	ldbu	r3,66(sp)
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801dcc:	4b93883a 	add	r9,r9,r14
  801dd0:	5b17883a 	add	r11,r11,r12
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
  801dd4:	d0a76705 	stb	r2,-25188(gp)
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
  801dd8:	d88011c3 	ldbu	r2,71(sp)
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
  801ddc:	2bcb883a 	add	r5,r5,r15
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
  801de0:	340d883a 	add	r6,r6,r16
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
  801de4:	3ccf883a 	add	r7,r7,r19
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
  801de8:	4511883a 	add	r8,r8,r20
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801dec:	4ad3883a 	add	r9,r9,r11
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
  801df0:	d1676515 	stw	r5,-25196(gp)
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
  801df4:	d1a78f15 	stw	r6,-25028(gp)
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
  801df8:	01402074 	movhi	r5,129
  801dfc:	29594804 	addi	r5,r5,25888
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
      BPB_ExtFlags = Buffer[40] + (Buffer[41]<<8);
      BPB_FSVer = Buffer[42] + (Buffer[43]<<8);
      BPB_RootClus = Buffer[44] + (Buffer[45]<<8) + (Buffer[46]<<16) + (Buffer[47]<<24);
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
  801e00:	d1e78d15 	stw	r7,-25036(gp)
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
  801e04:	d2277615 	stw	r8,-25128(gp)
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
  801e08:	d0e75d05 	stb	r3,-25228(gp)
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
  801e0c:	d2678b15 	stw	r9,-25044(gp)
    }
    else
    {
      FATSz = BPB_FATSz32;
      
      BPB_FATSz32 = Buffer[36] + (Buffer[37]<<8) + (Buffer[38]<<16) + (Buffer[39]<<24);
  801e10:	d1277415 	stw	r4,-25136(gp)
      BPB_FSInfo = Buffer[48] + (Buffer[49]<<8);
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
  801e14:	28800005 	stb	r2,0(r5)
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
  801e18:	d8801443 	ldbu	r2,81(sp)
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
  801e1c:	d8c01203 	ldbu	r3,72(sp)
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
  801e20:	d1a76a04 	addi	r6,gp,-25176
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
  801e24:	28800285 	stb	r2,10(r5)
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
  801e28:	d8801243 	ldbu	r2,73(sp)
      BPB_BkBootSec = Buffer[50] + (Buffer[51]<<8);
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
  801e2c:	28c00045 	stb	r3,1(r5)
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
  801e30:	d8c01283 	ldbu	r3,74(sp)
      BS_DrvNum_32 = Buffer[64];
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
  801e34:	28800085 	stb	r2,2(r5)
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
  801e38:	d88012c3 	ldbu	r2,75(sp)
      BS_BootSig_32 = Buffer[66];
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
  801e3c:	28c000c5 	stb	r3,3(r5)
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
  801e40:	d8c01303 	ldbu	r3,76(sp)
      BS_VOLID_32 = Buffer[67] + (Buffer[68]<<8) + (Buffer[69]<<16) + (Buffer[70]<<24);
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
  801e44:	28800105 	stb	r2,4(r5)
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
  801e48:	d8801343 	ldbu	r2,77(sp)
      BS_VOLLab_32[0] = Buffer[71];
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
  801e4c:	28c00145 	stb	r3,5(r5)
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
  801e50:	d8c01383 	ldbu	r3,78(sp)
      BS_VOLLab_32[1] = Buffer[72];
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
  801e54:	28800185 	stb	r2,6(r5)
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
  801e58:	d88013c3 	ldbu	r2,79(sp)
      BS_VOLLab_32[2] = Buffer[73];
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
  801e5c:	28c001c5 	stb	r3,7(r5)
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
  801e60:	d8c01403 	ldbu	r3,80(sp)
      BS_VOLLab_32[3] = Buffer[74];
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
  801e64:	28800205 	stb	r2,8(r5)
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
  801e68:	d8801483 	ldbu	r2,82(sp)
      BS_VOLLab_32[4] = Buffer[75];
      BS_VOLLab_32[5] = Buffer[76];
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
  801e6c:	28c00245 	stb	r3,9(r5)
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
  801e70:	d8c014c3 	ldbu	r3,83(sp)
      BS_VOLLab_32[6] = Buffer[77];
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
  801e74:	d0a76a05 	stb	r2,-25176(gp)
      BS_FilSysType_32[1] = Buffer[83];
      BS_FilSysType_32[2] = Buffer[84];
  801e78:	d8801503 	ldbu	r2,84(sp)
      BS_VOLLab_32[7] = Buffer[78];
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
  801e7c:	30c00045 	stb	r3,1(r6)
      BS_FilSysType_32[2] = Buffer[84];
      BS_FilSysType_32[3] = Buffer[85];
  801e80:	d8c01543 	ldbu	r3,85(sp)
      BS_VOLLab_32[8] = Buffer[79];
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
      BS_FilSysType_32[2] = Buffer[84];
  801e84:	30800085 	stb	r2,2(r6)
      BS_FilSysType_32[3] = Buffer[85];
      BS_FilSysType_32[4] = Buffer[86];
  801e88:	d8801583 	ldbu	r2,86(sp)
      BS_VOLLab_32[9] = Buffer[80];
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
      BS_FilSysType_32[2] = Buffer[84];
      BS_FilSysType_32[3] = Buffer[85];
  801e8c:	30c000c5 	stb	r3,3(r6)
      BS_FilSysType_32[4] = Buffer[86];
      BS_FilSysType_32[5] = Buffer[87];
  801e90:	d8c015c3 	ldbu	r3,87(sp)
      BS_VOLLab_32[10] = Buffer[81];
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
      BS_FilSysType_32[2] = Buffer[84];
      BS_FilSysType_32[3] = Buffer[85];
      BS_FilSysType_32[4] = Buffer[86];
  801e94:	30800105 	stb	r2,4(r6)
      BS_FilSysType_32[5] = Buffer[87];
      BS_FilSysType_32[6] = Buffer[88];
  801e98:	d8801603 	ldbu	r2,88(sp)
      BS_FilSysType_32[0] = Buffer[82];
      BS_FilSysType_32[1] = Buffer[83];
      BS_FilSysType_32[2] = Buffer[84];
      BS_FilSysType_32[3] = Buffer[85];
      BS_FilSysType_32[4] = Buffer[86];
      BS_FilSysType_32[5] = Buffer[87];
  801e9c:	30c00145 	stb	r3,5(r6)
      BS_FilSysType_32[6] = Buffer[88];
  801ea0:	30800185 	stb	r2,6(r6)
      BS_FilSysType_32[7] = Buffer[89];
  801ea4:	d8801643 	ldbu	r2,89(sp)
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32);
  801ea8:	dc008103 	ldbu	r16,516(sp)
      BS_FilSysType_32[2] = Buffer[84];
      BS_FilSysType_32[3] = Buffer[85];
      BS_FilSysType_32[4] = Buffer[86];
      BS_FilSysType_32[5] = Buffer[87];
      BS_FilSysType_32[6] = Buffer[88];
      BS_FilSysType_32[7] = Buffer[89];
  801eac:	308001c5 	stb	r2,7(r6)
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32);
  801eb0:	800b883a 	mov	r5,r16
  801eb4:	0803eb80 	call	803eb8 <__mulsi3>
  801eb8:	e085883a 	add	r2,fp,r2
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32) + RootDirSectors;
  801ebc:	b087883a 	add	r3,r22,r2
  801ec0:	d0e76d15 	stw	r3,-25164(gp)
      BS_FilSysType_32[5] = Buffer[87];
      BS_FilSysType_32[6] = Buffer[88];
      BS_FilSysType_32[7] = Buffer[89];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32);
  801ec4:	d0a76615 	stw	r2,-25192(gp)
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32) + RootDirSectors;
    }
    //The start of the data region, the first sector of cluster 2  
    

   if(BPB_TotSec16 != 0)
  801ec8:	b8005026 	beq	r23,zero,80200c <init_bs+0x51c>
      TotSec = BPB_TotSec16;
  801ecc:	d5e78515 	stw	r23,-25068(gp)
   else
      TotSec = BPB_TotSec32;
    DataSec = TotSec - (BPB_RsvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors);
  801ed0:	d1677517 	ldw	r5,-25132(gp)
  801ed4:	8009883a 	mov	r4,r16
  801ed8:	0803eb80 	call	803eb8 <__mulsi3>
  801edc:	d0e78517 	ldw	r3,-25068(gp)
  801ee0:	e085883a 	add	r2,fp,r2
  801ee4:	b085883a 	add	r2,r22,r2
    
    CountofClusters = DataSec / BPB_SecPerClus;
  801ee8:	d9408143 	ldbu	r5,517(sp)

   if(BPB_TotSec16 != 0)
      TotSec = BPB_TotSec16;
   else
      TotSec = BPB_TotSec32;
    DataSec = TotSec - (BPB_RsvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors);
  801eec:	1887c83a 	sub	r3,r3,r2
    
    CountofClusters = DataSec / BPB_SecPerClus;
  801ef0:	1809883a 	mov	r4,r3

   if(BPB_TotSec16 != 0)
      TotSec = BPB_TotSec16;
   else
      TotSec = BPB_TotSec32;
    DataSec = TotSec - (BPB_RsvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors);
  801ef4:	d0e78415 	stw	r3,-25072(gp)
    
    CountofClusters = DataSec / BPB_SecPerClus;
  801ef8:	0803ea80 	call	803ea8 <__udivsi3>
  801efc:	0007883a 	mov	r3,zero
  801f00:	d0a78615 	stw	r2,-25064(gp)
  801f04:	003f1106 	br	801b4c <init_bs+0x5c>
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
  801f08:	d9000a03 	ldbu	r4,40(sp)
  801f0c:	d8800a43 	ldbu	r2,41(sp)
  801f10:	d8c00a83 	ldbu	r3,42(sp)
  801f14:	2008923a 	slli	r4,r4,8
  801f18:	d94009c3 	ldbu	r5,39(sp)
  801f1c:	1806963a 	slli	r3,r3,24
  801f20:	1004943a 	slli	r2,r2,16
  801f24:	290b883a 	add	r5,r5,r4
      BS_VOLLab_16[0] = Buffer[43];
  801f28:	01002074 	movhi	r4,129
  801f2c:	21194ac4 	addi	r4,r4,25899
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
  801f30:	10c5883a 	add	r2,r2,r3
  801f34:	288b883a 	add	r5,r5,r2
      BS_VOLLab_16[5] = Buffer[48];
      BS_VOLLab_16[6] = Buffer[49];
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
  801f38:	d8800d43 	ldbu	r2,53(sp)
    
    if(BPB_FATSz16 != 0)
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
  801f3c:	d8c00903 	ldbu	r3,36(sp)
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
  801f40:	d1677215 	stw	r5,-25144(gp)
      BS_VOLLab_16[5] = Buffer[48];
      BS_VOLLab_16[6] = Buffer[49];
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
  801f44:	20800285 	stb	r2,10(r4)
    if(BPB_FATSz16 != 0)
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
  801f48:	d8800983 	ldbu	r2,38(sp)
    
    if(BPB_FATSz16 != 0)
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
  801f4c:	d0e78c05 	stb	r3,-25040(gp)
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
      BS_VOLLab_16[0] = Buffer[43];
      BS_VOLLab_16[1] = Buffer[44];
  801f50:	d8c00b03 	ldbu	r3,44(sp)
    if(BPB_FATSz16 != 0)
    {
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
  801f54:	d0a77805 	stb	r2,-25120(gp)
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
      BS_VOLLab_16[0] = Buffer[43];
  801f58:	d8800ac3 	ldbu	r2,43(sp)
      BS_VOLLab_16[1] = Buffer[44];
  801f5c:	20c00045 	stb	r3,1(r4)
      BS_VOLLab_16[2] = Buffer[45];
      BS_VOLLab_16[3] = Buffer[46];
  801f60:	d8c00b83 	ldbu	r3,46(sp)
      FATSz = BPB_FATSz16;
      
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
      BS_VOLLab_16[0] = Buffer[43];
  801f64:	20800005 	stb	r2,0(r4)
      BS_VOLLab_16[1] = Buffer[44];
      BS_VOLLab_16[2] = Buffer[45];
  801f68:	d8800b43 	ldbu	r2,45(sp)
      BS_VOLLab_16[3] = Buffer[46];
  801f6c:	20c000c5 	stb	r3,3(r4)
      BS_VOLLab_16[4] = Buffer[47];
      BS_VOLLab_16[5] = Buffer[48];
  801f70:	d8c00c03 	ldbu	r3,48(sp)
      BS_DrvNum_16 = Buffer[36];
      BS_BootSig_16 = Buffer[38];
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
      BS_VOLLab_16[0] = Buffer[43];
      BS_VOLLab_16[1] = Buffer[44];
      BS_VOLLab_16[2] = Buffer[45];
  801f74:	20800085 	stb	r2,2(r4)
      BS_VOLLab_16[3] = Buffer[46];
      BS_VOLLab_16[4] = Buffer[47];
  801f78:	d8800bc3 	ldbu	r2,47(sp)
      BS_VOLLab_16[5] = Buffer[48];
  801f7c:	20c00145 	stb	r3,5(r4)
      BS_VOLLab_16[6] = Buffer[49];
      BS_VOLLab_16[7] = Buffer[50];
  801f80:	d8c00c83 	ldbu	r3,50(sp)
      BS_VOLID_16 = Buffer[39] + (Buffer[40]<<8) + (Buffer[41]<<16) + (Buffer[42]<<24);
      BS_VOLLab_16[0] = Buffer[43];
      BS_VOLLab_16[1] = Buffer[44];
      BS_VOLLab_16[2] = Buffer[45];
      BS_VOLLab_16[3] = Buffer[46];
      BS_VOLLab_16[4] = Buffer[47];
  801f84:	20800105 	stb	r2,4(r4)
      BS_VOLLab_16[5] = Buffer[48];
      BS_VOLLab_16[6] = Buffer[49];
  801f88:	d8800c43 	ldbu	r2,49(sp)
      BS_VOLLab_16[7] = Buffer[50];
  801f8c:	20c001c5 	stb	r3,7(r4)
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
  801f90:	d8c00d03 	ldbu	r3,52(sp)
      BS_VOLLab_16[1] = Buffer[44];
      BS_VOLLab_16[2] = Buffer[45];
      BS_VOLLab_16[3] = Buffer[46];
      BS_VOLLab_16[4] = Buffer[47];
      BS_VOLLab_16[5] = Buffer[48];
      BS_VOLLab_16[6] = Buffer[49];
  801f94:	20800185 	stb	r2,6(r4)
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
  801f98:	d8800cc3 	ldbu	r2,51(sp)
      BS_VOLLab_16[9] = Buffer[52];
  801f9c:	20c00245 	stb	r3,9(r4)
    //count of sectors occupied by the root directory
    RootDirSectors = ((BPB_RootEntCnt*32) + (BPB_BytsPerSec - 1))/BPB_BytsPerSec;
    
    if(BPB_FATSz16 != 0)
    {
      FATSz = BPB_FATSz16;
  801fa0:	d4a77515 	stw	r18,-25132(gp)
      BS_VOLLab_16[3] = Buffer[46];
      BS_VOLLab_16[4] = Buffer[47];
      BS_VOLLab_16[5] = Buffer[48];
      BS_VOLLab_16[6] = Buffer[49];
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
  801fa4:	20800205 	stb	r2,8(r4)
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
  801fa8:	d8800d83 	ldbu	r2,54(sp)
  801fac:	d1a75f44 	addi	r6,gp,-25219
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
  801fb0:	9009883a 	mov	r4,r18
      BS_VOLLab_16[6] = Buffer[49];
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
  801fb4:	d0a75f45 	stb	r2,-25219(gp)
      BS_FilSysType_16[2] = Buffer[56];
      BS_FilSysType_16[3] = Buffer[57];
      BS_FilSysType_16[4] = Buffer[58];
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
  801fb8:	d8800f43 	ldbu	r2,61(sp)
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
      BS_FilSysType_16[1] = Buffer[55];
  801fbc:	d8c00dc3 	ldbu	r3,55(sp)
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
  801fc0:	dc408103 	ldbu	r17,516(sp)
      BS_FilSysType_16[2] = Buffer[56];
      BS_FilSysType_16[3] = Buffer[57];
      BS_FilSysType_16[4] = Buffer[58];
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
  801fc4:	30800185 	stb	r2,6(r6)
      BS_VOLLab_16[7] = Buffer[50];
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
      BS_FilSysType_16[1] = Buffer[55];
  801fc8:	30c00045 	stb	r3,1(r6)
      BS_FilSysType_16[2] = Buffer[56];
  801fcc:	d8800e03 	ldbu	r2,56(sp)
      BS_FilSysType_16[3] = Buffer[57];
  801fd0:	d8c00e43 	ldbu	r3,57(sp)
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
  801fd4:	880b883a 	mov	r5,r17
      BS_VOLLab_16[8] = Buffer[51];
      BS_VOLLab_16[9] = Buffer[52];
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
      BS_FilSysType_16[1] = Buffer[55];
      BS_FilSysType_16[2] = Buffer[56];
  801fd8:	30800085 	stb	r2,2(r6)
      BS_FilSysType_16[3] = Buffer[57];
  801fdc:	30c000c5 	stb	r3,3(r6)
      BS_FilSysType_16[4] = Buffer[58];
  801fe0:	d8800e83 	ldbu	r2,58(sp)
      BS_FilSysType_16[5] = Buffer[59];
  801fe4:	d8c00ec3 	ldbu	r3,59(sp)
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + RootDirSectors;
  801fe8:	8821883a 	mov	r16,r17
      BS_VOLLab_16[10] = Buffer[53];
      BS_FilSysType_16[0] = Buffer[54];
      BS_FilSysType_16[1] = Buffer[55];
      BS_FilSysType_16[2] = Buffer[56];
      BS_FilSysType_16[3] = Buffer[57];
      BS_FilSysType_16[4] = Buffer[58];
  801fec:	30800105 	stb	r2,4(r6)
      BS_FilSysType_16[5] = Buffer[59];
  801ff0:	30c00145 	stb	r3,5(r6)
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
  801ff4:	0803eb80 	call	803eb8 <__mulsi3>
  801ff8:	e085883a 	add	r2,fp,r2
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16) + RootDirSectors;
  801ffc:	b087883a 	add	r3,r22,r2
  802000:	d0e76d15 	stw	r3,-25164(gp)
      BS_FilSysType_16[5] = Buffer[59];
      BS_FilSysType_16[6] = Buffer[60];
      BS_FilSysType_16[6] = Buffer[61];
      
      //root directory LBA = FirstRootDirSecNum + MBR_BS_Location
      FirstRootDirSecNum = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz16);
  802004:	d0a76615 	stw	r2,-25192(gp)
      FirstDataSector = BPB_RsvdSecCnt + (BPB_NumFATs * BPB_FATSz32) + RootDirSectors;
    }
    //The start of the data region, the first sector of cluster 2  
    

   if(BPB_TotSec16 != 0)
  802008:	b83fb01e 	bne	r23,zero,801ecc <init_bs+0x3dc>
      TotSec = BPB_TotSec16;
   else
      TotSec = BPB_TotSec32;
  80200c:	d9008017 	ldw	r4,512(sp)
  802010:	d1278515 	stw	r4,-25068(gp)
  802014:	003fae06 	br	801ed0 <init_bs+0x3e0>

00802018 <init_mbr>:
void  build_cluster_chain(int cc[],UINT32 length, data_file *df);
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root);
//-------------------------------------------------------------------------
// Initialize the Master Boot Record
BYTE init_mbr(void)
{
  802018:	deff7f04 	addi	sp,sp,-516
  BYTE Buffer[512]={0};
  80201c:	d809883a 	mov	r4,sp
  802020:	000b883a 	mov	r5,zero
  802024:	01808004 	movi	r6,512
void  build_cluster_chain(int cc[],UINT32 length, data_file *df);
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root);
//-------------------------------------------------------------------------
// Initialize the Master Boot Record
BYTE init_mbr(void)
{
  802028:	dfc08015 	stw	ra,512(sp)
  BYTE Buffer[512]={0};
  80202c:	08044bc0 	call	8044bc <memset>
  
  SD_read_lba(Buffer,0,1);  //Store master boot record in Buffer
  802030:	d809883a 	mov	r4,sp
  802034:	000b883a 	mov	r5,zero
  802038:	01800044 	movi	r6,1
  80203c:	0800fc40 	call	800fc4 <SD_read_lba>

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  802040:	d8c07f83 	ldbu	r3,510(sp)
  802044:	00801544 	movi	r2,85
  802048:	18800526 	beq	r3,r2,802060 <init_mbr+0x48>
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
    return 0; //OK
  80204c:	02800044 	movi	r10,1
  }
  else
  {
    return 1; //Error
  }
}
  802050:	5005883a 	mov	r2,r10
  802054:	dfc08017 	ldw	ra,512(sp)
  802058:	dec08104 	addi	sp,sp,516
  80205c:	f800283a 	ret
  
  SD_read_lba(Buffer,0,1);  //Store master boot record in Buffer

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  802060:	d8c07fc3 	ldbu	r3,511(sp)
  802064:	00802a84 	movi	r2,170
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
  802068:	d2e78e44 	addi	r11,gp,-25031
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  80206c:	d3278204 	addi	r12,gp,-25080
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802070:	0015883a 	mov	r10,zero
  
  SD_read_lba(Buffer,0,1);  //Store master boot record in Buffer

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  802074:	18bff51e 	bne	r3,r2,80204c <init_mbr+0x34>
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802078:	d9c071c3 	ldbu	r7,455(sp)
  80207c:	d8807203 	ldbu	r2,456(sp)
  802080:	d9407243 	ldbu	r5,457(sp)
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802084:	d98072c3 	ldbu	r6,459(sp)
  802088:	d8c07303 	ldbu	r3,460(sp)
  80208c:	d9007343 	ldbu	r4,461(sp)
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802090:	380e923a 	slli	r7,r7,8
  802094:	280a963a 	slli	r5,r5,24
  802098:	da007183 	ldbu	r8,454(sp)
  80209c:	1004943a 	slli	r2,r2,16
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  8020a0:	300c923a 	slli	r6,r6,8
  8020a4:	2008963a 	slli	r4,r4,24
  8020a8:	da407283 	ldbu	r9,458(sp)
  8020ac:	1806943a 	slli	r3,r3,16
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  8020b0:	1145883a 	add	r2,r2,r5
  8020b4:	41d1883a 	add	r8,r8,r7
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  8020b8:	1907883a 	add	r3,r3,r4
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  8020bc:	4091883a 	add	r8,r8,r2
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  8020c0:	4993883a 	add	r9,r9,r6
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
  8020c4:	d8807043 	ldbu	r2,449(sp)
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  8020c8:	48d3883a 	add	r9,r9,r3
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
  8020cc:	d8c07143 	ldbu	r3,453(sp)
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
  8020d0:	58800085 	stb	r2,2(r11)

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
  8020d4:	d8806f83 	ldbu	r2,446(sp)
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
  8020d8:	60c00085 	stb	r3,2(r12)
  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
  8020dc:	d8c06fc3 	ldbu	r3,447(sp)

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
  8020e0:	d0a75f05 	stb	r2,-25220(gp)
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
  8020e4:	d8807003 	ldbu	r2,448(sp)
  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
  8020e8:	d0e78e45 	stb	r3,-25031(gp)
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
  8020ec:	d8c07083 	ldbu	r3,450(sp)
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
  8020f0:	58800045 	stb	r2,1(r11)
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  8020f4:	d88070c3 	ldbu	r2,451(sp)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
  8020f8:	d0e76c05 	stb	r3,-25168(gp)
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
  8020fc:	d8c07103 	ldbu	r3,452(sp)
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  802100:	d0a78205 	stb	r2,-25080(gp)
  }
  else
  {
    return 1; //Error
  }
}
  802104:	5005883a 	mov	r2,r10
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
  802108:	60c00045 	stb	r3,1(r12)
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  80210c:	d2279015 	stw	r8,-25024(gp)
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802110:	d2678115 	stw	r9,-25084(gp)
  }
  else
  {
    return 1; //Error
  }
}
  802114:	dfc08017 	ldw	ra,512(sp)
  802118:	dec08104 	addi	sp,sp,516
  80211c:	f800283a 	ret

00802120 <SD_card_init>:
    SD_CLK_HIGH;
  }
}
//-------------------------------------------------------------------------
BYTE SD_card_init(void)
{
  802120:	defff904 	addi	sp,sp,-28
    BYTE x,y;
    SD_CMD_OUT;
  802124:	01801504 	movi	r6,84
  802128:	01000044 	movi	r4,1
    SD_CLK_HIGH;
  }
}
//-------------------------------------------------------------------------
BYTE SD_card_init(void)
{
  80212c:	dfc00615 	stw	ra,24(sp)
  802130:	dd400515 	stw	r21,20(sp)
  802134:	dd000415 	stw	r20,16(sp)
  802138:	dcc00315 	stw	r19,12(sp)
  80213c:	dc800215 	stw	r18,8(sp)
  802140:	dc400115 	stw	r17,4(sp)
  802144:	dc000015 	stw	r16,0(sp)
    BYTE x,y;
    SD_CMD_OUT;
  802148:	31000035 	stwio	r4,0(r6)
    SD_DAT_IN;
  80214c:	00801104 	movi	r2,68
  802150:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
  802154:	01401804 	movi	r5,96
  802158:	29000035 	stwio	r4,0(r5)
    SD_CMD_HIGH;
  80215c:	00801404 	movi	r2,80
  802160:	11000035 	stwio	r4,0(r2)
    SD_DAT_LOW;
  802164:	00c01004 	movi	r3,64
  802168:	18000035 	stwio	zero,0(r3)
    read_status=0;
  80216c:	0007883a 	mov	r3,zero
  802170:	d0277c45 	stb	zero,-25103(gp)
  802174:	01c00a04 	movi	r7,40
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  802178:	30000035 	stwio	zero,0(r6)
  SD_CLK_LOW;
  80217c:	28000035 	stwio	zero,0(r5)
  SD_CLK_HIGH;
  802180:	29000035 	stwio	r4,0(r5)
  SD_CLK_LOW;
  802184:	28000035 	stwio	zero,0(r5)
  SD_CLK_HIGH;
  802188:	29000035 	stwio	r4,0(r5)
    SD_DAT_IN;
    SD_CLK_HIGH;
    SD_CMD_HIGH;
    SD_DAT_LOW;
    read_status=0;
    for(x=0;x<40;x++)
  80218c:	18c00044 	addi	r3,r3,1
  802190:	18803fcc 	andi	r2,r3,255
  802194:	11fff81e 	bne	r2,r7,802178 <SD_card_init+0x58>
    Ncr();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd0[x];
  802198:	d4e77b04 	addi	r19,gp,-25108
  80219c:	00801004 	movi	r2,64
    y = send_cmd(cmd_buffer);
  8021a0:	9809883a 	mov	r4,r19
    SD_DAT_LOW;
    read_status=0;
    for(x=0;x<40;x++)
    Ncr();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd0[x];
  8021a4:	d0a77b05 	stb	r2,-25108(gp)
  8021a8:	98000045 	stb	zero,1(r19)
  8021ac:	98000085 	stb	zero,2(r19)
  8021b0:	980000c5 	stb	zero,3(r19)
  8021b4:	98000105 	stb	zero,4(r19)
  8021b8:	04001804 	movi	r16,96
    y = send_cmd(cmd_buffer);
  8021bc:	0800ad00 	call	800ad0 <send_cmd>
  8021c0:	04400044 	movi	r17,1
  8021c4:	9825883a 	mov	r18,r19
  8021c8:	05001504 	movi	r20,84
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021cc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021d0:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021d4:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021d8:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021dc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021e0:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021e4:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021e8:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021ec:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021f0:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021f4:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8021f8:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8021fc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802200:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802204:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802208:	84400035 	stwio	r17,0(r16)
    {
      for(x=0;x<40;x++);
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=cmd55[x];
      y = send_cmd(cmd_buffer);
  80220c:	d1277b04 	addi	r4,gp,-25108
    do
    {
      for(x=0;x<40;x++);
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=cmd55[x];
  802210:	00801dc4 	movi	r2,119
  802214:	98000045 	stb	zero,1(r19)
  802218:	98000085 	stb	zero,2(r19)
  80221c:	980000c5 	stb	zero,3(r19)
  802220:	98000105 	stb	zero,4(r19)
  802224:	d0a77b05 	stb	r2,-25108(gp)
      y = send_cmd(cmd_buffer);
  802228:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  80222c:	a0000035 	stwio	zero,0(r20)
  SD_CLK_LOW;
  802230:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802234:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  802238:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  80223c:	84400035 	stwio	r17,0(r16)
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=cmd55[x];
      y = send_cmd(cmd_buffer);
      Ncr();
      if(response_R(1)>1) //response too long or crc error
  802240:	01000044 	movi	r4,1
  802244:	0800bd40 	call	800bd4 <response_R>
  802248:	10803fcc 	andi	r2,r2,255
  80224c:	88804436 	bltu	r17,r2,802360 <SD_card_init+0x240>
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802250:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802254:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802258:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80225c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802260:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802264:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802268:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80226c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802270:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802274:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802278:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80227c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802280:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802284:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802288:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80228c:	84400035 	stwio	r17,0(r16)
      Ncr();
      if(response_R(1)>1) //response too long or crc error
      return 1;
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=acmd41[x];
  802290:	00801a44 	movi	r2,105
  802294:	00c003c4 	movi	r3,15
  802298:	d0a77b05 	stb	r2,-25108(gp)
  80229c:	00bffc04 	movi	r2,-16
      y = send_cmd(cmd_buffer);
  8022a0:	d1277b04 	addi	r4,gp,-25108
      Ncr();
      if(response_R(1)>1) //response too long or crc error
      return 1;
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=acmd41[x];
  8022a4:	90c00045 	stb	r3,1(r18)
  8022a8:	90800085 	stb	r2,2(r18)
  8022ac:	900000c5 	stb	zero,3(r18)
  8022b0:	90000105 	stb	zero,4(r18)
      y = send_cmd(cmd_buffer);
  8022b4:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  8022b8:	a0000035 	stwio	zero,0(r20)
  SD_CLK_LOW;
  8022bc:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  8022c0:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  8022c4:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  8022c8:	84400035 	stwio	r17,0(r16)
      Ncc();
      for(x=0;x<5;x++)
      cmd_buffer[x]=acmd41[x];
      y = send_cmd(cmd_buffer);
      Ncr();      
    } while(response_R(3)==1);
  8022cc:	010000c4 	movi	r4,3
  8022d0:	0800bd40 	call	800bd4 <response_R>
  8022d4:	10803fcc 	andi	r2,r2,255
  8022d8:	147fbc26 	beq	r2,r17,8021cc <SD_card_init+0xac>
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8022dc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8022e0:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8022e4:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8022e8:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8022ec:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8022f0:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8022f4:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8022f8:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8022fc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802300:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802304:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802308:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  80230c:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802310:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802314:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802318:	84400035 	stwio	r17,0(r16)
      Ncr();      
    } while(response_R(3)==1);
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd2[x];
    y = send_cmd(cmd_buffer);
  80231c:	d1277b04 	addi	r4,gp,-25108
      y = send_cmd(cmd_buffer);
      Ncr();      
    } while(response_R(3)==1);
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd2[x];
  802320:	00801084 	movi	r2,66
  802324:	90000045 	stb	zero,1(r18)
  802328:	90000085 	stb	zero,2(r18)
  80232c:	900000c5 	stb	zero,3(r18)
  802330:	90000105 	stb	zero,4(r18)
  802334:	d0a77b05 	stb	r2,-25108(gp)
    y = send_cmd(cmd_buffer);
  802338:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  80233c:	a0000035 	stwio	zero,0(r20)
  SD_CLK_LOW;
  802340:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802344:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  802348:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  80234c:	84400035 	stwio	r17,0(r16)
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd2[x];
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(2)>1)
  802350:	01000084 	movi	r4,2
  802354:	0800bd40 	call	800bd4 <response_R>
  802358:	10803fcc 	andi	r2,r2,255
  80235c:	88800a2e 	bgeu	r17,r2,802388 <SD_card_init+0x268>
    y = send_cmd(cmd_buffer);  
    Ncr();
    if(response_R(1)>1)
    return 1;
    read_status =1; //sd card ready
    return 0;
  802360:	00800044 	movi	r2,1
}
  802364:	dfc00617 	ldw	ra,24(sp)
  802368:	dd400517 	ldw	r21,20(sp)
  80236c:	dd000417 	ldw	r20,16(sp)
  802370:	dcc00317 	ldw	r19,12(sp)
  802374:	dc800217 	ldw	r18,8(sp)
  802378:	dc400117 	ldw	r17,4(sp)
  80237c:	dc000017 	ldw	r16,0(sp)
  802380:	dec00704 	addi	sp,sp,28
  802384:	f800283a 	ret
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802388:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80238c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802390:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802394:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802398:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80239c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8023a0:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8023a4:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8023a8:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8023ac:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8023b0:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8023b4:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8023b8:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8023bc:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8023c0:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8023c4:	84400035 	stwio	r17,0(r16)
    if(response_R(2)>1)
    return 1;
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd3[x];
    y = send_cmd(cmd_buffer);
  8023c8:	d1277b04 	addi	r4,gp,-25108
    Ncr();
    if(response_R(2)>1)
    return 1;
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd3[x];
  8023cc:	008010c4 	movi	r2,67
  8023d0:	90000045 	stb	zero,1(r18)
  8023d4:	90000085 	stb	zero,2(r18)
  8023d8:	900000c5 	stb	zero,3(r18)
  8023dc:	90000105 	stb	zero,4(r18)
  8023e0:	d0a77b05 	stb	r2,-25108(gp)
    y = send_cmd(cmd_buffer);
  8023e4:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  8023e8:	a0000035 	stwio	zero,0(r20)
  SD_CLK_LOW;
  8023ec:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  8023f0:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  8023f4:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  8023f8:	84400035 	stwio	r17,0(r16)
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd3[x];
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(6)>1)
  8023fc:	01000184 	movi	r4,6
  802400:	0800bd40 	call	800bd4 <response_R>
  802404:	10803fcc 	andi	r2,r2,255
  802408:	88bfd536 	bltu	r17,r2,802360 <SD_card_init+0x240>
    return 1;         
    RCA[0]=response_buffer[1];
  80240c:	00802074 	movhi	r2,129
  802410:	10994304 	addi	r2,r2,25868
    RCA[1]=response_buffer[2];
  802414:	10c00083 	ldbu	r3,2(r2)
    cmd_buffer[x]=cmd3[x];
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(6)>1)
    return 1;         
    RCA[0]=response_buffer[1];
  802418:	11400043 	ldbu	r5,1(r2)
  80241c:	d5678904 	addi	r21,gp,-25052
    RCA[1]=response_buffer[2];
  802420:	a8c00045 	stb	r3,1(r21)
    cmd_buffer[x]=cmd3[x];
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(6)>1)
    return 1;         
    RCA[0]=response_buffer[1];
  802424:	d1678905 	stb	r5,-25052(gp)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802428:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80242c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802430:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802434:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802438:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80243c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802440:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802444:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802448:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80244c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802450:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802454:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802458:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  80245c:	84400035 	stwio	r17,0(r16)
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  802460:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802464:	84400035 	stwio	r17,0(r16)
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd9[x];
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];  
    y = send_cmd(cmd_buffer);
  802468:	d1277b04 	addi	r4,gp,-25108
    RCA[1]=response_buffer[2];
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd9[x];
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];  
  80246c:	90c00085 	stb	r3,2(r18)
    return 1;         
    RCA[0]=response_buffer[1];
    RCA[1]=response_buffer[2];
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd9[x];
  802470:	00801244 	movi	r2,73
    cmd_buffer[1] = RCA[0];
  802474:	91400045 	stb	r5,1(r18)
    return 1;         
    RCA[0]=response_buffer[1];
    RCA[1]=response_buffer[2];
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd9[x];
  802478:	900000c5 	stb	zero,3(r18)
  80247c:	90000105 	stb	zero,4(r18)
  802480:	d0a77b05 	stb	r2,-25108(gp)
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];  
    y = send_cmd(cmd_buffer);
  802484:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  802488:	a0000035 	stwio	zero,0(r20)
  SD_CLK_LOW;
  80248c:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802490:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  802494:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802498:	84400035 	stwio	r17,0(r16)
    cmd_buffer[x]=cmd9[x];
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];  
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(2)>1)
  80249c:	01000084 	movi	r4,2
  8024a0:	0800bd40 	call	800bd4 <response_R>
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	88bfad36 	bltu	r17,r2,802360 <SD_card_init+0x240>
  8024ac:	0005883a 	mov	r2,zero
  8024b0:	04001804 	movi	r16,96
  8024b4:	04400044 	movi	r17,1
  8024b8:	00c00204 	movi	r3,8
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  8024bc:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  8024c0:	84400035 	stwio	r17,0(r16)
} 
//-------------------------------------------------------------------------
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  8024c4:	10800044 	addi	r2,r2,1
  8024c8:	10fffc1e 	bne	r2,r3,8024bc <SD_card_init+0x39c>
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd7[x];
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];
  8024cc:	a9400043 	ldbu	r5,1(r21)
    if(response_R(2)>1)
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd7[x];
    cmd_buffer[1] = RCA[0];
  8024d0:	d0e78903 	ldbu	r3,-25052(gp)
    cmd_buffer[2] = RCA[1];
    y = send_cmd(cmd_buffer);
  8024d4:	d1277b04 	addi	r4,gp,-25108
    Ncr();
    if(response_R(2)>1)
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd7[x];
  8024d8:	008011c4 	movi	r2,71
    cmd_buffer[1] = RCA[0];
  8024dc:	98c00045 	stb	r3,1(r19)
    cmd_buffer[2] = RCA[1];
  8024e0:	99400085 	stb	r5,2(r19)
    Ncr();
    if(response_R(2)>1)
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd7[x];
  8024e4:	980000c5 	stb	zero,3(r19)
  8024e8:	98000105 	stb	zero,4(r19)
  8024ec:	d0a77b05 	stb	r2,-25108(gp)
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];
    y = send_cmd(cmd_buffer);
  8024f0:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  8024f4:	00c01504 	movi	r3,84
  8024f8:	18000035 	stwio	zero,0(r3)
  SD_CLK_LOW;
  8024fc:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802500:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  802504:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802508:	84400035 	stwio	r17,0(r16)
    cmd_buffer[x]=cmd7[x];
    cmd_buffer[1] = RCA[0];
    cmd_buffer[2] = RCA[1];
    y = send_cmd(cmd_buffer);
    Ncr();
    if(response_R(1)>1)
  80250c:	01000044 	movi	r4,1
  802510:	0800bd40 	call	800bd4 <response_R>
  802514:	10803fcc 	andi	r2,r2,255
  802518:	88bf9136 	bltu	r17,r2,802360 <SD_card_init+0x240>
  80251c:	0005883a 	mov	r2,zero
  802520:	04001804 	movi	r16,96
  802524:	04400044 	movi	r17,1
  802528:	00c00204 	movi	r3,8
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  {
    SD_CLK_LOW;
  80252c:	80000035 	stwio	zero,0(r16)
    SD_CLK_HIGH;
  802530:	84400035 	stwio	r17,0(r16)
} 
//-------------------------------------------------------------------------
void Ncc(void)
{
  int i;
  for(i=0;i<8;i++)
  802534:	10800044 	addi	r2,r2,1
  802538:	10fffc1e 	bne	r2,r3,80252c <SD_card_init+0x40c>
    Ncr();
    if(response_R(1)>1)
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd16[x];
  80253c:	00c00084 	movi	r3,2
    y = send_cmd(cmd_buffer);  
  802540:	d1277b04 	addi	r4,gp,-25108
    Ncr();
    if(response_R(1)>1)
    return 1; 
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd16[x];
  802544:	00801404 	movi	r2,80
  802548:	98c000c5 	stb	r3,3(r19)
  80254c:	98000105 	stb	zero,4(r19)
  802550:	98000045 	stb	zero,1(r19)
  802554:	98000085 	stb	zero,2(r19)
  802558:	d0a77b05 	stb	r2,-25108(gp)
    y = send_cmd(cmd_buffer);  
  80255c:	0800ad00 	call	800ad0 <send_cmd>
/*ACMD51 Reads the SD Configuration Register (SCR).*/
const BYTE acmd51[5] = {0x73,0x00,0x00,0x00,0x00};
//-------------------------------------------------------------------------
void Ncr(void)
{
  SD_CMD_IN;
  802560:	00c01504 	movi	r3,84
  802564:	18000035 	stwio	zero,0(r3)
  SD_CLK_LOW;
  802568:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  80256c:	84400035 	stwio	r17,0(r16)
  SD_CLK_LOW;
  802570:	80000035 	stwio	zero,0(r16)
  SD_CLK_HIGH;
  802574:	84400035 	stwio	r17,0(r16)
    Ncc();
    for(x=0;x<5;x++)
    cmd_buffer[x]=cmd16[x];
    y = send_cmd(cmd_buffer);  
    Ncr();
    if(response_R(1)>1)
  802578:	01000044 	movi	r4,1
  80257c:	0800bd40 	call	800bd4 <response_R>
  802580:	10803fcc 	andi	r2,r2,255
  802584:	88bf7636 	bltu	r17,r2,802360 <SD_card_init+0x240>
    return 1;
    read_status =1; //sd card ready
  802588:	0005883a 	mov	r2,zero
  80258c:	d4677c45 	stb	r17,-25103(gp)
  802590:	003f7406 	br	802364 <SD_card_init+0x244>

00802594 <init>:
		return 5;
	}

}

void init(void) {
  802594:	deff7e04 	addi	sp,sp,-520
  802598:	dc008015 	stw	r16,512(sp)
  80259c:	dfc08115 	stw	ra,516(sp)
	if(SD_card_init() == 1) {
  8025a0:	08021200 	call	802120 <SD_card_init>
  8025a4:	10803fcc 	andi	r2,r2,255
  8025a8:	04000044 	movi	r16,1
  8025ac:	14005026 	beq	r2,r16,8026f0 <init+0x15c>
UINT32  search_for_filetype(BYTE *extension, data_file *df, int sub_directory, int search_root);
//-------------------------------------------------------------------------
// Initialize the Master Boot Record
BYTE init_mbr(void)
{
  BYTE Buffer[512]={0};
  8025b0:	000b883a 	mov	r5,zero
  8025b4:	01808004 	movi	r6,512
  8025b8:	d809883a 	mov	r4,sp
  8025bc:	08044bc0 	call	8044bc <memset>
  
  SD_read_lba(Buffer,0,1);  //Store master boot record in Buffer
  8025c0:	d809883a 	mov	r4,sp
  8025c4:	000b883a 	mov	r5,zero
  8025c8:	800d883a 	mov	r6,r16
  8025cc:	0800fc40 	call	800fc4 <SD_read_lba>

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  8025d0:	d8c07f83 	ldbu	r3,510(sp)
  8025d4:	00801544 	movi	r2,85
  8025d8:	1880031e 	bne	r3,r2,8025e8 <init+0x54>
  8025dc:	d8c07fc3 	ldbu	r3,511(sp)
  8025e0:	00802a84 	movi	r2,170
  8025e4:	18800526 	beq	r3,r2,8025fc <init+0x68>
		perror("SD Card initialisation failed.");
		exit(1);
	}
	if (init_mbr() == 1) {
		perror("Master boot record initialisation failed.");
  8025e8:	01002074 	movhi	r4,129
  8025ec:	21070c04 	addi	r4,r4,7216
  8025f0:	08045c00 	call	8045c0 <perror>
		exit(2);
  8025f4:	01000084 	movi	r4,2
  8025f8:	08044840 	call	804484 <exit>
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  8025fc:	d9c071c3 	ldbu	r7,455(sp)
  802600:	d8c07203 	ldbu	r3,456(sp)
  802604:	d9407243 	ldbu	r5,457(sp)
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802608:	d98072c3 	ldbu	r6,459(sp)
  80260c:	d8807303 	ldbu	r2,460(sp)
  802610:	d9007343 	ldbu	r4,461(sp)
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802614:	380e923a 	slli	r7,r7,8
  802618:	280a963a 	slli	r5,r5,24
  80261c:	da007183 	ldbu	r8,454(sp)
  802620:	1806943a 	slli	r3,r3,16
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802624:	300c923a 	slli	r6,r6,8
  802628:	2008963a 	slli	r4,r4,24
  80262c:	da407283 	ldbu	r9,458(sp)
  802630:	1004943a 	slli	r2,r2,16
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802634:	1947883a 	add	r3,r3,r5
  802638:	41d1883a 	add	r8,r8,r7
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  80263c:	1105883a 	add	r2,r2,r4
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802640:	40d1883a 	add	r8,r8,r3
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802644:	4993883a 	add	r9,r9,r6
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
  802648:	d8c07143 	ldbu	r3,453(sp)
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  80264c:	4893883a 	add	r9,r9,r2
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
  802650:	d8807043 	ldbu	r2,449(sp)
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  802654:	d1678204 	addi	r5,gp,-25080
  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
  802658:	d1278e44 	addi	r4,gp,-25031
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
  80265c:	28c00085 	stb	r3,2(r5)
  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
  802660:	d8c06fc3 	ldbu	r3,447(sp)
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
  802664:	20800085 	stb	r2,2(r4)

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
  802668:	d8806f83 	ldbu	r2,446(sp)
    MBR_Start_Sector[0] = Buffer[447];
  80266c:	d0e78e45 	stb	r3,-25031(gp)
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
  802670:	d8c07083 	ldbu	r3,450(sp)

  //Check the last 2 bytes of the buffer to ensure it is tagged as the MBR
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
  802674:	d0a75f05 	stb	r2,-25220(gp)
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
  802678:	d8807003 	ldbu	r2,448(sp)
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
  80267c:	d0e76c05 	stb	r3,-25168(gp)
    MBR_End_End[0] = Buffer[451];
    MBR_End_End[1] = Buffer[452];
  802680:	d8c07103 	ldbu	r3,452(sp)
  //buffer[510] should read 0x55 and buffer[511] should read 0xAA
  if(Buffer[510]==MASTER_BOOT_RECORD_ID1 && Buffer[511]==MASTER_BOOT_RECORD_ID2)
  {
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
  802684:	20800045 	stb	r2,1(r4)
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  802688:	d88070c3 	ldbu	r2,451(sp)
    MBR_End_End[1] = Buffer[452];
  80268c:	28c00045 	stb	r3,1(r5)
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
  802690:	d2279015 	stw	r8,-25024(gp)
    MBR_Bootable = Buffer[446];
    MBR_Start_Sector[0] = Buffer[447];
    MBR_Start_Sector[1] = Buffer[448];
    MBR_Start_Sector[2] = Buffer[449];
    MBR_Partition_Type = Buffer[450];
    MBR_End_End[0] = Buffer[451];
  802694:	d0a78205 	stb	r2,-25080(gp)
    MBR_End_End[1] = Buffer[452];
    MBR_End_End[2] = Buffer[453];
    MBR_BS_Location = Buffer[454] + (Buffer[455]<<8) + (Buffer[456]<<16) + (Buffer[457]<<24);
    MBR_Partition_Len = Buffer[458] + (Buffer[459]<<8) + (Buffer[460]<<16) + (Buffer[461]<<24);
  802698:	d2678115 	stw	r9,-25084(gp)
	}
	if (init_bs() == 1) {
  80269c:	0801af00 	call	801af0 <init_bs>
  8026a0:	10803fcc 	andi	r2,r2,255
  8026a4:	14001726 	beq	r2,r16,802704 <init+0x170>
		perror("Boot sector initialisation failed.");
		exit(3);
	}
	init_audio_codec();
  8026a8:	0802ee40 	call	802ee4 <init_audio_codec>
	LCD_Init();
  8026ac:	08002080 	call	800208 <LCD_Init>

	// Set up button interrupts
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
  8026b0:	00804034 	movhi	r2,256
  8026b4:	10841f04 	addi	r2,r2,4220
  8026b8:	10000035 	stwio	zero,0(r2)
	alt_irq_register( BUTTON_PIO_IRQ, (void*)0, button_ISR );
  8026bc:	8009883a 	mov	r4,r16
  8026c0:	000b883a 	mov	r5,zero
  8026c4:	01802034 	movhi	r6,128
  8026c8:	31828104 	addi	r6,r6,2564
  8026cc:	080e0040 	call	80e004 <alt_irq_register>
	IOWR(BUTTON_PIO_BASE, 2, 0xf);
  8026d0:	00c003c4 	movi	r3,15
  8026d4:	00804034 	movhi	r2,256
  8026d8:	10841e04 	addi	r2,r2,4216
  8026dc:	10c00035 	stwio	r3,0(r2)
}
  8026e0:	dfc08117 	ldw	ra,516(sp)
  8026e4:	dc008017 	ldw	r16,512(sp)
  8026e8:	dec08204 	addi	sp,sp,520
  8026ec:	f800283a 	ret

}

void init(void) {
	if(SD_card_init() == 1) {
		perror("SD Card initialisation failed.");
  8026f0:	01002074 	movhi	r4,129
  8026f4:	2106fb04 	addi	r4,r4,7148
  8026f8:	08045c00 	call	8045c0 <perror>
		exit(1);
  8026fc:	8009883a 	mov	r4,r16
  802700:	08044840 	call	804484 <exit>
	if (init_mbr() == 1) {
		perror("Master boot record initialisation failed.");
		exit(2);
	}
	if (init_bs() == 1) {
		perror("Boot sector initialisation failed.");
  802704:	01002074 	movhi	r4,129
  802708:	21070304 	addi	r4,r4,7180
  80270c:	08045c00 	call	8045c0 <perror>
		exit(3);
  802710:	010000c4 	movi	r4,3
  802714:	08044840 	call	804484 <exit>

00802718 <main>:
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register( BUTTON_PIO_IRQ, (void*)0, button_ISR );
	IOWR(BUTTON_PIO_BASE, 2, 0xf);
}

int main(void) {
  802718:	defff604 	addi	sp,sp,-40
  80271c:	df000815 	stw	fp,32(sp)
	BYTE buffer[512] = {0};
  802720:	00bffff4 	movhi	r2,65535
  802724:	10a97d04 	addi	r2,r2,-23052
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register( BUTTON_PIO_IRQ, (void*)0, button_ISR );
	IOWR(BUTTON_PIO_BASE, 2, 0xf);
}

int main(void) {
  802728:	d839883a 	mov	fp,sp
  80272c:	023ffff4 	movhi	r8,65535
  802730:	42296504 	addi	r8,r8,-23148
  802734:	dd000415 	stw	r20,16(sp)
	BYTE buffer[512] = {0};
  802738:	e0a9883a 	add	r20,fp,r2
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register( BUTTON_PIO_IRQ, (void*)0, button_ISR );
	IOWR(BUTTON_PIO_BASE, 2, 0xf);
}

int main(void) {
  80273c:	dfc00915 	stw	ra,36(sp)
  802740:	ddc00715 	stw	r23,28(sp)
  802744:	dd800615 	stw	r22,24(sp)
  802748:	dd400515 	stw	r21,20(sp)
  80274c:	dcc00315 	stw	r19,12(sp)
  802750:	dc800215 	stw	r18,8(sp)
  802754:	dc400115 	stw	r17,4(sp)
  802758:	dc000015 	stw	r16,0(sp)
	BYTE buffer[512] = {0};
  80275c:	a009883a 	mov	r4,r20
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	alt_irq_register( BUTTON_PIO_IRQ, (void*)0, button_ISR );
	IOWR(BUTTON_PIO_BASE, 2, 0xf);
}

int main(void) {
  802760:	da37883a 	add	sp,sp,r8
	BYTE buffer[512] = {0};
  802764:	000b883a 	mov	r5,zero
  802768:	01808004 	movi	r6,512
  80276c:	08044bc0 	call	8044bc <memset>
	int length;
	int i = 0;
	int rel_sect = 0;
	int play_mode = 0;
	char * filename = "";
	BYTE dly_buff[172][512] = {0};
  802770:	013ffff4 	movhi	r4,65535
  802774:	2129fd04 	addi	r4,r4,-22540
  802778:	2709883a 	add	r4,r4,fp
  80277c:	000b883a 	mov	r5,zero
  802780:	01800074 	movhi	r6,1
  802784:	31960004 	addi	r6,r6,22528
  802788:	08044bc0 	call	8044bc <memset>
	int dly_cnt = 0;
	int index = 0;
	int index2 = 0;

	init();
  80278c:	08025940 	call	802594 <init>

	while (1){
		rel_sect = 0;
		sect_num = 0;
  802790:	d0275a15 	stw	zero,-25240(gp)
		dly_channel = 0;
  802794:	d0275c15 	stw	zero,-25232(gp)
		dly_cnt = 0;
		reverse = 0;
  802798:	d0275b15 	stw	zero,-25236(gp)

		if (next_track) {
  80279c:	d0a00e17 	ldw	r2,-32712(gp)
  8027a0:	00fffff4 	movhi	r3,65535
  8027a4:	18e9fd04 	addi	r3,r3,-22540
  8027a8:	e0ef883a 	add	r23,fp,r3
	BYTE dly_buff[172][512] = {0};
	int dly_cnt = 0;
	int index = 0;
	int index2 = 0;

	init();
  8027ac:	e6ffff15 	stw	sp,-4(fp)
		sect_num = 0;
		dly_channel = 0;
		dly_cnt = 0;
		reverse = 0;

		if (next_track) {
  8027b0:	1000861e 	bne	r2,zero,8029cc <main+0x2b4>
			search_for_filetype("WAV", &df, 0, 1);
			next_track = 0;
			play_mode = get_play_mode(df);
		} else if (prev_track) {
  8027b4:	d0a75817 	ldw	r2,-25248(gp)
  8027b8:	1001311e 	bne	r2,zero,802c80 <main+0x568>
			df = prev_df;
			prev_track = 0;
			play_mode = get_play_mode(df);
		}

		length = 1+(int)(ceil(df.FileSize/(BPB_BytsPerSec*BPB_SecPerClus)));
  8027bc:	d1276143 	ldbu	r4,-25211(gp)
  8027c0:	d1677317 	ldw	r5,-25140(gp)
  8027c4:	04400044 	movi	r17,1
  8027c8:	0803eb80 	call	803eb8 <__mulsi3>
  8027cc:	00fffff4 	movhi	r3,65535
  8027d0:	18e96c04 	addi	r3,r3,-23120
  8027d4:	1f07883a 	add	r3,r3,fp
  8027d8:	19000017 	ldw	r4,0(r3)
  8027dc:	100b883a 	mov	r5,r2
  8027e0:	0803ea80 	call	803ea8 <__udivsi3>
  8027e4:	1009883a 	mov	r4,r2
  8027e8:	0803bd80 	call	803bd8 <__floatunsidf>
  8027ec:	180b883a 	mov	r5,r3
  8027f0:	1009883a 	mov	r4,r2
  8027f4:	08030440 	call	803044 <ceil>
  8027f8:	180b883a 	mov	r5,r3
  8027fc:	1009883a 	mov	r4,r2
  802800:	0803b000 	call	803b00 <__fixdfsi>
  802804:	1465883a 	add	r18,r2,r17
		int cc[length];
  802808:	9485883a 	add	r2,r18,r18
  80280c:	1085883a 	add	r2,r2,r2
  802810:	10800184 	addi	r2,r2,6
  802814:	00ffff04 	movi	r3,-4

		if (PLAY) {
  802818:	d1275717 	ldw	r4,-25252(gp)
			prev_track = 0;
			play_mode = get_play_mode(df);
		}

		length = 1+(int)(ceil(df.FileSize/(BPB_BytsPerSec*BPB_SecPerClus)));
		int cc[length];
  80281c:	10c4703a 	and	r2,r2,r3
  802820:	d8b7c83a 	sub	sp,sp,r2
  802824:	dc000304 	addi	r16,sp,12

		if (PLAY) {
  802828:	20006126 	beq	r4,zero,8029b0 <main+0x298>
			play_mode = get_play_mode(df);
  80282c:	013ffff4 	movhi	r4,65535
  802830:	21296c04 	addi	r4,r4,-23120
			LCD_File_Buffering(filename);

			build_cluster_chain(cc, length, &df);
  802834:	e43ffd15 	stw	r16,-12(fp)

		length = 1+(int)(ceil(df.FileSize/(BPB_BytsPerSec*BPB_SecPerClus)));
		int cc[length];

		if (PLAY) {
			play_mode = get_play_mode(df);
  802838:	2709883a 	add	r4,r4,fp
  80283c:	20800017 	ldw	r2,0(r4)
  802840:	01fffff4 	movhi	r7,65535
  802844:	39e96d04 	addi	r7,r7,-23116
  802848:	3f0f883a 	add	r7,r7,fp
  80284c:	d8800015 	stw	r2,0(sp)
  802850:	38c00017 	ldw	r3,0(r7)
  802854:	01fffff4 	movhi	r7,65535
  802858:	39e96804 	addi	r7,r7,-23136
  80285c:	3f0f883a 	add	r7,r7,fp
  802860:	d8c00115 	stw	r3,4(sp)
  802864:	00fffff4 	movhi	r3,65535
  802868:	18e96e04 	addi	r3,r3,-23112
  80286c:	1f07883a 	add	r3,r3,fp
  802870:	18800017 	ldw	r2,0(r3)
  802874:	00fffff4 	movhi	r3,65535
  802878:	18e96a04 	addi	r3,r3,-23128
  80287c:	1f07883a 	add	r3,r3,fp
  802880:	d8800215 	stw	r2,8(sp)
  802884:	00bffff4 	movhi	r2,65535
  802888:	10a96904 	addi	r2,r2,-23132
  80288c:	1705883a 	add	r2,r2,fp
  802890:	11400017 	ldw	r5,0(r2)
  802894:	00bffff4 	movhi	r2,65535
  802898:	10a96b04 	addi	r2,r2,-23124
  80289c:	1705883a 	add	r2,r2,fp
  8028a0:	39000017 	ldw	r4,0(r7)
  8028a4:	19800017 	ldw	r6,0(r3)
  8028a8:	11c00017 	ldw	r7,0(r2)
  8028ac:	08008cc0 	call	8008cc <get_play_mode>
			LCD_File_Buffering(filename);
  8028b0:	01002074 	movhi	r4,129
  8028b4:	21096d04 	addi	r4,r4,9652

		length = 1+(int)(ceil(df.FileSize/(BPB_BytsPerSec*BPB_SecPerClus)));
		int cc[length];

		if (PLAY) {
			play_mode = get_play_mode(df);
  8028b8:	e0bffe15 	stw	r2,-8(fp)
			LCD_File_Buffering(filename);
  8028bc:	08003ec0 	call	8003ec <LCD_File_Buffering>
//-------------------------------------------------------------------------
// Buffers the cluster chain of a file so that it can be streamed
void build_cluster_chain(int cc[],UINT32 length, data_file *df)
{
  int i=1;
  cc[0] = df->Clus;
  8028c0:	00fffff4 	movhi	r3,65535
  8028c4:	18e96b04 	addi	r3,r3,-23124
  8028c8:	1f07883a 	add	r3,r3,fp
  8028cc:	19000017 	ldw	r4,0(r3)
  8028d0:	e1fffd17 	ldw	r7,-12(fp)
  8028d4:	39000015 	stw	r4,0(r7)
  CalcFATSecAndOffset(df->Clus);
  8028d8:	08018040 	call	801804 <CalcFATSecAndOffset>

  while(i<length)
  8028dc:	8c800b2e 	bgeu	r17,r18,80290c <main+0x1f4>
  8028e0:	04c3fd04 	movi	r19,4084
  8028e4:	0583fdc4 	movi	r22,4087
  8028e8:	057ffd14 	movui	r21,65524
  {
    cc[i]=FATClusEntryVal;
  8028ec:	d1277917 	ldw	r4,-25116(gp)
// Returns 0 if there are more clusters
BYTE  isEOF(UINT32  FATContent)
{
  BYTE IsEOF = 0;
  
  if(CountofClusters < 4085)
  8028f0:	d0a78617 	ldw	r2,-25064(gp)
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  {
    cc[i]=FATClusEntryVal;
  8028f4:	81000115 	stw	r4,4(r16)
// Returns 0 if there are more clusters
BYTE  isEOF(UINT32  FATContent)
{
  BYTE IsEOF = 0;
  
  if(CountofClusters < 4085)
  8028f8:	98805e36 	bltu	r19,r2,802a74 <main+0x35c>
  {
    //FAT12
    if(FATContent >= 0x0FF8)
  8028fc:	b100602e 	bgeu	r22,r4,802a80 <main+0x368>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  802900:	8c400044 	addi	r17,r17,1
  802904:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  802908:	8cbff836 	bltu	r17,r18,8028ec <main+0x1d4>

			build_cluster_chain(cc, length, &df);

			LCD_Display(df.Name, play_mode);
  80290c:	e17ffe17 	ldw	r5,-8(fp)
  802910:	013ffff4 	movhi	r4,65535
  802914:	21296804 	addi	r4,r4,-23136
  802918:	2709883a 	add	r4,r4,fp
  80291c:	08005280 	call	800528 <LCD_Display>
			while(rel_sect == 0 && PLAY){
  802920:	d0a75717 	ldw	r2,-25252(gp)
  802924:	10002126 	beq	r2,zero,8029ac <main+0x294>
				rel_sect = get_rel_sector(&df, buffer, cc, sect_num);
  802928:	d1e75a17 	ldw	r7,-25240(gp)
  80292c:	e1bffd17 	ldw	r6,-12(fp)
  802930:	013ffff4 	movhi	r4,65535
  802934:	21296804 	addi	r4,r4,-23136
  802938:	2709883a 	add	r4,r4,fp
  80293c:	a00b883a 	mov	r5,r20
  802940:	08012200 	call	801220 <get_rel_sector>
  802944:	1023883a 	mov	r17,r2
				UINT16 tmp; //Create a 16-bit variable to pass to the FIFO
				if (reverse) {
  802948:	d0a75b17 	ldw	r2,-25236(gp)
  80294c:	10005826 	beq	r2,zero,802ab0 <main+0x398>
  802950:	01007fc4 	movi	r4,511
  802954:	01800404 	movi	r6,16
					if (rel_sect > 0)
						rel_sect = 0;
					for (i = 511; i >= 0; i = i-data_rate_incr) {
						while( IORD( AUD_FULL_BASE, 0 ) ); //Check if the FIFO is not full
  802958:	31400037 	ldwio	r5,0(r6)
						tmp = ( buffer[ i ] << 8 ) | ( buffer[ i - 1 ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
  80295c:	01fffff4 	movhi	r7,65535
  802960:	39e97cc4 	addi	r7,r7,-23053
  802964:	3f0f883a 	add	r7,r7,fp
  802968:	a105883a 	add	r2,r20,r4
  80296c:	3907883a 	add	r3,r7,r4
				UINT16 tmp; //Create a 16-bit variable to pass to the FIFO
				if (reverse) {
					if (rel_sect > 0)
						rel_sect = 0;
					for (i = 511; i >= 0; i = i-data_rate_incr) {
						while( IORD( AUD_FULL_BASE, 0 ) ); //Check if the FIFO is not full
  802970:	283ff91e 	bne	r5,zero,802958 <main+0x240>
						tmp = ( buffer[ i ] << 8 ) | ( buffer[ i - 1 ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
  802974:	10800003 	ldbu	r2,0(r2)
  802978:	18c00003 	ldbu	r3,0(r3)
  80297c:	1004923a 	slli	r2,r2,8
  802980:	10c4b03a 	or	r2,r2,r3
  802984:	28800035 	stwio	r2,0(r5)
				rel_sect = get_rel_sector(&df, buffer, cc, sect_num);
				UINT16 tmp; //Create a 16-bit variable to pass to the FIFO
				if (reverse) {
					if (rel_sect > 0)
						rel_sect = 0;
					for (i = 511; i >= 0; i = i-data_rate_incr) {
  802988:	d0e01017 	ldw	r3,-32704(gp)
  80298c:	20c9c83a 	sub	r4,r4,r3
  802990:	203ff10e 	bge	r4,zero,802958 <main+0x240>
  802994:	0440010e 	bge	zero,r17,80299c <main+0x284>
  802998:	0023883a 	mov	r17,zero
						while( IORD( AUD_FULL_BASE, 0 ) ); //Check if the FIFO is not full
						tmp = ( buffer[ i ] << 8 ) | ( buffer[ i - 1 ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
						//will be processed by the audio CODEC
					}
					sect_num--;
  80299c:	d0a75a17 	ldw	r2,-25240(gp)
  8029a0:	10bfffc4 	addi	r2,r2,-1
  8029a4:	d0a75a15 	stw	r2,-25240(gp)
			LCD_File_Buffering(filename);

			build_cluster_chain(cc, length, &df);

			LCD_Display(df.Name, play_mode);
			while(rel_sect == 0 && PLAY){
  8029a8:	883fdd26 	beq	r17,zero,802920 <main+0x208>
						}
					}
					sect_num++;
				}
			}
			PLAY = 0;
  8029ac:	d0275715 	stw	zero,-25252(gp)

	init();

	while (1){
		rel_sect = 0;
		sect_num = 0;
  8029b0:	d0275a15 	stw	zero,-25240(gp)
		dly_channel = 0;
  8029b4:	d0275c15 	stw	zero,-25232(gp)
		dly_cnt = 0;
		reverse = 0;
  8029b8:	d0275b15 	stw	zero,-25236(gp)
						}
					}
					sect_num++;
				}
			}
			PLAY = 0;
  8029bc:	e6ffff17 	ldw	sp,-4(fp)
		sect_num = 0;
		dly_channel = 0;
		dly_cnt = 0;
		reverse = 0;

		if (next_track) {
  8029c0:	d0a00e17 	ldw	r2,-32712(gp)
	BYTE dly_buff[172][512] = {0};
	int dly_cnt = 0;
	int index = 0;
	int index2 = 0;

	init();
  8029c4:	e6ffff15 	stw	sp,-4(fp)
		sect_num = 0;
		dly_channel = 0;
		dly_cnt = 0;
		reverse = 0;

		if (next_track) {
  8029c8:	103f7a26 	beq	r2,zero,8027b4 <main+0x9c>
			search_for_filetype("WAV", &df, 0, 1);
  8029cc:	017ffff4 	movhi	r5,65535
  8029d0:	29696804 	addi	r5,r5,-23136
  8029d4:	01002074 	movhi	r4,129
  8029d8:	21071704 	addi	r4,r4,7260
  8029dc:	01c00044 	movi	r7,1
  8029e0:	2f0b883a 	add	r5,r5,fp
  8029e4:	000d883a 	mov	r6,zero
  8029e8:	08013c40 	call	8013c4 <search_for_filetype>
			next_track = 0;
			play_mode = get_play_mode(df);
  8029ec:	013ffff4 	movhi	r4,65535
  8029f0:	21296c04 	addi	r4,r4,-23120
  8029f4:	2709883a 	add	r4,r4,fp
  8029f8:	20800017 	ldw	r2,0(r4)
		dly_cnt = 0;
		reverse = 0;

		if (next_track) {
			search_for_filetype("WAV", &df, 0, 1);
			next_track = 0;
  8029fc:	d0200e15 	stw	zero,-32712(gp)
			play_mode = get_play_mode(df);
  802a00:	01fffff4 	movhi	r7,65535
  802a04:	39e96d04 	addi	r7,r7,-23116
  802a08:	d8800015 	stw	r2,0(sp)
  802a0c:	3f0f883a 	add	r7,r7,fp
  802a10:	38c00017 	ldw	r3,0(r7)
  802a14:	d8c00115 	stw	r3,4(sp)
  802a18:	00fffff4 	movhi	r3,65535
  802a1c:	18e96e04 	addi	r3,r3,-23112
  802a20:	1f07883a 	add	r3,r3,fp
  802a24:	18800017 	ldw	r2,0(r3)
  802a28:	d8800215 	stw	r2,8(sp)
				prev_df = curr_df;
				search_for_filetype("WAV", &curr_df, 0, 1);
			}
			df = prev_df;
			prev_track = 0;
			play_mode = get_play_mode(df);
  802a2c:	00bffff4 	movhi	r2,65535
  802a30:	10a96904 	addi	r2,r2,-23132
  802a34:	1705883a 	add	r2,r2,fp
  802a38:	11400017 	ldw	r5,0(r2)
  802a3c:	01fffff4 	movhi	r7,65535
  802a40:	39e96804 	addi	r7,r7,-23136
  802a44:	00fffff4 	movhi	r3,65535
  802a48:	18e96a04 	addi	r3,r3,-23128
  802a4c:	00bffff4 	movhi	r2,65535
  802a50:	10a96b04 	addi	r2,r2,-23124
  802a54:	3f0f883a 	add	r7,r7,fp
  802a58:	1f07883a 	add	r3,r3,fp
  802a5c:	1705883a 	add	r2,r2,fp
  802a60:	39000017 	ldw	r4,0(r7)
  802a64:	19800017 	ldw	r6,0(r3)
  802a68:	11c00017 	ldw	r7,0(r2)
  802a6c:	08008cc0 	call	8008cc <get_play_mode>
  802a70:	003f5206 	br	8027bc <main+0xa4>
  {
    //FAT12
    if(FATContent >= 0x0FF8)
    IsEOF = 1;
  }
  else if(CountofClusters < 65525)
  802a74:	a8800736 	bltu	r21,r2,802a94 <main+0x37c>
  {
    //FAT16
    if(FATContent >= 0xFFF8)
  802a78:	00bffdd4 	movui	r2,65527
  802a7c:	113fa036 	bltu	r2,r4,802900 <main+0x1e8>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  802a80:	8c400044 	addi	r17,r17,1
  while(i<length)
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
  802a84:	08018040 	call	801804 <CalcFATSecAndOffset>
    i++;
  802a88:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  802a8c:	8cbf9736 	bltu	r17,r18,8028ec <main+0x1d4>
  802a90:	003f9e06 	br	80290c <main+0x1f4>
    IsEOF = 1;
  }
  else
  {
    //FAT32
    if(FATContent >= 0x0FFFFFF8)
  802a94:	00c40034 	movhi	r3,4096
  802a98:	18fffdc4 	addi	r3,r3,-9
  802a9c:	193ff82e 	bgeu	r3,r4,802a80 <main+0x368>
  {
    cc[i]=FATClusEntryVal;
    
    if(!isEOF(FATClusEntryVal))
      {CalcFATSecAndOffset(FATClusEntryVal);}
    i++;
  802aa0:	8c400044 	addi	r17,r17,1
  802aa4:	84000104 	addi	r16,r16,4
{
  int i=1;
  cc[0] = df->Clus;
  CalcFATSecAndOffset(df->Clus);

  while(i<length)
  802aa8:	8cbf9036 	bltu	r17,r18,8028ec <main+0x1d4>
  802aac:	003f9706 	br	80290c <main+0x1f4>
						tmp = ( buffer[ i ] << 8 ) | ( buffer[ i - 1 ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
						//will be processed by the audio CODEC
					}
					sect_num--;
				} else if (dly_channel) {
  802ab0:	d0a75c17 	ldw	r2,-25232(gp)
  802ab4:	10001e1e 	bne	r2,zero,802b30 <main+0x418>
  802ab8:	000f883a 	mov	r7,zero
						IOWR( AUDIO_0_BASE, 0, tmp );
					}
					sect_num++;
				} else {
					for (i = 0; i < 512; i = i+data_rate_incr) {
						while( IORD( AUD_FULL_BASE, 0 ) ); //Check if the FIFO is not full
  802abc:	01800404 	movi	r6,16
  802ac0:	31400037 	ldwio	r5,0(r6)
  802ac4:	283ffd1e 	bne	r5,zero,802abc <main+0x3a4>
						tmp = ( buffer[ i + 1 ] << 8 ) | ( buffer[ i ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
  802ac8:	013ffff4 	movhi	r4,65535
  802acc:	21297d44 	addi	r4,r4,-23051
  802ad0:	2709883a 	add	r4,r4,fp
  802ad4:	21c5883a 	add	r2,r4,r7
  802ad8:	10c00003 	ldbu	r3,0(r2)
  802adc:	a1c9883a 	add	r4,r20,r7
  802ae0:	20800003 	ldbu	r2,0(r4)
  802ae4:	1806923a 	slli	r3,r3,8
  802ae8:	1886b03a 	or	r3,r3,r2
  802aec:	28c00035 	stwio	r3,0(r5)
  802af0:	3009883a 	mov	r4,r6
						//will be processed by the audio CODEC
						while( IORD( AUD_FULL_BASE, 0 ) );
  802af4:	20800037 	ldwio	r2,0(r4)
  802af8:	103ffe1e 	bne	r2,zero,802af4 <main+0x3dc>
						if (data_rate == HALF_SPEED) {
  802afc:	d0a00f17 	ldw	r2,-32708(gp)
  802b00:	10000926 	beq	r2,zero,802b28 <main+0x410>
						tmp = ( dly_buff[ index2 ][ i + 3 ] << 8 ) | ( dly_buff[ index2 ][ i + 2 ] );
						IOWR( AUDIO_0_BASE, 0, tmp );
					}
					sect_num++;
				} else {
					for (i = 0; i < 512; i = i+data_rate_incr) {
  802b04:	d0a01017 	ldw	r2,-32704(gp)
  802b08:	00c07fc4 	movi	r3,511
  802b0c:	388f883a 	add	r7,r7,r2
  802b10:	19ffea0e 	bge	r3,r7,802abc <main+0x3a4>
						while( IORD( AUD_FULL_BASE, 0 ) );
						if (data_rate == HALF_SPEED) {
							IOWR( AUDIO_0_BASE, 0, tmp );
						}
					}
					sect_num++;
  802b14:	d0a75a17 	ldw	r2,-25240(gp)
  802b18:	10800044 	addi	r2,r2,1
  802b1c:	d0a75a15 	stw	r2,-25240(gp)
			LCD_File_Buffering(filename);

			build_cluster_chain(cc, length, &df);

			LCD_Display(df.Name, play_mode);
			while(rel_sect == 0 && PLAY){
  802b20:	883f7f26 	beq	r17,zero,802920 <main+0x208>
  802b24:	003fa106 	br	8029ac <main+0x294>
						tmp = ( buffer[ i + 1 ] << 8 ) | ( buffer[ i ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
						//will be processed by the audio CODEC
						while( IORD( AUD_FULL_BASE, 0 ) );
						if (data_rate == HALF_SPEED) {
							IOWR( AUDIO_0_BASE, 0, tmp );
  802b28:	10c00035 	stwio	r3,0(r2)
  802b2c:	003ff506 	br	802b04 <main+0x3ec>
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
						//will be processed by the audio CODEC
					}
					sect_num--;
				} else if (dly_channel) {
					index = sect_num % 172;
  802b30:	d4275a17 	ldw	r16,-25240(gp)
  802b34:	008003c4 	movi	r2,15
  802b38:	80c02b14 	ori	r3,r16,172
  802b3c:	10c04b36 	bltu	r2,r3,802c6c <main+0x554>
  802b40:	8004913a 	slli	r2,r16,4
  802b44:	00c02074 	movhi	r3,129
  802b48:	18ca8c04 	addi	r3,r3,10800
  802b4c:	10802b14 	ori	r2,r2,172
  802b50:	10c5883a 	add	r2,r2,r3
  802b54:	11000003 	ldbu	r4,0(r2)
  802b58:	01402b04 	movi	r5,172
  802b5c:	0803eb80 	call	803eb8 <__mulsi3>
  802b60:	80a5c83a 	sub	r18,r16,r2
					index2 = (index + 1) % 172;
  802b64:	94000044 	addi	r16,r18,1
  802b68:	80c02b14 	ori	r3,r16,172
  802b6c:	008003c4 	movi	r2,15
  802b70:	10c03936 	bltu	r2,r3,802c58 <main+0x540>
  802b74:	8004913a 	slli	r2,r16,4
  802b78:	01002074 	movhi	r4,129
  802b7c:	210a8c04 	addi	r4,r4,10800
  802b80:	10802b14 	ori	r2,r2,172
  802b84:	1105883a 	add	r2,r2,r4
  802b88:	11000003 	ldbu	r4,0(r2)
  802b8c:	01402b04 	movi	r5,172
  802b90:	0803eb80 	call	803eb8 <__mulsi3>
  802b94:	9006927a 	slli	r3,r18,9
  802b98:	01fffff4 	movhi	r7,65535
  802b9c:	39e9fd04 	addi	r7,r7,-22540
  802ba0:	3f0f883a 	add	r7,r7,fp
  802ba4:	8089c83a 	sub	r4,r16,r2
  802ba8:	a00b883a 	mov	r5,r20
  802bac:	38c7883a 	add	r3,r7,r3
					for (i = 0; i < 512; i++) {
						dly_buff[index][i] = buffer[i];
  802bb0:	28800003 	ldbu	r2,0(r5)
  802bb4:	29400044 	addi	r5,r5,1
  802bb8:	18800005 	stb	r2,0(r3)
  802bbc:	18c00044 	addi	r3,r3,1
					}
					sect_num--;
				} else if (dly_channel) {
					index = sect_num % 172;
					index2 = (index + 1) % 172;
					for (i = 0; i < 512; i++) {
  802bc0:	2dfffb1e 	bne	r5,r23,802bb0 <main+0x498>
  802bc4:	2010927a 	slli	r8,r4,9
  802bc8:	000f883a 	mov	r7,zero
						dly_buff[index][i] = buffer[i];
					}
					for (i = 0; i < 512; i = i+2*data_rate_incr) {
						while( IORD( AUD_FULL_BASE, 0 ) ); //Check if the FIFO is not full
  802bcc:	01800404 	movi	r6,16
  802bd0:	31400037 	ldwio	r5,0(r6)
  802bd4:	283ffd1e 	bne	r5,zero,802bcc <main+0x4b4>
						tmp = ( buffer[ i + 1 ] << 8 ) | ( buffer[ i ] );
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
  802bd8:	00bffff4 	movhi	r2,65535
  802bdc:	10a97d44 	addi	r2,r2,-23051
  802be0:	1705883a 	add	r2,r2,fp
  802be4:	11c7883a 	add	r3,r2,r7
  802be8:	18800003 	ldbu	r2,0(r3)
  802bec:	a1c9883a 	add	r4,r20,r7
  802bf0:	20c00003 	ldbu	r3,0(r4)
  802bf4:	1004923a 	slli	r2,r2,8
  802bf8:	10c4b03a 	or	r2,r2,r3
  802bfc:	28800035 	stwio	r2,0(r5)
  802c00:	3005883a 	mov	r2,r6
						//will be processed by the audio CODEC
						while( IORD( AUD_FULL_BASE, 0 ) );
  802c04:	11400037 	ldwio	r5,0(r2)
  802c08:	283ffe1e 	bne	r5,zero,802c04 <main+0x4ec>
						tmp = ( dly_buff[ index2 ][ i + 3 ] << 8 ) | ( dly_buff[ index2 ][ i + 2 ] );
						IOWR( AUDIO_0_BASE, 0, tmp );
  802c0c:	00fffff4 	movhi	r3,65535
  802c10:	18e96804 	addi	r3,r3,-23136
  802c14:	1f07883a 	add	r3,r3,fp
  802c18:	40c5883a 	add	r2,r8,r3
  802c1c:	11c5883a 	add	r2,r2,r7
  802c20:	10c095c3 	ldbu	r3,599(r2)
  802c24:	11009583 	ldbu	r4,598(r2)
  802c28:	1806923a 	slli	r3,r3,8
  802c2c:	1906b03a 	or	r3,r3,r4
  802c30:	28c00035 	stwio	r3,0(r5)
					index = sect_num % 172;
					index2 = (index + 1) % 172;
					for (i = 0; i < 512; i++) {
						dly_buff[index][i] = buffer[i];
					}
					for (i = 0; i < 512; i = i+2*data_rate_incr) {
  802c34:	d0a01017 	ldw	r2,-32704(gp)
  802c38:	00c07fc4 	movi	r3,511
  802c3c:	1085883a 	add	r2,r2,r2
  802c40:	388f883a 	add	r7,r7,r2
  802c44:	19ffe10e 	bge	r3,r7,802bcc <main+0x4b4>
						while( IORD( AUD_FULL_BASE, 0 ) );
						if (data_rate == HALF_SPEED) {
							IOWR( AUDIO_0_BASE, 0, tmp );
						}
					}
					sect_num++;
  802c48:	d0a75a17 	ldw	r2,-25240(gp)
  802c4c:	10800044 	addi	r2,r2,1
  802c50:	d0a75a15 	stw	r2,-25240(gp)
  802c54:	003fb206 	br	802b20 <main+0x408>
						//will be processed by the audio CODEC
					}
					sect_num--;
				} else if (dly_channel) {
					index = sect_num % 172;
					index2 = (index + 1) % 172;
  802c58:	8009883a 	mov	r4,r16
  802c5c:	01402b04 	movi	r5,172
  802c60:	0803de80 	call	803de8 <__divsi3>
  802c64:	1009883a 	mov	r4,r2
  802c68:	003fc806 	br	802b8c <main+0x474>
						IOWR( AUDIO_0_BASE, 0, tmp ); //Write the 16-bit variable tmp to the FIFO where it
						//will be processed by the audio CODEC
					}
					sect_num--;
				} else if (dly_channel) {
					index = sect_num % 172;
  802c6c:	8009883a 	mov	r4,r16
  802c70:	01402b04 	movi	r5,172
  802c74:	0803de80 	call	803de8 <__divsi3>
  802c78:	1009883a 	mov	r4,r2
  802c7c:	003fb606 	br	802b58 <main+0x440>
			next_track = 0;
			play_mode = get_play_mode(df);
		} else if (prev_track) {
			data_file curr_df;
			data_file prev_df;
			search_for_filetype("WAV", &curr_df, 0, 1);
  802c80:	017ffff4 	movhi	r5,65535
  802c84:	29697604 	addi	r5,r5,-23080
  802c88:	01002074 	movhi	r4,129
  802c8c:	21071704 	addi	r4,r4,7260
  802c90:	01c00044 	movi	r7,1
  802c94:	2f0b883a 	add	r5,r5,fp
  802c98:	000d883a 	mov	r6,zero
  802c9c:	08013c40 	call	8013c4 <search_for_filetype>

			while(curr_df.Sector != df.Sector) {
  802ca0:	013ffff4 	movhi	r4,65535
  802ca4:	21296d04 	addi	r4,r4,-23116
  802ca8:	01fffff4 	movhi	r7,65535
  802cac:	39e97b04 	addi	r7,r7,-23060
  802cb0:	2709883a 	add	r4,r4,fp
  802cb4:	3f0f883a 	add	r7,r7,fp
  802cb8:	20c00017 	ldw	r3,0(r4)
  802cbc:	38800017 	ldw	r2,0(r7)
  802cc0:	18804626 	beq	r3,r2,802ddc <main+0x6c4>
				prev_df = curr_df;
				search_for_filetype("WAV", &curr_df, 0, 1);
  802cc4:	017ffff4 	movhi	r5,65535
  802cc8:	29697604 	addi	r5,r5,-23080
  802ccc:	2f0b883a 	add	r5,r5,fp
			data_file curr_df;
			data_file prev_df;
			search_for_filetype("WAV", &curr_df, 0, 1);

			while(curr_df.Sector != df.Sector) {
				prev_df = curr_df;
  802cd0:	28800017 	ldw	r2,0(r5)
  802cd4:	00fffff4 	movhi	r3,65535
  802cd8:	18e96f04 	addi	r3,r3,-23108
  802cdc:	1f07883a 	add	r3,r3,fp
  802ce0:	18800015 	stw	r2,0(r3)
  802ce4:	00bffff4 	movhi	r2,65535
  802ce8:	10a97704 	addi	r2,r2,-23076
  802cec:	1705883a 	add	r2,r2,fp
  802cf0:	10c00017 	ldw	r3,0(r2)
  802cf4:	00bffff4 	movhi	r2,65535
  802cf8:	10a97004 	addi	r2,r2,-23104
  802cfc:	1705883a 	add	r2,r2,fp
  802d00:	10c00015 	stw	r3,0(r2)
  802d04:	00fffff4 	movhi	r3,65535
  802d08:	18e97804 	addi	r3,r3,-23072
  802d0c:	1f07883a 	add	r3,r3,fp
  802d10:	18800017 	ldw	r2,0(r3)
  802d14:	00fffff4 	movhi	r3,65535
  802d18:	18e97104 	addi	r3,r3,-23100
  802d1c:	1f07883a 	add	r3,r3,fp
  802d20:	18800015 	stw	r2,0(r3)
  802d24:	00bffff4 	movhi	r2,65535
  802d28:	10a97904 	addi	r2,r2,-23068
  802d2c:	1705883a 	add	r2,r2,fp
  802d30:	10c00017 	ldw	r3,0(r2)
  802d34:	00bffff4 	movhi	r2,65535
  802d38:	10a97204 	addi	r2,r2,-23096
  802d3c:	1705883a 	add	r2,r2,fp
  802d40:	10c00015 	stw	r3,0(r2)
  802d44:	00fffff4 	movhi	r3,65535
  802d48:	18e97a04 	addi	r3,r3,-23064
  802d4c:	1f07883a 	add	r3,r3,fp
  802d50:	18800017 	ldw	r2,0(r3)
  802d54:	00fffff4 	movhi	r3,65535
  802d58:	18e97304 	addi	r3,r3,-23092
  802d5c:	1f07883a 	add	r3,r3,fp
  802d60:	18800015 	stw	r2,0(r3)
  802d64:	00bffff4 	movhi	r2,65535
  802d68:	10a97b04 	addi	r2,r2,-23060
  802d6c:	1705883a 	add	r2,r2,fp
  802d70:	10c00017 	ldw	r3,0(r2)
  802d74:	00bffff4 	movhi	r2,65535
  802d78:	10a97404 	addi	r2,r2,-23088
  802d7c:	1705883a 	add	r2,r2,fp
  802d80:	10c00015 	stw	r3,0(r2)
  802d84:	00fffff4 	movhi	r3,65535
  802d88:	18e97c04 	addi	r3,r3,-23056
  802d8c:	1f07883a 	add	r3,r3,fp
  802d90:	18800017 	ldw	r2,0(r3)
  802d94:	00fffff4 	movhi	r3,65535
  802d98:	18e97504 	addi	r3,r3,-23084
  802d9c:	1f07883a 	add	r3,r3,fp
				search_for_filetype("WAV", &curr_df, 0, 1);
  802da0:	01002074 	movhi	r4,129
  802da4:	21071704 	addi	r4,r4,7260
  802da8:	01c00044 	movi	r7,1
			data_file curr_df;
			data_file prev_df;
			search_for_filetype("WAV", &curr_df, 0, 1);

			while(curr_df.Sector != df.Sector) {
				prev_df = curr_df;
  802dac:	18800015 	stw	r2,0(r3)
				search_for_filetype("WAV", &curr_df, 0, 1);
  802db0:	000d883a 	mov	r6,zero
  802db4:	08013c40 	call	8013c4 <search_for_filetype>
		} else if (prev_track) {
			data_file curr_df;
			data_file prev_df;
			search_for_filetype("WAV", &curr_df, 0, 1);

			while(curr_df.Sector != df.Sector) {
  802db8:	013ffff4 	movhi	r4,65535
  802dbc:	21297b04 	addi	r4,r4,-23060
  802dc0:	01fffff4 	movhi	r7,65535
  802dc4:	39e96d04 	addi	r7,r7,-23116
  802dc8:	2709883a 	add	r4,r4,fp
  802dcc:	3f0f883a 	add	r7,r7,fp
  802dd0:	20c00017 	ldw	r3,0(r4)
  802dd4:	38800017 	ldw	r2,0(r7)
  802dd8:	18bfba1e 	bne	r3,r2,802cc4 <main+0x5ac>
				prev_df = curr_df;
				search_for_filetype("WAV", &curr_df, 0, 1);
			}
			df = prev_df;
  802ddc:	00bffff4 	movhi	r2,65535
  802de0:	10a97304 	addi	r2,r2,-23092
  802de4:	00fffff4 	movhi	r3,65535
  802de8:	18e96f04 	addi	r3,r3,-23108
  802dec:	1705883a 	add	r2,r2,fp
  802df0:	1f07883a 	add	r3,r3,fp
  802df4:	11000017 	ldw	r4,0(r2)
  802df8:	18800017 	ldw	r2,0(r3)
  802dfc:	01fffff4 	movhi	r7,65535
  802e00:	39e96804 	addi	r7,r7,-23136
  802e04:	3f0f883a 	add	r7,r7,fp
  802e08:	38800015 	stw	r2,0(r7)
  802e0c:	00bffff4 	movhi	r2,65535
  802e10:	10a97004 	addi	r2,r2,-23104
  802e14:	1705883a 	add	r2,r2,fp
  802e18:	10c00017 	ldw	r3,0(r2)
  802e1c:	01fffff4 	movhi	r7,65535
  802e20:	39e96904 	addi	r7,r7,-23132
  802e24:	3f0f883a 	add	r7,r7,fp
  802e28:	38c00015 	stw	r3,0(r7)
  802e2c:	00fffff4 	movhi	r3,65535
  802e30:	18e97104 	addi	r3,r3,-23100
  802e34:	1f07883a 	add	r3,r3,fp
  802e38:	18800017 	ldw	r2,0(r3)
  802e3c:	01fffff4 	movhi	r7,65535
  802e40:	39e96a04 	addi	r7,r7,-23128
  802e44:	3f0f883a 	add	r7,r7,fp
  802e48:	38800015 	stw	r2,0(r7)
  802e4c:	00bffff4 	movhi	r2,65535
  802e50:	10a97204 	addi	r2,r2,-23096
  802e54:	1705883a 	add	r2,r2,fp
  802e58:	10c00017 	ldw	r3,0(r2)
  802e5c:	01fffff4 	movhi	r7,65535
  802e60:	39e96b04 	addi	r7,r7,-23124
  802e64:	3f0f883a 	add	r7,r7,fp
  802e68:	38c00015 	stw	r3,0(r7)
  802e6c:	00fffff4 	movhi	r3,65535
  802e70:	18e97404 	addi	r3,r3,-23088
  802e74:	1f07883a 	add	r3,r3,fp
  802e78:	18800017 	ldw	r2,0(r3)
  802e7c:	01fffff4 	movhi	r7,65535
  802e80:	39e96d04 	addi	r7,r7,-23116
  802e84:	3f0f883a 	add	r7,r7,fp
  802e88:	38800015 	stw	r2,0(r7)
  802e8c:	00bffff4 	movhi	r2,65535
  802e90:	10a97504 	addi	r2,r2,-23084
  802e94:	1705883a 	add	r2,r2,fp
  802e98:	10c00017 	ldw	r3,0(r2)
  802e9c:	01fffff4 	movhi	r7,65535
  802ea0:	39e96e04 	addi	r7,r7,-23112
  802ea4:	00bffff4 	movhi	r2,65535
  802ea8:	10a96c04 	addi	r2,r2,-23120
  802eac:	3f0f883a 	add	r7,r7,fp
  802eb0:	1705883a 	add	r2,r2,fp
  802eb4:	38c00015 	stw	r3,0(r7)
  802eb8:	11000015 	stw	r4,0(r2)
			prev_track = 0;
  802ebc:	d0275815 	stw	zero,-25248(gp)
			play_mode = get_play_mode(df);
  802ec0:	00fffff4 	movhi	r3,65535
  802ec4:	18e96d04 	addi	r3,r3,-23116
  802ec8:	d9000015 	stw	r4,0(sp)
  802ecc:	1f07883a 	add	r3,r3,fp
  802ed0:	18800017 	ldw	r2,0(r3)
  802ed4:	d8800115 	stw	r2,4(sp)
  802ed8:	38c00017 	ldw	r3,0(r7)
  802edc:	d8c00215 	stw	r3,8(sp)
  802ee0:	003ed206 	br	802a2c <main+0x314>

00802ee4 <init_audio_codec>:
#include <stdio.h>
#include "Open_I2C.h"
#include "wm8731.h"

void init_audio_codec()
{
  802ee4:	deffff04 	addi	sp,sp,-4
	I2C_Init(10000000/I2C_FREQ-1);
  802ee8:	010018c4 	movi	r4,99
#include <stdio.h>
#include "Open_I2C.h"
#include "wm8731.h"

void init_audio_codec()
{
  802eec:	dfc00015 	stw	ra,0(sp)
	I2C_Init(10000000/I2C_FREQ-1);
  802ef0:	08008380 	call	800838 <I2C_Init>
	
	//  Check Audio CODEC on I2C Bus, Address = 0x34
	if(I2C_Send(0x34,1,0))
  802ef4:	01400044 	movi	r5,1
  802ef8:	01000d04 	movi	r4,52
  802efc:	000d883a 	mov	r6,zero
  802f00:	08007dc0 	call	8007dc <I2C_Send>
  802f04:	10803fcc 	andi	r2,r2,255
	{
    int count = 0;
    	printf("\nFind Audio CODEC on I2C Bus, Address = 0x34.\n");
  802f08:	01002074 	movhi	r4,129
  802f0c:	21071804 	addi	r4,r4,7264
void init_audio_codec()
{
	I2C_Init(10000000/I2C_FREQ-1);
	
	//  Check Audio CODEC on I2C Bus, Address = 0x34
	if(I2C_Send(0x34,1,0))
  802f10:	10004726 	beq	r2,zero,803030 <init_audio_codec+0x14c>
	{
    int count = 0;
    	printf("\nFind Audio CODEC on I2C Bus, Address = 0x34.\n");
  802f14:	08046ec0 	call	8046ec <puts>
	    //Reset Device
		  //    I2C_Send(0xFE, 0, 0); //Reset MSB
  		//    I2C_Send(0x00, 0, 1); //Write 0 to Reset LSB
    
    	count += I2C_Send(0x08, 0, 0); //Analog Audio Path Control MSB
  802f18:	000b883a 	mov	r5,zero
  802f1c:	01000204 	movi	r4,8
  802f20:	000d883a 	mov	r6,zero
  802f24:	08007dc0 	call	8007dc <I2C_Send>
    	count += I2C_Send(0x12, 0, 1); //Analog Audio Path Control LSB
  802f28:	01000484 	movi	r4,18
  802f2c:	000b883a 	mov	r5,zero
  802f30:	01800044 	movi	r6,1
  802f34:	08007dc0 	call	8007dc <I2C_Send>
    	I2C_Send(0x34,1,0);
  802f38:	01000d04 	movi	r4,52
  802f3c:	01400044 	movi	r5,1
  802f40:	000d883a 	mov	r6,zero
  802f44:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x0A, 0, 0); //Digital Audio Path Control MSB
  802f48:	01000284 	movi	r4,10
  802f4c:	000b883a 	mov	r5,zero
  802f50:	000d883a 	mov	r6,zero
  802f54:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x00, 0, 1); //Digital Audio Path Control LSB
  802f58:	0009883a 	mov	r4,zero
  802f5c:	000b883a 	mov	r5,zero
  802f60:	01800044 	movi	r6,1
  802f64:	08007dc0 	call	8007dc <I2C_Send>
	    I2C_Send(0x34,1,0);
  802f68:	01000d04 	movi	r4,52
  802f6c:	01400044 	movi	r5,1
  802f70:	000d883a 	mov	r6,zero
  802f74:	08007dc0 	call	8007dc <I2C_Send>
    	count += I2C_Send(0x0C, 0, 0); //Power Down Control MSB
  802f78:	01000304 	movi	r4,12
  802f7c:	000b883a 	mov	r5,zero
  802f80:	000d883a 	mov	r6,zero
  802f84:	08007dc0 	call	8007dc <I2C_Send>
    	count += I2C_Send(0x00, 0, 1); //Power Down Control LSB
  802f88:	0009883a 	mov	r4,zero
  802f8c:	000b883a 	mov	r5,zero
  802f90:	01800044 	movi	r6,1
  802f94:	08007dc0 	call	8007dc <I2C_Send>
    	I2C_Send(0x34,1,0);
  802f98:	01000d04 	movi	r4,52
  802f9c:	01400044 	movi	r5,1
  802fa0:	000d883a 	mov	r6,zero
  802fa4:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x0E, 0, 0); //Digital Audio Interface Format MSB
  802fa8:	01000384 	movi	r4,14
  802fac:	000b883a 	mov	r5,zero
  802fb0:	000d883a 	mov	r6,zero
  802fb4:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x10, 0, 1); //Digital Audio Interface Format LSB
  802fb8:	01000404 	movi	r4,16
  802fbc:	000b883a 	mov	r5,zero
  802fc0:	01800044 	movi	r6,1
  802fc4:	08007dc0 	call	8007dc <I2C_Send>
	    I2C_Send(0x34,1,0);
  802fc8:	01000d04 	movi	r4,52
  802fcc:	01400044 	movi	r5,1
  802fd0:	000d883a 	mov	r6,zero
  802fd4:	08007dc0 	call	8007dc <I2C_Send>
    	count += I2C_Send(0x10, 0, 0); //Sampling Control Register MSB
  802fd8:	01000404 	movi	r4,16
  802fdc:	000b883a 	mov	r5,zero
  802fe0:	000d883a 	mov	r6,zero
  802fe4:	08007dc0 	call	8007dc <I2C_Send>
    	count += I2C_Send(0x22, 0, 1); //Sampling Control Register LSB
  802fe8:	01000884 	movi	r4,34
  802fec:	000b883a 	mov	r5,zero
  802ff0:	01800044 	movi	r6,1
  802ff4:	08007dc0 	call	8007dc <I2C_Send>
    	I2C_Send(0x34,1,0);
  802ff8:	01000d04 	movi	r4,52
  802ffc:	01400044 	movi	r5,1
  803000:	000d883a 	mov	r6,zero
  803004:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x12, 0, 0); //Active Control Register MSB
  803008:	01000484 	movi	r4,18
  80300c:	000b883a 	mov	r5,zero
  803010:	000d883a 	mov	r6,zero
  803014:	08007dc0 	call	8007dc <I2C_Send>
	    count += I2C_Send(0x01, 0, 1); //Active Control Register LSB
  803018:	01000044 	movi	r4,1
  80301c:	000b883a 	mov	r5,zero
  803020:	200d883a 	mov	r6,r4
	}
	else
		printf("\nCan't Find Audio CODEC on I2C Bus.\n");
}
  803024:	dfc00017 	ldw	ra,0(sp)
  803028:	dec00104 	addi	sp,sp,4
	    I2C_Send(0x34,1,0);
    	count += I2C_Send(0x10, 0, 0); //Sampling Control Register MSB
    	count += I2C_Send(0x22, 0, 1); //Sampling Control Register LSB
    	I2C_Send(0x34,1,0);
	    count += I2C_Send(0x12, 0, 0); //Active Control Register MSB
	    count += I2C_Send(0x01, 0, 1); //Active Control Register LSB
  80302c:	08007dc1 	jmpi	8007dc <I2C_Send>
	}
	else
		printf("\nCan't Find Audio CODEC on I2C Bus.\n");
  803030:	01002074 	movhi	r4,129
  803034:	21072404 	addi	r4,r4,7312
}
  803038:	dfc00017 	ldw	ra,0(sp)
  80303c:	dec00104 	addi	sp,sp,4
    	I2C_Send(0x34,1,0);
	    count += I2C_Send(0x12, 0, 0); //Active Control Register MSB
	    count += I2C_Send(0x01, 0, 1); //Active Control Register LSB
	}
	else
		printf("\nCan't Find Audio CODEC on I2C Bus.\n");
  803040:	08046ec1 	jmpi	8046ec <puts>

00803044 <ceil>:
  803044:	2805d53a 	srai	r2,r5,20
  803048:	defff604 	addi	sp,sp,-40
  80304c:	dd800615 	stw	r22,24(sp)
  803050:	10c1ffcc 	andi	r3,r2,2047
  803054:	1dbf0044 	addi	r22,r3,-1023
  803058:	008004c4 	movi	r2,19
  80305c:	ddc00715 	stw	r23,28(sp)
  803060:	dc800215 	stw	r18,8(sp)
  803064:	dc400115 	stw	r17,4(sp)
  803068:	dc000015 	stw	r16,0(sp)
  80306c:	dfc00915 	stw	ra,36(sp)
  803070:	df000815 	stw	fp,32(sp)
  803074:	dd400515 	stw	r21,20(sp)
  803078:	dd000415 	stw	r20,16(sp)
  80307c:	dcc00315 	stw	r19,12(sp)
  803080:	2021883a 	mov	r16,r4
  803084:	2823883a 	mov	r17,r5
  803088:	282f883a 	mov	r23,r5
  80308c:	2025883a 	mov	r18,r4
  803090:	15802c16 	blt	r2,r22,803144 <ceil+0x100>
  803094:	b0005416 	blt	r22,zero,8031e8 <ceil+0x1a4>
  803098:	00800434 	movhi	r2,16
  80309c:	10bfffc4 	addi	r2,r2,-1
  8030a0:	15b9d83a 	sra	fp,r2,r22
  8030a4:	282f883a 	mov	r23,r5
  8030a8:	e144703a 	and	r2,fp,r5
  8030ac:	1104b03a 	or	r2,r2,r4
  8030b0:	10001626 	beq	r2,zero,80310c <ceil+0xc8>
  8030b4:	00a20034 	movhi	r2,34816
  8030b8:	109d6704 	addi	r2,r2,30108
  8030bc:	00df8e34 	movhi	r3,32312
  8030c0:	18f90f04 	addi	r3,r3,-7108
  8030c4:	180f883a 	mov	r7,r3
  8030c8:	100d883a 	mov	r6,r2
  8030cc:	080390c0 	call	80390c <__adddf3>
  8030d0:	180b883a 	mov	r5,r3
  8030d4:	000d883a 	mov	r6,zero
  8030d8:	000f883a 	mov	r7,zero
  8030dc:	1009883a 	mov	r4,r2
  8030e0:	08039800 	call	803980 <__gtdf2>
  8030e4:	0080070e 	bge	zero,r2,803104 <ceil+0xc0>
  8030e8:	0440030e 	bge	zero,r17,8030f8 <ceil+0xb4>
  8030ec:	00800434 	movhi	r2,16
  8030f0:	1585d83a 	sra	r2,r2,r22
  8030f4:	88af883a 	add	r23,r17,r2
  8030f8:	0704303a 	nor	r2,zero,fp
  8030fc:	b8ae703a 	and	r23,r23,r2
  803100:	0025883a 	mov	r18,zero
  803104:	9021883a 	mov	r16,r18
  803108:	b823883a 	mov	r17,r23
  80310c:	8005883a 	mov	r2,r16
  803110:	8807883a 	mov	r3,r17
  803114:	dfc00917 	ldw	ra,36(sp)
  803118:	df000817 	ldw	fp,32(sp)
  80311c:	ddc00717 	ldw	r23,28(sp)
  803120:	dd800617 	ldw	r22,24(sp)
  803124:	dd400517 	ldw	r21,20(sp)
  803128:	dd000417 	ldw	r20,16(sp)
  80312c:	dcc00317 	ldw	r19,12(sp)
  803130:	dc800217 	ldw	r18,8(sp)
  803134:	dc400117 	ldw	r17,4(sp)
  803138:	dc000017 	ldw	r16,0(sp)
  80313c:	dec00a04 	addi	sp,sp,40
  803140:	f800283a 	ret
  803144:	00800cc4 	movi	r2,51
  803148:	15801f16 	blt	r2,r22,8031c8 <ceil+0x184>
  80314c:	18befb44 	addi	r2,r3,-1043
  803150:	00ffffc4 	movi	r3,-1
  803154:	18b8d83a 	srl	fp,r3,r2
  803158:	e104703a 	and	r2,fp,r4
  80315c:	103feb26 	beq	r2,zero,80310c <ceil+0xc8>
  803160:	00a20034 	movhi	r2,34816
  803164:	109d6704 	addi	r2,r2,30108
  803168:	00df8e34 	movhi	r3,32312
  80316c:	18f90f04 	addi	r3,r3,-7108
  803170:	180f883a 	mov	r7,r3
  803174:	100d883a 	mov	r6,r2
  803178:	080390c0 	call	80390c <__adddf3>
  80317c:	180b883a 	mov	r5,r3
  803180:	000d883a 	mov	r6,zero
  803184:	000f883a 	mov	r7,zero
  803188:	1009883a 	mov	r4,r2
  80318c:	08039800 	call	803980 <__gtdf2>
  803190:	0080250e 	bge	zero,r2,803228 <ceil+0x1e4>
  803194:	0440090e 	bge	zero,r17,8031bc <ceil+0x178>
  803198:	00800504 	movi	r2,20
  80319c:	b0802926 	beq	r22,r2,803244 <ceil+0x200>
  8031a0:	00c00d04 	movi	r3,52
  8031a4:	1d87c83a 	sub	r3,r3,r22
  8031a8:	00800044 	movi	r2,1
  8031ac:	10c4983a 	sll	r2,r2,r3
  8031b0:	8085883a 	add	r2,r16,r2
  8031b4:	14001e36 	bltu	r2,r16,803230 <ceil+0x1ec>
  8031b8:	1025883a 	mov	r18,r2
  8031bc:	0704303a 	nor	r2,zero,fp
  8031c0:	90a4703a 	and	r18,r18,r2
  8031c4:	003fcf06 	br	803104 <ceil+0xc0>
  8031c8:	00810004 	movi	r2,1024
  8031cc:	b0bfcf1e 	bne	r22,r2,80310c <ceil+0xc8>
  8031d0:	800d883a 	mov	r6,r16
  8031d4:	280f883a 	mov	r7,r5
  8031d8:	080390c0 	call	80390c <__adddf3>
  8031dc:	1021883a 	mov	r16,r2
  8031e0:	1823883a 	mov	r17,r3
  8031e4:	003fc906 	br	80310c <ceil+0xc8>
  8031e8:	00a20034 	movhi	r2,34816
  8031ec:	109d6704 	addi	r2,r2,30108
  8031f0:	00df8e34 	movhi	r3,32312
  8031f4:	18f90f04 	addi	r3,r3,-7108
  8031f8:	180f883a 	mov	r7,r3
  8031fc:	100d883a 	mov	r6,r2
  803200:	080390c0 	call	80390c <__adddf3>
  803204:	180b883a 	mov	r5,r3
  803208:	000d883a 	mov	r6,zero
  80320c:	000f883a 	mov	r7,zero
  803210:	1009883a 	mov	r4,r2
  803214:	08039800 	call	803980 <__gtdf2>
  803218:	00bfba0e 	bge	zero,r2,803104 <ceil+0xc0>
  80321c:	88000b16 	blt	r17,zero,80324c <ceil+0x208>
  803220:	8c04b03a 	or	r2,r17,r16
  803224:	1000041e 	bne	r2,zero,803238 <ceil+0x1f4>
  803228:	882f883a 	mov	r23,r17
  80322c:	003fb506 	br	803104 <ceil+0xc0>
  803230:	8dc00044 	addi	r23,r17,1
  803234:	003fe006 	br	8031b8 <ceil+0x174>
  803238:	05cffc34 	movhi	r23,16368
  80323c:	0025883a 	mov	r18,zero
  803240:	003fb006 	br	803104 <ceil+0xc0>
  803244:	8dc00044 	addi	r23,r17,1
  803248:	003fdc06 	br	8031bc <ceil+0x178>
  80324c:	05e00034 	movhi	r23,32768
  803250:	0025883a 	mov	r18,zero
  803254:	003fab06 	br	803104 <ceil+0xc0>

00803258 <floor>:
  803258:	2805d53a 	srai	r2,r5,20
  80325c:	defff604 	addi	sp,sp,-40
  803260:	dd800615 	stw	r22,24(sp)
  803264:	10c1ffcc 	andi	r3,r2,2047
  803268:	1dbf0044 	addi	r22,r3,-1023
  80326c:	008004c4 	movi	r2,19
  803270:	ddc00715 	stw	r23,28(sp)
  803274:	dc800215 	stw	r18,8(sp)
  803278:	dc400115 	stw	r17,4(sp)
  80327c:	dc000015 	stw	r16,0(sp)
  803280:	dfc00915 	stw	ra,36(sp)
  803284:	df000815 	stw	fp,32(sp)
  803288:	dd400515 	stw	r21,20(sp)
  80328c:	dd000415 	stw	r20,16(sp)
  803290:	dcc00315 	stw	r19,12(sp)
  803294:	2021883a 	mov	r16,r4
  803298:	2823883a 	mov	r17,r5
  80329c:	282f883a 	mov	r23,r5
  8032a0:	2025883a 	mov	r18,r4
  8032a4:	15802916 	blt	r2,r22,80334c <floor+0xf4>
  8032a8:	b0004816 	blt	r22,zero,8033cc <floor+0x174>
  8032ac:	00800434 	movhi	r2,16
  8032b0:	10bfffc4 	addi	r2,r2,-1
  8032b4:	15b9d83a 	sra	fp,r2,r22
  8032b8:	282f883a 	mov	r23,r5
  8032bc:	e144703a 	and	r2,fp,r5
  8032c0:	1104b03a 	or	r2,r2,r4
  8032c4:	10001326 	beq	r2,zero,803314 <floor+0xbc>
  8032c8:	00a20034 	movhi	r2,34816
  8032cc:	109d6704 	addi	r2,r2,30108
  8032d0:	00df8e34 	movhi	r3,32312
  8032d4:	18f90f04 	addi	r3,r3,-7108
  8032d8:	180f883a 	mov	r7,r3
  8032dc:	100d883a 	mov	r6,r2
  8032e0:	080390c0 	call	80390c <__adddf3>
  8032e4:	180b883a 	mov	r5,r3
  8032e8:	000d883a 	mov	r6,zero
  8032ec:	000f883a 	mov	r7,zero
  8032f0:	1009883a 	mov	r4,r2
  8032f4:	08039800 	call	803980 <__gtdf2>
  8032f8:	0080040e 	bge	zero,r2,80330c <floor+0xb4>
  8032fc:	88004416 	blt	r17,zero,803410 <floor+0x1b8>
  803300:	0704303a 	nor	r2,zero,fp
  803304:	b8ae703a 	and	r23,r23,r2
  803308:	0025883a 	mov	r18,zero
  80330c:	9021883a 	mov	r16,r18
  803310:	b823883a 	mov	r17,r23
  803314:	8005883a 	mov	r2,r16
  803318:	8807883a 	mov	r3,r17
  80331c:	dfc00917 	ldw	ra,36(sp)
  803320:	df000817 	ldw	fp,32(sp)
  803324:	ddc00717 	ldw	r23,28(sp)
  803328:	dd800617 	ldw	r22,24(sp)
  80332c:	dd400517 	ldw	r21,20(sp)
  803330:	dd000417 	ldw	r20,16(sp)
  803334:	dcc00317 	ldw	r19,12(sp)
  803338:	dc800217 	ldw	r18,8(sp)
  80333c:	dc400117 	ldw	r17,4(sp)
  803340:	dc000017 	ldw	r16,0(sp)
  803344:	dec00a04 	addi	sp,sp,40
  803348:	f800283a 	ret
  80334c:	00800cc4 	movi	r2,51
  803350:	15801616 	blt	r2,r22,8033ac <floor+0x154>
  803354:	18befb44 	addi	r2,r3,-1043
  803358:	00ffffc4 	movi	r3,-1
  80335c:	18b8d83a 	srl	fp,r3,r2
  803360:	e104703a 	and	r2,fp,r4
  803364:	103feb26 	beq	r2,zero,803314 <floor+0xbc>
  803368:	00a20034 	movhi	r2,34816
  80336c:	109d6704 	addi	r2,r2,30108
  803370:	00df8e34 	movhi	r3,32312
  803374:	18f90f04 	addi	r3,r3,-7108
  803378:	180f883a 	mov	r7,r3
  80337c:	100d883a 	mov	r6,r2
  803380:	080390c0 	call	80390c <__adddf3>
  803384:	180b883a 	mov	r5,r3
  803388:	000d883a 	mov	r6,zero
  80338c:	000f883a 	mov	r7,zero
  803390:	1009883a 	mov	r4,r2
  803394:	08039800 	call	803980 <__gtdf2>
  803398:	0080210e 	bge	zero,r2,803420 <floor+0x1c8>
  80339c:	88002216 	blt	r17,zero,803428 <floor+0x1d0>
  8033a0:	0704303a 	nor	r2,zero,fp
  8033a4:	90a4703a 	and	r18,r18,r2
  8033a8:	003fd806 	br	80330c <floor+0xb4>
  8033ac:	00810004 	movi	r2,1024
  8033b0:	b0bfd81e 	bne	r22,r2,803314 <floor+0xbc>
  8033b4:	800d883a 	mov	r6,r16
  8033b8:	280f883a 	mov	r7,r5
  8033bc:	080390c0 	call	80390c <__adddf3>
  8033c0:	1021883a 	mov	r16,r2
  8033c4:	1823883a 	mov	r17,r3
  8033c8:	003fd206 	br	803314 <floor+0xbc>
  8033cc:	00a20034 	movhi	r2,34816
  8033d0:	109d6704 	addi	r2,r2,30108
  8033d4:	00df8e34 	movhi	r3,32312
  8033d8:	18f90f04 	addi	r3,r3,-7108
  8033dc:	180f883a 	mov	r7,r3
  8033e0:	100d883a 	mov	r6,r2
  8033e4:	080390c0 	call	80390c <__adddf3>
  8033e8:	180b883a 	mov	r5,r3
  8033ec:	000d883a 	mov	r6,zero
  8033f0:	000f883a 	mov	r7,zero
  8033f4:	1009883a 	mov	r4,r2
  8033f8:	08039800 	call	803980 <__gtdf2>
  8033fc:	00bfc30e 	bge	zero,r2,80330c <floor+0xb4>
  803400:	88001416 	blt	r17,zero,803454 <floor+0x1fc>
  803404:	002f883a 	mov	r23,zero
  803408:	0025883a 	mov	r18,zero
  80340c:	003fbf06 	br	80330c <floor+0xb4>
  803410:	00800434 	movhi	r2,16
  803414:	1585d83a 	sra	r2,r2,r22
  803418:	88af883a 	add	r23,r17,r2
  80341c:	003fb806 	br	803300 <floor+0xa8>
  803420:	882f883a 	mov	r23,r17
  803424:	003fb906 	br	80330c <floor+0xb4>
  803428:	00800504 	movi	r2,20
  80342c:	b0801126 	beq	r22,r2,803474 <floor+0x21c>
  803430:	00c00d04 	movi	r3,52
  803434:	1d87c83a 	sub	r3,r3,r22
  803438:	00800044 	movi	r2,1
  80343c:	10c4983a 	sll	r2,r2,r3
  803440:	8085883a 	add	r2,r16,r2
  803444:	1400012e 	bgeu	r2,r16,80344c <floor+0x1f4>
  803448:	8dc00044 	addi	r23,r17,1
  80344c:	1025883a 	mov	r18,r2
  803450:	003fd306 	br	8033a0 <floor+0x148>
  803454:	00a00034 	movhi	r2,32768
  803458:	10bfffc4 	addi	r2,r2,-1
  80345c:	8884703a 	and	r2,r17,r2
  803460:	8084b03a 	or	r2,r16,r2
  803464:	103fee26 	beq	r2,zero,803420 <floor+0x1c8>
  803468:	05effc34 	movhi	r23,49136
  80346c:	0025883a 	mov	r18,zero
  803470:	003fa606 	br	80330c <floor+0xb4>
  803474:	8dc00044 	addi	r23,r17,1
  803478:	003fc906 	br	8033a0 <floor+0x148>

0080347c <_fpadd_parts>:
  80347c:	defff804 	addi	sp,sp,-32
  803480:	dcc00315 	stw	r19,12(sp)
  803484:	2027883a 	mov	r19,r4
  803488:	21000017 	ldw	r4,0(r4)
  80348c:	00c00044 	movi	r3,1
  803490:	dd400515 	stw	r21,20(sp)
  803494:	dd000415 	stw	r20,16(sp)
  803498:	ddc00715 	stw	r23,28(sp)
  80349c:	dd800615 	stw	r22,24(sp)
  8034a0:	dc800215 	stw	r18,8(sp)
  8034a4:	dc400115 	stw	r17,4(sp)
  8034a8:	dc000015 	stw	r16,0(sp)
  8034ac:	282b883a 	mov	r21,r5
  8034b0:	3029883a 	mov	r20,r6
  8034b4:	1900632e 	bgeu	r3,r4,803644 <_fpadd_parts+0x1c8>
  8034b8:	28800017 	ldw	r2,0(r5)
  8034bc:	1880812e 	bgeu	r3,r2,8036c4 <_fpadd_parts+0x248>
  8034c0:	00c00104 	movi	r3,4
  8034c4:	20c0dc26 	beq	r4,r3,803838 <_fpadd_parts+0x3bc>
  8034c8:	10c07e26 	beq	r2,r3,8036c4 <_fpadd_parts+0x248>
  8034cc:	00c00084 	movi	r3,2
  8034d0:	10c06726 	beq	r2,r3,803670 <_fpadd_parts+0x1f4>
  8034d4:	20c07b26 	beq	r4,r3,8036c4 <_fpadd_parts+0x248>
  8034d8:	9dc00217 	ldw	r23,8(r19)
  8034dc:	28c00217 	ldw	r3,8(r5)
  8034e0:	9c400317 	ldw	r17,12(r19)
  8034e4:	2bc00317 	ldw	r15,12(r5)
  8034e8:	b8cdc83a 	sub	r6,r23,r3
  8034ec:	9c800417 	ldw	r18,16(r19)
  8034f0:	2c000417 	ldw	r16,16(r5)
  8034f4:	3009883a 	mov	r4,r6
  8034f8:	30009716 	blt	r6,zero,803758 <_fpadd_parts+0x2dc>
  8034fc:	00800fc4 	movi	r2,63
  803500:	11806b16 	blt	r2,r6,8036b0 <_fpadd_parts+0x234>
  803504:	0100a40e 	bge	zero,r4,803798 <_fpadd_parts+0x31c>
  803508:	35bff804 	addi	r22,r6,-32
  80350c:	b000bc16 	blt	r22,zero,803800 <_fpadd_parts+0x384>
  803510:	8596d83a 	srl	r11,r16,r22
  803514:	0019883a 	mov	r12,zero
  803518:	0013883a 	mov	r9,zero
  80351c:	01000044 	movi	r4,1
  803520:	0015883a 	mov	r10,zero
  803524:	b000be16 	blt	r22,zero,803820 <_fpadd_parts+0x3a4>
  803528:	2590983a 	sll	r8,r4,r22
  80352c:	000f883a 	mov	r7,zero
  803530:	00bfffc4 	movi	r2,-1
  803534:	3889883a 	add	r4,r7,r2
  803538:	408b883a 	add	r5,r8,r2
  80353c:	21cd803a 	cmpltu	r6,r4,r7
  803540:	314b883a 	add	r5,r6,r5
  803544:	7904703a 	and	r2,r15,r4
  803548:	8146703a 	and	r3,r16,r5
  80354c:	10c4b03a 	or	r2,r2,r3
  803550:	10000226 	beq	r2,zero,80355c <_fpadd_parts+0xe0>
  803554:	02400044 	movi	r9,1
  803558:	0015883a 	mov	r10,zero
  80355c:	5a5eb03a 	or	r15,r11,r9
  803560:	62a0b03a 	or	r16,r12,r10
  803564:	99400117 	ldw	r5,4(r19)
  803568:	a8800117 	ldw	r2,4(r21)
  80356c:	28806e26 	beq	r5,r2,803728 <_fpadd_parts+0x2ac>
  803570:	28006626 	beq	r5,zero,80370c <_fpadd_parts+0x290>
  803574:	7c45c83a 	sub	r2,r15,r17
  803578:	7889803a 	cmpltu	r4,r15,r2
  80357c:	8487c83a 	sub	r3,r16,r18
  803580:	1909c83a 	sub	r4,r3,r4
  803584:	100d883a 	mov	r6,r2
  803588:	200f883a 	mov	r7,r4
  80358c:	38007716 	blt	r7,zero,80376c <_fpadd_parts+0x2f0>
  803590:	a5c00215 	stw	r23,8(r20)
  803594:	a1c00415 	stw	r7,16(r20)
  803598:	a0000115 	stw	zero,4(r20)
  80359c:	a1800315 	stw	r6,12(r20)
  8035a0:	a2000317 	ldw	r8,12(r20)
  8035a4:	a2400417 	ldw	r9,16(r20)
  8035a8:	00bfffc4 	movi	r2,-1
  8035ac:	408b883a 	add	r5,r8,r2
  8035b0:	2a09803a 	cmpltu	r4,r5,r8
  8035b4:	488d883a 	add	r6,r9,r2
  8035b8:	01c40034 	movhi	r7,4096
  8035bc:	39ffffc4 	addi	r7,r7,-1
  8035c0:	218d883a 	add	r6,r4,r6
  8035c4:	39801736 	bltu	r7,r6,803624 <_fpadd_parts+0x1a8>
  8035c8:	31c06526 	beq	r6,r7,803760 <_fpadd_parts+0x2e4>
  8035cc:	a3000217 	ldw	r12,8(r20)
  8035d0:	4209883a 	add	r4,r8,r8
  8035d4:	00bfffc4 	movi	r2,-1
  8035d8:	220f803a 	cmpltu	r7,r4,r8
  8035dc:	4a4b883a 	add	r5,r9,r9
  8035e0:	394f883a 	add	r7,r7,r5
  8035e4:	2095883a 	add	r10,r4,r2
  8035e8:	3897883a 	add	r11,r7,r2
  8035ec:	510d803a 	cmpltu	r6,r10,r4
  8035f0:	6099883a 	add	r12,r12,r2
  8035f4:	32d7883a 	add	r11,r6,r11
  8035f8:	00840034 	movhi	r2,4096
  8035fc:	10bfffc4 	addi	r2,r2,-1
  803600:	2011883a 	mov	r8,r4
  803604:	3813883a 	mov	r9,r7
  803608:	a1000315 	stw	r4,12(r20)
  80360c:	a1c00415 	stw	r7,16(r20)
  803610:	a3000215 	stw	r12,8(r20)
  803614:	12c00336 	bltu	r2,r11,803624 <_fpadd_parts+0x1a8>
  803618:	58bfed1e 	bne	r11,r2,8035d0 <_fpadd_parts+0x154>
  80361c:	00bfff84 	movi	r2,-2
  803620:	12bfeb2e 	bgeu	r2,r10,8035d0 <_fpadd_parts+0x154>
  803624:	a2800417 	ldw	r10,16(r20)
  803628:	008000c4 	movi	r2,3
  80362c:	00c80034 	movhi	r3,8192
  803630:	18ffffc4 	addi	r3,r3,-1
  803634:	a2400317 	ldw	r9,12(r20)
  803638:	a0800015 	stw	r2,0(r20)
  80363c:	1a802336 	bltu	r3,r10,8036cc <_fpadd_parts+0x250>
  803640:	a027883a 	mov	r19,r20
  803644:	9805883a 	mov	r2,r19
  803648:	ddc00717 	ldw	r23,28(sp)
  80364c:	dd800617 	ldw	r22,24(sp)
  803650:	dd400517 	ldw	r21,20(sp)
  803654:	dd000417 	ldw	r20,16(sp)
  803658:	dcc00317 	ldw	r19,12(sp)
  80365c:	dc800217 	ldw	r18,8(sp)
  803660:	dc400117 	ldw	r17,4(sp)
  803664:	dc000017 	ldw	r16,0(sp)
  803668:	dec00804 	addi	sp,sp,32
  80366c:	f800283a 	ret
  803670:	20fff41e 	bne	r4,r3,803644 <_fpadd_parts+0x1c8>
  803674:	31000015 	stw	r4,0(r6)
  803678:	98800117 	ldw	r2,4(r19)
  80367c:	30800115 	stw	r2,4(r6)
  803680:	98c00217 	ldw	r3,8(r19)
  803684:	30c00215 	stw	r3,8(r6)
  803688:	98800317 	ldw	r2,12(r19)
  80368c:	30800315 	stw	r2,12(r6)
  803690:	98c00417 	ldw	r3,16(r19)
  803694:	30c00415 	stw	r3,16(r6)
  803698:	98800117 	ldw	r2,4(r19)
  80369c:	28c00117 	ldw	r3,4(r5)
  8036a0:	3027883a 	mov	r19,r6
  8036a4:	10c4703a 	and	r2,r2,r3
  8036a8:	30800115 	stw	r2,4(r6)
  8036ac:	003fe506 	br	803644 <_fpadd_parts+0x1c8>
  8036b0:	1dc02616 	blt	r3,r23,80374c <_fpadd_parts+0x2d0>
  8036b4:	0023883a 	mov	r17,zero
  8036b8:	182f883a 	mov	r23,r3
  8036bc:	0025883a 	mov	r18,zero
  8036c0:	003fa806 	br	803564 <_fpadd_parts+0xe8>
  8036c4:	a827883a 	mov	r19,r21
  8036c8:	003fde06 	br	803644 <_fpadd_parts+0x1c8>
  8036cc:	01800044 	movi	r6,1
  8036d0:	500497fa 	slli	r2,r10,31
  8036d4:	4808d07a 	srli	r4,r9,1
  8036d8:	518ad83a 	srl	r5,r10,r6
  8036dc:	a2000217 	ldw	r8,8(r20)
  8036e0:	1108b03a 	or	r4,r2,r4
  8036e4:	0007883a 	mov	r3,zero
  8036e8:	4984703a 	and	r2,r9,r6
  8036ec:	208cb03a 	or	r6,r4,r2
  8036f0:	28ceb03a 	or	r7,r5,r3
  8036f4:	42000044 	addi	r8,r8,1
  8036f8:	a027883a 	mov	r19,r20
  8036fc:	a1c00415 	stw	r7,16(r20)
  803700:	a2000215 	stw	r8,8(r20)
  803704:	a1800315 	stw	r6,12(r20)
  803708:	003fce06 	br	803644 <_fpadd_parts+0x1c8>
  80370c:	8bc5c83a 	sub	r2,r17,r15
  803710:	8889803a 	cmpltu	r4,r17,r2
  803714:	9407c83a 	sub	r3,r18,r16
  803718:	1909c83a 	sub	r4,r3,r4
  80371c:	100d883a 	mov	r6,r2
  803720:	200f883a 	mov	r7,r4
  803724:	003f9906 	br	80358c <_fpadd_parts+0x110>
  803728:	8bc5883a 	add	r2,r17,r15
  80372c:	1449803a 	cmpltu	r4,r2,r17
  803730:	9407883a 	add	r3,r18,r16
  803734:	20c9883a 	add	r4,r4,r3
  803738:	a1400115 	stw	r5,4(r20)
  80373c:	a5c00215 	stw	r23,8(r20)
  803740:	a0800315 	stw	r2,12(r20)
  803744:	a1000415 	stw	r4,16(r20)
  803748:	003fb606 	br	803624 <_fpadd_parts+0x1a8>
  80374c:	001f883a 	mov	r15,zero
  803750:	0021883a 	mov	r16,zero
  803754:	003f8306 	br	803564 <_fpadd_parts+0xe8>
  803758:	018dc83a 	sub	r6,zero,r6
  80375c:	003f6706 	br	8034fc <_fpadd_parts+0x80>
  803760:	00bfff84 	movi	r2,-2
  803764:	117faf36 	bltu	r2,r5,803624 <_fpadd_parts+0x1a8>
  803768:	003f9806 	br	8035cc <_fpadd_parts+0x150>
  80376c:	0005883a 	mov	r2,zero
  803770:	1189c83a 	sub	r4,r2,r6
  803774:	1105803a 	cmpltu	r2,r2,r4
  803778:	01cbc83a 	sub	r5,zero,r7
  80377c:	2885c83a 	sub	r2,r5,r2
  803780:	01800044 	movi	r6,1
  803784:	a1800115 	stw	r6,4(r20)
  803788:	a5c00215 	stw	r23,8(r20)
  80378c:	a1000315 	stw	r4,12(r20)
  803790:	a0800415 	stw	r2,16(r20)
  803794:	003f8206 	br	8035a0 <_fpadd_parts+0x124>
  803798:	203f7226 	beq	r4,zero,803564 <_fpadd_parts+0xe8>
  80379c:	35bff804 	addi	r22,r6,-32
  8037a0:	b9af883a 	add	r23,r23,r6
  8037a4:	b0003116 	blt	r22,zero,80386c <_fpadd_parts+0x3f0>
  8037a8:	959ad83a 	srl	r13,r18,r22
  8037ac:	001d883a 	mov	r14,zero
  8037b0:	000f883a 	mov	r7,zero
  8037b4:	01000044 	movi	r4,1
  8037b8:	0011883a 	mov	r8,zero
  8037bc:	b0002516 	blt	r22,zero,803854 <_fpadd_parts+0x3d8>
  8037c0:	2594983a 	sll	r10,r4,r22
  8037c4:	0013883a 	mov	r9,zero
  8037c8:	00bfffc4 	movi	r2,-1
  8037cc:	4889883a 	add	r4,r9,r2
  8037d0:	508b883a 	add	r5,r10,r2
  8037d4:	224d803a 	cmpltu	r6,r4,r9
  8037d8:	314b883a 	add	r5,r6,r5
  8037dc:	8904703a 	and	r2,r17,r4
  8037e0:	9146703a 	and	r3,r18,r5
  8037e4:	10c4b03a 	or	r2,r2,r3
  8037e8:	10000226 	beq	r2,zero,8037f4 <_fpadd_parts+0x378>
  8037ec:	01c00044 	movi	r7,1
  8037f0:	0011883a 	mov	r8,zero
  8037f4:	69e2b03a 	or	r17,r13,r7
  8037f8:	7224b03a 	or	r18,r14,r8
  8037fc:	003f5906 	br	803564 <_fpadd_parts+0xe8>
  803800:	8407883a 	add	r3,r16,r16
  803804:	008007c4 	movi	r2,31
  803808:	1185c83a 	sub	r2,r2,r6
  80380c:	1886983a 	sll	r3,r3,r2
  803810:	7996d83a 	srl	r11,r15,r6
  803814:	8198d83a 	srl	r12,r16,r6
  803818:	1ad6b03a 	or	r11,r3,r11
  80381c:	003f3e06 	br	803518 <_fpadd_parts+0x9c>
  803820:	2006d07a 	srli	r3,r4,1
  803824:	008007c4 	movi	r2,31
  803828:	1185c83a 	sub	r2,r2,r6
  80382c:	1890d83a 	srl	r8,r3,r2
  803830:	218e983a 	sll	r7,r4,r6
  803834:	003f3e06 	br	803530 <_fpadd_parts+0xb4>
  803838:	113f821e 	bne	r2,r4,803644 <_fpadd_parts+0x1c8>
  80383c:	28c00117 	ldw	r3,4(r5)
  803840:	98800117 	ldw	r2,4(r19)
  803844:	10ff7f26 	beq	r2,r3,803644 <_fpadd_parts+0x1c8>
  803848:	04c02074 	movhi	r19,129
  80384c:	9cc72d04 	addi	r19,r19,7348
  803850:	003f7c06 	br	803644 <_fpadd_parts+0x1c8>
  803854:	2006d07a 	srli	r3,r4,1
  803858:	008007c4 	movi	r2,31
  80385c:	1185c83a 	sub	r2,r2,r6
  803860:	1894d83a 	srl	r10,r3,r2
  803864:	2192983a 	sll	r9,r4,r6
  803868:	003fd706 	br	8037c8 <_fpadd_parts+0x34c>
  80386c:	9487883a 	add	r3,r18,r18
  803870:	008007c4 	movi	r2,31
  803874:	1185c83a 	sub	r2,r2,r6
  803878:	1886983a 	sll	r3,r3,r2
  80387c:	899ad83a 	srl	r13,r17,r6
  803880:	919cd83a 	srl	r14,r18,r6
  803884:	1b5ab03a 	or	r13,r3,r13
  803888:	003fc906 	br	8037b0 <_fpadd_parts+0x334>

0080388c <__subdf3>:
  80388c:	deffea04 	addi	sp,sp,-88
  803890:	dcc01415 	stw	r19,80(sp)
  803894:	dcc00404 	addi	r19,sp,16
  803898:	2011883a 	mov	r8,r4
  80389c:	2813883a 	mov	r9,r5
  8038a0:	dc401315 	stw	r17,76(sp)
  8038a4:	d809883a 	mov	r4,sp
  8038a8:	980b883a 	mov	r5,r19
  8038ac:	dc400904 	addi	r17,sp,36
  8038b0:	dfc01515 	stw	ra,84(sp)
  8038b4:	da400115 	stw	r9,4(sp)
  8038b8:	d9c00315 	stw	r7,12(sp)
  8038bc:	da000015 	stw	r8,0(sp)
  8038c0:	d9800215 	stw	r6,8(sp)
  8038c4:	08042840 	call	804284 <__unpack_d>
  8038c8:	d9000204 	addi	r4,sp,8
  8038cc:	880b883a 	mov	r5,r17
  8038d0:	08042840 	call	804284 <__unpack_d>
  8038d4:	d8800a17 	ldw	r2,40(sp)
  8038d8:	880b883a 	mov	r5,r17
  8038dc:	9809883a 	mov	r4,r19
  8038e0:	d9800e04 	addi	r6,sp,56
  8038e4:	1080005c 	xori	r2,r2,1
  8038e8:	d8800a15 	stw	r2,40(sp)
  8038ec:	080347c0 	call	80347c <_fpadd_parts>
  8038f0:	1009883a 	mov	r4,r2
  8038f4:	0803f700 	call	803f70 <__pack_d>
  8038f8:	dfc01517 	ldw	ra,84(sp)
  8038fc:	dcc01417 	ldw	r19,80(sp)
  803900:	dc401317 	ldw	r17,76(sp)
  803904:	dec01604 	addi	sp,sp,88
  803908:	f800283a 	ret

0080390c <__adddf3>:
  80390c:	deffea04 	addi	sp,sp,-88
  803910:	dcc01415 	stw	r19,80(sp)
  803914:	dcc00404 	addi	r19,sp,16
  803918:	2011883a 	mov	r8,r4
  80391c:	2813883a 	mov	r9,r5
  803920:	dc401315 	stw	r17,76(sp)
  803924:	d809883a 	mov	r4,sp
  803928:	980b883a 	mov	r5,r19
  80392c:	dc400904 	addi	r17,sp,36
  803930:	dfc01515 	stw	ra,84(sp)
  803934:	da400115 	stw	r9,4(sp)
  803938:	d9c00315 	stw	r7,12(sp)
  80393c:	da000015 	stw	r8,0(sp)
  803940:	d9800215 	stw	r6,8(sp)
  803944:	08042840 	call	804284 <__unpack_d>
  803948:	d9000204 	addi	r4,sp,8
  80394c:	880b883a 	mov	r5,r17
  803950:	08042840 	call	804284 <__unpack_d>
  803954:	d9800e04 	addi	r6,sp,56
  803958:	9809883a 	mov	r4,r19
  80395c:	880b883a 	mov	r5,r17
  803960:	080347c0 	call	80347c <_fpadd_parts>
  803964:	1009883a 	mov	r4,r2
  803968:	0803f700 	call	803f70 <__pack_d>
  80396c:	dfc01517 	ldw	ra,84(sp)
  803970:	dcc01417 	ldw	r19,80(sp)
  803974:	dc401317 	ldw	r17,76(sp)
  803978:	dec01604 	addi	sp,sp,88
  80397c:	f800283a 	ret

00803980 <__gtdf2>:
  803980:	deffef04 	addi	sp,sp,-68
  803984:	dc400f15 	stw	r17,60(sp)
  803988:	dc400404 	addi	r17,sp,16
  80398c:	2005883a 	mov	r2,r4
  803990:	2807883a 	mov	r3,r5
  803994:	dc000e15 	stw	r16,56(sp)
  803998:	d809883a 	mov	r4,sp
  80399c:	880b883a 	mov	r5,r17
  8039a0:	dc000904 	addi	r16,sp,36
  8039a4:	d8c00115 	stw	r3,4(sp)
  8039a8:	d8800015 	stw	r2,0(sp)
  8039ac:	d9800215 	stw	r6,8(sp)
  8039b0:	dfc01015 	stw	ra,64(sp)
  8039b4:	d9c00315 	stw	r7,12(sp)
  8039b8:	08042840 	call	804284 <__unpack_d>
  8039bc:	d9000204 	addi	r4,sp,8
  8039c0:	800b883a 	mov	r5,r16
  8039c4:	08042840 	call	804284 <__unpack_d>
  8039c8:	d8800417 	ldw	r2,16(sp)
  8039cc:	00c00044 	movi	r3,1
  8039d0:	01bfffc4 	movi	r6,-1
  8039d4:	1880062e 	bgeu	r3,r2,8039f0 <__gtdf2+0x70>
  8039d8:	d8800917 	ldw	r2,36(sp)
  8039dc:	8809883a 	mov	r4,r17
  8039e0:	800b883a 	mov	r5,r16
  8039e4:	1880022e 	bgeu	r3,r2,8039f0 <__gtdf2+0x70>
  8039e8:	08043bc0 	call	8043bc <__fpcmp_parts_d>
  8039ec:	100d883a 	mov	r6,r2
  8039f0:	3005883a 	mov	r2,r6
  8039f4:	dfc01017 	ldw	ra,64(sp)
  8039f8:	dc400f17 	ldw	r17,60(sp)
  8039fc:	dc000e17 	ldw	r16,56(sp)
  803a00:	dec01104 	addi	sp,sp,68
  803a04:	f800283a 	ret

00803a08 <__floatsidf>:
  803a08:	2006d7fa 	srli	r3,r4,31
  803a0c:	defff604 	addi	sp,sp,-40
  803a10:	008000c4 	movi	r2,3
  803a14:	dfc00915 	stw	ra,36(sp)
  803a18:	dcc00815 	stw	r19,32(sp)
  803a1c:	dc800715 	stw	r18,28(sp)
  803a20:	dc400615 	stw	r17,24(sp)
  803a24:	dc000515 	stw	r16,20(sp)
  803a28:	d8800015 	stw	r2,0(sp)
  803a2c:	d8c00115 	stw	r3,4(sp)
  803a30:	20000f1e 	bne	r4,zero,803a70 <__floatsidf+0x68>
  803a34:	00800084 	movi	r2,2
  803a38:	d8800015 	stw	r2,0(sp)
  803a3c:	d809883a 	mov	r4,sp
  803a40:	0803f700 	call	803f70 <__pack_d>
  803a44:	1009883a 	mov	r4,r2
  803a48:	180b883a 	mov	r5,r3
  803a4c:	2005883a 	mov	r2,r4
  803a50:	2807883a 	mov	r3,r5
  803a54:	dfc00917 	ldw	ra,36(sp)
  803a58:	dcc00817 	ldw	r19,32(sp)
  803a5c:	dc800717 	ldw	r18,28(sp)
  803a60:	dc400617 	ldw	r17,24(sp)
  803a64:	dc000517 	ldw	r16,20(sp)
  803a68:	dec00a04 	addi	sp,sp,40
  803a6c:	f800283a 	ret
  803a70:	00800f04 	movi	r2,60
  803a74:	1807003a 	cmpeq	r3,r3,zero
  803a78:	d8800215 	stw	r2,8(sp)
  803a7c:	18001126 	beq	r3,zero,803ac4 <__floatsidf+0xbc>
  803a80:	0027883a 	mov	r19,zero
  803a84:	2025883a 	mov	r18,r4
  803a88:	d9000315 	stw	r4,12(sp)
  803a8c:	dcc00415 	stw	r19,16(sp)
  803a90:	0803ef00 	call	803ef0 <__clzsi2>
  803a94:	11000744 	addi	r4,r2,29
  803a98:	013fe80e 	bge	zero,r4,803a3c <__floatsidf+0x34>
  803a9c:	10bfff44 	addi	r2,r2,-3
  803aa0:	10000c16 	blt	r2,zero,803ad4 <__floatsidf+0xcc>
  803aa4:	90a2983a 	sll	r17,r18,r2
  803aa8:	0021883a 	mov	r16,zero
  803aac:	d8800217 	ldw	r2,8(sp)
  803ab0:	dc400415 	stw	r17,16(sp)
  803ab4:	dc000315 	stw	r16,12(sp)
  803ab8:	1105c83a 	sub	r2,r2,r4
  803abc:	d8800215 	stw	r2,8(sp)
  803ac0:	003fde06 	br	803a3c <__floatsidf+0x34>
  803ac4:	00a00034 	movhi	r2,32768
  803ac8:	20800a26 	beq	r4,r2,803af4 <__floatsidf+0xec>
  803acc:	0109c83a 	sub	r4,zero,r4
  803ad0:	003feb06 	br	803a80 <__floatsidf+0x78>
  803ad4:	9006d07a 	srli	r3,r18,1
  803ad8:	008007c4 	movi	r2,31
  803adc:	1105c83a 	sub	r2,r2,r4
  803ae0:	1886d83a 	srl	r3,r3,r2
  803ae4:	9922983a 	sll	r17,r19,r4
  803ae8:	9120983a 	sll	r16,r18,r4
  803aec:	1c62b03a 	or	r17,r3,r17
  803af0:	003fee06 	br	803aac <__floatsidf+0xa4>
  803af4:	0009883a 	mov	r4,zero
  803af8:	01707834 	movhi	r5,49632
  803afc:	003fd306 	br	803a4c <__floatsidf+0x44>

00803b00 <__fixdfsi>:
  803b00:	defff804 	addi	sp,sp,-32
  803b04:	2005883a 	mov	r2,r4
  803b08:	2807883a 	mov	r3,r5
  803b0c:	d809883a 	mov	r4,sp
  803b10:	d9400204 	addi	r5,sp,8
  803b14:	d8c00115 	stw	r3,4(sp)
  803b18:	d8800015 	stw	r2,0(sp)
  803b1c:	dfc00715 	stw	ra,28(sp)
  803b20:	08042840 	call	804284 <__unpack_d>
  803b24:	d8c00217 	ldw	r3,8(sp)
  803b28:	00800084 	movi	r2,2
  803b2c:	1880051e 	bne	r3,r2,803b44 <__fixdfsi+0x44>
  803b30:	0007883a 	mov	r3,zero
  803b34:	1805883a 	mov	r2,r3
  803b38:	dfc00717 	ldw	ra,28(sp)
  803b3c:	dec00804 	addi	sp,sp,32
  803b40:	f800283a 	ret
  803b44:	00800044 	movi	r2,1
  803b48:	10fff92e 	bgeu	r2,r3,803b30 <__fixdfsi+0x30>
  803b4c:	00800104 	movi	r2,4
  803b50:	18800426 	beq	r3,r2,803b64 <__fixdfsi+0x64>
  803b54:	d8c00417 	ldw	r3,16(sp)
  803b58:	183ff516 	blt	r3,zero,803b30 <__fixdfsi+0x30>
  803b5c:	00800784 	movi	r2,30
  803b60:	10c0080e 	bge	r2,r3,803b84 <__fixdfsi+0x84>
  803b64:	d8800317 	ldw	r2,12(sp)
  803b68:	1000121e 	bne	r2,zero,803bb4 <__fixdfsi+0xb4>
  803b6c:	00e00034 	movhi	r3,32768
  803b70:	18ffffc4 	addi	r3,r3,-1
  803b74:	1805883a 	mov	r2,r3
  803b78:	dfc00717 	ldw	ra,28(sp)
  803b7c:	dec00804 	addi	sp,sp,32
  803b80:	f800283a 	ret
  803b84:	00800f04 	movi	r2,60
  803b88:	10d1c83a 	sub	r8,r2,r3
  803b8c:	40bff804 	addi	r2,r8,-32
  803b90:	d9800517 	ldw	r6,20(sp)
  803b94:	d9c00617 	ldw	r7,24(sp)
  803b98:	10000816 	blt	r2,zero,803bbc <__fixdfsi+0xbc>
  803b9c:	3888d83a 	srl	r4,r7,r2
  803ba0:	d8800317 	ldw	r2,12(sp)
  803ba4:	2007883a 	mov	r3,r4
  803ba8:	103fe226 	beq	r2,zero,803b34 <__fixdfsi+0x34>
  803bac:	0107c83a 	sub	r3,zero,r4
  803bb0:	003fe006 	br	803b34 <__fixdfsi+0x34>
  803bb4:	00e00034 	movhi	r3,32768
  803bb8:	003fde06 	br	803b34 <__fixdfsi+0x34>
  803bbc:	39c7883a 	add	r3,r7,r7
  803bc0:	008007c4 	movi	r2,31
  803bc4:	1205c83a 	sub	r2,r2,r8
  803bc8:	1886983a 	sll	r3,r3,r2
  803bcc:	3208d83a 	srl	r4,r6,r8
  803bd0:	1908b03a 	or	r4,r3,r4
  803bd4:	003ff206 	br	803ba0 <__fixdfsi+0xa0>

00803bd8 <__floatunsidf>:
  803bd8:	defff204 	addi	sp,sp,-56
  803bdc:	dfc00d15 	stw	ra,52(sp)
  803be0:	ddc00c15 	stw	r23,48(sp)
  803be4:	dd800b15 	stw	r22,44(sp)
  803be8:	dd400a15 	stw	r21,40(sp)
  803bec:	dd000915 	stw	r20,36(sp)
  803bf0:	dcc00815 	stw	r19,32(sp)
  803bf4:	dc800715 	stw	r18,28(sp)
  803bf8:	dc400615 	stw	r17,24(sp)
  803bfc:	dc000515 	stw	r16,20(sp)
  803c00:	d8000115 	stw	zero,4(sp)
  803c04:	20000f1e 	bne	r4,zero,803c44 <__floatunsidf+0x6c>
  803c08:	00800084 	movi	r2,2
  803c0c:	d8800015 	stw	r2,0(sp)
  803c10:	d809883a 	mov	r4,sp
  803c14:	0803f700 	call	803f70 <__pack_d>
  803c18:	dfc00d17 	ldw	ra,52(sp)
  803c1c:	ddc00c17 	ldw	r23,48(sp)
  803c20:	dd800b17 	ldw	r22,44(sp)
  803c24:	dd400a17 	ldw	r21,40(sp)
  803c28:	dd000917 	ldw	r20,36(sp)
  803c2c:	dcc00817 	ldw	r19,32(sp)
  803c30:	dc800717 	ldw	r18,28(sp)
  803c34:	dc400617 	ldw	r17,24(sp)
  803c38:	dc000517 	ldw	r16,20(sp)
  803c3c:	dec00e04 	addi	sp,sp,56
  803c40:	f800283a 	ret
  803c44:	008000c4 	movi	r2,3
  803c48:	00c00f04 	movi	r3,60
  803c4c:	002f883a 	mov	r23,zero
  803c50:	202d883a 	mov	r22,r4
  803c54:	d8800015 	stw	r2,0(sp)
  803c58:	d8c00215 	stw	r3,8(sp)
  803c5c:	d9000315 	stw	r4,12(sp)
  803c60:	ddc00415 	stw	r23,16(sp)
  803c64:	0803ef00 	call	803ef0 <__clzsi2>
  803c68:	12400744 	addi	r9,r2,29
  803c6c:	48000b16 	blt	r9,zero,803c9c <__floatunsidf+0xc4>
  803c70:	483fe726 	beq	r9,zero,803c10 <__floatunsidf+0x38>
  803c74:	10bfff44 	addi	r2,r2,-3
  803c78:	10002e16 	blt	r2,zero,803d34 <__floatunsidf+0x15c>
  803c7c:	b0a2983a 	sll	r17,r22,r2
  803c80:	0021883a 	mov	r16,zero
  803c84:	d8800217 	ldw	r2,8(sp)
  803c88:	dc400415 	stw	r17,16(sp)
  803c8c:	dc000315 	stw	r16,12(sp)
  803c90:	1245c83a 	sub	r2,r2,r9
  803c94:	d8800215 	stw	r2,8(sp)
  803c98:	003fdd06 	br	803c10 <__floatunsidf+0x38>
  803c9c:	0255c83a 	sub	r10,zero,r9
  803ca0:	51bff804 	addi	r6,r10,-32
  803ca4:	30001b16 	blt	r6,zero,803d14 <__floatunsidf+0x13c>
  803ca8:	b9a8d83a 	srl	r20,r23,r6
  803cac:	002b883a 	mov	r21,zero
  803cb0:	000f883a 	mov	r7,zero
  803cb4:	01000044 	movi	r4,1
  803cb8:	0011883a 	mov	r8,zero
  803cbc:	30002516 	blt	r6,zero,803d54 <__floatunsidf+0x17c>
  803cc0:	21a6983a 	sll	r19,r4,r6
  803cc4:	0025883a 	mov	r18,zero
  803cc8:	00bfffc4 	movi	r2,-1
  803ccc:	9089883a 	add	r4,r18,r2
  803cd0:	988b883a 	add	r5,r19,r2
  803cd4:	248d803a 	cmpltu	r6,r4,r18
  803cd8:	314b883a 	add	r5,r6,r5
  803cdc:	b104703a 	and	r2,r22,r4
  803ce0:	b946703a 	and	r3,r23,r5
  803ce4:	10c4b03a 	or	r2,r2,r3
  803ce8:	10000226 	beq	r2,zero,803cf4 <__floatunsidf+0x11c>
  803cec:	01c00044 	movi	r7,1
  803cf0:	0011883a 	mov	r8,zero
  803cf4:	d9000217 	ldw	r4,8(sp)
  803cf8:	a1c4b03a 	or	r2,r20,r7
  803cfc:	aa06b03a 	or	r3,r21,r8
  803d00:	2249c83a 	sub	r4,r4,r9
  803d04:	d8c00415 	stw	r3,16(sp)
  803d08:	d9000215 	stw	r4,8(sp)
  803d0c:	d8800315 	stw	r2,12(sp)
  803d10:	003fbf06 	br	803c10 <__floatunsidf+0x38>
  803d14:	bdc7883a 	add	r3,r23,r23
  803d18:	008007c4 	movi	r2,31
  803d1c:	1285c83a 	sub	r2,r2,r10
  803d20:	1886983a 	sll	r3,r3,r2
  803d24:	b2a8d83a 	srl	r20,r22,r10
  803d28:	baaad83a 	srl	r21,r23,r10
  803d2c:	1d28b03a 	or	r20,r3,r20
  803d30:	003fdf06 	br	803cb0 <__floatunsidf+0xd8>
  803d34:	b006d07a 	srli	r3,r22,1
  803d38:	008007c4 	movi	r2,31
  803d3c:	1245c83a 	sub	r2,r2,r9
  803d40:	1886d83a 	srl	r3,r3,r2
  803d44:	ba62983a 	sll	r17,r23,r9
  803d48:	b260983a 	sll	r16,r22,r9
  803d4c:	1c62b03a 	or	r17,r3,r17
  803d50:	003fcc06 	br	803c84 <__floatunsidf+0xac>
  803d54:	2006d07a 	srli	r3,r4,1
  803d58:	008007c4 	movi	r2,31
  803d5c:	1285c83a 	sub	r2,r2,r10
  803d60:	18a6d83a 	srl	r19,r3,r2
  803d64:	22a4983a 	sll	r18,r4,r10
  803d68:	003fd706 	br	803cc8 <__floatunsidf+0xf0>

00803d6c <udivmodsi4>:
  803d6c:	29001b2e 	bgeu	r5,r4,803ddc <udivmodsi4+0x70>
  803d70:	28001a16 	blt	r5,zero,803ddc <udivmodsi4+0x70>
  803d74:	00800044 	movi	r2,1
  803d78:	0007883a 	mov	r3,zero
  803d7c:	01c007c4 	movi	r7,31
  803d80:	00000306 	br	803d90 <udivmodsi4+0x24>
  803d84:	19c01326 	beq	r3,r7,803dd4 <udivmodsi4+0x68>
  803d88:	18c00044 	addi	r3,r3,1
  803d8c:	28000416 	blt	r5,zero,803da0 <udivmodsi4+0x34>
  803d90:	294b883a 	add	r5,r5,r5
  803d94:	1085883a 	add	r2,r2,r2
  803d98:	293ffa36 	bltu	r5,r4,803d84 <udivmodsi4+0x18>
  803d9c:	10000d26 	beq	r2,zero,803dd4 <udivmodsi4+0x68>
  803da0:	0007883a 	mov	r3,zero
  803da4:	21400236 	bltu	r4,r5,803db0 <udivmodsi4+0x44>
  803da8:	2149c83a 	sub	r4,r4,r5
  803dac:	1886b03a 	or	r3,r3,r2
  803db0:	1004d07a 	srli	r2,r2,1
  803db4:	280ad07a 	srli	r5,r5,1
  803db8:	103ffa1e 	bne	r2,zero,803da4 <udivmodsi4+0x38>
  803dbc:	30000226 	beq	r6,zero,803dc8 <udivmodsi4+0x5c>
  803dc0:	2005883a 	mov	r2,r4
  803dc4:	f800283a 	ret
  803dc8:	1809883a 	mov	r4,r3
  803dcc:	2005883a 	mov	r2,r4
  803dd0:	f800283a 	ret
  803dd4:	0007883a 	mov	r3,zero
  803dd8:	003ff806 	br	803dbc <udivmodsi4+0x50>
  803ddc:	00800044 	movi	r2,1
  803de0:	0007883a 	mov	r3,zero
  803de4:	003fef06 	br	803da4 <udivmodsi4+0x38>

00803de8 <__divsi3>:
  803de8:	defffe04 	addi	sp,sp,-8
  803dec:	dc000015 	stw	r16,0(sp)
  803df0:	dfc00115 	stw	ra,4(sp)
  803df4:	0021883a 	mov	r16,zero
  803df8:	20000c16 	blt	r4,zero,803e2c <__divsi3+0x44>
  803dfc:	000d883a 	mov	r6,zero
  803e00:	28000e16 	blt	r5,zero,803e3c <__divsi3+0x54>
  803e04:	0803d6c0 	call	803d6c <udivmodsi4>
  803e08:	1007883a 	mov	r3,r2
  803e0c:	8005003a 	cmpeq	r2,r16,zero
  803e10:	1000011e 	bne	r2,zero,803e18 <__divsi3+0x30>
  803e14:	00c7c83a 	sub	r3,zero,r3
  803e18:	1805883a 	mov	r2,r3
  803e1c:	dfc00117 	ldw	ra,4(sp)
  803e20:	dc000017 	ldw	r16,0(sp)
  803e24:	dec00204 	addi	sp,sp,8
  803e28:	f800283a 	ret
  803e2c:	0109c83a 	sub	r4,zero,r4
  803e30:	04000044 	movi	r16,1
  803e34:	000d883a 	mov	r6,zero
  803e38:	283ff20e 	bge	r5,zero,803e04 <__divsi3+0x1c>
  803e3c:	014bc83a 	sub	r5,zero,r5
  803e40:	8021003a 	cmpeq	r16,r16,zero
  803e44:	003fef06 	br	803e04 <__divsi3+0x1c>

00803e48 <__modsi3>:
  803e48:	deffff04 	addi	sp,sp,-4
  803e4c:	dfc00015 	stw	ra,0(sp)
  803e50:	01800044 	movi	r6,1
  803e54:	2807883a 	mov	r3,r5
  803e58:	20000416 	blt	r4,zero,803e6c <__modsi3+0x24>
  803e5c:	28000c16 	blt	r5,zero,803e90 <__modsi3+0x48>
  803e60:	dfc00017 	ldw	ra,0(sp)
  803e64:	dec00104 	addi	sp,sp,4
  803e68:	0803d6c1 	jmpi	803d6c <udivmodsi4>
  803e6c:	0109c83a 	sub	r4,zero,r4
  803e70:	28000b16 	blt	r5,zero,803ea0 <__modsi3+0x58>
  803e74:	180b883a 	mov	r5,r3
  803e78:	01800044 	movi	r6,1
  803e7c:	0803d6c0 	call	803d6c <udivmodsi4>
  803e80:	0085c83a 	sub	r2,zero,r2
  803e84:	dfc00017 	ldw	ra,0(sp)
  803e88:	dec00104 	addi	sp,sp,4
  803e8c:	f800283a 	ret
  803e90:	014bc83a 	sub	r5,zero,r5
  803e94:	dfc00017 	ldw	ra,0(sp)
  803e98:	dec00104 	addi	sp,sp,4
  803e9c:	0803d6c1 	jmpi	803d6c <udivmodsi4>
  803ea0:	0147c83a 	sub	r3,zero,r5
  803ea4:	003ff306 	br	803e74 <__modsi3+0x2c>

00803ea8 <__udivsi3>:
  803ea8:	000d883a 	mov	r6,zero
  803eac:	0803d6c1 	jmpi	803d6c <udivmodsi4>

00803eb0 <__umodsi3>:
  803eb0:	01800044 	movi	r6,1
  803eb4:	0803d6c1 	jmpi	803d6c <udivmodsi4>

00803eb8 <__mulsi3>:
  803eb8:	20000a26 	beq	r4,zero,803ee4 <__mulsi3+0x2c>
  803ebc:	0007883a 	mov	r3,zero
  803ec0:	2080004c 	andi	r2,r4,1
  803ec4:	1005003a 	cmpeq	r2,r2,zero
  803ec8:	2008d07a 	srli	r4,r4,1
  803ecc:	1000011e 	bne	r2,zero,803ed4 <__mulsi3+0x1c>
  803ed0:	1947883a 	add	r3,r3,r5
  803ed4:	294b883a 	add	r5,r5,r5
  803ed8:	203ff91e 	bne	r4,zero,803ec0 <__mulsi3+0x8>
  803edc:	1805883a 	mov	r2,r3
  803ee0:	f800283a 	ret
  803ee4:	0007883a 	mov	r3,zero
  803ee8:	1805883a 	mov	r2,r3
  803eec:	f800283a 	ret

00803ef0 <__clzsi2>:
  803ef0:	00bfffd4 	movui	r2,65535
  803ef4:	11000e36 	bltu	r2,r4,803f30 <__clzsi2+0x40>
  803ef8:	00803fc4 	movi	r2,255
  803efc:	01400204 	movi	r5,8
  803f00:	0007883a 	mov	r3,zero
  803f04:	11001036 	bltu	r2,r4,803f48 <__clzsi2+0x58>
  803f08:	000b883a 	mov	r5,zero
  803f0c:	20c6d83a 	srl	r3,r4,r3
  803f10:	00802074 	movhi	r2,129
  803f14:	10873204 	addi	r2,r2,7368
  803f18:	1887883a 	add	r3,r3,r2
  803f1c:	18800003 	ldbu	r2,0(r3)
  803f20:	00c00804 	movi	r3,32
  803f24:	2885883a 	add	r2,r5,r2
  803f28:	1885c83a 	sub	r2,r3,r2
  803f2c:	f800283a 	ret
  803f30:	01400404 	movi	r5,16
  803f34:	00804034 	movhi	r2,256
  803f38:	10bfffc4 	addi	r2,r2,-1
  803f3c:	2807883a 	mov	r3,r5
  803f40:	113ff22e 	bgeu	r2,r4,803f0c <__clzsi2+0x1c>
  803f44:	01400604 	movi	r5,24
  803f48:	2807883a 	mov	r3,r5
  803f4c:	20c6d83a 	srl	r3,r4,r3
  803f50:	00802074 	movhi	r2,129
  803f54:	10873204 	addi	r2,r2,7368
  803f58:	1887883a 	add	r3,r3,r2
  803f5c:	18800003 	ldbu	r2,0(r3)
  803f60:	00c00804 	movi	r3,32
  803f64:	2885883a 	add	r2,r5,r2
  803f68:	1885c83a 	sub	r2,r3,r2
  803f6c:	f800283a 	ret

00803f70 <__pack_d>:
  803f70:	20c00017 	ldw	r3,0(r4)
  803f74:	defffd04 	addi	sp,sp,-12
  803f78:	dc000015 	stw	r16,0(sp)
  803f7c:	dc800215 	stw	r18,8(sp)
  803f80:	dc400115 	stw	r17,4(sp)
  803f84:	00800044 	movi	r2,1
  803f88:	22000317 	ldw	r8,12(r4)
  803f8c:	001f883a 	mov	r15,zero
  803f90:	22400417 	ldw	r9,16(r4)
  803f94:	24000117 	ldw	r16,4(r4)
  803f98:	10c0552e 	bgeu	r2,r3,8040f0 <__pack_d+0x180>
  803f9c:	00800104 	movi	r2,4
  803fa0:	18804f26 	beq	r3,r2,8040e0 <__pack_d+0x170>
  803fa4:	00800084 	movi	r2,2
  803fa8:	18800226 	beq	r3,r2,803fb4 <__pack_d+0x44>
  803fac:	4244b03a 	or	r2,r8,r9
  803fb0:	10001a1e 	bne	r2,zero,80401c <__pack_d+0xac>
  803fb4:	000d883a 	mov	r6,zero
  803fb8:	000f883a 	mov	r7,zero
  803fbc:	0011883a 	mov	r8,zero
  803fc0:	00800434 	movhi	r2,16
  803fc4:	10bfffc4 	addi	r2,r2,-1
  803fc8:	301d883a 	mov	r14,r6
  803fcc:	3884703a 	and	r2,r7,r2
  803fd0:	400a953a 	slli	r5,r8,20
  803fd4:	79bffc2c 	andhi	r6,r15,65520
  803fd8:	308cb03a 	or	r6,r6,r2
  803fdc:	00e00434 	movhi	r3,32784
  803fe0:	18ffffc4 	addi	r3,r3,-1
  803fe4:	800497fa 	slli	r2,r16,31
  803fe8:	30c6703a 	and	r3,r6,r3
  803fec:	1946b03a 	or	r3,r3,r5
  803ff0:	01600034 	movhi	r5,32768
  803ff4:	297fffc4 	addi	r5,r5,-1
  803ff8:	194a703a 	and	r5,r3,r5
  803ffc:	288ab03a 	or	r5,r5,r2
  804000:	2807883a 	mov	r3,r5
  804004:	7005883a 	mov	r2,r14
  804008:	dc800217 	ldw	r18,8(sp)
  80400c:	dc400117 	ldw	r17,4(sp)
  804010:	dc000017 	ldw	r16,0(sp)
  804014:	dec00304 	addi	sp,sp,12
  804018:	f800283a 	ret
  80401c:	21000217 	ldw	r4,8(r4)
  804020:	00bf0084 	movi	r2,-1022
  804024:	20803f16 	blt	r4,r2,804124 <__pack_d+0x1b4>
  804028:	0080ffc4 	movi	r2,1023
  80402c:	11002c16 	blt	r2,r4,8040e0 <__pack_d+0x170>
  804030:	00803fc4 	movi	r2,255
  804034:	408c703a 	and	r6,r8,r2
  804038:	00802004 	movi	r2,128
  80403c:	0007883a 	mov	r3,zero
  804040:	000f883a 	mov	r7,zero
  804044:	2280ffc4 	addi	r10,r4,1023
  804048:	30801e26 	beq	r6,r2,8040c4 <__pack_d+0x154>
  80404c:	00801fc4 	movi	r2,127
  804050:	4089883a 	add	r4,r8,r2
  804054:	220d803a 	cmpltu	r6,r4,r8
  804058:	324d883a 	add	r6,r6,r9
  80405c:	2011883a 	mov	r8,r4
  804060:	3013883a 	mov	r9,r6
  804064:	00880034 	movhi	r2,8192
  804068:	10bfffc4 	addi	r2,r2,-1
  80406c:	12400d36 	bltu	r2,r9,8040a4 <__pack_d+0x134>
  804070:	4804963a 	slli	r2,r9,24
  804074:	400cd23a 	srli	r6,r8,8
  804078:	480ed23a 	srli	r7,r9,8
  80407c:	013fffc4 	movi	r4,-1
  804080:	118cb03a 	or	r6,r2,r6
  804084:	01400434 	movhi	r5,16
  804088:	297fffc4 	addi	r5,r5,-1
  80408c:	3104703a 	and	r2,r6,r4
  804090:	3946703a 	and	r3,r7,r5
  804094:	5201ffcc 	andi	r8,r10,2047
  804098:	100d883a 	mov	r6,r2
  80409c:	180f883a 	mov	r7,r3
  8040a0:	003fc706 	br	803fc0 <__pack_d+0x50>
  8040a4:	480897fa 	slli	r4,r9,31
  8040a8:	4004d07a 	srli	r2,r8,1
  8040ac:	4806d07a 	srli	r3,r9,1
  8040b0:	52800044 	addi	r10,r10,1
  8040b4:	2084b03a 	or	r2,r4,r2
  8040b8:	1011883a 	mov	r8,r2
  8040bc:	1813883a 	mov	r9,r3
  8040c0:	003feb06 	br	804070 <__pack_d+0x100>
  8040c4:	383fe11e 	bne	r7,zero,80404c <__pack_d+0xdc>
  8040c8:	01004004 	movi	r4,256
  8040cc:	4104703a 	and	r2,r8,r4
  8040d0:	10c4b03a 	or	r2,r2,r3
  8040d4:	103fe326 	beq	r2,zero,804064 <__pack_d+0xf4>
  8040d8:	3005883a 	mov	r2,r6
  8040dc:	003fdc06 	br	804050 <__pack_d+0xe0>
  8040e0:	000d883a 	mov	r6,zero
  8040e4:	000f883a 	mov	r7,zero
  8040e8:	0201ffc4 	movi	r8,2047
  8040ec:	003fb406 	br	803fc0 <__pack_d+0x50>
  8040f0:	0005883a 	mov	r2,zero
  8040f4:	00c00234 	movhi	r3,8
  8040f8:	408cb03a 	or	r6,r8,r2
  8040fc:	48ceb03a 	or	r7,r9,r3
  804100:	013fffc4 	movi	r4,-1
  804104:	01400434 	movhi	r5,16
  804108:	297fffc4 	addi	r5,r5,-1
  80410c:	3104703a 	and	r2,r6,r4
  804110:	3946703a 	and	r3,r7,r5
  804114:	100d883a 	mov	r6,r2
  804118:	180f883a 	mov	r7,r3
  80411c:	0201ffc4 	movi	r8,2047
  804120:	003fa706 	br	803fc0 <__pack_d+0x50>
  804124:	1109c83a 	sub	r4,r2,r4
  804128:	00800e04 	movi	r2,56
  80412c:	11004316 	blt	r2,r4,80423c <__pack_d+0x2cc>
  804130:	21fff804 	addi	r7,r4,-32
  804134:	38004516 	blt	r7,zero,80424c <__pack_d+0x2dc>
  804138:	49d8d83a 	srl	r12,r9,r7
  80413c:	001b883a 	mov	r13,zero
  804140:	0023883a 	mov	r17,zero
  804144:	01400044 	movi	r5,1
  804148:	0025883a 	mov	r18,zero
  80414c:	38004716 	blt	r7,zero,80426c <__pack_d+0x2fc>
  804150:	29d6983a 	sll	r11,r5,r7
  804154:	0015883a 	mov	r10,zero
  804158:	00bfffc4 	movi	r2,-1
  80415c:	5089883a 	add	r4,r10,r2
  804160:	588b883a 	add	r5,r11,r2
  804164:	228d803a 	cmpltu	r6,r4,r10
  804168:	314b883a 	add	r5,r6,r5
  80416c:	4104703a 	and	r2,r8,r4
  804170:	4946703a 	and	r3,r9,r5
  804174:	10c4b03a 	or	r2,r2,r3
  804178:	10000226 	beq	r2,zero,804184 <__pack_d+0x214>
  80417c:	04400044 	movi	r17,1
  804180:	0025883a 	mov	r18,zero
  804184:	00803fc4 	movi	r2,255
  804188:	644eb03a 	or	r7,r12,r17
  80418c:	3892703a 	and	r9,r7,r2
  804190:	00802004 	movi	r2,128
  804194:	6c90b03a 	or	r8,r13,r18
  804198:	0015883a 	mov	r10,zero
  80419c:	48801626 	beq	r9,r2,8041f8 <__pack_d+0x288>
  8041a0:	01001fc4 	movi	r4,127
  8041a4:	3905883a 	add	r2,r7,r4
  8041a8:	11cd803a 	cmpltu	r6,r2,r7
  8041ac:	320d883a 	add	r6,r6,r8
  8041b0:	100f883a 	mov	r7,r2
  8041b4:	00840034 	movhi	r2,4096
  8041b8:	10bfffc4 	addi	r2,r2,-1
  8041bc:	3011883a 	mov	r8,r6
  8041c0:	0007883a 	mov	r3,zero
  8041c4:	11801b36 	bltu	r2,r6,804234 <__pack_d+0x2c4>
  8041c8:	4004963a 	slli	r2,r8,24
  8041cc:	3808d23a 	srli	r4,r7,8
  8041d0:	400ad23a 	srli	r5,r8,8
  8041d4:	1813883a 	mov	r9,r3
  8041d8:	1108b03a 	or	r4,r2,r4
  8041dc:	00bfffc4 	movi	r2,-1
  8041e0:	00c00434 	movhi	r3,16
  8041e4:	18ffffc4 	addi	r3,r3,-1
  8041e8:	208c703a 	and	r6,r4,r2
  8041ec:	28ce703a 	and	r7,r5,r3
  8041f0:	4a01ffcc 	andi	r8,r9,2047
  8041f4:	003f7206 	br	803fc0 <__pack_d+0x50>
  8041f8:	503fe91e 	bne	r10,zero,8041a0 <__pack_d+0x230>
  8041fc:	01004004 	movi	r4,256
  804200:	3904703a 	and	r2,r7,r4
  804204:	0007883a 	mov	r3,zero
  804208:	10c4b03a 	or	r2,r2,r3
  80420c:	10000626 	beq	r2,zero,804228 <__pack_d+0x2b8>
  804210:	3a45883a 	add	r2,r7,r9
  804214:	11cd803a 	cmpltu	r6,r2,r7
  804218:	320d883a 	add	r6,r6,r8
  80421c:	100f883a 	mov	r7,r2
  804220:	3011883a 	mov	r8,r6
  804224:	0007883a 	mov	r3,zero
  804228:	00840034 	movhi	r2,4096
  80422c:	10bfffc4 	addi	r2,r2,-1
  804230:	123fe52e 	bgeu	r2,r8,8041c8 <__pack_d+0x258>
  804234:	00c00044 	movi	r3,1
  804238:	003fe306 	br	8041c8 <__pack_d+0x258>
  80423c:	0009883a 	mov	r4,zero
  804240:	0013883a 	mov	r9,zero
  804244:	000b883a 	mov	r5,zero
  804248:	003fe406 	br	8041dc <__pack_d+0x26c>
  80424c:	4a47883a 	add	r3,r9,r9
  804250:	008007c4 	movi	r2,31
  804254:	1105c83a 	sub	r2,r2,r4
  804258:	1886983a 	sll	r3,r3,r2
  80425c:	4118d83a 	srl	r12,r8,r4
  804260:	491ad83a 	srl	r13,r9,r4
  804264:	1b18b03a 	or	r12,r3,r12
  804268:	003fb506 	br	804140 <__pack_d+0x1d0>
  80426c:	2806d07a 	srli	r3,r5,1
  804270:	008007c4 	movi	r2,31
  804274:	1105c83a 	sub	r2,r2,r4
  804278:	1896d83a 	srl	r11,r3,r2
  80427c:	2914983a 	sll	r10,r5,r4
  804280:	003fb506 	br	804158 <__pack_d+0x1e8>

00804284 <__unpack_d>:
  804284:	20c00117 	ldw	r3,4(r4)
  804288:	22400017 	ldw	r9,0(r4)
  80428c:	00800434 	movhi	r2,16
  804290:	10bfffc4 	addi	r2,r2,-1
  804294:	1808d53a 	srli	r4,r3,20
  804298:	180cd7fa 	srli	r6,r3,31
  80429c:	1894703a 	and	r10,r3,r2
  8042a0:	2201ffcc 	andi	r8,r4,2047
  8042a4:	281b883a 	mov	r13,r5
  8042a8:	4817883a 	mov	r11,r9
  8042ac:	29800115 	stw	r6,4(r5)
  8042b0:	5019883a 	mov	r12,r10
  8042b4:	40001e1e 	bne	r8,zero,804330 <__unpack_d+0xac>
  8042b8:	4a84b03a 	or	r2,r9,r10
  8042bc:	10001926 	beq	r2,zero,804324 <__unpack_d+0xa0>
  8042c0:	4804d63a 	srli	r2,r9,24
  8042c4:	500c923a 	slli	r6,r10,8
  8042c8:	013f0084 	movi	r4,-1022
  8042cc:	00c40034 	movhi	r3,4096
  8042d0:	18ffffc4 	addi	r3,r3,-1
  8042d4:	118cb03a 	or	r6,r2,r6
  8042d8:	008000c4 	movi	r2,3
  8042dc:	480a923a 	slli	r5,r9,8
  8042e0:	68800015 	stw	r2,0(r13)
  8042e4:	69000215 	stw	r4,8(r13)
  8042e8:	19800b36 	bltu	r3,r6,804318 <__unpack_d+0x94>
  8042ec:	200f883a 	mov	r7,r4
  8042f0:	1811883a 	mov	r8,r3
  8042f4:	2945883a 	add	r2,r5,r5
  8042f8:	1149803a 	cmpltu	r4,r2,r5
  8042fc:	3187883a 	add	r3,r6,r6
  804300:	20c9883a 	add	r4,r4,r3
  804304:	100b883a 	mov	r5,r2
  804308:	200d883a 	mov	r6,r4
  80430c:	39ffffc4 	addi	r7,r7,-1
  804310:	413ff82e 	bgeu	r8,r4,8042f4 <__unpack_d+0x70>
  804314:	69c00215 	stw	r7,8(r13)
  804318:	69800415 	stw	r6,16(r13)
  80431c:	69400315 	stw	r5,12(r13)
  804320:	f800283a 	ret
  804324:	00800084 	movi	r2,2
  804328:	28800015 	stw	r2,0(r5)
  80432c:	f800283a 	ret
  804330:	0081ffc4 	movi	r2,2047
  804334:	40800f26 	beq	r8,r2,804374 <__unpack_d+0xf0>
  804338:	480cd63a 	srli	r6,r9,24
  80433c:	5006923a 	slli	r3,r10,8
  804340:	4804923a 	slli	r2,r9,8
  804344:	0009883a 	mov	r4,zero
  804348:	30c6b03a 	or	r3,r6,r3
  80434c:	01440034 	movhi	r5,4096
  804350:	110cb03a 	or	r6,r2,r4
  804354:	423f0044 	addi	r8,r8,-1023
  804358:	194eb03a 	or	r7,r3,r5
  80435c:	008000c4 	movi	r2,3
  804360:	69c00415 	stw	r7,16(r13)
  804364:	6a000215 	stw	r8,8(r13)
  804368:	68800015 	stw	r2,0(r13)
  80436c:	69800315 	stw	r6,12(r13)
  804370:	f800283a 	ret
  804374:	4a84b03a 	or	r2,r9,r10
  804378:	1000031e 	bne	r2,zero,804388 <__unpack_d+0x104>
  80437c:	00800104 	movi	r2,4
  804380:	28800015 	stw	r2,0(r5)
  804384:	f800283a 	ret
  804388:	0009883a 	mov	r4,zero
  80438c:	01400234 	movhi	r5,8
  804390:	4904703a 	and	r2,r9,r4
  804394:	5146703a 	and	r3,r10,r5
  804398:	10c4b03a 	or	r2,r2,r3
  80439c:	10000526 	beq	r2,zero,8043b4 <__unpack_d+0x130>
  8043a0:	00800044 	movi	r2,1
  8043a4:	68800015 	stw	r2,0(r13)
  8043a8:	6b000415 	stw	r12,16(r13)
  8043ac:	6ac00315 	stw	r11,12(r13)
  8043b0:	f800283a 	ret
  8043b4:	68000015 	stw	zero,0(r13)
  8043b8:	003ffb06 	br	8043a8 <__unpack_d+0x124>

008043bc <__fpcmp_parts_d>:
  8043bc:	21800017 	ldw	r6,0(r4)
  8043c0:	00c00044 	movi	r3,1
  8043c4:	19800a2e 	bgeu	r3,r6,8043f0 <__fpcmp_parts_d+0x34>
  8043c8:	28800017 	ldw	r2,0(r5)
  8043cc:	1880082e 	bgeu	r3,r2,8043f0 <__fpcmp_parts_d+0x34>
  8043d0:	00c00104 	movi	r3,4
  8043d4:	30c02626 	beq	r6,r3,804470 <__fpcmp_parts_d+0xb4>
  8043d8:	10c02226 	beq	r2,r3,804464 <__fpcmp_parts_d+0xa8>
  8043dc:	00c00084 	movi	r3,2
  8043e0:	30c00526 	beq	r6,r3,8043f8 <__fpcmp_parts_d+0x3c>
  8043e4:	10c0071e 	bne	r2,r3,804404 <__fpcmp_parts_d+0x48>
  8043e8:	20800117 	ldw	r2,4(r4)
  8043ec:	1000091e 	bne	r2,zero,804414 <__fpcmp_parts_d+0x58>
  8043f0:	00800044 	movi	r2,1
  8043f4:	f800283a 	ret
  8043f8:	10c01a1e 	bne	r2,r3,804464 <__fpcmp_parts_d+0xa8>
  8043fc:	0005883a 	mov	r2,zero
  804400:	f800283a 	ret
  804404:	22000117 	ldw	r8,4(r4)
  804408:	28800117 	ldw	r2,4(r5)
  80440c:	40800326 	beq	r8,r2,80441c <__fpcmp_parts_d+0x60>
  804410:	403ff726 	beq	r8,zero,8043f0 <__fpcmp_parts_d+0x34>
  804414:	00bfffc4 	movi	r2,-1
  804418:	f800283a 	ret
  80441c:	20c00217 	ldw	r3,8(r4)
  804420:	28800217 	ldw	r2,8(r5)
  804424:	10fffa16 	blt	r2,r3,804410 <__fpcmp_parts_d+0x54>
  804428:	18800916 	blt	r3,r2,804450 <__fpcmp_parts_d+0x94>
  80442c:	21c00417 	ldw	r7,16(r4)
  804430:	28c00417 	ldw	r3,16(r5)
  804434:	21800317 	ldw	r6,12(r4)
  804438:	28800317 	ldw	r2,12(r5)
  80443c:	19fff436 	bltu	r3,r7,804410 <__fpcmp_parts_d+0x54>
  804440:	38c00526 	beq	r7,r3,804458 <__fpcmp_parts_d+0x9c>
  804444:	38c00236 	bltu	r7,r3,804450 <__fpcmp_parts_d+0x94>
  804448:	19ffec1e 	bne	r3,r7,8043fc <__fpcmp_parts_d+0x40>
  80444c:	30bfeb2e 	bgeu	r6,r2,8043fc <__fpcmp_parts_d+0x40>
  804450:	403fe71e 	bne	r8,zero,8043f0 <__fpcmp_parts_d+0x34>
  804454:	003fef06 	br	804414 <__fpcmp_parts_d+0x58>
  804458:	11bffa2e 	bgeu	r2,r6,804444 <__fpcmp_parts_d+0x88>
  80445c:	403fe426 	beq	r8,zero,8043f0 <__fpcmp_parts_d+0x34>
  804460:	003fec06 	br	804414 <__fpcmp_parts_d+0x58>
  804464:	28800117 	ldw	r2,4(r5)
  804468:	103fe11e 	bne	r2,zero,8043f0 <__fpcmp_parts_d+0x34>
  80446c:	003fe906 	br	804414 <__fpcmp_parts_d+0x58>
  804470:	11bfdd1e 	bne	r2,r6,8043e8 <__fpcmp_parts_d+0x2c>
  804474:	28c00117 	ldw	r3,4(r5)
  804478:	20800117 	ldw	r2,4(r4)
  80447c:	1885c83a 	sub	r2,r3,r2
  804480:	f800283a 	ret

00804484 <exit>:
  804484:	defffe04 	addi	sp,sp,-8
  804488:	000b883a 	mov	r5,zero
  80448c:	dc000015 	stw	r16,0(sp)
  804490:	dfc00115 	stw	ra,4(sp)
  804494:	2021883a 	mov	r16,r4
  804498:	0806fb80 	call	806fb8 <__call_exitprocs>
  80449c:	00802074 	movhi	r2,129
  8044a0:	1091ad04 	addi	r2,r2,18100
  8044a4:	11000017 	ldw	r4,0(r2)
  8044a8:	20800f17 	ldw	r2,60(r4)
  8044ac:	10000126 	beq	r2,zero,8044b4 <exit+0x30>
  8044b0:	103ee83a 	callr	r2
  8044b4:	8009883a 	mov	r4,r16
  8044b8:	080deac0 	call	80deac <_exit>

008044bc <memset>:
  8044bc:	008000c4 	movi	r2,3
  8044c0:	29403fcc 	andi	r5,r5,255
  8044c4:	2007883a 	mov	r3,r4
  8044c8:	1180022e 	bgeu	r2,r6,8044d4 <memset+0x18>
  8044cc:	2084703a 	and	r2,r4,r2
  8044d0:	10000826 	beq	r2,zero,8044f4 <memset+0x38>
  8044d4:	30000526 	beq	r6,zero,8044ec <memset+0x30>
  8044d8:	2805883a 	mov	r2,r5
  8044dc:	30cd883a 	add	r6,r6,r3
  8044e0:	18800005 	stb	r2,0(r3)
  8044e4:	18c00044 	addi	r3,r3,1
  8044e8:	19bffd1e 	bne	r3,r6,8044e0 <memset+0x24>
  8044ec:	2005883a 	mov	r2,r4
  8044f0:	f800283a 	ret
  8044f4:	2804923a 	slli	r2,r5,8
  8044f8:	020003c4 	movi	r8,15
  8044fc:	200f883a 	mov	r7,r4
  804500:	2884b03a 	or	r2,r5,r2
  804504:	1006943a 	slli	r3,r2,16
  804508:	10c6b03a 	or	r3,r2,r3
  80450c:	41800a2e 	bgeu	r8,r6,804538 <memset+0x7c>
  804510:	4005883a 	mov	r2,r8
  804514:	31bffc04 	addi	r6,r6,-16
  804518:	38c00015 	stw	r3,0(r7)
  80451c:	38c00115 	stw	r3,4(r7)
  804520:	38c00215 	stw	r3,8(r7)
  804524:	38c00315 	stw	r3,12(r7)
  804528:	39c00404 	addi	r7,r7,16
  80452c:	11bff936 	bltu	r2,r6,804514 <memset+0x58>
  804530:	008000c4 	movi	r2,3
  804534:	1180052e 	bgeu	r2,r6,80454c <memset+0x90>
  804538:	31bfff04 	addi	r6,r6,-4
  80453c:	008000c4 	movi	r2,3
  804540:	38c00015 	stw	r3,0(r7)
  804544:	39c00104 	addi	r7,r7,4
  804548:	11bffb36 	bltu	r2,r6,804538 <memset+0x7c>
  80454c:	3807883a 	mov	r3,r7
  804550:	003fe006 	br	8044d4 <memset+0x18>

00804554 <_perror_r>:
  804554:	defffe04 	addi	sp,sp,-8
  804558:	dc000015 	stw	r16,0(sp)
  80455c:	dfc00115 	stw	ra,4(sp)
  804560:	2021883a 	mov	r16,r4
  804564:	28000326 	beq	r5,zero,804574 <_perror_r+0x20>
  804568:	28800007 	ldb	r2,0(r5)
  80456c:	2809883a 	mov	r4,r5
  804570:	10000c1e 	bne	r2,zero,8045a4 <_perror_r+0x50>
  804574:	81000017 	ldw	r4,0(r16)
  804578:	08048480 	call	804848 <strerror>
  80457c:	1009883a 	mov	r4,r2
  804580:	10000226 	beq	r2,zero,80458c <_perror_r+0x38>
  804584:	81400317 	ldw	r5,12(r16)
  804588:	0808fb40 	call	808fb4 <fputs>
  80458c:	81400317 	ldw	r5,12(r16)
  804590:	01000284 	movi	r4,10
  804594:	dfc00117 	ldw	ra,4(sp)
  804598:	dc000017 	ldw	r16,0(sp)
  80459c:	dec00204 	addi	sp,sp,8
  8045a0:	0808e841 	jmpi	808e84 <fputc>
  8045a4:	81400317 	ldw	r5,12(r16)
  8045a8:	0808fb40 	call	808fb4 <fputs>
  8045ac:	81400317 	ldw	r5,12(r16)
  8045b0:	01002074 	movhi	r4,129
  8045b4:	21077304 	addi	r4,r4,7628
  8045b8:	0808fb40 	call	808fb4 <fputs>
  8045bc:	003fed06 	br	804574 <_perror_r+0x20>

008045c0 <perror>:
  8045c0:	00802074 	movhi	r2,129
  8045c4:	1091ac04 	addi	r2,r2,18096
  8045c8:	200b883a 	mov	r5,r4
  8045cc:	11000017 	ldw	r4,0(r2)
  8045d0:	08045541 	jmpi	804554 <_perror_r>

008045d4 <printf>:
  8045d4:	defffb04 	addi	sp,sp,-20
  8045d8:	dfc00115 	stw	ra,4(sp)
  8045dc:	d9400215 	stw	r5,8(sp)
  8045e0:	d9800315 	stw	r6,12(sp)
  8045e4:	d9c00415 	stw	r7,16(sp)
  8045e8:	00802074 	movhi	r2,129
  8045ec:	1091ac04 	addi	r2,r2,18096
  8045f0:	10c00017 	ldw	r3,0(r2)
  8045f4:	200b883a 	mov	r5,r4
  8045f8:	d8800204 	addi	r2,sp,8
  8045fc:	19000217 	ldw	r4,8(r3)
  804600:	100d883a 	mov	r6,r2
  804604:	d8800015 	stw	r2,0(sp)
  804608:	0806e540 	call	806e54 <__vfprintf_internal>
  80460c:	dfc00117 	ldw	ra,4(sp)
  804610:	dec00504 	addi	sp,sp,20
  804614:	f800283a 	ret

00804618 <_printf_r>:
  804618:	defffc04 	addi	sp,sp,-16
  80461c:	dfc00115 	stw	ra,4(sp)
  804620:	d9800215 	stw	r6,8(sp)
  804624:	d9c00315 	stw	r7,12(sp)
  804628:	280d883a 	mov	r6,r5
  80462c:	21400217 	ldw	r5,8(r4)
  804630:	d8c00204 	addi	r3,sp,8
  804634:	180f883a 	mov	r7,r3
  804638:	d8c00015 	stw	r3,0(sp)
  80463c:	0804f900 	call	804f90 <___vfprintf_internal_r>
  804640:	dfc00117 	ldw	ra,4(sp)
  804644:	dec00404 	addi	sp,sp,16
  804648:	f800283a 	ret

0080464c <_puts_r>:
  80464c:	defff604 	addi	sp,sp,-40
  804650:	dc400715 	stw	r17,28(sp)
  804654:	2023883a 	mov	r17,r4
  804658:	2809883a 	mov	r4,r5
  80465c:	dfc00915 	stw	ra,36(sp)
  804660:	dcc00815 	stw	r19,32(sp)
  804664:	2827883a 	mov	r19,r5
  804668:	0804ebc0 	call	804ebc <strlen>
  80466c:	89400217 	ldw	r5,8(r17)
  804670:	00c02074 	movhi	r3,129
  804674:	18c77404 	addi	r3,r3,7632
  804678:	01c00044 	movi	r7,1
  80467c:	12000044 	addi	r8,r2,1
  804680:	d8c00515 	stw	r3,20(sp)
  804684:	d9c00615 	stw	r7,24(sp)
  804688:	d8c00304 	addi	r3,sp,12
  80468c:	01c00084 	movi	r7,2
  804690:	8809883a 	mov	r4,r17
  804694:	d80d883a 	mov	r6,sp
  804698:	d8c00015 	stw	r3,0(sp)
  80469c:	dcc00315 	stw	r19,12(sp)
  8046a0:	da000215 	stw	r8,8(sp)
  8046a4:	d9c00115 	stw	r7,4(sp)
  8046a8:	d8800415 	stw	r2,16(sp)
  8046ac:	08094100 	call	809410 <__sfvwrite_r>
  8046b0:	00ffffc4 	movi	r3,-1
  8046b4:	10000626 	beq	r2,zero,8046d0 <_puts_r+0x84>
  8046b8:	1805883a 	mov	r2,r3
  8046bc:	dfc00917 	ldw	ra,36(sp)
  8046c0:	dcc00817 	ldw	r19,32(sp)
  8046c4:	dc400717 	ldw	r17,28(sp)
  8046c8:	dec00a04 	addi	sp,sp,40
  8046cc:	f800283a 	ret
  8046d0:	00c00284 	movi	r3,10
  8046d4:	1805883a 	mov	r2,r3
  8046d8:	dfc00917 	ldw	ra,36(sp)
  8046dc:	dcc00817 	ldw	r19,32(sp)
  8046e0:	dc400717 	ldw	r17,28(sp)
  8046e4:	dec00a04 	addi	sp,sp,40
  8046e8:	f800283a 	ret

008046ec <puts>:
  8046ec:	00802074 	movhi	r2,129
  8046f0:	1091ac04 	addi	r2,r2,18096
  8046f4:	200b883a 	mov	r5,r4
  8046f8:	11000017 	ldw	r4,0(r2)
  8046fc:	080464c1 	jmpi	80464c <_puts_r>

00804700 <strcmp>:
  804700:	2144b03a 	or	r2,r4,r5
  804704:	108000cc 	andi	r2,r2,3
  804708:	10001d1e 	bne	r2,zero,804780 <strcmp+0x80>
  80470c:	200f883a 	mov	r7,r4
  804710:	28800017 	ldw	r2,0(r5)
  804714:	21000017 	ldw	r4,0(r4)
  804718:	280d883a 	mov	r6,r5
  80471c:	2080161e 	bne	r4,r2,804778 <strcmp+0x78>
  804720:	023fbff4 	movhi	r8,65279
  804724:	423fbfc4 	addi	r8,r8,-257
  804728:	2207883a 	add	r3,r4,r8
  80472c:	01602074 	movhi	r5,32897
  804730:	29602004 	addi	r5,r5,-32640
  804734:	1946703a 	and	r3,r3,r5
  804738:	0104303a 	nor	r2,zero,r4
  80473c:	10c4703a 	and	r2,r2,r3
  804740:	10001c1e 	bne	r2,zero,8047b4 <strcmp+0xb4>
  804744:	4013883a 	mov	r9,r8
  804748:	2811883a 	mov	r8,r5
  80474c:	00000106 	br	804754 <strcmp+0x54>
  804750:	1800181e 	bne	r3,zero,8047b4 <strcmp+0xb4>
  804754:	39c00104 	addi	r7,r7,4
  804758:	39000017 	ldw	r4,0(r7)
  80475c:	31800104 	addi	r6,r6,4
  804760:	31400017 	ldw	r5,0(r6)
  804764:	2245883a 	add	r2,r4,r9
  804768:	1204703a 	and	r2,r2,r8
  80476c:	0106303a 	nor	r3,zero,r4
  804770:	1886703a 	and	r3,r3,r2
  804774:	217ff626 	beq	r4,r5,804750 <strcmp+0x50>
  804778:	3809883a 	mov	r4,r7
  80477c:	300b883a 	mov	r5,r6
  804780:	20c00007 	ldb	r3,0(r4)
  804784:	1800051e 	bne	r3,zero,80479c <strcmp+0x9c>
  804788:	00000606 	br	8047a4 <strcmp+0xa4>
  80478c:	21000044 	addi	r4,r4,1
  804790:	20c00007 	ldb	r3,0(r4)
  804794:	29400044 	addi	r5,r5,1
  804798:	18000226 	beq	r3,zero,8047a4 <strcmp+0xa4>
  80479c:	28800007 	ldb	r2,0(r5)
  8047a0:	18bffa26 	beq	r3,r2,80478c <strcmp+0x8c>
  8047a4:	20c00003 	ldbu	r3,0(r4)
  8047a8:	28800003 	ldbu	r2,0(r5)
  8047ac:	1885c83a 	sub	r2,r3,r2
  8047b0:	f800283a 	ret
  8047b4:	0005883a 	mov	r2,zero
  8047b8:	f800283a 	ret

008047bc <strcpy>:
  8047bc:	2904b03a 	or	r2,r5,r4
  8047c0:	108000cc 	andi	r2,r2,3
  8047c4:	10000826 	beq	r2,zero,8047e8 <strcpy+0x2c>
  8047c8:	2007883a 	mov	r3,r4
  8047cc:	28800003 	ldbu	r2,0(r5)
  8047d0:	29400044 	addi	r5,r5,1
  8047d4:	18800005 	stb	r2,0(r3)
  8047d8:	18c00044 	addi	r3,r3,1
  8047dc:	103ffb1e 	bne	r2,zero,8047cc <strcpy+0x10>
  8047e0:	2005883a 	mov	r2,r4
  8047e4:	f800283a 	ret
  8047e8:	29800017 	ldw	r6,0(r5)
  8047ec:	023fbff4 	movhi	r8,65279
  8047f0:	423fbfc4 	addi	r8,r8,-257
  8047f4:	02a02074 	movhi	r10,32897
  8047f8:	52a02004 	addi	r10,r10,-32640
  8047fc:	3205883a 	add	r2,r6,r8
  804800:	0186303a 	nor	r3,zero,r6
  804804:	10c4703a 	and	r2,r2,r3
  804808:	1284703a 	and	r2,r2,r10
  80480c:	200f883a 	mov	r7,r4
  804810:	10000b1e 	bne	r2,zero,804840 <strcpy+0x84>
  804814:	4013883a 	mov	r9,r8
  804818:	5011883a 	mov	r8,r10
  80481c:	39800015 	stw	r6,0(r7)
  804820:	29400104 	addi	r5,r5,4
  804824:	29800017 	ldw	r6,0(r5)
  804828:	39c00104 	addi	r7,r7,4
  80482c:	3245883a 	add	r2,r6,r9
  804830:	0186303a 	nor	r3,zero,r6
  804834:	10c4703a 	and	r2,r2,r3
  804838:	1204703a 	and	r2,r2,r8
  80483c:	103ff726 	beq	r2,zero,80481c <strcpy+0x60>
  804840:	3807883a 	mov	r3,r7
  804844:	003fe106 	br	8047cc <strcpy+0x10>

00804848 <strerror>:
  804848:	deffff04 	addi	sp,sp,-4
  80484c:	00802184 	movi	r2,134
  804850:	dfc00015 	stw	ra,0(sp)
  804854:	200b883a 	mov	r5,r4
  804858:	11008e36 	bltu	r2,r4,804a94 <strerror+0x24c>
  80485c:	2105883a 	add	r2,r4,r4
  804860:	1085883a 	add	r2,r2,r2
  804864:	00c02034 	movhi	r3,128
  804868:	18d21e04 	addi	r3,r3,18552
  80486c:	10c5883a 	add	r2,r2,r3
  804870:	11000017 	ldw	r4,0(r2)
  804874:	2000683a 	jmp	r4
  804878:	00804a94 	movui	r2,298
  80487c:	00804acc 	andi	r2,zero,299
  804880:	00804ad8 	cmpnei	r2,zero,299
  804884:	00804ae4 	muli	r2,zero,299
  804888:	00804af0 	cmpltui	r2,zero,299
  80488c:	00804afc 	xorhi	r2,zero,299
  804890:	00804b08 	cmpgei	r2,zero,300
  804894:	00804b14 	movui	r2,300
  804898:	00804b20 	cmpeqi	r2,zero,300
  80489c:	00804b2c 	andhi	r2,zero,300
  8048a0:	00804b38 	rdprs	r2,zero,300
  8048a4:	00804b44 	movi	r2,301
  8048a8:	00804b50 	cmplti	r2,zero,301
  8048ac:	00804b5c 	xori	r2,zero,301
  8048b0:	00804b68 	cmpgeui	r2,zero,301
  8048b4:	00804b74 	movhi	r2,301
  8048b8:	00804b80 	call	804b8 <__reset-0x77fb48>
  8048bc:	00804b8c 	andi	r2,zero,302
  8048c0:	00804b98 	cmpnei	r2,zero,302
  8048c4:	00804ba4 	muli	r2,zero,302
  8048c8:	00804bb0 	cmpltui	r2,zero,302
  8048cc:	00804bbc 	xorhi	r2,zero,302
  8048d0:	00804bc8 	cmpgei	r2,zero,303
  8048d4:	00804bd4 	movui	r2,303
  8048d8:	00804be0 	cmpeqi	r2,zero,303
  8048dc:	00804bec 	andhi	r2,zero,303
  8048e0:	00804bf8 	rdprs	r2,zero,303
  8048e4:	00804c04 	movi	r2,304
  8048e8:	00804c10 	cmplti	r2,zero,304
  8048ec:	00804c1c 	xori	r2,zero,304
  8048f0:	00804c28 	cmpgeui	r2,zero,304
  8048f4:	00804c34 	movhi	r2,304
  8048f8:	00804c40 	call	804c4 <__reset-0x77fb3c>
  8048fc:	00804c4c 	andi	r2,zero,305
  804900:	00804c58 	cmpnei	r2,zero,305
  804904:	00804c64 	muli	r2,zero,305
  804908:	00804c70 	cmpltui	r2,zero,305
  80490c:	00804a94 	movui	r2,298
  804910:	00804a94 	movui	r2,298
  804914:	00804a94 	movui	r2,298
  804918:	00804a94 	movui	r2,298
  80491c:	00804a94 	movui	r2,298
  804920:	00804a94 	movui	r2,298
  804924:	00804a94 	movui	r2,298
  804928:	00804a94 	movui	r2,298
  80492c:	00804c7c 	xorhi	r2,zero,305
  804930:	00804c88 	cmpgei	r2,zero,306
  804934:	00804a94 	movui	r2,298
  804938:	00804a94 	movui	r2,298
  80493c:	00804a94 	movui	r2,298
  804940:	00804a94 	movui	r2,298
  804944:	00804a94 	movui	r2,298
  804948:	00804a94 	movui	r2,298
  80494c:	00804a94 	movui	r2,298
  804950:	00804a94 	movui	r2,298
  804954:	00804a94 	movui	r2,298
  804958:	00804a94 	movui	r2,298
  80495c:	00804a94 	movui	r2,298
  804960:	00804a94 	movui	r2,298
  804964:	00804a94 	movui	r2,298
  804968:	00804c94 	movui	r2,306
  80496c:	00804a94 	movui	r2,298
  804970:	00804ca0 	cmpeqi	r2,zero,306
  804974:	00804cac 	andhi	r2,zero,306
  804978:	00804cb8 	rdprs	r2,zero,306
  80497c:	00804cc4 	movi	r2,307
  804980:	00804cd0 	cmplti	r2,zero,307
  804984:	00804cdc 	xori	r2,zero,307
  804988:	00804ce8 	cmpgeui	r2,zero,307
  80498c:	00804cf4 	movhi	r2,307
  804990:	00804d00 	call	804d0 <__reset-0x77fb30>
  804994:	00804d0c 	andi	r2,zero,308
  804998:	00804a94 	movui	r2,298
  80499c:	00804a94 	movui	r2,298
  8049a0:	00804d18 	cmpnei	r2,zero,308
  8049a4:	00804a94 	movui	r2,298
  8049a8:	00804a94 	movui	r2,298
  8049ac:	00804d24 	muli	r2,zero,308
  8049b0:	00804a94 	movui	r2,298
  8049b4:	00804a94 	movui	r2,298
  8049b8:	00804a94 	movui	r2,298
  8049bc:	00804a94 	movui	r2,298
  8049c0:	00804a94 	movui	r2,298
  8049c4:	00804d30 	cmpltui	r2,zero,308
  8049c8:	00804d3c 	xorhi	r2,zero,308
  8049cc:	00804d48 	cmpgei	r2,zero,309
  8049d0:	00804d54 	movui	r2,309
  8049d4:	00804d60 	cmpeqi	r2,zero,309
  8049d8:	00804d6c 	andhi	r2,zero,309
  8049dc:	00804d78 	rdprs	r2,zero,309
  8049e0:	00804d84 	movi	r2,310
  8049e4:	00804d90 	cmplti	r2,zero,310
  8049e8:	00804d9c 	xori	r2,zero,310
  8049ec:	00804a94 	movui	r2,298
  8049f0:	00804a94 	movui	r2,298
  8049f4:	00804da8 	cmpgeui	r2,zero,310
  8049f8:	00804a94 	movui	r2,298
  8049fc:	00804a94 	movui	r2,298
  804a00:	00804a94 	movui	r2,298
  804a04:	00804a94 	movui	r2,298
  804a08:	00804a94 	movui	r2,298
  804a0c:	00804a94 	movui	r2,298
  804a10:	00804a94 	movui	r2,298
  804a14:	00804a94 	movui	r2,298
  804a18:	00804a94 	movui	r2,298
  804a1c:	00804db4 	movhi	r2,310
  804a20:	00804dc0 	call	804dc <__reset-0x77fb24>
  804a24:	00804dcc 	andi	r2,zero,311
  804a28:	00804dd8 	cmpnei	r2,zero,311
  804a2c:	00804de4 	muli	r2,zero,311
  804a30:	00804df0 	cmpltui	r2,zero,311
  804a34:	00804dfc 	xorhi	r2,zero,311
  804a38:	00804e08 	cmpgei	r2,zero,312
  804a3c:	00804e14 	movui	r2,312
  804a40:	00804e20 	cmpeqi	r2,zero,312
  804a44:	00804e2c 	andhi	r2,zero,312
  804a48:	00804e38 	rdprs	r2,zero,312
  804a4c:	00804e44 	movi	r2,313
  804a50:	00804e50 	cmplti	r2,zero,313
  804a54:	00804e5c 	xori	r2,zero,313
  804a58:	00804e68 	cmpgeui	r2,zero,313
  804a5c:	00804e74 	movhi	r2,313
  804a60:	00804e80 	call	804e8 <__reset-0x77fb18>
  804a64:	00804e8c 	andi	r2,zero,314
  804a68:	00804e98 	cmpnei	r2,zero,314
  804a6c:	00804a94 	movui	r2,298
  804a70:	00804a94 	movui	r2,298
  804a74:	00804ea4 	muli	r2,zero,314
  804a78:	00804eb0 	cmpltui	r2,zero,314
  804a7c:	00804a94 	movui	r2,298
  804a80:	00804a94 	movui	r2,298
  804a84:	00804a94 	movui	r2,298
  804a88:	00804a94 	movui	r2,298
  804a8c:	00804a94 	movui	r2,298
  804a90:	00804ac0 	call	804ac <__reset-0x77fb54>
  804a94:	2809883a 	mov	r4,r5
  804a98:	0804f300 	call	804f30 <_user_strerror>
  804a9c:	10000326 	beq	r2,zero,804aac <strerror+0x264>
  804aa0:	dfc00017 	ldw	ra,0(sp)
  804aa4:	dec00104 	addi	sp,sp,4
  804aa8:	f800283a 	ret
  804aac:	00802074 	movhi	r2,129
  804ab0:	10896d04 	addi	r2,r2,9652
  804ab4:	dfc00017 	ldw	ra,0(sp)
  804ab8:	dec00104 	addi	sp,sp,4
  804abc:	f800283a 	ret
  804ac0:	00802074 	movhi	r2,129
  804ac4:	10883004 	addi	r2,r2,8384
  804ac8:	003ff506 	br	804aa0 <strerror+0x258>
  804acc:	00802074 	movhi	r2,129
  804ad0:	10878004 	addi	r2,r2,7680
  804ad4:	003ff206 	br	804aa0 <strerror+0x258>
  804ad8:	00802074 	movhi	r2,129
  804adc:	10878304 	addi	r2,r2,7692
  804ae0:	003fef06 	br	804aa0 <strerror+0x258>
  804ae4:	00802074 	movhi	r2,129
  804ae8:	10878a04 	addi	r2,r2,7720
  804aec:	003fec06 	br	804aa0 <strerror+0x258>
  804af0:	00802074 	movhi	r2,129
  804af4:	10878e04 	addi	r2,r2,7736
  804af8:	003fe906 	br	804aa0 <strerror+0x258>
  804afc:	00802074 	movhi	r2,129
  804b00:	10879404 	addi	r2,r2,7760
  804b04:	003fe606 	br	804aa0 <strerror+0x258>
  804b08:	00802074 	movhi	r2,129
  804b0c:	10879704 	addi	r2,r2,7772
  804b10:	003fe306 	br	804aa0 <strerror+0x258>
  804b14:	00802074 	movhi	r2,129
  804b18:	10879e04 	addi	r2,r2,7800
  804b1c:	003fe006 	br	804aa0 <strerror+0x258>
  804b20:	00802074 	movhi	r2,129
  804b24:	1087a304 	addi	r2,r2,7820
  804b28:	003fdd06 	br	804aa0 <strerror+0x258>
  804b2c:	00802074 	movhi	r2,129
  804b30:	1087af04 	addi	r2,r2,7868
  804b34:	003fda06 	br	804aa0 <strerror+0x258>
  804b38:	00802074 	movhi	r2,129
  804b3c:	1087b304 	addi	r2,r2,7884
  804b40:	003fd706 	br	804aa0 <strerror+0x258>
  804b44:	00802074 	movhi	r2,129
  804b48:	1087be04 	addi	r2,r2,7928
  804b4c:	003fd406 	br	804aa0 <strerror+0x258>
  804b50:	00802074 	movhi	r2,129
  804b54:	1087c304 	addi	r2,r2,7948
  804b58:	003fd106 	br	804aa0 <strerror+0x258>
  804b5c:	00802074 	movhi	r2,129
  804b60:	1087c804 	addi	r2,r2,7968
  804b64:	003fce06 	br	804aa0 <strerror+0x258>
  804b68:	00802074 	movhi	r2,129
  804b6c:	1087cd04 	addi	r2,r2,7988
  804b70:	003fcb06 	br	804aa0 <strerror+0x258>
  804b74:	00802074 	movhi	r2,129
  804b78:	1087d004 	addi	r2,r2,8000
  804b7c:	003fc806 	br	804aa0 <strerror+0x258>
  804b80:	00802074 	movhi	r2,129
  804b84:	1087d604 	addi	r2,r2,8024
  804b88:	003fc506 	br	804aa0 <strerror+0x258>
  804b8c:	00802074 	movhi	r2,129
  804b90:	1087dc04 	addi	r2,r2,8048
  804b94:	003fc206 	br	804aa0 <strerror+0x258>
  804b98:	00802074 	movhi	r2,129
  804b9c:	1087df04 	addi	r2,r2,8060
  804ba0:	003fbf06 	br	804aa0 <strerror+0x258>
  804ba4:	00802074 	movhi	r2,129
  804ba8:	1087e404 	addi	r2,r2,8080
  804bac:	003fbc06 	br	804aa0 <strerror+0x258>
  804bb0:	00802074 	movhi	r2,129
  804bb4:	1087e804 	addi	r2,r2,8096
  804bb8:	003fb906 	br	804aa0 <strerror+0x258>
  804bbc:	00802074 	movhi	r2,129
  804bc0:	1087f804 	addi	r2,r2,8160
  804bc4:	003fb606 	br	804aa0 <strerror+0x258>
  804bc8:	00802074 	movhi	r2,129
  804bcc:	1087fc04 	addi	r2,r2,8176
  804bd0:	003fb306 	br	804aa0 <strerror+0x258>
  804bd4:	00802074 	movhi	r2,129
  804bd8:	10880a04 	addi	r2,r2,8232
  804bdc:	003fb006 	br	804aa0 <strerror+0x258>
  804be0:	00802074 	movhi	r2,129
  804be4:	10881204 	addi	r2,r2,8264
  804be8:	003fad06 	br	804aa0 <strerror+0x258>
  804bec:	00802074 	movhi	r2,129
  804bf0:	10881704 	addi	r2,r2,8284
  804bf4:	003faa06 	br	804aa0 <strerror+0x258>
  804bf8:	00802074 	movhi	r2,129
  804bfc:	10881d04 	addi	r2,r2,8308
  804c00:	003fa706 	br	804aa0 <strerror+0x258>
  804c04:	00802074 	movhi	r2,129
  804c08:	10882104 	addi	r2,r2,8324
  804c0c:	003fa406 	br	804aa0 <strerror+0x258>
  804c10:	00802074 	movhi	r2,129
  804c14:	10882a04 	addi	r2,r2,8360
  804c18:	003fa106 	br	804aa0 <strerror+0x258>
  804c1c:	00802074 	movhi	r2,129
  804c20:	10883404 	addi	r2,r2,8400
  804c24:	003f9e06 	br	804aa0 <strerror+0x258>
  804c28:	00802074 	movhi	r2,129
  804c2c:	10883804 	addi	r2,r2,8416
  804c30:	003f9b06 	br	804aa0 <strerror+0x258>
  804c34:	00802074 	movhi	r2,129
  804c38:	10883e04 	addi	r2,r2,8440
  804c3c:	003f9806 	br	804aa0 <strerror+0x258>
  804c40:	00802074 	movhi	r2,129
  804c44:	10884204 	addi	r2,r2,8456
  804c48:	003f9506 	br	804aa0 <strerror+0x258>
  804c4c:	00802074 	movhi	r2,129
  804c50:	10884504 	addi	r2,r2,8468
  804c54:	003f9206 	br	804aa0 <strerror+0x258>
  804c58:	00802074 	movhi	r2,129
  804c5c:	10884904 	addi	r2,r2,8484
  804c60:	003f8f06 	br	804aa0 <strerror+0x258>
  804c64:	00802074 	movhi	r2,129
  804c68:	10884e04 	addi	r2,r2,8504
  804c6c:	003f8c06 	br	804aa0 <strerror+0x258>
  804c70:	00802074 	movhi	r2,129
  804c74:	10885504 	addi	r2,r2,8532
  804c78:	003f8906 	br	804aa0 <strerror+0x258>
  804c7c:	00802074 	movhi	r2,129
  804c80:	10885a04 	addi	r2,r2,8552
  804c84:	003f8606 	br	804aa0 <strerror+0x258>
  804c88:	00802074 	movhi	r2,129
  804c8c:	10886304 	addi	r2,r2,8588
  804c90:	003f8306 	br	804aa0 <strerror+0x258>
  804c94:	00802074 	movhi	r2,129
  804c98:	10886504 	addi	r2,r2,8596
  804c9c:	003f8006 	br	804aa0 <strerror+0x258>
  804ca0:	00802074 	movhi	r2,129
  804ca4:	10886904 	addi	r2,r2,8612
  804ca8:	003f7d06 	br	804aa0 <strerror+0x258>
  804cac:	00802074 	movhi	r2,129
  804cb0:	10886f04 	addi	r2,r2,8636
  804cb4:	003f7a06 	br	804aa0 <strerror+0x258>
  804cb8:	00802074 	movhi	r2,129
  804cbc:	10887404 	addi	r2,r2,8656
  804cc0:	003f7706 	br	804aa0 <strerror+0x258>
  804cc4:	00802074 	movhi	r2,129
  804cc8:	10887c04 	addi	r2,r2,8688
  804ccc:	003f7406 	br	804aa0 <strerror+0x258>
  804cd0:	00802074 	movhi	r2,129
  804cd4:	10887f04 	addi	r2,r2,8700
  804cd8:	003f7106 	br	804aa0 <strerror+0x258>
  804cdc:	00802074 	movhi	r2,129
  804ce0:	10888404 	addi	r2,r2,8720
  804ce4:	003f6e06 	br	804aa0 <strerror+0x258>
  804ce8:	00802074 	movhi	r2,129
  804cec:	10888a04 	addi	r2,r2,8744
  804cf0:	003f6b06 	br	804aa0 <strerror+0x258>
  804cf4:	00802074 	movhi	r2,129
  804cf8:	10888e04 	addi	r2,r2,8760
  804cfc:	003f6806 	br	804aa0 <strerror+0x258>
  804d00:	00802074 	movhi	r2,129
  804d04:	10889204 	addi	r2,r2,8776
  804d08:	003f6506 	br	804aa0 <strerror+0x258>
  804d0c:	00802074 	movhi	r2,129
  804d10:	10889704 	addi	r2,r2,8796
  804d14:	003f6206 	br	804aa0 <strerror+0x258>
  804d18:	00802074 	movhi	r2,129
  804d1c:	1088a004 	addi	r2,r2,8832
  804d20:	003f5f06 	br	804aa0 <strerror+0x258>
  804d24:	00802074 	movhi	r2,129
  804d28:	1088a504 	addi	r2,r2,8852
  804d2c:	003f5c06 	br	804aa0 <strerror+0x258>
  804d30:	00802074 	movhi	r2,129
  804d34:	1088a804 	addi	r2,r2,8864
  804d38:	003f5906 	br	804aa0 <strerror+0x258>
  804d3c:	00802074 	movhi	r2,129
  804d40:	1088b204 	addi	r2,r2,8904
  804d44:	003f5606 	br	804aa0 <strerror+0x258>
  804d48:	00802074 	movhi	r2,129
  804d4c:	1088bc04 	addi	r2,r2,8944
  804d50:	003f5306 	br	804aa0 <strerror+0x258>
  804d54:	00802074 	movhi	r2,129
  804d58:	1088c404 	addi	r2,r2,8976
  804d5c:	003f5006 	br	804aa0 <strerror+0x258>
  804d60:	00802074 	movhi	r2,129
  804d64:	1088d404 	addi	r2,r2,9040
  804d68:	003f4d06 	br	804aa0 <strerror+0x258>
  804d6c:	00802074 	movhi	r2,129
  804d70:	1088de04 	addi	r2,r2,9080
  804d74:	003f4a06 	br	804aa0 <strerror+0x258>
  804d78:	00802074 	movhi	r2,129
  804d7c:	1088e504 	addi	r2,r2,9108
  804d80:	003f4706 	br	804aa0 <strerror+0x258>
  804d84:	00802074 	movhi	r2,129
  804d88:	1088e904 	addi	r2,r2,9124
  804d8c:	003f4406 	br	804aa0 <strerror+0x258>
  804d90:	00802074 	movhi	r2,129
  804d94:	1088ee04 	addi	r2,r2,9144
  804d98:	003f4106 	br	804aa0 <strerror+0x258>
  804d9c:	00802074 	movhi	r2,129
  804da0:	1088f504 	addi	r2,r2,9172
  804da4:	003f3e06 	br	804aa0 <strerror+0x258>
  804da8:	00802074 	movhi	r2,129
  804dac:	10895504 	addi	r2,r2,9556
  804db0:	003f3b06 	br	804aa0 <strerror+0x258>
  804db4:	00802074 	movhi	r2,129
  804db8:	1088fb04 	addi	r2,r2,9196
  804dbc:	003f3806 	br	804aa0 <strerror+0x258>
  804dc0:	00802074 	movhi	r2,129
  804dc4:	10890204 	addi	r2,r2,9224
  804dc8:	003f3506 	br	804aa0 <strerror+0x258>
  804dcc:	00802074 	movhi	r2,129
  804dd0:	10890e04 	addi	r2,r2,9272
  804dd4:	003f3206 	br	804aa0 <strerror+0x258>
  804dd8:	00802074 	movhi	r2,129
  804ddc:	10891604 	addi	r2,r2,9304
  804de0:	003f2f06 	br	804aa0 <strerror+0x258>
  804de4:	00802074 	movhi	r2,129
  804de8:	10891e04 	addi	r2,r2,9336
  804dec:	003f2c06 	br	804aa0 <strerror+0x258>
  804df0:	00802074 	movhi	r2,129
  804df4:	10892404 	addi	r2,r2,9360
  804df8:	003f2906 	br	804aa0 <strerror+0x258>
  804dfc:	00802074 	movhi	r2,129
  804e00:	10892d04 	addi	r2,r2,9396
  804e04:	003f2606 	br	804aa0 <strerror+0x258>
  804e08:	00802074 	movhi	r2,129
  804e0c:	10893204 	addi	r2,r2,9416
  804e10:	003f2306 	br	804aa0 <strerror+0x258>
  804e14:	00802074 	movhi	r2,129
  804e18:	10893804 	addi	r2,r2,9440
  804e1c:	003f2006 	br	804aa0 <strerror+0x258>
  804e20:	00802074 	movhi	r2,129
  804e24:	10885d04 	addi	r2,r2,8564
  804e28:	003f1d06 	br	804aa0 <strerror+0x258>
  804e2c:	00802074 	movhi	r2,129
  804e30:	10880104 	addi	r2,r2,8196
  804e34:	003f1a06 	br	804aa0 <strerror+0x258>
  804e38:	00802074 	movhi	r2,129
  804e3c:	10877a04 	addi	r2,r2,7656
  804e40:	003f1706 	br	804aa0 <strerror+0x258>
  804e44:	00802074 	movhi	r2,129
  804e48:	1087ec04 	addi	r2,r2,8112
  804e4c:	003f1406 	br	804aa0 <strerror+0x258>
  804e50:	00802074 	movhi	r2,129
  804e54:	10882504 	addi	r2,r2,8340
  804e58:	003f1106 	br	804aa0 <strerror+0x258>
  804e5c:	00802074 	movhi	r2,129
  804e60:	1087f004 	addi	r2,r2,8128
  804e64:	003f0e06 	br	804aa0 <strerror+0x258>
  804e68:	00802074 	movhi	r2,129
  804e6c:	1087a804 	addi	r2,r2,7840
  804e70:	003f0b06 	br	804aa0 <strerror+0x258>
  804e74:	00802074 	movhi	r2,129
  804e78:	1087b604 	addi	r2,r2,7896
  804e7c:	003f0806 	br	804aa0 <strerror+0x258>
  804e80:	00802074 	movhi	r2,129
  804e84:	10877504 	addi	r2,r2,7636
  804e88:	003f0506 	br	804aa0 <strerror+0x258>
  804e8c:	00802074 	movhi	r2,129
  804e90:	10889b04 	addi	r2,r2,8812
  804e94:	003f0206 	br	804aa0 <strerror+0x258>
  804e98:	00802074 	movhi	r2,129
  804e9c:	10894704 	addi	r2,r2,9500
  804ea0:	003eff06 	br	804aa0 <strerror+0x258>
  804ea4:	00802074 	movhi	r2,129
  804ea8:	10894e04 	addi	r2,r2,9528
  804eac:	003efc06 	br	804aa0 <strerror+0x258>
  804eb0:	00802074 	movhi	r2,129
  804eb4:	10894104 	addi	r2,r2,9476
  804eb8:	003ef906 	br	804aa0 <strerror+0x258>

00804ebc <strlen>:
  804ebc:	208000cc 	andi	r2,r4,3
  804ec0:	2011883a 	mov	r8,r4
  804ec4:	1000161e 	bne	r2,zero,804f20 <strlen+0x64>
  804ec8:	20c00017 	ldw	r3,0(r4)
  804ecc:	017fbff4 	movhi	r5,65279
  804ed0:	297fbfc4 	addi	r5,r5,-257
  804ed4:	01e02074 	movhi	r7,32897
  804ed8:	39e02004 	addi	r7,r7,-32640
  804edc:	1945883a 	add	r2,r3,r5
  804ee0:	11c4703a 	and	r2,r2,r7
  804ee4:	00c6303a 	nor	r3,zero,r3
  804ee8:	1886703a 	and	r3,r3,r2
  804eec:	18000c1e 	bne	r3,zero,804f20 <strlen+0x64>
  804ef0:	280d883a 	mov	r6,r5
  804ef4:	380b883a 	mov	r5,r7
  804ef8:	21000104 	addi	r4,r4,4
  804efc:	20800017 	ldw	r2,0(r4)
  804f00:	1187883a 	add	r3,r2,r6
  804f04:	1946703a 	and	r3,r3,r5
  804f08:	0084303a 	nor	r2,zero,r2
  804f0c:	10c4703a 	and	r2,r2,r3
  804f10:	103ff926 	beq	r2,zero,804ef8 <strlen+0x3c>
  804f14:	20800007 	ldb	r2,0(r4)
  804f18:	10000326 	beq	r2,zero,804f28 <strlen+0x6c>
  804f1c:	21000044 	addi	r4,r4,1
  804f20:	20800007 	ldb	r2,0(r4)
  804f24:	103ffd1e 	bne	r2,zero,804f1c <strlen+0x60>
  804f28:	2205c83a 	sub	r2,r4,r8
  804f2c:	f800283a 	ret

00804f30 <_user_strerror>:
  804f30:	0005883a 	mov	r2,zero
  804f34:	f800283a 	ret

00804f38 <__sprint_r>:
  804f38:	30800217 	ldw	r2,8(r6)
  804f3c:	defffe04 	addi	sp,sp,-8
  804f40:	dc000015 	stw	r16,0(sp)
  804f44:	dfc00115 	stw	ra,4(sp)
  804f48:	3021883a 	mov	r16,r6
  804f4c:	0007883a 	mov	r3,zero
  804f50:	1000061e 	bne	r2,zero,804f6c <__sprint_r+0x34>
  804f54:	1805883a 	mov	r2,r3
  804f58:	30000115 	stw	zero,4(r6)
  804f5c:	dfc00117 	ldw	ra,4(sp)
  804f60:	dc000017 	ldw	r16,0(sp)
  804f64:	dec00204 	addi	sp,sp,8
  804f68:	f800283a 	ret
  804f6c:	08094100 	call	809410 <__sfvwrite_r>
  804f70:	1007883a 	mov	r3,r2
  804f74:	1805883a 	mov	r2,r3
  804f78:	80000115 	stw	zero,4(r16)
  804f7c:	80000215 	stw	zero,8(r16)
  804f80:	dfc00117 	ldw	ra,4(sp)
  804f84:	dc000017 	ldw	r16,0(sp)
  804f88:	dec00204 	addi	sp,sp,8
  804f8c:	f800283a 	ret

00804f90 <___vfprintf_internal_r>:
  804f90:	defea404 	addi	sp,sp,-1392
  804f94:	dd815815 	stw	r22,1376(sp)
  804f98:	dc015215 	stw	r16,1352(sp)
  804f9c:	d9c15115 	stw	r7,1348(sp)
  804fa0:	dfc15b15 	stw	ra,1388(sp)
  804fa4:	df015a15 	stw	fp,1384(sp)
  804fa8:	ddc15915 	stw	r23,1380(sp)
  804fac:	dd415715 	stw	r21,1372(sp)
  804fb0:	dd015615 	stw	r20,1368(sp)
  804fb4:	dcc15515 	stw	r19,1364(sp)
  804fb8:	dc815415 	stw	r18,1360(sp)
  804fbc:	dc415315 	stw	r17,1356(sp)
  804fc0:	282d883a 	mov	r22,r5
  804fc4:	3021883a 	mov	r16,r6
  804fc8:	d9014f15 	stw	r4,1340(sp)
  804fcc:	0809a340 	call	809a34 <_localeconv_r>
  804fd0:	10800017 	ldw	r2,0(r2)
  804fd4:	d9c15117 	ldw	r7,1348(sp)
  804fd8:	d8814915 	stw	r2,1316(sp)
  804fdc:	d8814f17 	ldw	r2,1340(sp)
  804fe0:	10000226 	beq	r2,zero,804fec <___vfprintf_internal_r+0x5c>
  804fe4:	10800e17 	ldw	r2,56(r2)
  804fe8:	10020d26 	beq	r2,zero,805820 <___vfprintf_internal_r+0x890>
  804fec:	b080030b 	ldhu	r2,12(r22)
  804ff0:	1080020c 	andi	r2,r2,8
  804ff4:	10020e26 	beq	r2,zero,805830 <___vfprintf_internal_r+0x8a0>
  804ff8:	b0800417 	ldw	r2,16(r22)
  804ffc:	10020c26 	beq	r2,zero,805830 <___vfprintf_internal_r+0x8a0>
  805000:	b200030b 	ldhu	r8,12(r22)
  805004:	00800284 	movi	r2,10
  805008:	40c0068c 	andi	r3,r8,26
  80500c:	18802f1e 	bne	r3,r2,8050cc <___vfprintf_internal_r+0x13c>
  805010:	b080038f 	ldh	r2,14(r22)
  805014:	10002d16 	blt	r2,zero,8050cc <___vfprintf_internal_r+0x13c>
  805018:	b240038b 	ldhu	r9,14(r22)
  80501c:	b2800717 	ldw	r10,28(r22)
  805020:	b2c00917 	ldw	r11,36(r22)
  805024:	d9014f17 	ldw	r4,1340(sp)
  805028:	dc402904 	addi	r17,sp,164
  80502c:	d8804004 	addi	r2,sp,256
  805030:	00c10004 	movi	r3,1024
  805034:	423fff4c 	andi	r8,r8,65533
  805038:	800d883a 	mov	r6,r16
  80503c:	880b883a 	mov	r5,r17
  805040:	da002c0d 	sth	r8,176(sp)
  805044:	da402c8d 	sth	r9,178(sp)
  805048:	da803015 	stw	r10,192(sp)
  80504c:	dac03215 	stw	r11,200(sp)
  805050:	d8802d15 	stw	r2,180(sp)
  805054:	d8c02e15 	stw	r3,184(sp)
  805058:	d8802915 	stw	r2,164(sp)
  80505c:	d8c02b15 	stw	r3,172(sp)
  805060:	d8002f15 	stw	zero,188(sp)
  805064:	0804f900 	call	804f90 <___vfprintf_internal_r>
  805068:	d8814b15 	stw	r2,1324(sp)
  80506c:	10000416 	blt	r2,zero,805080 <___vfprintf_internal_r+0xf0>
  805070:	d9014f17 	ldw	r4,1340(sp)
  805074:	880b883a 	mov	r5,r17
  805078:	08089600 	call	808960 <_fflush_r>
  80507c:	1002321e 	bne	r2,zero,805948 <___vfprintf_internal_r+0x9b8>
  805080:	d8802c0b 	ldhu	r2,176(sp)
  805084:	1080100c 	andi	r2,r2,64
  805088:	10000326 	beq	r2,zero,805098 <___vfprintf_internal_r+0x108>
  80508c:	b080030b 	ldhu	r2,12(r22)
  805090:	10801014 	ori	r2,r2,64
  805094:	b080030d 	sth	r2,12(r22)
  805098:	d8814b17 	ldw	r2,1324(sp)
  80509c:	dfc15b17 	ldw	ra,1388(sp)
  8050a0:	df015a17 	ldw	fp,1384(sp)
  8050a4:	ddc15917 	ldw	r23,1380(sp)
  8050a8:	dd815817 	ldw	r22,1376(sp)
  8050ac:	dd415717 	ldw	r21,1372(sp)
  8050b0:	dd015617 	ldw	r20,1368(sp)
  8050b4:	dcc15517 	ldw	r19,1364(sp)
  8050b8:	dc815417 	ldw	r18,1360(sp)
  8050bc:	dc415317 	ldw	r17,1356(sp)
  8050c0:	dc015217 	ldw	r16,1352(sp)
  8050c4:	dec15c04 	addi	sp,sp,1392
  8050c8:	f800283a 	ret
  8050cc:	0005883a 	mov	r2,zero
  8050d0:	0007883a 	mov	r3,zero
  8050d4:	dd401904 	addi	r21,sp,100
  8050d8:	d8814215 	stw	r2,1288(sp)
  8050dc:	802f883a 	mov	r23,r16
  8050e0:	d8c14315 	stw	r3,1292(sp)
  8050e4:	d8014b15 	stw	zero,1324(sp)
  8050e8:	d8014815 	stw	zero,1312(sp)
  8050ec:	d8014415 	stw	zero,1296(sp)
  8050f0:	d8014715 	stw	zero,1308(sp)
  8050f4:	dd400c15 	stw	r21,48(sp)
  8050f8:	d8000e15 	stw	zero,56(sp)
  8050fc:	d8000d15 	stw	zero,52(sp)
  805100:	b8800007 	ldb	r2,0(r23)
  805104:	10001926 	beq	r2,zero,80516c <___vfprintf_internal_r+0x1dc>
  805108:	00c00944 	movi	r3,37
  80510c:	10c01726 	beq	r2,r3,80516c <___vfprintf_internal_r+0x1dc>
  805110:	b821883a 	mov	r16,r23
  805114:	00000106 	br	80511c <___vfprintf_internal_r+0x18c>
  805118:	10c00326 	beq	r2,r3,805128 <___vfprintf_internal_r+0x198>
  80511c:	84000044 	addi	r16,r16,1
  805120:	80800007 	ldb	r2,0(r16)
  805124:	103ffc1e 	bne	r2,zero,805118 <___vfprintf_internal_r+0x188>
  805128:	85e7c83a 	sub	r19,r16,r23
  80512c:	98000e26 	beq	r19,zero,805168 <___vfprintf_internal_r+0x1d8>
  805130:	dc800e17 	ldw	r18,56(sp)
  805134:	dc400d17 	ldw	r17,52(sp)
  805138:	008001c4 	movi	r2,7
  80513c:	94e5883a 	add	r18,r18,r19
  805140:	8c400044 	addi	r17,r17,1
  805144:	adc00015 	stw	r23,0(r21)
  805148:	dc800e15 	stw	r18,56(sp)
  80514c:	acc00115 	stw	r19,4(r21)
  805150:	dc400d15 	stw	r17,52(sp)
  805154:	14428b16 	blt	r2,r17,805b84 <___vfprintf_internal_r+0xbf4>
  805158:	ad400204 	addi	r21,r21,8
  80515c:	d9014b17 	ldw	r4,1324(sp)
  805160:	24c9883a 	add	r4,r4,r19
  805164:	d9014b15 	stw	r4,1324(sp)
  805168:	802f883a 	mov	r23,r16
  80516c:	b8800007 	ldb	r2,0(r23)
  805170:	10013c26 	beq	r2,zero,805664 <___vfprintf_internal_r+0x6d4>
  805174:	bdc00044 	addi	r23,r23,1
  805178:	d8000405 	stb	zero,16(sp)
  80517c:	b8c00007 	ldb	r3,0(r23)
  805180:	04ffffc4 	movi	r19,-1
  805184:	d8014c15 	stw	zero,1328(sp)
  805188:	d8014a15 	stw	zero,1320(sp)
  80518c:	d8c14d15 	stw	r3,1332(sp)
  805190:	bdc00044 	addi	r23,r23,1
  805194:	d9414d17 	ldw	r5,1332(sp)
  805198:	00801604 	movi	r2,88
  80519c:	28fff804 	addi	r3,r5,-32
  8051a0:	10c06036 	bltu	r2,r3,805324 <___vfprintf_internal_r+0x394>
  8051a4:	18c5883a 	add	r2,r3,r3
  8051a8:	1085883a 	add	r2,r2,r2
  8051ac:	00c02034 	movhi	r3,128
  8051b0:	18d47004 	addi	r3,r3,20928
  8051b4:	10c5883a 	add	r2,r2,r3
  8051b8:	11000017 	ldw	r4,0(r2)
  8051bc:	2000683a 	jmp	r4
  8051c0:	00806134 	movhi	r2,388
  8051c4:	00805324 	muli	r2,zero,332
  8051c8:	00805324 	muli	r2,zero,332
  8051cc:	00806120 	cmpeqi	r2,zero,388
  8051d0:	00805324 	muli	r2,zero,332
  8051d4:	00805324 	muli	r2,zero,332
  8051d8:	00805324 	muli	r2,zero,332
  8051dc:	00805324 	muli	r2,zero,332
  8051e0:	00805324 	muli	r2,zero,332
  8051e4:	00805324 	muli	r2,zero,332
  8051e8:	00805f00 	call	805f0 <__reset-0x77fa10>
  8051ec:	00806110 	cmplti	r2,zero,388
  8051f0:	00805324 	muli	r2,zero,332
  8051f4:	00805f18 	cmpnei	r2,zero,380
  8051f8:	008061b8 	rdprs	r2,zero,390
  8051fc:	00805324 	muli	r2,zero,332
  805200:	008061a4 	muli	r2,zero,390
  805204:	00806160 	cmpeqi	r2,zero,389
  805208:	00806160 	cmpeqi	r2,zero,389
  80520c:	00806160 	cmpeqi	r2,zero,389
  805210:	00806160 	cmpeqi	r2,zero,389
  805214:	00806160 	cmpeqi	r2,zero,389
  805218:	00806160 	cmpeqi	r2,zero,389
  80521c:	00806160 	cmpeqi	r2,zero,389
  805220:	00806160 	cmpeqi	r2,zero,389
  805224:	00806160 	cmpeqi	r2,zero,389
  805228:	00805324 	muli	r2,zero,332
  80522c:	00805324 	muli	r2,zero,332
  805230:	00805324 	muli	r2,zero,332
  805234:	00805324 	muli	r2,zero,332
  805238:	00805324 	muli	r2,zero,332
  80523c:	00805324 	muli	r2,zero,332
  805240:	00805324 	muli	r2,zero,332
  805244:	00805324 	muli	r2,zero,332
  805248:	00805324 	muli	r2,zero,332
  80524c:	00805324 	muli	r2,zero,332
  805250:	0080597c 	xorhi	r2,zero,357
  805254:	00805fe8 	cmpgeui	r2,zero,383
  805258:	00805324 	muli	r2,zero,332
  80525c:	00805fe8 	cmpgeui	r2,zero,383
  805260:	00805324 	muli	r2,zero,332
  805264:	00805324 	muli	r2,zero,332
  805268:	00805324 	muli	r2,zero,332
  80526c:	00805324 	muli	r2,zero,332
  805270:	0080614c 	andi	r2,zero,389
  805274:	00805324 	muli	r2,zero,332
  805278:	00805324 	muli	r2,zero,332
  80527c:	00805a30 	cmpltui	r2,zero,360
  805280:	00805324 	muli	r2,zero,332
  805284:	00805324 	muli	r2,zero,332
  805288:	00805324 	muli	r2,zero,332
  80528c:	00805324 	muli	r2,zero,332
  805290:	00805324 	muli	r2,zero,332
  805294:	00805a7c 	xorhi	r2,zero,361
  805298:	00805324 	muli	r2,zero,332
  80529c:	00805324 	muli	r2,zero,332
  8052a0:	0080609c 	xori	r2,zero,386
  8052a4:	00805324 	muli	r2,zero,332
  8052a8:	00805324 	muli	r2,zero,332
  8052ac:	00805324 	muli	r2,zero,332
  8052b0:	00805324 	muli	r2,zero,332
  8052b4:	00805324 	muli	r2,zero,332
  8052b8:	00805324 	muli	r2,zero,332
  8052bc:	00805324 	muli	r2,zero,332
  8052c0:	00805324 	muli	r2,zero,332
  8052c4:	00805324 	muli	r2,zero,332
  8052c8:	00805324 	muli	r2,zero,332
  8052cc:	00806070 	cmpltui	r2,zero,385
  8052d0:	00805988 	cmpgei	r2,zero,358
  8052d4:	00805fe8 	cmpgeui	r2,zero,383
  8052d8:	00805fe8 	cmpgeui	r2,zero,383
  8052dc:	00805fe8 	cmpgeui	r2,zero,383
  8052e0:	00805fd4 	movui	r2,383
  8052e4:	00805988 	cmpgei	r2,zero,358
  8052e8:	00805324 	muli	r2,zero,332
  8052ec:	00805324 	muli	r2,zero,332
  8052f0:	00805f5c 	xori	r2,zero,381
  8052f4:	00805324 	muli	r2,zero,332
  8052f8:	00805f2c 	andhi	r2,zero,380
  8052fc:	00805a3c 	xorhi	r2,zero,360
  805300:	00805f8c 	andi	r2,zero,382
  805304:	00805f78 	rdprs	r2,zero,381
  805308:	00805324 	muli	r2,zero,332
  80530c:	00806220 	cmpeqi	r2,zero,392
  805310:	00805324 	muli	r2,zero,332
  805314:	00805a88 	cmpgei	r2,zero,362
  805318:	00805324 	muli	r2,zero,332
  80531c:	00805324 	muli	r2,zero,332
  805320:	00806100 	call	80610 <__reset-0x77f9f0>
  805324:	d9014d17 	ldw	r4,1332(sp)
  805328:	2000ce26 	beq	r4,zero,805664 <___vfprintf_internal_r+0x6d4>
  80532c:	01400044 	movi	r5,1
  805330:	d9800f04 	addi	r6,sp,60
  805334:	d9c14015 	stw	r7,1280(sp)
  805338:	d9414515 	stw	r5,1300(sp)
  80533c:	d9814115 	stw	r6,1284(sp)
  805340:	280f883a 	mov	r7,r5
  805344:	d9000f05 	stb	r4,60(sp)
  805348:	d8000405 	stb	zero,16(sp)
  80534c:	d8014615 	stw	zero,1304(sp)
  805350:	d8c14c17 	ldw	r3,1328(sp)
  805354:	1880008c 	andi	r2,r3,2
  805358:	1005003a 	cmpeq	r2,r2,zero
  80535c:	d8815015 	stw	r2,1344(sp)
  805360:	1000031e 	bne	r2,zero,805370 <___vfprintf_internal_r+0x3e0>
  805364:	d9014517 	ldw	r4,1300(sp)
  805368:	21000084 	addi	r4,r4,2
  80536c:	d9014515 	stw	r4,1300(sp)
  805370:	d9414c17 	ldw	r5,1328(sp)
  805374:	2940210c 	andi	r5,r5,132
  805378:	d9414e15 	stw	r5,1336(sp)
  80537c:	28002d1e 	bne	r5,zero,805434 <___vfprintf_internal_r+0x4a4>
  805380:	d9814a17 	ldw	r6,1320(sp)
  805384:	d8814517 	ldw	r2,1300(sp)
  805388:	30a1c83a 	sub	r16,r6,r2
  80538c:	0400290e 	bge	zero,r16,805434 <___vfprintf_internal_r+0x4a4>
  805390:	00800404 	movi	r2,16
  805394:	14045e0e 	bge	r2,r16,806510 <___vfprintf_internal_r+0x1580>
  805398:	dc800e17 	ldw	r18,56(sp)
  80539c:	dc400d17 	ldw	r17,52(sp)
  8053a0:	1027883a 	mov	r19,r2
  8053a4:	07002074 	movhi	fp,129
  8053a8:	e7097884 	addi	fp,fp,9698
  8053ac:	050001c4 	movi	r20,7
  8053b0:	00000306 	br	8053c0 <___vfprintf_internal_r+0x430>
  8053b4:	843ffc04 	addi	r16,r16,-16
  8053b8:	ad400204 	addi	r21,r21,8
  8053bc:	9c00130e 	bge	r19,r16,80540c <___vfprintf_internal_r+0x47c>
  8053c0:	94800404 	addi	r18,r18,16
  8053c4:	8c400044 	addi	r17,r17,1
  8053c8:	af000015 	stw	fp,0(r21)
  8053cc:	acc00115 	stw	r19,4(r21)
  8053d0:	dc800e15 	stw	r18,56(sp)
  8053d4:	dc400d15 	stw	r17,52(sp)
  8053d8:	a47ff60e 	bge	r20,r17,8053b4 <___vfprintf_internal_r+0x424>
  8053dc:	d9014f17 	ldw	r4,1340(sp)
  8053e0:	b00b883a 	mov	r5,r22
  8053e4:	d9800c04 	addi	r6,sp,48
  8053e8:	d9c15115 	stw	r7,1348(sp)
  8053ec:	0804f380 	call	804f38 <__sprint_r>
  8053f0:	d9c15117 	ldw	r7,1348(sp)
  8053f4:	10009e1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  8053f8:	843ffc04 	addi	r16,r16,-16
  8053fc:	dc800e17 	ldw	r18,56(sp)
  805400:	dc400d17 	ldw	r17,52(sp)
  805404:	dd401904 	addi	r21,sp,100
  805408:	9c3fed16 	blt	r19,r16,8053c0 <___vfprintf_internal_r+0x430>
  80540c:	9425883a 	add	r18,r18,r16
  805410:	8c400044 	addi	r17,r17,1
  805414:	008001c4 	movi	r2,7
  805418:	af000015 	stw	fp,0(r21)
  80541c:	ac000115 	stw	r16,4(r21)
  805420:	dc800e15 	stw	r18,56(sp)
  805424:	dc400d15 	stw	r17,52(sp)
  805428:	1441f516 	blt	r2,r17,805c00 <___vfprintf_internal_r+0xc70>
  80542c:	ad400204 	addi	r21,r21,8
  805430:	00000206 	br	80543c <___vfprintf_internal_r+0x4ac>
  805434:	dc800e17 	ldw	r18,56(sp)
  805438:	dc400d17 	ldw	r17,52(sp)
  80543c:	d8800407 	ldb	r2,16(sp)
  805440:	10000b26 	beq	r2,zero,805470 <___vfprintf_internal_r+0x4e0>
  805444:	00800044 	movi	r2,1
  805448:	94800044 	addi	r18,r18,1
  80544c:	8c400044 	addi	r17,r17,1
  805450:	a8800115 	stw	r2,4(r21)
  805454:	d8c00404 	addi	r3,sp,16
  805458:	008001c4 	movi	r2,7
  80545c:	a8c00015 	stw	r3,0(r21)
  805460:	dc800e15 	stw	r18,56(sp)
  805464:	dc400d15 	stw	r17,52(sp)
  805468:	1441da16 	blt	r2,r17,805bd4 <___vfprintf_internal_r+0xc44>
  80546c:	ad400204 	addi	r21,r21,8
  805470:	d9015017 	ldw	r4,1344(sp)
  805474:	20000b1e 	bne	r4,zero,8054a4 <___vfprintf_internal_r+0x514>
  805478:	d8800444 	addi	r2,sp,17
  80547c:	94800084 	addi	r18,r18,2
  805480:	8c400044 	addi	r17,r17,1
  805484:	a8800015 	stw	r2,0(r21)
  805488:	00c00084 	movi	r3,2
  80548c:	008001c4 	movi	r2,7
  805490:	a8c00115 	stw	r3,4(r21)
  805494:	dc800e15 	stw	r18,56(sp)
  805498:	dc400d15 	stw	r17,52(sp)
  80549c:	1441c216 	blt	r2,r17,805ba8 <___vfprintf_internal_r+0xc18>
  8054a0:	ad400204 	addi	r21,r21,8
  8054a4:	d9414e17 	ldw	r5,1336(sp)
  8054a8:	00802004 	movi	r2,128
  8054ac:	2880b126 	beq	r5,r2,805774 <___vfprintf_internal_r+0x7e4>
  8054b0:	d8c14617 	ldw	r3,1304(sp)
  8054b4:	19e1c83a 	sub	r16,r3,r7
  8054b8:	0400260e 	bge	zero,r16,805554 <___vfprintf_internal_r+0x5c4>
  8054bc:	00800404 	movi	r2,16
  8054c0:	1403cf0e 	bge	r2,r16,806400 <___vfprintf_internal_r+0x1470>
  8054c4:	1027883a 	mov	r19,r2
  8054c8:	07002074 	movhi	fp,129
  8054cc:	e7097484 	addi	fp,fp,9682
  8054d0:	050001c4 	movi	r20,7
  8054d4:	00000306 	br	8054e4 <___vfprintf_internal_r+0x554>
  8054d8:	843ffc04 	addi	r16,r16,-16
  8054dc:	ad400204 	addi	r21,r21,8
  8054e0:	9c00130e 	bge	r19,r16,805530 <___vfprintf_internal_r+0x5a0>
  8054e4:	94800404 	addi	r18,r18,16
  8054e8:	8c400044 	addi	r17,r17,1
  8054ec:	af000015 	stw	fp,0(r21)
  8054f0:	acc00115 	stw	r19,4(r21)
  8054f4:	dc800e15 	stw	r18,56(sp)
  8054f8:	dc400d15 	stw	r17,52(sp)
  8054fc:	a47ff60e 	bge	r20,r17,8054d8 <___vfprintf_internal_r+0x548>
  805500:	d9014f17 	ldw	r4,1340(sp)
  805504:	b00b883a 	mov	r5,r22
  805508:	d9800c04 	addi	r6,sp,48
  80550c:	d9c15115 	stw	r7,1348(sp)
  805510:	0804f380 	call	804f38 <__sprint_r>
  805514:	d9c15117 	ldw	r7,1348(sp)
  805518:	1000551e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  80551c:	843ffc04 	addi	r16,r16,-16
  805520:	dc800e17 	ldw	r18,56(sp)
  805524:	dc400d17 	ldw	r17,52(sp)
  805528:	dd401904 	addi	r21,sp,100
  80552c:	9c3fed16 	blt	r19,r16,8054e4 <___vfprintf_internal_r+0x554>
  805530:	9425883a 	add	r18,r18,r16
  805534:	8c400044 	addi	r17,r17,1
  805538:	008001c4 	movi	r2,7
  80553c:	af000015 	stw	fp,0(r21)
  805540:	ac000115 	stw	r16,4(r21)
  805544:	dc800e15 	stw	r18,56(sp)
  805548:	dc400d15 	stw	r17,52(sp)
  80554c:	14418216 	blt	r2,r17,805b58 <___vfprintf_internal_r+0xbc8>
  805550:	ad400204 	addi	r21,r21,8
  805554:	d9014c17 	ldw	r4,1328(sp)
  805558:	2080400c 	andi	r2,r4,256
  80555c:	10004a1e 	bne	r2,zero,805688 <___vfprintf_internal_r+0x6f8>
  805560:	d9414117 	ldw	r5,1284(sp)
  805564:	91e5883a 	add	r18,r18,r7
  805568:	8c400044 	addi	r17,r17,1
  80556c:	008001c4 	movi	r2,7
  805570:	a9400015 	stw	r5,0(r21)
  805574:	a9c00115 	stw	r7,4(r21)
  805578:	dc800e15 	stw	r18,56(sp)
  80557c:	dc400d15 	stw	r17,52(sp)
  805580:	14416716 	blt	r2,r17,805b20 <___vfprintf_internal_r+0xb90>
  805584:	a8c00204 	addi	r3,r21,8
  805588:	d9814c17 	ldw	r6,1328(sp)
  80558c:	3080010c 	andi	r2,r6,4
  805590:	10002826 	beq	r2,zero,805634 <___vfprintf_internal_r+0x6a4>
  805594:	d8814a17 	ldw	r2,1320(sp)
  805598:	d9014517 	ldw	r4,1300(sp)
  80559c:	1121c83a 	sub	r16,r2,r4
  8055a0:	0400240e 	bge	zero,r16,805634 <___vfprintf_internal_r+0x6a4>
  8055a4:	00800404 	movi	r2,16
  8055a8:	1404550e 	bge	r2,r16,806700 <___vfprintf_internal_r+0x1770>
  8055ac:	dc400d17 	ldw	r17,52(sp)
  8055b0:	1027883a 	mov	r19,r2
  8055b4:	07002074 	movhi	fp,129
  8055b8:	e7097884 	addi	fp,fp,9698
  8055bc:	050001c4 	movi	r20,7
  8055c0:	00000306 	br	8055d0 <___vfprintf_internal_r+0x640>
  8055c4:	843ffc04 	addi	r16,r16,-16
  8055c8:	18c00204 	addi	r3,r3,8
  8055cc:	9c00110e 	bge	r19,r16,805614 <___vfprintf_internal_r+0x684>
  8055d0:	94800404 	addi	r18,r18,16
  8055d4:	8c400044 	addi	r17,r17,1
  8055d8:	1f000015 	stw	fp,0(r3)
  8055dc:	1cc00115 	stw	r19,4(r3)
  8055e0:	dc800e15 	stw	r18,56(sp)
  8055e4:	dc400d15 	stw	r17,52(sp)
  8055e8:	a47ff60e 	bge	r20,r17,8055c4 <___vfprintf_internal_r+0x634>
  8055ec:	d9014f17 	ldw	r4,1340(sp)
  8055f0:	b00b883a 	mov	r5,r22
  8055f4:	d9800c04 	addi	r6,sp,48
  8055f8:	0804f380 	call	804f38 <__sprint_r>
  8055fc:	10001c1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805600:	843ffc04 	addi	r16,r16,-16
  805604:	dc800e17 	ldw	r18,56(sp)
  805608:	dc400d17 	ldw	r17,52(sp)
  80560c:	d8c01904 	addi	r3,sp,100
  805610:	9c3fef16 	blt	r19,r16,8055d0 <___vfprintf_internal_r+0x640>
  805614:	9425883a 	add	r18,r18,r16
  805618:	8c400044 	addi	r17,r17,1
  80561c:	008001c4 	movi	r2,7
  805620:	1f000015 	stw	fp,0(r3)
  805624:	1c000115 	stw	r16,4(r3)
  805628:	dc800e15 	stw	r18,56(sp)
  80562c:	dc400d15 	stw	r17,52(sp)
  805630:	1440cb16 	blt	r2,r17,805960 <___vfprintf_internal_r+0x9d0>
  805634:	d8814a17 	ldw	r2,1320(sp)
  805638:	d9414517 	ldw	r5,1300(sp)
  80563c:	1140010e 	bge	r2,r5,805644 <___vfprintf_internal_r+0x6b4>
  805640:	2805883a 	mov	r2,r5
  805644:	d9814b17 	ldw	r6,1324(sp)
  805648:	308d883a 	add	r6,r6,r2
  80564c:	d9814b15 	stw	r6,1324(sp)
  805650:	90013b1e 	bne	r18,zero,805b40 <___vfprintf_internal_r+0xbb0>
  805654:	d9c14017 	ldw	r7,1280(sp)
  805658:	dd401904 	addi	r21,sp,100
  80565c:	d8000d15 	stw	zero,52(sp)
  805660:	003ea706 	br	805100 <___vfprintf_internal_r+0x170>
  805664:	d8800e17 	ldw	r2,56(sp)
  805668:	1005451e 	bne	r2,zero,806b80 <___vfprintf_internal_r+0x1bf0>
  80566c:	d8000d15 	stw	zero,52(sp)
  805670:	b080030b 	ldhu	r2,12(r22)
  805674:	1080100c 	andi	r2,r2,64
  805678:	103e8726 	beq	r2,zero,805098 <___vfprintf_internal_r+0x108>
  80567c:	00bfffc4 	movi	r2,-1
  805680:	d8814b15 	stw	r2,1324(sp)
  805684:	003e8406 	br	805098 <___vfprintf_internal_r+0x108>
  805688:	d9814d17 	ldw	r6,1332(sp)
  80568c:	00801944 	movi	r2,101
  805690:	11806e16 	blt	r2,r6,80584c <___vfprintf_internal_r+0x8bc>
  805694:	d9414717 	ldw	r5,1308(sp)
  805698:	00c00044 	movi	r3,1
  80569c:	1943490e 	bge	r3,r5,8063c4 <___vfprintf_internal_r+0x1434>
  8056a0:	d8814117 	ldw	r2,1284(sp)
  8056a4:	94800044 	addi	r18,r18,1
  8056a8:	8c400044 	addi	r17,r17,1
  8056ac:	a8800015 	stw	r2,0(r21)
  8056b0:	008001c4 	movi	r2,7
  8056b4:	a8c00115 	stw	r3,4(r21)
  8056b8:	dc800e15 	stw	r18,56(sp)
  8056bc:	dc400d15 	stw	r17,52(sp)
  8056c0:	1441ca16 	blt	r2,r17,805dec <___vfprintf_internal_r+0xe5c>
  8056c4:	a8c00204 	addi	r3,r21,8
  8056c8:	d9014917 	ldw	r4,1316(sp)
  8056cc:	00800044 	movi	r2,1
  8056d0:	94800044 	addi	r18,r18,1
  8056d4:	8c400044 	addi	r17,r17,1
  8056d8:	18800115 	stw	r2,4(r3)
  8056dc:	008001c4 	movi	r2,7
  8056e0:	19000015 	stw	r4,0(r3)
  8056e4:	dc800e15 	stw	r18,56(sp)
  8056e8:	dc400d15 	stw	r17,52(sp)
  8056ec:	1441b616 	blt	r2,r17,805dc8 <___vfprintf_internal_r+0xe38>
  8056f0:	1cc00204 	addi	r19,r3,8
  8056f4:	d9014217 	ldw	r4,1288(sp)
  8056f8:	d9414317 	ldw	r5,1292(sp)
  8056fc:	000d883a 	mov	r6,zero
  805700:	000f883a 	mov	r7,zero
  805704:	080da240 	call	80da24 <__nedf2>
  805708:	10017426 	beq	r2,zero,805cdc <___vfprintf_internal_r+0xd4c>
  80570c:	d9414717 	ldw	r5,1308(sp)
  805710:	d9814117 	ldw	r6,1284(sp)
  805714:	8c400044 	addi	r17,r17,1
  805718:	2c85883a 	add	r2,r5,r18
  80571c:	14bfffc4 	addi	r18,r2,-1
  805720:	28bfffc4 	addi	r2,r5,-1
  805724:	30c00044 	addi	r3,r6,1
  805728:	98800115 	stw	r2,4(r19)
  80572c:	008001c4 	movi	r2,7
  805730:	98c00015 	stw	r3,0(r19)
  805734:	dc800e15 	stw	r18,56(sp)
  805738:	dc400d15 	stw	r17,52(sp)
  80573c:	14418e16 	blt	r2,r17,805d78 <___vfprintf_internal_r+0xde8>
  805740:	9cc00204 	addi	r19,r19,8
  805744:	d9414817 	ldw	r5,1312(sp)
  805748:	d8800804 	addi	r2,sp,32
  80574c:	8c400044 	addi	r17,r17,1
  805750:	9165883a 	add	r18,r18,r5
  805754:	98800015 	stw	r2,0(r19)
  805758:	008001c4 	movi	r2,7
  80575c:	99400115 	stw	r5,4(r19)
  805760:	dc800e15 	stw	r18,56(sp)
  805764:	dc400d15 	stw	r17,52(sp)
  805768:	1440ed16 	blt	r2,r17,805b20 <___vfprintf_internal_r+0xb90>
  80576c:	98c00204 	addi	r3,r19,8
  805770:	003f8506 	br	805588 <___vfprintf_internal_r+0x5f8>
  805774:	d9814a17 	ldw	r6,1320(sp)
  805778:	d8814517 	ldw	r2,1300(sp)
  80577c:	30a1c83a 	sub	r16,r6,r2
  805780:	043f4b0e 	bge	zero,r16,8054b0 <___vfprintf_internal_r+0x520>
  805784:	00800404 	movi	r2,16
  805788:	14043a0e 	bge	r2,r16,806874 <___vfprintf_internal_r+0x18e4>
  80578c:	1027883a 	mov	r19,r2
  805790:	07002074 	movhi	fp,129
  805794:	e7097484 	addi	fp,fp,9682
  805798:	050001c4 	movi	r20,7
  80579c:	00000306 	br	8057ac <___vfprintf_internal_r+0x81c>
  8057a0:	843ffc04 	addi	r16,r16,-16
  8057a4:	ad400204 	addi	r21,r21,8
  8057a8:	9c00130e 	bge	r19,r16,8057f8 <___vfprintf_internal_r+0x868>
  8057ac:	94800404 	addi	r18,r18,16
  8057b0:	8c400044 	addi	r17,r17,1
  8057b4:	af000015 	stw	fp,0(r21)
  8057b8:	acc00115 	stw	r19,4(r21)
  8057bc:	dc800e15 	stw	r18,56(sp)
  8057c0:	dc400d15 	stw	r17,52(sp)
  8057c4:	a47ff60e 	bge	r20,r17,8057a0 <___vfprintf_internal_r+0x810>
  8057c8:	d9014f17 	ldw	r4,1340(sp)
  8057cc:	b00b883a 	mov	r5,r22
  8057d0:	d9800c04 	addi	r6,sp,48
  8057d4:	d9c15115 	stw	r7,1348(sp)
  8057d8:	0804f380 	call	804f38 <__sprint_r>
  8057dc:	d9c15117 	ldw	r7,1348(sp)
  8057e0:	103fa31e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  8057e4:	843ffc04 	addi	r16,r16,-16
  8057e8:	dc800e17 	ldw	r18,56(sp)
  8057ec:	dc400d17 	ldw	r17,52(sp)
  8057f0:	dd401904 	addi	r21,sp,100
  8057f4:	9c3fed16 	blt	r19,r16,8057ac <___vfprintf_internal_r+0x81c>
  8057f8:	9425883a 	add	r18,r18,r16
  8057fc:	8c400044 	addi	r17,r17,1
  805800:	008001c4 	movi	r2,7
  805804:	af000015 	stw	fp,0(r21)
  805808:	ac000115 	stw	r16,4(r21)
  80580c:	dc800e15 	stw	r18,56(sp)
  805810:	dc400d15 	stw	r17,52(sp)
  805814:	14416116 	blt	r2,r17,805d9c <___vfprintf_internal_r+0xe0c>
  805818:	ad400204 	addi	r21,r21,8
  80581c:	003f2406 	br	8054b0 <___vfprintf_internal_r+0x520>
  805820:	d9014f17 	ldw	r4,1340(sp)
  805824:	0808bf80 	call	808bf8 <__sinit>
  805828:	d9c15117 	ldw	r7,1348(sp)
  80582c:	003def06 	br	804fec <___vfprintf_internal_r+0x5c>
  805830:	d9014f17 	ldw	r4,1340(sp)
  805834:	b00b883a 	mov	r5,r22
  805838:	d9c15115 	stw	r7,1348(sp)
  80583c:	0806e780 	call	806e78 <__swsetup_r>
  805840:	d9c15117 	ldw	r7,1348(sp)
  805844:	103dee26 	beq	r2,zero,805000 <___vfprintf_internal_r+0x70>
  805848:	003f8c06 	br	80567c <___vfprintf_internal_r+0x6ec>
  80584c:	d9014217 	ldw	r4,1288(sp)
  805850:	d9414317 	ldw	r5,1292(sp)
  805854:	000d883a 	mov	r6,zero
  805858:	000f883a 	mov	r7,zero
  80585c:	080d99c0 	call	80d99c <__eqdf2>
  805860:	1000f21e 	bne	r2,zero,805c2c <___vfprintf_internal_r+0xc9c>
  805864:	00802074 	movhi	r2,129
  805868:	1086cd04 	addi	r2,r2,6964
  80586c:	94800044 	addi	r18,r18,1
  805870:	8c400044 	addi	r17,r17,1
  805874:	a8800015 	stw	r2,0(r21)
  805878:	00c00044 	movi	r3,1
  80587c:	008001c4 	movi	r2,7
  805880:	a8c00115 	stw	r3,4(r21)
  805884:	dc800e15 	stw	r18,56(sp)
  805888:	dc400d15 	stw	r17,52(sp)
  80588c:	14430016 	blt	r2,r17,806490 <___vfprintf_internal_r+0x1500>
  805890:	a8c00204 	addi	r3,r21,8
  805894:	d8800517 	ldw	r2,20(sp)
  805898:	d9014717 	ldw	r4,1308(sp)
  80589c:	11015c0e 	bge	r2,r4,805e10 <___vfprintf_internal_r+0xe80>
  8058a0:	dc400d17 	ldw	r17,52(sp)
  8058a4:	d9814917 	ldw	r6,1316(sp)
  8058a8:	00800044 	movi	r2,1
  8058ac:	94800044 	addi	r18,r18,1
  8058b0:	8c400044 	addi	r17,r17,1
  8058b4:	18800115 	stw	r2,4(r3)
  8058b8:	008001c4 	movi	r2,7
  8058bc:	19800015 	stw	r6,0(r3)
  8058c0:	dc800e15 	stw	r18,56(sp)
  8058c4:	dc400d15 	stw	r17,52(sp)
  8058c8:	14431616 	blt	r2,r17,806524 <___vfprintf_internal_r+0x1594>
  8058cc:	18c00204 	addi	r3,r3,8
  8058d0:	d8814717 	ldw	r2,1308(sp)
  8058d4:	143fffc4 	addi	r16,r2,-1
  8058d8:	043f2b0e 	bge	zero,r16,805588 <___vfprintf_internal_r+0x5f8>
  8058dc:	00800404 	movi	r2,16
  8058e0:	1402a80e 	bge	r2,r16,806384 <___vfprintf_internal_r+0x13f4>
  8058e4:	dc400d17 	ldw	r17,52(sp)
  8058e8:	1027883a 	mov	r19,r2
  8058ec:	07002074 	movhi	fp,129
  8058f0:	e7097484 	addi	fp,fp,9682
  8058f4:	050001c4 	movi	r20,7
  8058f8:	00000306 	br	805908 <___vfprintf_internal_r+0x978>
  8058fc:	18c00204 	addi	r3,r3,8
  805900:	843ffc04 	addi	r16,r16,-16
  805904:	9c02a20e 	bge	r19,r16,806390 <___vfprintf_internal_r+0x1400>
  805908:	94800404 	addi	r18,r18,16
  80590c:	8c400044 	addi	r17,r17,1
  805910:	1f000015 	stw	fp,0(r3)
  805914:	1cc00115 	stw	r19,4(r3)
  805918:	dc800e15 	stw	r18,56(sp)
  80591c:	dc400d15 	stw	r17,52(sp)
  805920:	a47ff60e 	bge	r20,r17,8058fc <___vfprintf_internal_r+0x96c>
  805924:	d9014f17 	ldw	r4,1340(sp)
  805928:	b00b883a 	mov	r5,r22
  80592c:	d9800c04 	addi	r6,sp,48
  805930:	0804f380 	call	804f38 <__sprint_r>
  805934:	103f4e1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805938:	dc800e17 	ldw	r18,56(sp)
  80593c:	dc400d17 	ldw	r17,52(sp)
  805940:	d8c01904 	addi	r3,sp,100
  805944:	003fee06 	br	805900 <___vfprintf_internal_r+0x970>
  805948:	d8802c0b 	ldhu	r2,176(sp)
  80594c:	00ffffc4 	movi	r3,-1
  805950:	d8c14b15 	stw	r3,1324(sp)
  805954:	1080100c 	andi	r2,r2,64
  805958:	103dcc1e 	bne	r2,zero,80508c <___vfprintf_internal_r+0xfc>
  80595c:	003dce06 	br	805098 <___vfprintf_internal_r+0x108>
  805960:	d9014f17 	ldw	r4,1340(sp)
  805964:	b00b883a 	mov	r5,r22
  805968:	d9800c04 	addi	r6,sp,48
  80596c:	0804f380 	call	804f38 <__sprint_r>
  805970:	103f3f1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805974:	dc800e17 	ldw	r18,56(sp)
  805978:	003f2e06 	br	805634 <___vfprintf_internal_r+0x6a4>
  80597c:	d9414c17 	ldw	r5,1328(sp)
  805980:	29400414 	ori	r5,r5,16
  805984:	d9414c15 	stw	r5,1328(sp)
  805988:	d9814c17 	ldw	r6,1328(sp)
  80598c:	3080080c 	andi	r2,r6,32
  805990:	10014f1e 	bne	r2,zero,805ed0 <___vfprintf_internal_r+0xf40>
  805994:	d8c14c17 	ldw	r3,1328(sp)
  805998:	1880040c 	andi	r2,r3,16
  80599c:	1002f01e 	bne	r2,zero,806560 <___vfprintf_internal_r+0x15d0>
  8059a0:	d9014c17 	ldw	r4,1328(sp)
  8059a4:	2080100c 	andi	r2,r4,64
  8059a8:	1002ed26 	beq	r2,zero,806560 <___vfprintf_internal_r+0x15d0>
  8059ac:	3880000f 	ldh	r2,0(r7)
  8059b0:	39c00104 	addi	r7,r7,4
  8059b4:	d9c14015 	stw	r7,1280(sp)
  8059b8:	1023d7fa 	srai	r17,r2,31
  8059bc:	1021883a 	mov	r16,r2
  8059c0:	88037816 	blt	r17,zero,8067a4 <___vfprintf_internal_r+0x1814>
  8059c4:	01000044 	movi	r4,1
  8059c8:	98000416 	blt	r19,zero,8059dc <___vfprintf_internal_r+0xa4c>
  8059cc:	d8c14c17 	ldw	r3,1328(sp)
  8059d0:	00bfdfc4 	movi	r2,-129
  8059d4:	1886703a 	and	r3,r3,r2
  8059d8:	d8c14c15 	stw	r3,1328(sp)
  8059dc:	8444b03a 	or	r2,r16,r17
  8059e0:	10022c1e 	bne	r2,zero,806294 <___vfprintf_internal_r+0x1304>
  8059e4:	98022b1e 	bne	r19,zero,806294 <___vfprintf_internal_r+0x1304>
  8059e8:	20803fcc 	andi	r2,r4,255
  8059ec:	1002a126 	beq	r2,zero,806474 <___vfprintf_internal_r+0x14e4>
  8059f0:	d8c01904 	addi	r3,sp,100
  8059f4:	dd000f04 	addi	r20,sp,60
  8059f8:	d8c14115 	stw	r3,1284(sp)
  8059fc:	d8c14117 	ldw	r3,1284(sp)
  805a00:	dcc14515 	stw	r19,1300(sp)
  805a04:	a0c5c83a 	sub	r2,r20,r3
  805a08:	11c00a04 	addi	r7,r2,40
  805a0c:	99c0010e 	bge	r19,r7,805a14 <___vfprintf_internal_r+0xa84>
  805a10:	d9c14515 	stw	r7,1300(sp)
  805a14:	dcc14615 	stw	r19,1304(sp)
  805a18:	d8800407 	ldb	r2,16(sp)
  805a1c:	103e4c26 	beq	r2,zero,805350 <___vfprintf_internal_r+0x3c0>
  805a20:	d8814517 	ldw	r2,1300(sp)
  805a24:	10800044 	addi	r2,r2,1
  805a28:	d8814515 	stw	r2,1300(sp)
  805a2c:	003e4806 	br	805350 <___vfprintf_internal_r+0x3c0>
  805a30:	d9814c17 	ldw	r6,1328(sp)
  805a34:	31800414 	ori	r6,r6,16
  805a38:	d9814c15 	stw	r6,1328(sp)
  805a3c:	d8c14c17 	ldw	r3,1328(sp)
  805a40:	1880080c 	andi	r2,r3,32
  805a44:	1001271e 	bne	r2,zero,805ee4 <___vfprintf_internal_r+0xf54>
  805a48:	d9414c17 	ldw	r5,1328(sp)
  805a4c:	2880040c 	andi	r2,r5,16
  805a50:	1002bc1e 	bne	r2,zero,806544 <___vfprintf_internal_r+0x15b4>
  805a54:	d9814c17 	ldw	r6,1328(sp)
  805a58:	3080100c 	andi	r2,r6,64
  805a5c:	1002b926 	beq	r2,zero,806544 <___vfprintf_internal_r+0x15b4>
  805a60:	3c00000b 	ldhu	r16,0(r7)
  805a64:	0009883a 	mov	r4,zero
  805a68:	39c00104 	addi	r7,r7,4
  805a6c:	0023883a 	mov	r17,zero
  805a70:	d9c14015 	stw	r7,1280(sp)
  805a74:	d8000405 	stb	zero,16(sp)
  805a78:	003fd306 	br	8059c8 <___vfprintf_internal_r+0xa38>
  805a7c:	d9014c17 	ldw	r4,1328(sp)
  805a80:	21000414 	ori	r4,r4,16
  805a84:	d9014c15 	stw	r4,1328(sp)
  805a88:	d9414c17 	ldw	r5,1328(sp)
  805a8c:	2880080c 	andi	r2,r5,32
  805a90:	1001081e 	bne	r2,zero,805eb4 <___vfprintf_internal_r+0xf24>
  805a94:	d8c14c17 	ldw	r3,1328(sp)
  805a98:	1880040c 	andi	r2,r3,16
  805a9c:	1002b61e 	bne	r2,zero,806578 <___vfprintf_internal_r+0x15e8>
  805aa0:	d9014c17 	ldw	r4,1328(sp)
  805aa4:	2080100c 	andi	r2,r4,64
  805aa8:	1002b326 	beq	r2,zero,806578 <___vfprintf_internal_r+0x15e8>
  805aac:	3c00000b 	ldhu	r16,0(r7)
  805ab0:	01000044 	movi	r4,1
  805ab4:	39c00104 	addi	r7,r7,4
  805ab8:	0023883a 	mov	r17,zero
  805abc:	d9c14015 	stw	r7,1280(sp)
  805ac0:	d8000405 	stb	zero,16(sp)
  805ac4:	003fc006 	br	8059c8 <___vfprintf_internal_r+0xa38>
  805ac8:	d9014f17 	ldw	r4,1340(sp)
  805acc:	b00b883a 	mov	r5,r22
  805ad0:	d9800c04 	addi	r6,sp,48
  805ad4:	0804f380 	call	804f38 <__sprint_r>
  805ad8:	103ee51e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805adc:	dc800e17 	ldw	r18,56(sp)
  805ae0:	d8c01904 	addi	r3,sp,100
  805ae4:	d9814c17 	ldw	r6,1328(sp)
  805ae8:	3080004c 	andi	r2,r6,1
  805aec:	1005003a 	cmpeq	r2,r2,zero
  805af0:	103ea51e 	bne	r2,zero,805588 <___vfprintf_internal_r+0x5f8>
  805af4:	00800044 	movi	r2,1
  805af8:	dc400d17 	ldw	r17,52(sp)
  805afc:	18800115 	stw	r2,4(r3)
  805b00:	d8814917 	ldw	r2,1316(sp)
  805b04:	94800044 	addi	r18,r18,1
  805b08:	8c400044 	addi	r17,r17,1
  805b0c:	18800015 	stw	r2,0(r3)
  805b10:	008001c4 	movi	r2,7
  805b14:	dc800e15 	stw	r18,56(sp)
  805b18:	dc400d15 	stw	r17,52(sp)
  805b1c:	1442240e 	bge	r2,r17,8063b0 <___vfprintf_internal_r+0x1420>
  805b20:	d9014f17 	ldw	r4,1340(sp)
  805b24:	b00b883a 	mov	r5,r22
  805b28:	d9800c04 	addi	r6,sp,48
  805b2c:	0804f380 	call	804f38 <__sprint_r>
  805b30:	103ecf1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805b34:	dc800e17 	ldw	r18,56(sp)
  805b38:	d8c01904 	addi	r3,sp,100
  805b3c:	003e9206 	br	805588 <___vfprintf_internal_r+0x5f8>
  805b40:	d9014f17 	ldw	r4,1340(sp)
  805b44:	b00b883a 	mov	r5,r22
  805b48:	d9800c04 	addi	r6,sp,48
  805b4c:	0804f380 	call	804f38 <__sprint_r>
  805b50:	103ec026 	beq	r2,zero,805654 <___vfprintf_internal_r+0x6c4>
  805b54:	003ec606 	br	805670 <___vfprintf_internal_r+0x6e0>
  805b58:	d9014f17 	ldw	r4,1340(sp)
  805b5c:	b00b883a 	mov	r5,r22
  805b60:	d9800c04 	addi	r6,sp,48
  805b64:	d9c15115 	stw	r7,1348(sp)
  805b68:	0804f380 	call	804f38 <__sprint_r>
  805b6c:	d9c15117 	ldw	r7,1348(sp)
  805b70:	103ebf1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805b74:	dc800e17 	ldw	r18,56(sp)
  805b78:	dc400d17 	ldw	r17,52(sp)
  805b7c:	dd401904 	addi	r21,sp,100
  805b80:	003e7406 	br	805554 <___vfprintf_internal_r+0x5c4>
  805b84:	d9014f17 	ldw	r4,1340(sp)
  805b88:	b00b883a 	mov	r5,r22
  805b8c:	d9800c04 	addi	r6,sp,48
  805b90:	d9c15115 	stw	r7,1348(sp)
  805b94:	0804f380 	call	804f38 <__sprint_r>
  805b98:	d9c15117 	ldw	r7,1348(sp)
  805b9c:	103eb41e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805ba0:	dd401904 	addi	r21,sp,100
  805ba4:	003d6d06 	br	80515c <___vfprintf_internal_r+0x1cc>
  805ba8:	d9014f17 	ldw	r4,1340(sp)
  805bac:	b00b883a 	mov	r5,r22
  805bb0:	d9800c04 	addi	r6,sp,48
  805bb4:	d9c15115 	stw	r7,1348(sp)
  805bb8:	0804f380 	call	804f38 <__sprint_r>
  805bbc:	d9c15117 	ldw	r7,1348(sp)
  805bc0:	103eab1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805bc4:	dc800e17 	ldw	r18,56(sp)
  805bc8:	dc400d17 	ldw	r17,52(sp)
  805bcc:	dd401904 	addi	r21,sp,100
  805bd0:	003e3406 	br	8054a4 <___vfprintf_internal_r+0x514>
  805bd4:	d9014f17 	ldw	r4,1340(sp)
  805bd8:	b00b883a 	mov	r5,r22
  805bdc:	d9800c04 	addi	r6,sp,48
  805be0:	d9c15115 	stw	r7,1348(sp)
  805be4:	0804f380 	call	804f38 <__sprint_r>
  805be8:	d9c15117 	ldw	r7,1348(sp)
  805bec:	103ea01e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805bf0:	dc800e17 	ldw	r18,56(sp)
  805bf4:	dc400d17 	ldw	r17,52(sp)
  805bf8:	dd401904 	addi	r21,sp,100
  805bfc:	003e1c06 	br	805470 <___vfprintf_internal_r+0x4e0>
  805c00:	d9014f17 	ldw	r4,1340(sp)
  805c04:	b00b883a 	mov	r5,r22
  805c08:	d9800c04 	addi	r6,sp,48
  805c0c:	d9c15115 	stw	r7,1348(sp)
  805c10:	0804f380 	call	804f38 <__sprint_r>
  805c14:	d9c15117 	ldw	r7,1348(sp)
  805c18:	103e951e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805c1c:	dc800e17 	ldw	r18,56(sp)
  805c20:	dc400d17 	ldw	r17,52(sp)
  805c24:	dd401904 	addi	r21,sp,100
  805c28:	003e0406 	br	80543c <___vfprintf_internal_r+0x4ac>
  805c2c:	d9000517 	ldw	r4,20(sp)
  805c30:	0102580e 	bge	zero,r4,806594 <___vfprintf_internal_r+0x1604>
  805c34:	d9814717 	ldw	r6,1308(sp)
  805c38:	21807a16 	blt	r4,r6,805e24 <___vfprintf_internal_r+0xe94>
  805c3c:	d8814117 	ldw	r2,1284(sp)
  805c40:	91a5883a 	add	r18,r18,r6
  805c44:	8c400044 	addi	r17,r17,1
  805c48:	a8800015 	stw	r2,0(r21)
  805c4c:	008001c4 	movi	r2,7
  805c50:	a9800115 	stw	r6,4(r21)
  805c54:	dc800e15 	stw	r18,56(sp)
  805c58:	dc400d15 	stw	r17,52(sp)
  805c5c:	1442fc16 	blt	r2,r17,806850 <___vfprintf_internal_r+0x18c0>
  805c60:	a8c00204 	addi	r3,r21,8
  805c64:	d9414717 	ldw	r5,1308(sp)
  805c68:	2161c83a 	sub	r16,r4,r5
  805c6c:	043f9d0e 	bge	zero,r16,805ae4 <___vfprintf_internal_r+0xb54>
  805c70:	00800404 	movi	r2,16
  805c74:	1402190e 	bge	r2,r16,8064dc <___vfprintf_internal_r+0x154c>
  805c78:	dc400d17 	ldw	r17,52(sp)
  805c7c:	1027883a 	mov	r19,r2
  805c80:	07002074 	movhi	fp,129
  805c84:	e7097484 	addi	fp,fp,9682
  805c88:	050001c4 	movi	r20,7
  805c8c:	00000306 	br	805c9c <___vfprintf_internal_r+0xd0c>
  805c90:	18c00204 	addi	r3,r3,8
  805c94:	843ffc04 	addi	r16,r16,-16
  805c98:	9c02130e 	bge	r19,r16,8064e8 <___vfprintf_internal_r+0x1558>
  805c9c:	94800404 	addi	r18,r18,16
  805ca0:	8c400044 	addi	r17,r17,1
  805ca4:	1f000015 	stw	fp,0(r3)
  805ca8:	1cc00115 	stw	r19,4(r3)
  805cac:	dc800e15 	stw	r18,56(sp)
  805cb0:	dc400d15 	stw	r17,52(sp)
  805cb4:	a47ff60e 	bge	r20,r17,805c90 <___vfprintf_internal_r+0xd00>
  805cb8:	d9014f17 	ldw	r4,1340(sp)
  805cbc:	b00b883a 	mov	r5,r22
  805cc0:	d9800c04 	addi	r6,sp,48
  805cc4:	0804f380 	call	804f38 <__sprint_r>
  805cc8:	103e691e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805ccc:	dc800e17 	ldw	r18,56(sp)
  805cd0:	dc400d17 	ldw	r17,52(sp)
  805cd4:	d8c01904 	addi	r3,sp,100
  805cd8:	003fee06 	br	805c94 <___vfprintf_internal_r+0xd04>
  805cdc:	d8814717 	ldw	r2,1308(sp)
  805ce0:	143fffc4 	addi	r16,r2,-1
  805ce4:	043e970e 	bge	zero,r16,805744 <___vfprintf_internal_r+0x7b4>
  805ce8:	00800404 	movi	r2,16
  805cec:	1400180e 	bge	r2,r16,805d50 <___vfprintf_internal_r+0xdc0>
  805cf0:	1029883a 	mov	r20,r2
  805cf4:	07002074 	movhi	fp,129
  805cf8:	e7097484 	addi	fp,fp,9682
  805cfc:	054001c4 	movi	r21,7
  805d00:	00000306 	br	805d10 <___vfprintf_internal_r+0xd80>
  805d04:	9cc00204 	addi	r19,r19,8
  805d08:	843ffc04 	addi	r16,r16,-16
  805d0c:	a400120e 	bge	r20,r16,805d58 <___vfprintf_internal_r+0xdc8>
  805d10:	94800404 	addi	r18,r18,16
  805d14:	8c400044 	addi	r17,r17,1
  805d18:	9f000015 	stw	fp,0(r19)
  805d1c:	9d000115 	stw	r20,4(r19)
  805d20:	dc800e15 	stw	r18,56(sp)
  805d24:	dc400d15 	stw	r17,52(sp)
  805d28:	ac7ff60e 	bge	r21,r17,805d04 <___vfprintf_internal_r+0xd74>
  805d2c:	d9014f17 	ldw	r4,1340(sp)
  805d30:	b00b883a 	mov	r5,r22
  805d34:	d9800c04 	addi	r6,sp,48
  805d38:	0804f380 	call	804f38 <__sprint_r>
  805d3c:	103e4c1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805d40:	dc800e17 	ldw	r18,56(sp)
  805d44:	dc400d17 	ldw	r17,52(sp)
  805d48:	dcc01904 	addi	r19,sp,100
  805d4c:	003fee06 	br	805d08 <___vfprintf_internal_r+0xd78>
  805d50:	07002074 	movhi	fp,129
  805d54:	e7097484 	addi	fp,fp,9682
  805d58:	9425883a 	add	r18,r18,r16
  805d5c:	8c400044 	addi	r17,r17,1
  805d60:	008001c4 	movi	r2,7
  805d64:	9f000015 	stw	fp,0(r19)
  805d68:	9c000115 	stw	r16,4(r19)
  805d6c:	dc800e15 	stw	r18,56(sp)
  805d70:	dc400d15 	stw	r17,52(sp)
  805d74:	147e720e 	bge	r2,r17,805740 <___vfprintf_internal_r+0x7b0>
  805d78:	d9014f17 	ldw	r4,1340(sp)
  805d7c:	b00b883a 	mov	r5,r22
  805d80:	d9800c04 	addi	r6,sp,48
  805d84:	0804f380 	call	804f38 <__sprint_r>
  805d88:	103e391e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805d8c:	dc800e17 	ldw	r18,56(sp)
  805d90:	dc400d17 	ldw	r17,52(sp)
  805d94:	dcc01904 	addi	r19,sp,100
  805d98:	003e6a06 	br	805744 <___vfprintf_internal_r+0x7b4>
  805d9c:	d9014f17 	ldw	r4,1340(sp)
  805da0:	b00b883a 	mov	r5,r22
  805da4:	d9800c04 	addi	r6,sp,48
  805da8:	d9c15115 	stw	r7,1348(sp)
  805dac:	0804f380 	call	804f38 <__sprint_r>
  805db0:	d9c15117 	ldw	r7,1348(sp)
  805db4:	103e2e1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805db8:	dc800e17 	ldw	r18,56(sp)
  805dbc:	dc400d17 	ldw	r17,52(sp)
  805dc0:	dd401904 	addi	r21,sp,100
  805dc4:	003dba06 	br	8054b0 <___vfprintf_internal_r+0x520>
  805dc8:	d9014f17 	ldw	r4,1340(sp)
  805dcc:	b00b883a 	mov	r5,r22
  805dd0:	d9800c04 	addi	r6,sp,48
  805dd4:	0804f380 	call	804f38 <__sprint_r>
  805dd8:	103e251e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805ddc:	dc800e17 	ldw	r18,56(sp)
  805de0:	dc400d17 	ldw	r17,52(sp)
  805de4:	dcc01904 	addi	r19,sp,100
  805de8:	003e4206 	br	8056f4 <___vfprintf_internal_r+0x764>
  805dec:	d9014f17 	ldw	r4,1340(sp)
  805df0:	b00b883a 	mov	r5,r22
  805df4:	d9800c04 	addi	r6,sp,48
  805df8:	0804f380 	call	804f38 <__sprint_r>
  805dfc:	103e1c1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  805e00:	dc800e17 	ldw	r18,56(sp)
  805e04:	dc400d17 	ldw	r17,52(sp)
  805e08:	d8c01904 	addi	r3,sp,100
  805e0c:	003e2e06 	br	8056c8 <___vfprintf_internal_r+0x738>
  805e10:	d9414c17 	ldw	r5,1328(sp)
  805e14:	2880004c 	andi	r2,r5,1
  805e18:	1005003a 	cmpeq	r2,r2,zero
  805e1c:	103dda1e 	bne	r2,zero,805588 <___vfprintf_internal_r+0x5f8>
  805e20:	003e9f06 	br	8058a0 <___vfprintf_internal_r+0x910>
  805e24:	d8c14117 	ldw	r3,1284(sp)
  805e28:	9125883a 	add	r18,r18,r4
  805e2c:	8c400044 	addi	r17,r17,1
  805e30:	008001c4 	movi	r2,7
  805e34:	a8c00015 	stw	r3,0(r21)
  805e38:	a9000115 	stw	r4,4(r21)
  805e3c:	dc800e15 	stw	r18,56(sp)
  805e40:	dc400d15 	stw	r17,52(sp)
  805e44:	14426c16 	blt	r2,r17,8067f8 <___vfprintf_internal_r+0x1868>
  805e48:	a8c00204 	addi	r3,r21,8
  805e4c:	d9414917 	ldw	r5,1316(sp)
  805e50:	00800044 	movi	r2,1
  805e54:	94800044 	addi	r18,r18,1
  805e58:	8c400044 	addi	r17,r17,1
  805e5c:	18800115 	stw	r2,4(r3)
  805e60:	008001c4 	movi	r2,7
  805e64:	19400015 	stw	r5,0(r3)
  805e68:	dc800e15 	stw	r18,56(sp)
  805e6c:	dc400d15 	stw	r17,52(sp)
  805e70:	2021883a 	mov	r16,r4
  805e74:	14425616 	blt	r2,r17,8067d0 <___vfprintf_internal_r+0x1840>
  805e78:	19400204 	addi	r5,r3,8
  805e7c:	d9814717 	ldw	r6,1308(sp)
  805e80:	8c400044 	addi	r17,r17,1
  805e84:	dc400d15 	stw	r17,52(sp)
  805e88:	3107c83a 	sub	r3,r6,r4
  805e8c:	d9014117 	ldw	r4,1284(sp)
  805e90:	90e5883a 	add	r18,r18,r3
  805e94:	28c00115 	stw	r3,4(r5)
  805e98:	8105883a 	add	r2,r16,r4
  805e9c:	28800015 	stw	r2,0(r5)
  805ea0:	008001c4 	movi	r2,7
  805ea4:	dc800e15 	stw	r18,56(sp)
  805ea8:	147f1d16 	blt	r2,r17,805b20 <___vfprintf_internal_r+0xb90>
  805eac:	28c00204 	addi	r3,r5,8
  805eb0:	003db506 	br	805588 <___vfprintf_internal_r+0x5f8>
  805eb4:	3c000017 	ldw	r16,0(r7)
  805eb8:	3c400117 	ldw	r17,4(r7)
  805ebc:	39800204 	addi	r6,r7,8
  805ec0:	01000044 	movi	r4,1
  805ec4:	d9814015 	stw	r6,1280(sp)
  805ec8:	d8000405 	stb	zero,16(sp)
  805ecc:	003ebe06 	br	8059c8 <___vfprintf_internal_r+0xa38>
  805ed0:	3c000017 	ldw	r16,0(r7)
  805ed4:	3c400117 	ldw	r17,4(r7)
  805ed8:	38800204 	addi	r2,r7,8
  805edc:	d8814015 	stw	r2,1280(sp)
  805ee0:	003eb706 	br	8059c0 <___vfprintf_internal_r+0xa30>
  805ee4:	3c000017 	ldw	r16,0(r7)
  805ee8:	3c400117 	ldw	r17,4(r7)
  805eec:	39000204 	addi	r4,r7,8
  805ef0:	d9014015 	stw	r4,1280(sp)
  805ef4:	0009883a 	mov	r4,zero
  805ef8:	d8000405 	stb	zero,16(sp)
  805efc:	003eb206 	br	8059c8 <___vfprintf_internal_r+0xa38>
  805f00:	38c00017 	ldw	r3,0(r7)
  805f04:	39c00104 	addi	r7,r7,4
  805f08:	d8c14a15 	stw	r3,1320(sp)
  805f0c:	1800d70e 	bge	r3,zero,80626c <___vfprintf_internal_r+0x12dc>
  805f10:	00c7c83a 	sub	r3,zero,r3
  805f14:	d8c14a15 	stw	r3,1320(sp)
  805f18:	d9014c17 	ldw	r4,1328(sp)
  805f1c:	b8c00007 	ldb	r3,0(r23)
  805f20:	21000114 	ori	r4,r4,4
  805f24:	d9014c15 	stw	r4,1328(sp)
  805f28:	003c9806 	br	80518c <___vfprintf_internal_r+0x1fc>
  805f2c:	d9814c17 	ldw	r6,1328(sp)
  805f30:	3080080c 	andi	r2,r6,32
  805f34:	1001f626 	beq	r2,zero,806710 <___vfprintf_internal_r+0x1780>
  805f38:	d9014b17 	ldw	r4,1324(sp)
  805f3c:	38800017 	ldw	r2,0(r7)
  805f40:	39c00104 	addi	r7,r7,4
  805f44:	d9c14015 	stw	r7,1280(sp)
  805f48:	2007d7fa 	srai	r3,r4,31
  805f4c:	d9c14017 	ldw	r7,1280(sp)
  805f50:	11000015 	stw	r4,0(r2)
  805f54:	10c00115 	stw	r3,4(r2)
  805f58:	003c6906 	br	805100 <___vfprintf_internal_r+0x170>
  805f5c:	b8c00007 	ldb	r3,0(r23)
  805f60:	00801b04 	movi	r2,108
  805f64:	18825526 	beq	r3,r2,8068bc <___vfprintf_internal_r+0x192c>
  805f68:	d9414c17 	ldw	r5,1328(sp)
  805f6c:	29400414 	ori	r5,r5,16
  805f70:	d9414c15 	stw	r5,1328(sp)
  805f74:	003c8506 	br	80518c <___vfprintf_internal_r+0x1fc>
  805f78:	d9814c17 	ldw	r6,1328(sp)
  805f7c:	b8c00007 	ldb	r3,0(r23)
  805f80:	31800814 	ori	r6,r6,32
  805f84:	d9814c15 	stw	r6,1328(sp)
  805f88:	003c8006 	br	80518c <___vfprintf_internal_r+0x1fc>
  805f8c:	d8814c17 	ldw	r2,1328(sp)
  805f90:	3c000017 	ldw	r16,0(r7)
  805f94:	00c01e04 	movi	r3,120
  805f98:	10800094 	ori	r2,r2,2
  805f9c:	d8814c15 	stw	r2,1328(sp)
  805fa0:	39c00104 	addi	r7,r7,4
  805fa4:	01402074 	movhi	r5,129
  805fa8:	29495e04 	addi	r5,r5,9592
  805fac:	00800c04 	movi	r2,48
  805fb0:	0023883a 	mov	r17,zero
  805fb4:	01000084 	movi	r4,2
  805fb8:	d9c14015 	stw	r7,1280(sp)
  805fbc:	d8c14d15 	stw	r3,1332(sp)
  805fc0:	d9414415 	stw	r5,1296(sp)
  805fc4:	d8800445 	stb	r2,17(sp)
  805fc8:	d8c00485 	stb	r3,18(sp)
  805fcc:	d8000405 	stb	zero,16(sp)
  805fd0:	003e7d06 	br	8059c8 <___vfprintf_internal_r+0xa38>
  805fd4:	d8814c17 	ldw	r2,1328(sp)
  805fd8:	b8c00007 	ldb	r3,0(r23)
  805fdc:	10801014 	ori	r2,r2,64
  805fe0:	d8814c15 	stw	r2,1328(sp)
  805fe4:	003c6906 	br	80518c <___vfprintf_internal_r+0x1fc>
  805fe8:	d9414c17 	ldw	r5,1328(sp)
  805fec:	2880020c 	andi	r2,r5,8
  805ff0:	1001e526 	beq	r2,zero,806788 <___vfprintf_internal_r+0x17f8>
  805ff4:	39800017 	ldw	r6,0(r7)
  805ff8:	38800204 	addi	r2,r7,8
  805ffc:	d8814015 	stw	r2,1280(sp)
  806000:	d9814215 	stw	r6,1288(sp)
  806004:	39c00117 	ldw	r7,4(r7)
  806008:	d9c14315 	stw	r7,1292(sp)
  80600c:	d9014217 	ldw	r4,1288(sp)
  806010:	d9414317 	ldw	r5,1292(sp)
  806014:	080be940 	call	80be94 <__isinfd>
  806018:	10021d26 	beq	r2,zero,806890 <___vfprintf_internal_r+0x1900>
  80601c:	d9014217 	ldw	r4,1288(sp)
  806020:	d9414317 	ldw	r5,1292(sp)
  806024:	000d883a 	mov	r6,zero
  806028:	000f883a 	mov	r7,zero
  80602c:	080db340 	call	80db34 <__ltdf2>
  806030:	1002d016 	blt	r2,zero,806b74 <___vfprintf_internal_r+0x1be4>
  806034:	d9414d17 	ldw	r5,1332(sp)
  806038:	008011c4 	movi	r2,71
  80603c:	11421016 	blt	r2,r5,806880 <___vfprintf_internal_r+0x18f0>
  806040:	01802074 	movhi	r6,129
  806044:	31896304 	addi	r6,r6,9612
  806048:	d9814115 	stw	r6,1284(sp)
  80604c:	d9014c17 	ldw	r4,1328(sp)
  806050:	00c000c4 	movi	r3,3
  806054:	00bfdfc4 	movi	r2,-129
  806058:	2088703a 	and	r4,r4,r2
  80605c:	180f883a 	mov	r7,r3
  806060:	d8c14515 	stw	r3,1300(sp)
  806064:	d9014c15 	stw	r4,1328(sp)
  806068:	d8014615 	stw	zero,1304(sp)
  80606c:	003e6a06 	br	805a18 <___vfprintf_internal_r+0xa88>
  806070:	38800017 	ldw	r2,0(r7)
  806074:	00c00044 	movi	r3,1
  806078:	39c00104 	addi	r7,r7,4
  80607c:	d9c14015 	stw	r7,1280(sp)
  806080:	d9000f04 	addi	r4,sp,60
  806084:	180f883a 	mov	r7,r3
  806088:	d8c14515 	stw	r3,1300(sp)
  80608c:	d9014115 	stw	r4,1284(sp)
  806090:	d8800f05 	stb	r2,60(sp)
  806094:	d8000405 	stb	zero,16(sp)
  806098:	003cac06 	br	80534c <___vfprintf_internal_r+0x3bc>
  80609c:	01402074 	movhi	r5,129
  8060a0:	29496904 	addi	r5,r5,9636
  8060a4:	d9414415 	stw	r5,1296(sp)
  8060a8:	d9814c17 	ldw	r6,1328(sp)
  8060ac:	3080080c 	andi	r2,r6,32
  8060b0:	1000ff26 	beq	r2,zero,8064b0 <___vfprintf_internal_r+0x1520>
  8060b4:	3c000017 	ldw	r16,0(r7)
  8060b8:	3c400117 	ldw	r17,4(r7)
  8060bc:	38800204 	addi	r2,r7,8
  8060c0:	d8814015 	stw	r2,1280(sp)
  8060c4:	d9414c17 	ldw	r5,1328(sp)
  8060c8:	2880004c 	andi	r2,r5,1
  8060cc:	1005003a 	cmpeq	r2,r2,zero
  8060d0:	1000b91e 	bne	r2,zero,8063b8 <___vfprintf_internal_r+0x1428>
  8060d4:	8444b03a 	or	r2,r16,r17
  8060d8:	1000b726 	beq	r2,zero,8063b8 <___vfprintf_internal_r+0x1428>
  8060dc:	d9814d17 	ldw	r6,1332(sp)
  8060e0:	29400094 	ori	r5,r5,2
  8060e4:	00800c04 	movi	r2,48
  8060e8:	01000084 	movi	r4,2
  8060ec:	d9414c15 	stw	r5,1328(sp)
  8060f0:	d8800445 	stb	r2,17(sp)
  8060f4:	d9800485 	stb	r6,18(sp)
  8060f8:	d8000405 	stb	zero,16(sp)
  8060fc:	003e3206 	br	8059c8 <___vfprintf_internal_r+0xa38>
  806100:	01802074 	movhi	r6,129
  806104:	31895e04 	addi	r6,r6,9592
  806108:	d9814415 	stw	r6,1296(sp)
  80610c:	003fe606 	br	8060a8 <___vfprintf_internal_r+0x1118>
  806110:	00800ac4 	movi	r2,43
  806114:	d8800405 	stb	r2,16(sp)
  806118:	b8c00007 	ldb	r3,0(r23)
  80611c:	003c1b06 	br	80518c <___vfprintf_internal_r+0x1fc>
  806120:	d8814c17 	ldw	r2,1328(sp)
  806124:	b8c00007 	ldb	r3,0(r23)
  806128:	10800054 	ori	r2,r2,1
  80612c:	d8814c15 	stw	r2,1328(sp)
  806130:	003c1606 	br	80518c <___vfprintf_internal_r+0x1fc>
  806134:	d8800407 	ldb	r2,16(sp)
  806138:	10004c1e 	bne	r2,zero,80626c <___vfprintf_internal_r+0x12dc>
  80613c:	00800804 	movi	r2,32
  806140:	d8800405 	stb	r2,16(sp)
  806144:	b8c00007 	ldb	r3,0(r23)
  806148:	003c1006 	br	80518c <___vfprintf_internal_r+0x1fc>
  80614c:	d9814c17 	ldw	r6,1328(sp)
  806150:	b8c00007 	ldb	r3,0(r23)
  806154:	31800214 	ori	r6,r6,8
  806158:	d9814c15 	stw	r6,1328(sp)
  80615c:	003c0b06 	br	80518c <___vfprintf_internal_r+0x1fc>
  806160:	0009883a 	mov	r4,zero
  806164:	04000244 	movi	r16,9
  806168:	01400284 	movi	r5,10
  80616c:	d9c15115 	stw	r7,1348(sp)
  806170:	0803eb80 	call	803eb8 <__mulsi3>
  806174:	b9000007 	ldb	r4,0(r23)
  806178:	d8c14d17 	ldw	r3,1332(sp)
  80617c:	bdc00044 	addi	r23,r23,1
  806180:	d9014d15 	stw	r4,1332(sp)
  806184:	d9414d17 	ldw	r5,1332(sp)
  806188:	1885883a 	add	r2,r3,r2
  80618c:	113ff404 	addi	r4,r2,-48
  806190:	28bff404 	addi	r2,r5,-48
  806194:	d9c15117 	ldw	r7,1348(sp)
  806198:	80bff32e 	bgeu	r16,r2,806168 <___vfprintf_internal_r+0x11d8>
  80619c:	d9014a15 	stw	r4,1320(sp)
  8061a0:	003bfc06 	br	805194 <___vfprintf_internal_r+0x204>
  8061a4:	d8814c17 	ldw	r2,1328(sp)
  8061a8:	b8c00007 	ldb	r3,0(r23)
  8061ac:	10802014 	ori	r2,r2,128
  8061b0:	d8814c15 	stw	r2,1328(sp)
  8061b4:	003bf506 	br	80518c <___vfprintf_internal_r+0x1fc>
  8061b8:	b8c00007 	ldb	r3,0(r23)
  8061bc:	00800a84 	movi	r2,42
  8061c0:	bdc00044 	addi	r23,r23,1
  8061c4:	18831826 	beq	r3,r2,806e28 <___vfprintf_internal_r+0x1e98>
  8061c8:	d8c14d15 	stw	r3,1332(sp)
  8061cc:	18bff404 	addi	r2,r3,-48
  8061d0:	00c00244 	movi	r3,9
  8061d4:	18827b36 	bltu	r3,r2,806bc4 <___vfprintf_internal_r+0x1c34>
  8061d8:	1821883a 	mov	r16,r3
  8061dc:	0009883a 	mov	r4,zero
  8061e0:	01400284 	movi	r5,10
  8061e4:	d9c15115 	stw	r7,1348(sp)
  8061e8:	0803eb80 	call	803eb8 <__mulsi3>
  8061ec:	d9414d17 	ldw	r5,1332(sp)
  8061f0:	b9800007 	ldb	r6,0(r23)
  8061f4:	d9c15117 	ldw	r7,1348(sp)
  8061f8:	1145883a 	add	r2,r2,r5
  8061fc:	113ff404 	addi	r4,r2,-48
  806200:	30bff404 	addi	r2,r6,-48
  806204:	d9814d15 	stw	r6,1332(sp)
  806208:	bdc00044 	addi	r23,r23,1
  80620c:	80bff42e 	bgeu	r16,r2,8061e0 <___vfprintf_internal_r+0x1250>
  806210:	2027883a 	mov	r19,r4
  806214:	203bdf0e 	bge	r4,zero,805194 <___vfprintf_internal_r+0x204>
  806218:	04ffffc4 	movi	r19,-1
  80621c:	003bdd06 	br	805194 <___vfprintf_internal_r+0x204>
  806220:	d8000405 	stb	zero,16(sp)
  806224:	39800017 	ldw	r6,0(r7)
  806228:	39c00104 	addi	r7,r7,4
  80622c:	d9c14015 	stw	r7,1280(sp)
  806230:	d9814115 	stw	r6,1284(sp)
  806234:	3001c926 	beq	r6,zero,80695c <___vfprintf_internal_r+0x19cc>
  806238:	98000e16 	blt	r19,zero,806274 <___vfprintf_internal_r+0x12e4>
  80623c:	d9014117 	ldw	r4,1284(sp)
  806240:	000b883a 	mov	r5,zero
  806244:	980d883a 	mov	r6,r19
  806248:	080a3c40 	call	80a3c4 <memchr>
  80624c:	10025926 	beq	r2,zero,806bb4 <___vfprintf_internal_r+0x1c24>
  806250:	d8c14117 	ldw	r3,1284(sp)
  806254:	10cfc83a 	sub	r7,r2,r3
  806258:	99c19e16 	blt	r19,r7,8068d4 <___vfprintf_internal_r+0x1944>
  80625c:	d9c14515 	stw	r7,1300(sp)
  806260:	38000916 	blt	r7,zero,806288 <___vfprintf_internal_r+0x12f8>
  806264:	d8014615 	stw	zero,1304(sp)
  806268:	003deb06 	br	805a18 <___vfprintf_internal_r+0xa88>
  80626c:	b8c00007 	ldb	r3,0(r23)
  806270:	003bc606 	br	80518c <___vfprintf_internal_r+0x1fc>
  806274:	d9014117 	ldw	r4,1284(sp)
  806278:	0804ebc0 	call	804ebc <strlen>
  80627c:	d8814515 	stw	r2,1300(sp)
  806280:	100f883a 	mov	r7,r2
  806284:	103ff70e 	bge	r2,zero,806264 <___vfprintf_internal_r+0x12d4>
  806288:	d8014515 	stw	zero,1300(sp)
  80628c:	d8014615 	stw	zero,1304(sp)
  806290:	003de106 	br	805a18 <___vfprintf_internal_r+0xa88>
  806294:	20c03fcc 	andi	r3,r4,255
  806298:	00800044 	movi	r2,1
  80629c:	18802d26 	beq	r3,r2,806354 <___vfprintf_internal_r+0x13c4>
  8062a0:	18800e36 	bltu	r3,r2,8062dc <___vfprintf_internal_r+0x134c>
  8062a4:	00800084 	movi	r2,2
  8062a8:	1880fa26 	beq	r3,r2,806694 <___vfprintf_internal_r+0x1704>
  8062ac:	01002074 	movhi	r4,129
  8062b0:	21096e04 	addi	r4,r4,9656
  8062b4:	0804ebc0 	call	804ebc <strlen>
  8062b8:	100f883a 	mov	r7,r2
  8062bc:	dcc14515 	stw	r19,1300(sp)
  8062c0:	9880010e 	bge	r19,r2,8062c8 <___vfprintf_internal_r+0x1338>
  8062c4:	d8814515 	stw	r2,1300(sp)
  8062c8:	00802074 	movhi	r2,129
  8062cc:	10896e04 	addi	r2,r2,9656
  8062d0:	dcc14615 	stw	r19,1304(sp)
  8062d4:	d8814115 	stw	r2,1284(sp)
  8062d8:	003dcf06 	br	805a18 <___vfprintf_internal_r+0xa88>
  8062dc:	d9401904 	addi	r5,sp,100
  8062e0:	dd000f04 	addi	r20,sp,60
  8062e4:	d9414115 	stw	r5,1284(sp)
  8062e8:	880a977a 	slli	r5,r17,29
  8062ec:	d9814117 	ldw	r6,1284(sp)
  8062f0:	8004d0fa 	srli	r2,r16,3
  8062f4:	8806d0fa 	srli	r3,r17,3
  8062f8:	810001cc 	andi	r4,r16,7
  8062fc:	2884b03a 	or	r2,r5,r2
  806300:	31bfffc4 	addi	r6,r6,-1
  806304:	21000c04 	addi	r4,r4,48
  806308:	d9814115 	stw	r6,1284(sp)
  80630c:	10cab03a 	or	r5,r2,r3
  806310:	31000005 	stb	r4,0(r6)
  806314:	1021883a 	mov	r16,r2
  806318:	1823883a 	mov	r17,r3
  80631c:	283ff21e 	bne	r5,zero,8062e8 <___vfprintf_internal_r+0x1358>
  806320:	d8c14c17 	ldw	r3,1328(sp)
  806324:	1880004c 	andi	r2,r3,1
  806328:	1005003a 	cmpeq	r2,r2,zero
  80632c:	103db31e 	bne	r2,zero,8059fc <___vfprintf_internal_r+0xa6c>
  806330:	20803fcc 	andi	r2,r4,255
  806334:	1080201c 	xori	r2,r2,128
  806338:	10bfe004 	addi	r2,r2,-128
  80633c:	00c00c04 	movi	r3,48
  806340:	10fdae26 	beq	r2,r3,8059fc <___vfprintf_internal_r+0xa6c>
  806344:	31bfffc4 	addi	r6,r6,-1
  806348:	d9814115 	stw	r6,1284(sp)
  80634c:	30c00005 	stb	r3,0(r6)
  806350:	003daa06 	br	8059fc <___vfprintf_internal_r+0xa6c>
  806354:	88800068 	cmpgeui	r2,r17,1
  806358:	10002c1e 	bne	r2,zero,80640c <___vfprintf_internal_r+0x147c>
  80635c:	8800021e 	bne	r17,zero,806368 <___vfprintf_internal_r+0x13d8>
  806360:	00800244 	movi	r2,9
  806364:	14002936 	bltu	r2,r16,80640c <___vfprintf_internal_r+0x147c>
  806368:	d90018c4 	addi	r4,sp,99
  80636c:	dd000f04 	addi	r20,sp,60
  806370:	d9014115 	stw	r4,1284(sp)
  806374:	d9014117 	ldw	r4,1284(sp)
  806378:	80800c04 	addi	r2,r16,48
  80637c:	20800005 	stb	r2,0(r4)
  806380:	003d9e06 	br	8059fc <___vfprintf_internal_r+0xa6c>
  806384:	dc400d17 	ldw	r17,52(sp)
  806388:	07002074 	movhi	fp,129
  80638c:	e7097484 	addi	fp,fp,9682
  806390:	9425883a 	add	r18,r18,r16
  806394:	8c400044 	addi	r17,r17,1
  806398:	008001c4 	movi	r2,7
  80639c:	1f000015 	stw	fp,0(r3)
  8063a0:	1c000115 	stw	r16,4(r3)
  8063a4:	dc800e15 	stw	r18,56(sp)
  8063a8:	dc400d15 	stw	r17,52(sp)
  8063ac:	147ddc16 	blt	r2,r17,805b20 <___vfprintf_internal_r+0xb90>
  8063b0:	18c00204 	addi	r3,r3,8
  8063b4:	003c7406 	br	805588 <___vfprintf_internal_r+0x5f8>
  8063b8:	01000084 	movi	r4,2
  8063bc:	d8000405 	stb	zero,16(sp)
  8063c0:	003d8106 	br	8059c8 <___vfprintf_internal_r+0xa38>
  8063c4:	d9814c17 	ldw	r6,1328(sp)
  8063c8:	30c4703a 	and	r2,r6,r3
  8063cc:	1005003a 	cmpeq	r2,r2,zero
  8063d0:	103cb326 	beq	r2,zero,8056a0 <___vfprintf_internal_r+0x710>
  8063d4:	d9014117 	ldw	r4,1284(sp)
  8063d8:	94800044 	addi	r18,r18,1
  8063dc:	8c400044 	addi	r17,r17,1
  8063e0:	008001c4 	movi	r2,7
  8063e4:	a9000015 	stw	r4,0(r21)
  8063e8:	a8c00115 	stw	r3,4(r21)
  8063ec:	dc800e15 	stw	r18,56(sp)
  8063f0:	dc400d15 	stw	r17,52(sp)
  8063f4:	147e6016 	blt	r2,r17,805d78 <___vfprintf_internal_r+0xde8>
  8063f8:	acc00204 	addi	r19,r21,8
  8063fc:	003cd106 	br	805744 <___vfprintf_internal_r+0x7b4>
  806400:	07002074 	movhi	fp,129
  806404:	e7097484 	addi	fp,fp,9682
  806408:	003c4906 	br	805530 <___vfprintf_internal_r+0x5a0>
  80640c:	dd000f04 	addi	r20,sp,60
  806410:	dc801904 	addi	r18,sp,100
  806414:	8009883a 	mov	r4,r16
  806418:	880b883a 	mov	r5,r17
  80641c:	01800284 	movi	r6,10
  806420:	000f883a 	mov	r7,zero
  806424:	080cd200 	call	80cd20 <__umoddi3>
  806428:	12000c04 	addi	r8,r2,48
  80642c:	94bfffc4 	addi	r18,r18,-1
  806430:	8009883a 	mov	r4,r16
  806434:	880b883a 	mov	r5,r17
  806438:	01800284 	movi	r6,10
  80643c:	000f883a 	mov	r7,zero
  806440:	92000005 	stb	r8,0(r18)
  806444:	080c6b40 	call	80c6b4 <__udivdi3>
  806448:	1009883a 	mov	r4,r2
  80644c:	1021883a 	mov	r16,r2
  806450:	18800068 	cmpgeui	r2,r3,1
  806454:	1823883a 	mov	r17,r3
  806458:	103fee1e 	bne	r2,zero,806414 <___vfprintf_internal_r+0x1484>
  80645c:	1800021e 	bne	r3,zero,806468 <___vfprintf_internal_r+0x14d8>
  806460:	00800244 	movi	r2,9
  806464:	113feb36 	bltu	r2,r4,806414 <___vfprintf_internal_r+0x1484>
  806468:	94bfffc4 	addi	r18,r18,-1
  80646c:	dc814115 	stw	r18,1284(sp)
  806470:	003fc006 	br	806374 <___vfprintf_internal_r+0x13e4>
  806474:	d9014c17 	ldw	r4,1328(sp)
  806478:	2080004c 	andi	r2,r4,1
  80647c:	10009a1e 	bne	r2,zero,8066e8 <___vfprintf_internal_r+0x1758>
  806480:	d9401904 	addi	r5,sp,100
  806484:	dd000f04 	addi	r20,sp,60
  806488:	d9414115 	stw	r5,1284(sp)
  80648c:	003d5b06 	br	8059fc <___vfprintf_internal_r+0xa6c>
  806490:	d9014f17 	ldw	r4,1340(sp)
  806494:	b00b883a 	mov	r5,r22
  806498:	d9800c04 	addi	r6,sp,48
  80649c:	0804f380 	call	804f38 <__sprint_r>
  8064a0:	103c731e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  8064a4:	dc800e17 	ldw	r18,56(sp)
  8064a8:	d8c01904 	addi	r3,sp,100
  8064ac:	003cf906 	br	805894 <___vfprintf_internal_r+0x904>
  8064b0:	d8c14c17 	ldw	r3,1328(sp)
  8064b4:	1880040c 	andi	r2,r3,16
  8064b8:	1000711e 	bne	r2,zero,806680 <___vfprintf_internal_r+0x16f0>
  8064bc:	d9014c17 	ldw	r4,1328(sp)
  8064c0:	2080100c 	andi	r2,r4,64
  8064c4:	10006e26 	beq	r2,zero,806680 <___vfprintf_internal_r+0x16f0>
  8064c8:	3c00000b 	ldhu	r16,0(r7)
  8064cc:	0023883a 	mov	r17,zero
  8064d0:	39c00104 	addi	r7,r7,4
  8064d4:	d9c14015 	stw	r7,1280(sp)
  8064d8:	003efa06 	br	8060c4 <___vfprintf_internal_r+0x1134>
  8064dc:	dc400d17 	ldw	r17,52(sp)
  8064e0:	07002074 	movhi	fp,129
  8064e4:	e7097484 	addi	fp,fp,9682
  8064e8:	9425883a 	add	r18,r18,r16
  8064ec:	8c400044 	addi	r17,r17,1
  8064f0:	008001c4 	movi	r2,7
  8064f4:	1f000015 	stw	fp,0(r3)
  8064f8:	1c000115 	stw	r16,4(r3)
  8064fc:	dc800e15 	stw	r18,56(sp)
  806500:	dc400d15 	stw	r17,52(sp)
  806504:	147d7016 	blt	r2,r17,805ac8 <___vfprintf_internal_r+0xb38>
  806508:	18c00204 	addi	r3,r3,8
  80650c:	003d7506 	br	805ae4 <___vfprintf_internal_r+0xb54>
  806510:	dc800e17 	ldw	r18,56(sp)
  806514:	dc400d17 	ldw	r17,52(sp)
  806518:	07002074 	movhi	fp,129
  80651c:	e7097884 	addi	fp,fp,9698
  806520:	003bba06 	br	80540c <___vfprintf_internal_r+0x47c>
  806524:	d9014f17 	ldw	r4,1340(sp)
  806528:	b00b883a 	mov	r5,r22
  80652c:	d9800c04 	addi	r6,sp,48
  806530:	0804f380 	call	804f38 <__sprint_r>
  806534:	103c4e1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  806538:	dc800e17 	ldw	r18,56(sp)
  80653c:	d8c01904 	addi	r3,sp,100
  806540:	003ce306 	br	8058d0 <___vfprintf_internal_r+0x940>
  806544:	3c000017 	ldw	r16,0(r7)
  806548:	0009883a 	mov	r4,zero
  80654c:	39c00104 	addi	r7,r7,4
  806550:	0023883a 	mov	r17,zero
  806554:	d9c14015 	stw	r7,1280(sp)
  806558:	d8000405 	stb	zero,16(sp)
  80655c:	003d1a06 	br	8059c8 <___vfprintf_internal_r+0xa38>
  806560:	38800017 	ldw	r2,0(r7)
  806564:	39c00104 	addi	r7,r7,4
  806568:	d9c14015 	stw	r7,1280(sp)
  80656c:	1023d7fa 	srai	r17,r2,31
  806570:	1021883a 	mov	r16,r2
  806574:	003d1206 	br	8059c0 <___vfprintf_internal_r+0xa30>
  806578:	3c000017 	ldw	r16,0(r7)
  80657c:	01000044 	movi	r4,1
  806580:	39c00104 	addi	r7,r7,4
  806584:	0023883a 	mov	r17,zero
  806588:	d9c14015 	stw	r7,1280(sp)
  80658c:	d8000405 	stb	zero,16(sp)
  806590:	003d0d06 	br	8059c8 <___vfprintf_internal_r+0xa38>
  806594:	00802074 	movhi	r2,129
  806598:	1086cd04 	addi	r2,r2,6964
  80659c:	94800044 	addi	r18,r18,1
  8065a0:	8c400044 	addi	r17,r17,1
  8065a4:	a8800015 	stw	r2,0(r21)
  8065a8:	00c00044 	movi	r3,1
  8065ac:	008001c4 	movi	r2,7
  8065b0:	a8c00115 	stw	r3,4(r21)
  8065b4:	dc800e15 	stw	r18,56(sp)
  8065b8:	dc400d15 	stw	r17,52(sp)
  8065bc:	1440ca16 	blt	r2,r17,8068e8 <___vfprintf_internal_r+0x1958>
  8065c0:	a8c00204 	addi	r3,r21,8
  8065c4:	2000061e 	bne	r4,zero,8065e0 <___vfprintf_internal_r+0x1650>
  8065c8:	d9414717 	ldw	r5,1308(sp)
  8065cc:	2800041e 	bne	r5,zero,8065e0 <___vfprintf_internal_r+0x1650>
  8065d0:	d9814c17 	ldw	r6,1328(sp)
  8065d4:	3080004c 	andi	r2,r6,1
  8065d8:	1005003a 	cmpeq	r2,r2,zero
  8065dc:	103bea1e 	bne	r2,zero,805588 <___vfprintf_internal_r+0x5f8>
  8065e0:	00800044 	movi	r2,1
  8065e4:	dc400d17 	ldw	r17,52(sp)
  8065e8:	18800115 	stw	r2,4(r3)
  8065ec:	d8814917 	ldw	r2,1316(sp)
  8065f0:	94800044 	addi	r18,r18,1
  8065f4:	8c400044 	addi	r17,r17,1
  8065f8:	18800015 	stw	r2,0(r3)
  8065fc:	008001c4 	movi	r2,7
  806600:	dc800e15 	stw	r18,56(sp)
  806604:	dc400d15 	stw	r17,52(sp)
  806608:	1440ca16 	blt	r2,r17,806934 <___vfprintf_internal_r+0x19a4>
  80660c:	18c00204 	addi	r3,r3,8
  806610:	0121c83a 	sub	r16,zero,r4
  806614:	0400500e 	bge	zero,r16,806758 <___vfprintf_internal_r+0x17c8>
  806618:	00800404 	movi	r2,16
  80661c:	1400800e 	bge	r2,r16,806820 <___vfprintf_internal_r+0x1890>
  806620:	1027883a 	mov	r19,r2
  806624:	07002074 	movhi	fp,129
  806628:	e7097484 	addi	fp,fp,9682
  80662c:	050001c4 	movi	r20,7
  806630:	00000306 	br	806640 <___vfprintf_internal_r+0x16b0>
  806634:	18c00204 	addi	r3,r3,8
  806638:	843ffc04 	addi	r16,r16,-16
  80663c:	9c007a0e 	bge	r19,r16,806828 <___vfprintf_internal_r+0x1898>
  806640:	94800404 	addi	r18,r18,16
  806644:	8c400044 	addi	r17,r17,1
  806648:	1f000015 	stw	fp,0(r3)
  80664c:	1cc00115 	stw	r19,4(r3)
  806650:	dc800e15 	stw	r18,56(sp)
  806654:	dc400d15 	stw	r17,52(sp)
  806658:	a47ff60e 	bge	r20,r17,806634 <___vfprintf_internal_r+0x16a4>
  80665c:	d9014f17 	ldw	r4,1340(sp)
  806660:	b00b883a 	mov	r5,r22
  806664:	d9800c04 	addi	r6,sp,48
  806668:	0804f380 	call	804f38 <__sprint_r>
  80666c:	103c001e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  806670:	dc800e17 	ldw	r18,56(sp)
  806674:	dc400d17 	ldw	r17,52(sp)
  806678:	d8c01904 	addi	r3,sp,100
  80667c:	003fee06 	br	806638 <___vfprintf_internal_r+0x16a8>
  806680:	3c000017 	ldw	r16,0(r7)
  806684:	0023883a 	mov	r17,zero
  806688:	39c00104 	addi	r7,r7,4
  80668c:	d9c14015 	stw	r7,1280(sp)
  806690:	003e8c06 	br	8060c4 <___vfprintf_internal_r+0x1134>
  806694:	d9401904 	addi	r5,sp,100
  806698:	dd000f04 	addi	r20,sp,60
  80669c:	d9414115 	stw	r5,1284(sp)
  8066a0:	d9814417 	ldw	r6,1296(sp)
  8066a4:	880a973a 	slli	r5,r17,28
  8066a8:	8004d13a 	srli	r2,r16,4
  8066ac:	810003cc 	andi	r4,r16,15
  8066b0:	3109883a 	add	r4,r6,r4
  8066b4:	2884b03a 	or	r2,r5,r2
  8066b8:	21400003 	ldbu	r5,0(r4)
  8066bc:	d9014117 	ldw	r4,1284(sp)
  8066c0:	8806d13a 	srli	r3,r17,4
  8066c4:	1021883a 	mov	r16,r2
  8066c8:	213fffc4 	addi	r4,r4,-1
  8066cc:	d9014115 	stw	r4,1284(sp)
  8066d0:	d9814117 	ldw	r6,1284(sp)
  8066d4:	10c8b03a 	or	r4,r2,r3
  8066d8:	1823883a 	mov	r17,r3
  8066dc:	31400005 	stb	r5,0(r6)
  8066e0:	203fef1e 	bne	r4,zero,8066a0 <___vfprintf_internal_r+0x1710>
  8066e4:	003cc506 	br	8059fc <___vfprintf_internal_r+0xa6c>
  8066e8:	00800c04 	movi	r2,48
  8066ec:	d98018c4 	addi	r6,sp,99
  8066f0:	dd000f04 	addi	r20,sp,60
  8066f4:	d88018c5 	stb	r2,99(sp)
  8066f8:	d9814115 	stw	r6,1284(sp)
  8066fc:	003cbf06 	br	8059fc <___vfprintf_internal_r+0xa6c>
  806700:	dc400d17 	ldw	r17,52(sp)
  806704:	07002074 	movhi	fp,129
  806708:	e7097884 	addi	fp,fp,9698
  80670c:	003bc106 	br	805614 <___vfprintf_internal_r+0x684>
  806710:	d9414c17 	ldw	r5,1328(sp)
  806714:	2880040c 	andi	r2,r5,16
  806718:	10007c26 	beq	r2,zero,80690c <___vfprintf_internal_r+0x197c>
  80671c:	38800017 	ldw	r2,0(r7)
  806720:	39c00104 	addi	r7,r7,4
  806724:	d9c14015 	stw	r7,1280(sp)
  806728:	d9814b17 	ldw	r6,1324(sp)
  80672c:	d9c14017 	ldw	r7,1280(sp)
  806730:	11800015 	stw	r6,0(r2)
  806734:	003a7206 	br	805100 <___vfprintf_internal_r+0x170>
  806738:	d9014f17 	ldw	r4,1340(sp)
  80673c:	b00b883a 	mov	r5,r22
  806740:	d9800c04 	addi	r6,sp,48
  806744:	0804f380 	call	804f38 <__sprint_r>
  806748:	103bc91e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  80674c:	dc800e17 	ldw	r18,56(sp)
  806750:	dc400d17 	ldw	r17,52(sp)
  806754:	d8c01904 	addi	r3,sp,100
  806758:	d9014717 	ldw	r4,1308(sp)
  80675c:	d9414117 	ldw	r5,1284(sp)
  806760:	8c400044 	addi	r17,r17,1
  806764:	9125883a 	add	r18,r18,r4
  806768:	008001c4 	movi	r2,7
  80676c:	19400015 	stw	r5,0(r3)
  806770:	19000115 	stw	r4,4(r3)
  806774:	dc800e15 	stw	r18,56(sp)
  806778:	dc400d15 	stw	r17,52(sp)
  80677c:	147ce816 	blt	r2,r17,805b20 <___vfprintf_internal_r+0xb90>
  806780:	18c00204 	addi	r3,r3,8
  806784:	003b8006 	br	805588 <___vfprintf_internal_r+0x5f8>
  806788:	38c00017 	ldw	r3,0(r7)
  80678c:	39000204 	addi	r4,r7,8
  806790:	d9014015 	stw	r4,1280(sp)
  806794:	d8c14215 	stw	r3,1288(sp)
  806798:	39c00117 	ldw	r7,4(r7)
  80679c:	d9c14315 	stw	r7,1292(sp)
  8067a0:	003e1a06 	br	80600c <___vfprintf_internal_r+0x107c>
  8067a4:	0005883a 	mov	r2,zero
  8067a8:	1409c83a 	sub	r4,r2,r16
  8067ac:	1105803a 	cmpltu	r2,r2,r4
  8067b0:	044bc83a 	sub	r5,zero,r17
  8067b4:	2885c83a 	sub	r2,r5,r2
  8067b8:	2021883a 	mov	r16,r4
  8067bc:	1023883a 	mov	r17,r2
  8067c0:	01000044 	movi	r4,1
  8067c4:	00800b44 	movi	r2,45
  8067c8:	d8800405 	stb	r2,16(sp)
  8067cc:	003c7e06 	br	8059c8 <___vfprintf_internal_r+0xa38>
  8067d0:	d9014f17 	ldw	r4,1340(sp)
  8067d4:	b00b883a 	mov	r5,r22
  8067d8:	d9800c04 	addi	r6,sp,48
  8067dc:	0804f380 	call	804f38 <__sprint_r>
  8067e0:	103ba31e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  8067e4:	dc800e17 	ldw	r18,56(sp)
  8067e8:	dc400d17 	ldw	r17,52(sp)
  8067ec:	d9000517 	ldw	r4,20(sp)
  8067f0:	d9401904 	addi	r5,sp,100
  8067f4:	003da106 	br	805e7c <___vfprintf_internal_r+0xeec>
  8067f8:	d9014f17 	ldw	r4,1340(sp)
  8067fc:	b00b883a 	mov	r5,r22
  806800:	d9800c04 	addi	r6,sp,48
  806804:	0804f380 	call	804f38 <__sprint_r>
  806808:	103b991e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  80680c:	dc800e17 	ldw	r18,56(sp)
  806810:	dc400d17 	ldw	r17,52(sp)
  806814:	d9000517 	ldw	r4,20(sp)
  806818:	d8c01904 	addi	r3,sp,100
  80681c:	003d8b06 	br	805e4c <___vfprintf_internal_r+0xebc>
  806820:	07002074 	movhi	fp,129
  806824:	e7097484 	addi	fp,fp,9682
  806828:	9425883a 	add	r18,r18,r16
  80682c:	8c400044 	addi	r17,r17,1
  806830:	008001c4 	movi	r2,7
  806834:	1f000015 	stw	fp,0(r3)
  806838:	1c000115 	stw	r16,4(r3)
  80683c:	dc800e15 	stw	r18,56(sp)
  806840:	dc400d15 	stw	r17,52(sp)
  806844:	147fbc16 	blt	r2,r17,806738 <___vfprintf_internal_r+0x17a8>
  806848:	18c00204 	addi	r3,r3,8
  80684c:	003fc206 	br	806758 <___vfprintf_internal_r+0x17c8>
  806850:	d9014f17 	ldw	r4,1340(sp)
  806854:	b00b883a 	mov	r5,r22
  806858:	d9800c04 	addi	r6,sp,48
  80685c:	0804f380 	call	804f38 <__sprint_r>
  806860:	103b831e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  806864:	dc800e17 	ldw	r18,56(sp)
  806868:	d9000517 	ldw	r4,20(sp)
  80686c:	d8c01904 	addi	r3,sp,100
  806870:	003cfc06 	br	805c64 <___vfprintf_internal_r+0xcd4>
  806874:	07002074 	movhi	fp,129
  806878:	e7097484 	addi	fp,fp,9682
  80687c:	003bde06 	br	8057f8 <___vfprintf_internal_r+0x868>
  806880:	00802074 	movhi	r2,129
  806884:	10896404 	addi	r2,r2,9616
  806888:	d8814115 	stw	r2,1284(sp)
  80688c:	003def06 	br	80604c <___vfprintf_internal_r+0x10bc>
  806890:	d9014217 	ldw	r4,1288(sp)
  806894:	d9414317 	ldw	r5,1292(sp)
  806898:	080bed40 	call	80bed4 <__isnand>
  80689c:	10003926 	beq	r2,zero,806984 <___vfprintf_internal_r+0x19f4>
  8068a0:	d9414d17 	ldw	r5,1332(sp)
  8068a4:	008011c4 	movi	r2,71
  8068a8:	1140ce16 	blt	r2,r5,806be4 <___vfprintf_internal_r+0x1c54>
  8068ac:	01802074 	movhi	r6,129
  8068b0:	31896504 	addi	r6,r6,9620
  8068b4:	d9814115 	stw	r6,1284(sp)
  8068b8:	003de406 	br	80604c <___vfprintf_internal_r+0x10bc>
  8068bc:	d9014c17 	ldw	r4,1328(sp)
  8068c0:	bdc00044 	addi	r23,r23,1
  8068c4:	b8c00007 	ldb	r3,0(r23)
  8068c8:	21000814 	ori	r4,r4,32
  8068cc:	d9014c15 	stw	r4,1328(sp)
  8068d0:	003a2e06 	br	80518c <___vfprintf_internal_r+0x1fc>
  8068d4:	dcc14515 	stw	r19,1300(sp)
  8068d8:	98011016 	blt	r19,zero,806d1c <___vfprintf_internal_r+0x1d8c>
  8068dc:	980f883a 	mov	r7,r19
  8068e0:	d8014615 	stw	zero,1304(sp)
  8068e4:	003c4c06 	br	805a18 <___vfprintf_internal_r+0xa88>
  8068e8:	d9014f17 	ldw	r4,1340(sp)
  8068ec:	b00b883a 	mov	r5,r22
  8068f0:	d9800c04 	addi	r6,sp,48
  8068f4:	0804f380 	call	804f38 <__sprint_r>
  8068f8:	103b5d1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  8068fc:	dc800e17 	ldw	r18,56(sp)
  806900:	d9000517 	ldw	r4,20(sp)
  806904:	d8c01904 	addi	r3,sp,100
  806908:	003f2e06 	br	8065c4 <___vfprintf_internal_r+0x1634>
  80690c:	d8c14c17 	ldw	r3,1328(sp)
  806910:	1880100c 	andi	r2,r3,64
  806914:	1000a026 	beq	r2,zero,806b98 <___vfprintf_internal_r+0x1c08>
  806918:	38800017 	ldw	r2,0(r7)
  80691c:	39c00104 	addi	r7,r7,4
  806920:	d9c14015 	stw	r7,1280(sp)
  806924:	d9014b17 	ldw	r4,1324(sp)
  806928:	d9c14017 	ldw	r7,1280(sp)
  80692c:	1100000d 	sth	r4,0(r2)
  806930:	0039f306 	br	805100 <___vfprintf_internal_r+0x170>
  806934:	d9014f17 	ldw	r4,1340(sp)
  806938:	b00b883a 	mov	r5,r22
  80693c:	d9800c04 	addi	r6,sp,48
  806940:	0804f380 	call	804f38 <__sprint_r>
  806944:	103b4a1e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  806948:	dc800e17 	ldw	r18,56(sp)
  80694c:	dc400d17 	ldw	r17,52(sp)
  806950:	d9000517 	ldw	r4,20(sp)
  806954:	d8c01904 	addi	r3,sp,100
  806958:	003f2d06 	br	806610 <___vfprintf_internal_r+0x1680>
  80695c:	00800184 	movi	r2,6
  806960:	14c09a36 	bltu	r2,r19,806bcc <___vfprintf_internal_r+0x1c3c>
  806964:	dcc14515 	stw	r19,1300(sp)
  806968:	9800010e 	bge	r19,zero,806970 <___vfprintf_internal_r+0x19e0>
  80696c:	d8014515 	stw	zero,1300(sp)
  806970:	00802074 	movhi	r2,129
  806974:	10896704 	addi	r2,r2,9628
  806978:	980f883a 	mov	r7,r19
  80697c:	d8814115 	stw	r2,1284(sp)
  806980:	003a7206 	br	80534c <___vfprintf_internal_r+0x3bc>
  806984:	00bfffc4 	movi	r2,-1
  806988:	9880e226 	beq	r19,r2,806d14 <___vfprintf_internal_r+0x1d84>
  80698c:	d9414d17 	ldw	r5,1332(sp)
  806990:	008019c4 	movi	r2,103
  806994:	2880dc26 	beq	r5,r2,806d08 <___vfprintf_internal_r+0x1d78>
  806998:	008011c4 	movi	r2,71
  80699c:	2880da26 	beq	r5,r2,806d08 <___vfprintf_internal_r+0x1d78>
  8069a0:	d9414c17 	ldw	r5,1328(sp)
  8069a4:	d9014317 	ldw	r4,1292(sp)
  8069a8:	d9814217 	ldw	r6,1288(sp)
  8069ac:	29404014 	ori	r5,r5,256
  8069b0:	d9414c15 	stw	r5,1328(sp)
  8069b4:	2000cc16 	blt	r4,zero,806ce8 <___vfprintf_internal_r+0x1d58>
  8069b8:	3021883a 	mov	r16,r6
  8069bc:	2023883a 	mov	r17,r4
  8069c0:	0039883a 	mov	fp,zero
  8069c4:	d9414d17 	ldw	r5,1332(sp)
  8069c8:	00801984 	movi	r2,102
  8069cc:	2880b726 	beq	r5,r2,806cac <___vfprintf_internal_r+0x1d1c>
  8069d0:	00801184 	movi	r2,70
  8069d4:	2880b526 	beq	r5,r2,806cac <___vfprintf_internal_r+0x1d1c>
  8069d8:	00801944 	movi	r2,101
  8069dc:	2880c826 	beq	r5,r2,806d00 <___vfprintf_internal_r+0x1d70>
  8069e0:	00801144 	movi	r2,69
  8069e4:	2880c626 	beq	r5,r2,806d00 <___vfprintf_internal_r+0x1d70>
  8069e8:	9829883a 	mov	r20,r19
  8069ec:	d9014f17 	ldw	r4,1340(sp)
  8069f0:	d8800504 	addi	r2,sp,20
  8069f4:	880d883a 	mov	r6,r17
  8069f8:	d8800115 	stw	r2,4(sp)
  8069fc:	d8c00604 	addi	r3,sp,24
  806a00:	d8800704 	addi	r2,sp,28
  806a04:	800b883a 	mov	r5,r16
  806a08:	01c00084 	movi	r7,2
  806a0c:	d8c00215 	stw	r3,8(sp)
  806a10:	d8800315 	stw	r2,12(sp)
  806a14:	dd000015 	stw	r20,0(sp)
  806a18:	08073ac0 	call	8073ac <_dtoa_r>
  806a1c:	d9814d17 	ldw	r6,1332(sp)
  806a20:	d8814115 	stw	r2,1284(sp)
  806a24:	008019c4 	movi	r2,103
  806a28:	30809526 	beq	r6,r2,806c80 <___vfprintf_internal_r+0x1cf0>
  806a2c:	d8c14d17 	ldw	r3,1332(sp)
  806a30:	008011c4 	movi	r2,71
  806a34:	18809226 	beq	r3,r2,806c80 <___vfprintf_internal_r+0x1cf0>
  806a38:	d9414117 	ldw	r5,1284(sp)
  806a3c:	d9814d17 	ldw	r6,1332(sp)
  806a40:	00801984 	movi	r2,102
  806a44:	2d25883a 	add	r18,r5,r20
  806a48:	30808626 	beq	r6,r2,806c64 <___vfprintf_internal_r+0x1cd4>
  806a4c:	00801184 	movi	r2,70
  806a50:	30808426 	beq	r6,r2,806c64 <___vfprintf_internal_r+0x1cd4>
  806a54:	000d883a 	mov	r6,zero
  806a58:	000f883a 	mov	r7,zero
  806a5c:	880b883a 	mov	r5,r17
  806a60:	8009883a 	mov	r4,r16
  806a64:	080d99c0 	call	80d99c <__eqdf2>
  806a68:	1000751e 	bne	r2,zero,806c40 <___vfprintf_internal_r+0x1cb0>
  806a6c:	9005883a 	mov	r2,r18
  806a70:	dc800715 	stw	r18,28(sp)
  806a74:	d9014117 	ldw	r4,1284(sp)
  806a78:	d9414d17 	ldw	r5,1332(sp)
  806a7c:	00c019c4 	movi	r3,103
  806a80:	1125c83a 	sub	r18,r2,r4
  806a84:	28c06826 	beq	r5,r3,806c28 <___vfprintf_internal_r+0x1c98>
  806a88:	008011c4 	movi	r2,71
  806a8c:	28806626 	beq	r5,r2,806c28 <___vfprintf_internal_r+0x1c98>
  806a90:	d9000517 	ldw	r4,20(sp)
  806a94:	d8c14d17 	ldw	r3,1332(sp)
  806a98:	00801944 	movi	r2,101
  806a9c:	10c05516 	blt	r2,r3,806bf4 <___vfprintf_internal_r+0x1c64>
  806aa0:	213fffc4 	addi	r4,r4,-1
  806aa4:	d9000515 	stw	r4,20(sp)
  806aa8:	d8c00805 	stb	r3,32(sp)
  806aac:	2021883a 	mov	r16,r4
  806ab0:	2000c116 	blt	r4,zero,806db8 <___vfprintf_internal_r+0x1e28>
  806ab4:	00800ac4 	movi	r2,43
  806ab8:	d8800845 	stb	r2,33(sp)
  806abc:	00800244 	movi	r2,9
  806ac0:	1400af0e 	bge	r2,r16,806d80 <___vfprintf_internal_r+0x1df0>
  806ac4:	1027883a 	mov	r19,r2
  806ac8:	dc400b84 	addi	r17,sp,46
  806acc:	8009883a 	mov	r4,r16
  806ad0:	01400284 	movi	r5,10
  806ad4:	0803e480 	call	803e48 <__modsi3>
  806ad8:	10800c04 	addi	r2,r2,48
  806adc:	8c7fffc4 	addi	r17,r17,-1
  806ae0:	8009883a 	mov	r4,r16
  806ae4:	01400284 	movi	r5,10
  806ae8:	88800005 	stb	r2,0(r17)
  806aec:	0803de80 	call	803de8 <__divsi3>
  806af0:	1021883a 	mov	r16,r2
  806af4:	98bff516 	blt	r19,r2,806acc <___vfprintf_internal_r+0x1b3c>
  806af8:	10c00c04 	addi	r3,r2,48
  806afc:	d88009c4 	addi	r2,sp,39
  806b00:	108001c4 	addi	r2,r2,7
  806b04:	897fffc4 	addi	r5,r17,-1
  806b08:	88ffffc5 	stb	r3,-1(r17)
  806b0c:	2880a72e 	bgeu	r5,r2,806dac <___vfprintf_internal_r+0x1e1c>
  806b10:	1009883a 	mov	r4,r2
  806b14:	d9800804 	addi	r6,sp,32
  806b18:	d8c00884 	addi	r3,sp,34
  806b1c:	28800003 	ldbu	r2,0(r5)
  806b20:	29400044 	addi	r5,r5,1
  806b24:	18800005 	stb	r2,0(r3)
  806b28:	18c00044 	addi	r3,r3,1
  806b2c:	293ffb36 	bltu	r5,r4,806b1c <___vfprintf_internal_r+0x1b8c>
  806b30:	1987c83a 	sub	r3,r3,r6
  806b34:	00800044 	movi	r2,1
  806b38:	d8c14815 	stw	r3,1312(sp)
  806b3c:	90cf883a 	add	r7,r18,r3
  806b40:	1480960e 	bge	r2,r18,806d9c <___vfprintf_internal_r+0x1e0c>
  806b44:	39c00044 	addi	r7,r7,1
  806b48:	d9c14515 	stw	r7,1300(sp)
  806b4c:	38003416 	blt	r7,zero,806c20 <___vfprintf_internal_r+0x1c90>
  806b50:	e0803fcc 	andi	r2,fp,255
  806b54:	1080201c 	xori	r2,r2,128
  806b58:	10bfe004 	addi	r2,r2,-128
  806b5c:	10004e26 	beq	r2,zero,806c98 <___vfprintf_internal_r+0x1d08>
  806b60:	00800b44 	movi	r2,45
  806b64:	dc814715 	stw	r18,1308(sp)
  806b68:	d8014615 	stw	zero,1304(sp)
  806b6c:	d8800405 	stb	r2,16(sp)
  806b70:	003bab06 	br	805a20 <___vfprintf_internal_r+0xa90>
  806b74:	00800b44 	movi	r2,45
  806b78:	d8800405 	stb	r2,16(sp)
  806b7c:	003d2d06 	br	806034 <___vfprintf_internal_r+0x10a4>
  806b80:	d9014f17 	ldw	r4,1340(sp)
  806b84:	b00b883a 	mov	r5,r22
  806b88:	d9800c04 	addi	r6,sp,48
  806b8c:	0804f380 	call	804f38 <__sprint_r>
  806b90:	103ab71e 	bne	r2,zero,805670 <___vfprintf_internal_r+0x6e0>
  806b94:	003ab506 	br	80566c <___vfprintf_internal_r+0x6dc>
  806b98:	38800017 	ldw	r2,0(r7)
  806b9c:	39c00104 	addi	r7,r7,4
  806ba0:	d9c14015 	stw	r7,1280(sp)
  806ba4:	d9414b17 	ldw	r5,1324(sp)
  806ba8:	d9c14017 	ldw	r7,1280(sp)
  806bac:	11400015 	stw	r5,0(r2)
  806bb0:	00395306 	br	805100 <___vfprintf_internal_r+0x170>
  806bb4:	980f883a 	mov	r7,r19
  806bb8:	dcc14515 	stw	r19,1300(sp)
  806bbc:	d8014615 	stw	zero,1304(sp)
  806bc0:	003b9506 	br	805a18 <___vfprintf_internal_r+0xa88>
  806bc4:	0027883a 	mov	r19,zero
  806bc8:	00397206 	br	805194 <___vfprintf_internal_r+0x204>
  806bcc:	00c02074 	movhi	r3,129
  806bd0:	18c96704 	addi	r3,r3,9628
  806bd4:	100f883a 	mov	r7,r2
  806bd8:	d8814515 	stw	r2,1300(sp)
  806bdc:	d8c14115 	stw	r3,1284(sp)
  806be0:	0039da06 	br	80534c <___vfprintf_internal_r+0x3bc>
  806be4:	00802074 	movhi	r2,129
  806be8:	10896604 	addi	r2,r2,9624
  806bec:	d8814115 	stw	r2,1284(sp)
  806bf0:	003d1606 	br	80604c <___vfprintf_internal_r+0x10bc>
  806bf4:	d9414d17 	ldw	r5,1332(sp)
  806bf8:	00801984 	movi	r2,102
  806bfc:	28804926 	beq	r5,r2,806d24 <___vfprintf_internal_r+0x1d94>
  806c00:	200f883a 	mov	r7,r4
  806c04:	24805716 	blt	r4,r18,806d64 <___vfprintf_internal_r+0x1dd4>
  806c08:	d9414c17 	ldw	r5,1328(sp)
  806c0c:	2880004c 	andi	r2,r5,1
  806c10:	10000126 	beq	r2,zero,806c18 <___vfprintf_internal_r+0x1c88>
  806c14:	21c00044 	addi	r7,r4,1
  806c18:	d9c14515 	stw	r7,1300(sp)
  806c1c:	383fcc0e 	bge	r7,zero,806b50 <___vfprintf_internal_r+0x1bc0>
  806c20:	d8014515 	stw	zero,1300(sp)
  806c24:	003fca06 	br	806b50 <___vfprintf_internal_r+0x1bc0>
  806c28:	d9000517 	ldw	r4,20(sp)
  806c2c:	00bfff04 	movi	r2,-4
  806c30:	1100480e 	bge	r2,r4,806d54 <___vfprintf_internal_r+0x1dc4>
  806c34:	99004716 	blt	r19,r4,806d54 <___vfprintf_internal_r+0x1dc4>
  806c38:	d8c14d15 	stw	r3,1332(sp)
  806c3c:	003ff006 	br	806c00 <___vfprintf_internal_r+0x1c70>
  806c40:	d8800717 	ldw	r2,28(sp)
  806c44:	14bf8b2e 	bgeu	r2,r18,806a74 <___vfprintf_internal_r+0x1ae4>
  806c48:	9007883a 	mov	r3,r18
  806c4c:	01000c04 	movi	r4,48
  806c50:	11000005 	stb	r4,0(r2)
  806c54:	10800044 	addi	r2,r2,1
  806c58:	d8800715 	stw	r2,28(sp)
  806c5c:	18bffc1e 	bne	r3,r2,806c50 <___vfprintf_internal_r+0x1cc0>
  806c60:	003f8406 	br	806a74 <___vfprintf_internal_r+0x1ae4>
  806c64:	d8814117 	ldw	r2,1284(sp)
  806c68:	10c00007 	ldb	r3,0(r2)
  806c6c:	00800c04 	movi	r2,48
  806c70:	18805b26 	beq	r3,r2,806de0 <___vfprintf_internal_r+0x1e50>
  806c74:	d9000517 	ldw	r4,20(sp)
  806c78:	9125883a 	add	r18,r18,r4
  806c7c:	003f7506 	br	806a54 <___vfprintf_internal_r+0x1ac4>
  806c80:	d9014c17 	ldw	r4,1328(sp)
  806c84:	2080004c 	andi	r2,r4,1
  806c88:	1005003a 	cmpeq	r2,r2,zero
  806c8c:	103f6a26 	beq	r2,zero,806a38 <___vfprintf_internal_r+0x1aa8>
  806c90:	d8800717 	ldw	r2,28(sp)
  806c94:	003f7706 	br	806a74 <___vfprintf_internal_r+0x1ae4>
  806c98:	d9c14515 	stw	r7,1300(sp)
  806c9c:	38004d16 	blt	r7,zero,806dd4 <___vfprintf_internal_r+0x1e44>
  806ca0:	dc814715 	stw	r18,1308(sp)
  806ca4:	d8014615 	stw	zero,1304(sp)
  806ca8:	003b5b06 	br	805a18 <___vfprintf_internal_r+0xa88>
  806cac:	d9014f17 	ldw	r4,1340(sp)
  806cb0:	d8800504 	addi	r2,sp,20
  806cb4:	d8800115 	stw	r2,4(sp)
  806cb8:	d8c00604 	addi	r3,sp,24
  806cbc:	d8800704 	addi	r2,sp,28
  806cc0:	800b883a 	mov	r5,r16
  806cc4:	880d883a 	mov	r6,r17
  806cc8:	01c000c4 	movi	r7,3
  806ccc:	d8c00215 	stw	r3,8(sp)
  806cd0:	d8800315 	stw	r2,12(sp)
  806cd4:	dcc00015 	stw	r19,0(sp)
  806cd8:	9829883a 	mov	r20,r19
  806cdc:	08073ac0 	call	8073ac <_dtoa_r>
  806ce0:	d8814115 	stw	r2,1284(sp)
  806ce4:	003f5106 	br	806a2c <___vfprintf_internal_r+0x1a9c>
  806ce8:	d8c14217 	ldw	r3,1288(sp)
  806cec:	d9014317 	ldw	r4,1292(sp)
  806cf0:	07000b44 	movi	fp,45
  806cf4:	1821883a 	mov	r16,r3
  806cf8:	2460003c 	xorhi	r17,r4,32768
  806cfc:	003f3106 	br	8069c4 <___vfprintf_internal_r+0x1a34>
  806d00:	9d000044 	addi	r20,r19,1
  806d04:	003f3906 	br	8069ec <___vfprintf_internal_r+0x1a5c>
  806d08:	983f251e 	bne	r19,zero,8069a0 <___vfprintf_internal_r+0x1a10>
  806d0c:	04c00044 	movi	r19,1
  806d10:	003f2306 	br	8069a0 <___vfprintf_internal_r+0x1a10>
  806d14:	04c00184 	movi	r19,6
  806d18:	003f2106 	br	8069a0 <___vfprintf_internal_r+0x1a10>
  806d1c:	d8014515 	stw	zero,1300(sp)
  806d20:	003eee06 	br	8068dc <___vfprintf_internal_r+0x194c>
  806d24:	200f883a 	mov	r7,r4
  806d28:	0100370e 	bge	zero,r4,806e08 <___vfprintf_internal_r+0x1e78>
  806d2c:	9800031e 	bne	r19,zero,806d3c <___vfprintf_internal_r+0x1dac>
  806d30:	d9814c17 	ldw	r6,1328(sp)
  806d34:	3080004c 	andi	r2,r6,1
  806d38:	103fb726 	beq	r2,zero,806c18 <___vfprintf_internal_r+0x1c88>
  806d3c:	20800044 	addi	r2,r4,1
  806d40:	98a7883a 	add	r19,r19,r2
  806d44:	dcc14515 	stw	r19,1300(sp)
  806d48:	980f883a 	mov	r7,r19
  806d4c:	983f800e 	bge	r19,zero,806b50 <___vfprintf_internal_r+0x1bc0>
  806d50:	003fb306 	br	806c20 <___vfprintf_internal_r+0x1c90>
  806d54:	d9814d17 	ldw	r6,1332(sp)
  806d58:	31bfff84 	addi	r6,r6,-2
  806d5c:	d9814d15 	stw	r6,1332(sp)
  806d60:	003f4c06 	br	806a94 <___vfprintf_internal_r+0x1b04>
  806d64:	0100180e 	bge	zero,r4,806dc8 <___vfprintf_internal_r+0x1e38>
  806d68:	00800044 	movi	r2,1
  806d6c:	1485883a 	add	r2,r2,r18
  806d70:	d8814515 	stw	r2,1300(sp)
  806d74:	100f883a 	mov	r7,r2
  806d78:	103f750e 	bge	r2,zero,806b50 <___vfprintf_internal_r+0x1bc0>
  806d7c:	003fa806 	br	806c20 <___vfprintf_internal_r+0x1c90>
  806d80:	80c00c04 	addi	r3,r16,48
  806d84:	00800c04 	movi	r2,48
  806d88:	d8c008c5 	stb	r3,35(sp)
  806d8c:	d9800804 	addi	r6,sp,32
  806d90:	d8c00904 	addi	r3,sp,36
  806d94:	d8800885 	stb	r2,34(sp)
  806d98:	003f6506 	br	806b30 <___vfprintf_internal_r+0x1ba0>
  806d9c:	d9014c17 	ldw	r4,1328(sp)
  806da0:	2084703a 	and	r2,r4,r2
  806da4:	103f9c26 	beq	r2,zero,806c18 <___vfprintf_internal_r+0x1c88>
  806da8:	003f6606 	br	806b44 <___vfprintf_internal_r+0x1bb4>
  806dac:	d9800804 	addi	r6,sp,32
  806db0:	d8c00884 	addi	r3,sp,34
  806db4:	003f5e06 	br	806b30 <___vfprintf_internal_r+0x1ba0>
  806db8:	00800b44 	movi	r2,45
  806dbc:	0121c83a 	sub	r16,zero,r4
  806dc0:	d8800845 	stb	r2,33(sp)
  806dc4:	003f3d06 	br	806abc <___vfprintf_internal_r+0x1b2c>
  806dc8:	00800084 	movi	r2,2
  806dcc:	1105c83a 	sub	r2,r2,r4
  806dd0:	003fe606 	br	806d6c <___vfprintf_internal_r+0x1ddc>
  806dd4:	d8014515 	stw	zero,1300(sp)
  806dd8:	dc814715 	stw	r18,1308(sp)
  806ddc:	003fb106 	br	806ca4 <___vfprintf_internal_r+0x1d14>
  806de0:	000d883a 	mov	r6,zero
  806de4:	000f883a 	mov	r7,zero
  806de8:	8009883a 	mov	r4,r16
  806dec:	880b883a 	mov	r5,r17
  806df0:	080da240 	call	80da24 <__nedf2>
  806df4:	103f9f26 	beq	r2,zero,806c74 <___vfprintf_internal_r+0x1ce4>
  806df8:	00800044 	movi	r2,1
  806dfc:	1509c83a 	sub	r4,r2,r20
  806e00:	d9000515 	stw	r4,20(sp)
  806e04:	003f9b06 	br	806c74 <___vfprintf_internal_r+0x1ce4>
  806e08:	98000d1e 	bne	r19,zero,806e40 <___vfprintf_internal_r+0x1eb0>
  806e0c:	d8c14c17 	ldw	r3,1328(sp)
  806e10:	1880004c 	andi	r2,r3,1
  806e14:	10000a1e 	bne	r2,zero,806e40 <___vfprintf_internal_r+0x1eb0>
  806e18:	01000044 	movi	r4,1
  806e1c:	200f883a 	mov	r7,r4
  806e20:	d9014515 	stw	r4,1300(sp)
  806e24:	003f4a06 	br	806b50 <___vfprintf_internal_r+0x1bc0>
  806e28:	3cc00017 	ldw	r19,0(r7)
  806e2c:	39c00104 	addi	r7,r7,4
  806e30:	983d0e0e 	bge	r19,zero,80626c <___vfprintf_internal_r+0x12dc>
  806e34:	b8c00007 	ldb	r3,0(r23)
  806e38:	04ffffc4 	movi	r19,-1
  806e3c:	0038d306 	br	80518c <___vfprintf_internal_r+0x1fc>
  806e40:	9cc00084 	addi	r19,r19,2
  806e44:	dcc14515 	stw	r19,1300(sp)
  806e48:	980f883a 	mov	r7,r19
  806e4c:	983f400e 	bge	r19,zero,806b50 <___vfprintf_internal_r+0x1bc0>
  806e50:	003f7306 	br	806c20 <___vfprintf_internal_r+0x1c90>

00806e54 <__vfprintf_internal>:
  806e54:	00802074 	movhi	r2,129
  806e58:	1091ac04 	addi	r2,r2,18096
  806e5c:	2013883a 	mov	r9,r4
  806e60:	11000017 	ldw	r4,0(r2)
  806e64:	2805883a 	mov	r2,r5
  806e68:	300f883a 	mov	r7,r6
  806e6c:	480b883a 	mov	r5,r9
  806e70:	100d883a 	mov	r6,r2
  806e74:	0804f901 	jmpi	804f90 <___vfprintf_internal_r>

00806e78 <__swsetup_r>:
  806e78:	00802074 	movhi	r2,129
  806e7c:	1091ac04 	addi	r2,r2,18096
  806e80:	10c00017 	ldw	r3,0(r2)
  806e84:	defffd04 	addi	sp,sp,-12
  806e88:	dc400115 	stw	r17,4(sp)
  806e8c:	dc000015 	stw	r16,0(sp)
  806e90:	dfc00215 	stw	ra,8(sp)
  806e94:	2023883a 	mov	r17,r4
  806e98:	2821883a 	mov	r16,r5
  806e9c:	18000226 	beq	r3,zero,806ea8 <__swsetup_r+0x30>
  806ea0:	18800e17 	ldw	r2,56(r3)
  806ea4:	10001f26 	beq	r2,zero,806f24 <__swsetup_r+0xac>
  806ea8:	8100030b 	ldhu	r4,12(r16)
  806eac:	2080020c 	andi	r2,r4,8
  806eb0:	10002826 	beq	r2,zero,806f54 <__swsetup_r+0xdc>
  806eb4:	81400417 	ldw	r5,16(r16)
  806eb8:	28001d26 	beq	r5,zero,806f30 <__swsetup_r+0xb8>
  806ebc:	2080004c 	andi	r2,r4,1
  806ec0:	1005003a 	cmpeq	r2,r2,zero
  806ec4:	10000b26 	beq	r2,zero,806ef4 <__swsetup_r+0x7c>
  806ec8:	2080008c 	andi	r2,r4,2
  806ecc:	10001226 	beq	r2,zero,806f18 <__swsetup_r+0xa0>
  806ed0:	0005883a 	mov	r2,zero
  806ed4:	80800215 	stw	r2,8(r16)
  806ed8:	28000b26 	beq	r5,zero,806f08 <__swsetup_r+0x90>
  806edc:	0005883a 	mov	r2,zero
  806ee0:	dfc00217 	ldw	ra,8(sp)
  806ee4:	dc400117 	ldw	r17,4(sp)
  806ee8:	dc000017 	ldw	r16,0(sp)
  806eec:	dec00304 	addi	sp,sp,12
  806ef0:	f800283a 	ret
  806ef4:	80800517 	ldw	r2,20(r16)
  806ef8:	80000215 	stw	zero,8(r16)
  806efc:	0085c83a 	sub	r2,zero,r2
  806f00:	80800615 	stw	r2,24(r16)
  806f04:	283ff51e 	bne	r5,zero,806edc <__swsetup_r+0x64>
  806f08:	2080200c 	andi	r2,r4,128
  806f0c:	103ff326 	beq	r2,zero,806edc <__swsetup_r+0x64>
  806f10:	00bfffc4 	movi	r2,-1
  806f14:	003ff206 	br	806ee0 <__swsetup_r+0x68>
  806f18:	80800517 	ldw	r2,20(r16)
  806f1c:	80800215 	stw	r2,8(r16)
  806f20:	003fed06 	br	806ed8 <__swsetup_r+0x60>
  806f24:	1809883a 	mov	r4,r3
  806f28:	0808bf80 	call	808bf8 <__sinit>
  806f2c:	003fde06 	br	806ea8 <__swsetup_r+0x30>
  806f30:	20c0a00c 	andi	r3,r4,640
  806f34:	00808004 	movi	r2,512
  806f38:	18bfe026 	beq	r3,r2,806ebc <__swsetup_r+0x44>
  806f3c:	8809883a 	mov	r4,r17
  806f40:	800b883a 	mov	r5,r16
  806f44:	0809af00 	call	809af0 <__smakebuf_r>
  806f48:	8100030b 	ldhu	r4,12(r16)
  806f4c:	81400417 	ldw	r5,16(r16)
  806f50:	003fda06 	br	806ebc <__swsetup_r+0x44>
  806f54:	2080040c 	andi	r2,r4,16
  806f58:	103fed26 	beq	r2,zero,806f10 <__swsetup_r+0x98>
  806f5c:	2080010c 	andi	r2,r4,4
  806f60:	10001226 	beq	r2,zero,806fac <__swsetup_r+0x134>
  806f64:	81400c17 	ldw	r5,48(r16)
  806f68:	28000526 	beq	r5,zero,806f80 <__swsetup_r+0x108>
  806f6c:	80801004 	addi	r2,r16,64
  806f70:	28800226 	beq	r5,r2,806f7c <__swsetup_r+0x104>
  806f74:	8809883a 	mov	r4,r17
  806f78:	08090fc0 	call	8090fc <_free_r>
  806f7c:	80000c15 	stw	zero,48(r16)
  806f80:	8080030b 	ldhu	r2,12(r16)
  806f84:	81400417 	ldw	r5,16(r16)
  806f88:	80000115 	stw	zero,4(r16)
  806f8c:	10bff6cc 	andi	r2,r2,65499
  806f90:	8080030d 	sth	r2,12(r16)
  806f94:	81400015 	stw	r5,0(r16)
  806f98:	8080030b 	ldhu	r2,12(r16)
  806f9c:	10800214 	ori	r2,r2,8
  806fa0:	113fffcc 	andi	r4,r2,65535
  806fa4:	8080030d 	sth	r2,12(r16)
  806fa8:	003fc306 	br	806eb8 <__swsetup_r+0x40>
  806fac:	81400417 	ldw	r5,16(r16)
  806fb0:	003ff906 	br	806f98 <__swsetup_r+0x120>

00806fb4 <register_fini>:
  806fb4:	f800283a 	ret

00806fb8 <__call_exitprocs>:
  806fb8:	00802074 	movhi	r2,129
  806fbc:	1091ad04 	addi	r2,r2,18100
  806fc0:	10800017 	ldw	r2,0(r2)
  806fc4:	defff304 	addi	sp,sp,-52
  806fc8:	df000b15 	stw	fp,44(sp)
  806fcc:	d8800115 	stw	r2,4(sp)
  806fd0:	00800034 	movhi	r2,0
  806fd4:	10800004 	addi	r2,r2,0
  806fd8:	1005003a 	cmpeq	r2,r2,zero
  806fdc:	d8800215 	stw	r2,8(sp)
  806fe0:	d8800117 	ldw	r2,4(sp)
  806fe4:	dd400815 	stw	r21,32(sp)
  806fe8:	dd000715 	stw	r20,28(sp)
  806fec:	10805204 	addi	r2,r2,328
  806ff0:	dfc00c15 	stw	ra,48(sp)
  806ff4:	ddc00a15 	stw	r23,40(sp)
  806ff8:	dd800915 	stw	r22,36(sp)
  806ffc:	dcc00615 	stw	r19,24(sp)
  807000:	dc800515 	stw	r18,20(sp)
  807004:	dc400415 	stw	r17,16(sp)
  807008:	dc000315 	stw	r16,12(sp)
  80700c:	282b883a 	mov	r21,r5
  807010:	2039883a 	mov	fp,r4
  807014:	d8800015 	stw	r2,0(sp)
  807018:	2829003a 	cmpeq	r20,r5,zero
  80701c:	d8800117 	ldw	r2,4(sp)
  807020:	14405217 	ldw	r17,328(r2)
  807024:	88001026 	beq	r17,zero,807068 <__call_exitprocs+0xb0>
  807028:	ddc00017 	ldw	r23,0(sp)
  80702c:	88800117 	ldw	r2,4(r17)
  807030:	8c802204 	addi	r18,r17,136
  807034:	143fffc4 	addi	r16,r2,-1
  807038:	80000916 	blt	r16,zero,807060 <__call_exitprocs+0xa8>
  80703c:	05bfffc4 	movi	r22,-1
  807040:	a000151e 	bne	r20,zero,807098 <__call_exitprocs+0xe0>
  807044:	8409883a 	add	r4,r16,r16
  807048:	2105883a 	add	r2,r4,r4
  80704c:	1485883a 	add	r2,r2,r18
  807050:	10c02017 	ldw	r3,128(r2)
  807054:	a8c01126 	beq	r21,r3,80709c <__call_exitprocs+0xe4>
  807058:	843fffc4 	addi	r16,r16,-1
  80705c:	85bff81e 	bne	r16,r22,807040 <__call_exitprocs+0x88>
  807060:	d8800217 	ldw	r2,8(sp)
  807064:	10003126 	beq	r2,zero,80712c <__call_exitprocs+0x174>
  807068:	dfc00c17 	ldw	ra,48(sp)
  80706c:	df000b17 	ldw	fp,44(sp)
  807070:	ddc00a17 	ldw	r23,40(sp)
  807074:	dd800917 	ldw	r22,36(sp)
  807078:	dd400817 	ldw	r21,32(sp)
  80707c:	dd000717 	ldw	r20,28(sp)
  807080:	dcc00617 	ldw	r19,24(sp)
  807084:	dc800517 	ldw	r18,20(sp)
  807088:	dc400417 	ldw	r17,16(sp)
  80708c:	dc000317 	ldw	r16,12(sp)
  807090:	dec00d04 	addi	sp,sp,52
  807094:	f800283a 	ret
  807098:	8409883a 	add	r4,r16,r16
  80709c:	88c00117 	ldw	r3,4(r17)
  8070a0:	2105883a 	add	r2,r4,r4
  8070a4:	1445883a 	add	r2,r2,r17
  8070a8:	18ffffc4 	addi	r3,r3,-1
  8070ac:	11800217 	ldw	r6,8(r2)
  8070b0:	1c001526 	beq	r3,r16,807108 <__call_exitprocs+0x150>
  8070b4:	10000215 	stw	zero,8(r2)
  8070b8:	303fe726 	beq	r6,zero,807058 <__call_exitprocs+0xa0>
  8070bc:	00c00044 	movi	r3,1
  8070c0:	1c06983a 	sll	r3,r3,r16
  8070c4:	90804017 	ldw	r2,256(r18)
  8070c8:	8cc00117 	ldw	r19,4(r17)
  8070cc:	1884703a 	and	r2,r3,r2
  8070d0:	10001426 	beq	r2,zero,807124 <__call_exitprocs+0x16c>
  8070d4:	90804117 	ldw	r2,260(r18)
  8070d8:	1884703a 	and	r2,r3,r2
  8070dc:	10000c1e 	bne	r2,zero,807110 <__call_exitprocs+0x158>
  8070e0:	2105883a 	add	r2,r4,r4
  8070e4:	1485883a 	add	r2,r2,r18
  8070e8:	11400017 	ldw	r5,0(r2)
  8070ec:	e009883a 	mov	r4,fp
  8070f0:	303ee83a 	callr	r6
  8070f4:	88800117 	ldw	r2,4(r17)
  8070f8:	98bfc81e 	bne	r19,r2,80701c <__call_exitprocs+0x64>
  8070fc:	b8800017 	ldw	r2,0(r23)
  807100:	147fd526 	beq	r2,r17,807058 <__call_exitprocs+0xa0>
  807104:	003fc506 	br	80701c <__call_exitprocs+0x64>
  807108:	8c000115 	stw	r16,4(r17)
  80710c:	003fea06 	br	8070b8 <__call_exitprocs+0x100>
  807110:	2105883a 	add	r2,r4,r4
  807114:	1485883a 	add	r2,r2,r18
  807118:	11000017 	ldw	r4,0(r2)
  80711c:	303ee83a 	callr	r6
  807120:	003ff406 	br	8070f4 <__call_exitprocs+0x13c>
  807124:	303ee83a 	callr	r6
  807128:	003ff206 	br	8070f4 <__call_exitprocs+0x13c>
  80712c:	88800117 	ldw	r2,4(r17)
  807130:	1000081e 	bne	r2,zero,807154 <__call_exitprocs+0x19c>
  807134:	89000017 	ldw	r4,0(r17)
  807138:	20000726 	beq	r4,zero,807158 <__call_exitprocs+0x1a0>
  80713c:	b9000015 	stw	r4,0(r23)
  807140:	8809883a 	mov	r4,r17
  807144:	00000000 	call	0 <__reset-0x800000>
  807148:	bc400017 	ldw	r17,0(r23)
  80714c:	883fb71e 	bne	r17,zero,80702c <__call_exitprocs+0x74>
  807150:	003fc506 	br	807068 <__call_exitprocs+0xb0>
  807154:	89000017 	ldw	r4,0(r17)
  807158:	882f883a 	mov	r23,r17
  80715c:	2023883a 	mov	r17,r4
  807160:	883fb21e 	bne	r17,zero,80702c <__call_exitprocs+0x74>
  807164:	003fc006 	br	807068 <__call_exitprocs+0xb0>

00807168 <quorem>:
  807168:	28c00417 	ldw	r3,16(r5)
  80716c:	20800417 	ldw	r2,16(r4)
  807170:	defff104 	addi	sp,sp,-60
  807174:	dfc00e15 	stw	ra,56(sp)
  807178:	df000d15 	stw	fp,52(sp)
  80717c:	ddc00c15 	stw	r23,48(sp)
  807180:	dd800b15 	stw	r22,44(sp)
  807184:	dd400a15 	stw	r21,40(sp)
  807188:	dd000915 	stw	r20,36(sp)
  80718c:	dcc00815 	stw	r19,32(sp)
  807190:	dc800715 	stw	r18,28(sp)
  807194:	dc400615 	stw	r17,24(sp)
  807198:	dc000515 	stw	r16,20(sp)
  80719c:	d9000315 	stw	r4,12(sp)
  8071a0:	d9400415 	stw	r5,16(sp)
  8071a4:	10c07f16 	blt	r2,r3,8073a4 <quorem+0x23c>
  8071a8:	1d3fffc4 	addi	r20,r3,-1
  8071ac:	d8c00417 	ldw	r3,16(sp)
  8071b0:	d9000317 	ldw	r4,12(sp)
  8071b4:	a505883a 	add	r2,r20,r20
  8071b8:	1085883a 	add	r2,r2,r2
  8071bc:	1cc00504 	addi	r19,r3,20
  8071c0:	25c00504 	addi	r23,r4,20
  8071c4:	98ad883a 	add	r22,r19,r2
  8071c8:	15c7883a 	add	r3,r2,r23
  8071cc:	b1400017 	ldw	r5,0(r22)
  8071d0:	19000017 	ldw	r4,0(r3)
  8071d4:	d8c00015 	stw	r3,0(sp)
  8071d8:	29400044 	addi	r5,r5,1
  8071dc:	d9000215 	stw	r4,8(sp)
  8071e0:	0803ea80 	call	803ea8 <__udivsi3>
  8071e4:	1039883a 	mov	fp,r2
  8071e8:	10003d1e 	bne	r2,zero,8072e0 <quorem+0x178>
  8071ec:	d9400417 	ldw	r5,16(sp)
  8071f0:	d9000317 	ldw	r4,12(sp)
  8071f4:	080a7840 	call	80a784 <__mcmp>
  8071f8:	10002c16 	blt	r2,zero,8072ac <quorem+0x144>
  8071fc:	e7000044 	addi	fp,fp,1
  807200:	b80f883a 	mov	r7,r23
  807204:	0011883a 	mov	r8,zero
  807208:	0009883a 	mov	r4,zero
  80720c:	99400017 	ldw	r5,0(r19)
  807210:	38c00017 	ldw	r3,0(r7)
  807214:	9cc00104 	addi	r19,r19,4
  807218:	28bfffcc 	andi	r2,r5,65535
  80721c:	2085883a 	add	r2,r4,r2
  807220:	11bfffcc 	andi	r6,r2,65535
  807224:	193fffcc 	andi	r4,r3,65535
  807228:	1004d43a 	srli	r2,r2,16
  80722c:	280ad43a 	srli	r5,r5,16
  807230:	2189c83a 	sub	r4,r4,r6
  807234:	2209883a 	add	r4,r4,r8
  807238:	1806d43a 	srli	r3,r3,16
  80723c:	288b883a 	add	r5,r5,r2
  807240:	200dd43a 	srai	r6,r4,16
  807244:	28bfffcc 	andi	r2,r5,65535
  807248:	1887c83a 	sub	r3,r3,r2
  80724c:	1987883a 	add	r3,r3,r6
  807250:	3900000d 	sth	r4,0(r7)
  807254:	38c0008d 	sth	r3,2(r7)
  807258:	2808d43a 	srli	r4,r5,16
  80725c:	39c00104 	addi	r7,r7,4
  807260:	1811d43a 	srai	r8,r3,16
  807264:	b4ffe92e 	bgeu	r22,r19,80720c <quorem+0xa4>
  807268:	a505883a 	add	r2,r20,r20
  80726c:	1085883a 	add	r2,r2,r2
  807270:	b885883a 	add	r2,r23,r2
  807274:	10c00017 	ldw	r3,0(r2)
  807278:	18000c1e 	bne	r3,zero,8072ac <quorem+0x144>
  80727c:	113fff04 	addi	r4,r2,-4
  807280:	b900082e 	bgeu	r23,r4,8072a4 <quorem+0x13c>
  807284:	10bfff17 	ldw	r2,-4(r2)
  807288:	10000326 	beq	r2,zero,807298 <quorem+0x130>
  80728c:	00000506 	br	8072a4 <quorem+0x13c>
  807290:	20800017 	ldw	r2,0(r4)
  807294:	1000031e 	bne	r2,zero,8072a4 <quorem+0x13c>
  807298:	213fff04 	addi	r4,r4,-4
  80729c:	a53fffc4 	addi	r20,r20,-1
  8072a0:	b93ffb36 	bltu	r23,r4,807290 <quorem+0x128>
  8072a4:	d9000317 	ldw	r4,12(sp)
  8072a8:	25000415 	stw	r20,16(r4)
  8072ac:	e005883a 	mov	r2,fp
  8072b0:	dfc00e17 	ldw	ra,56(sp)
  8072b4:	df000d17 	ldw	fp,52(sp)
  8072b8:	ddc00c17 	ldw	r23,48(sp)
  8072bc:	dd800b17 	ldw	r22,44(sp)
  8072c0:	dd400a17 	ldw	r21,40(sp)
  8072c4:	dd000917 	ldw	r20,36(sp)
  8072c8:	dcc00817 	ldw	r19,32(sp)
  8072cc:	dc800717 	ldw	r18,28(sp)
  8072d0:	dc400617 	ldw	r17,24(sp)
  8072d4:	dc000517 	ldw	r16,20(sp)
  8072d8:	dec00f04 	addi	sp,sp,60
  8072dc:	f800283a 	ret
  8072e0:	b823883a 	mov	r17,r23
  8072e4:	9825883a 	mov	r18,r19
  8072e8:	d8000115 	stw	zero,4(sp)
  8072ec:	002b883a 	mov	r21,zero
  8072f0:	94000017 	ldw	r16,0(r18)
  8072f4:	e009883a 	mov	r4,fp
  8072f8:	94800104 	addi	r18,r18,4
  8072fc:	817fffcc 	andi	r5,r16,65535
  807300:	0803eb80 	call	803eb8 <__mulsi3>
  807304:	800ad43a 	srli	r5,r16,16
  807308:	e009883a 	mov	r4,fp
  80730c:	a8a1883a 	add	r16,r21,r2
  807310:	0803eb80 	call	803eb8 <__mulsi3>
  807314:	89000017 	ldw	r4,0(r17)
  807318:	80ffffcc 	andi	r3,r16,65535
  80731c:	8020d43a 	srli	r16,r16,16
  807320:	217fffcc 	andi	r5,r4,65535
  807324:	28cbc83a 	sub	r5,r5,r3
  807328:	d8c00117 	ldw	r3,4(sp)
  80732c:	2008d43a 	srli	r4,r4,16
  807330:	1405883a 	add	r2,r2,r16
  807334:	28cb883a 	add	r5,r5,r3
  807338:	280dd43a 	srai	r6,r5,16
  80733c:	10ffffcc 	andi	r3,r2,65535
  807340:	20c9c83a 	sub	r4,r4,r3
  807344:	2189883a 	add	r4,r4,r6
  807348:	8900008d 	sth	r4,2(r17)
  80734c:	2009d43a 	srai	r4,r4,16
  807350:	8940000d 	sth	r5,0(r17)
  807354:	102ad43a 	srli	r21,r2,16
  807358:	8c400104 	addi	r17,r17,4
  80735c:	d9000115 	stw	r4,4(sp)
  807360:	b4bfe32e 	bgeu	r22,r18,8072f0 <quorem+0x188>
  807364:	d9000217 	ldw	r4,8(sp)
  807368:	203fa01e 	bne	r4,zero,8071ec <quorem+0x84>
  80736c:	d8800017 	ldw	r2,0(sp)
  807370:	10ffff04 	addi	r3,r2,-4
  807374:	b8c0082e 	bgeu	r23,r3,807398 <quorem+0x230>
  807378:	10bfff17 	ldw	r2,-4(r2)
  80737c:	10000326 	beq	r2,zero,80738c <quorem+0x224>
  807380:	00000506 	br	807398 <quorem+0x230>
  807384:	18800017 	ldw	r2,0(r3)
  807388:	1000031e 	bne	r2,zero,807398 <quorem+0x230>
  80738c:	18ffff04 	addi	r3,r3,-4
  807390:	a53fffc4 	addi	r20,r20,-1
  807394:	b8fffb36 	bltu	r23,r3,807384 <quorem+0x21c>
  807398:	d8c00317 	ldw	r3,12(sp)
  80739c:	1d000415 	stw	r20,16(r3)
  8073a0:	003f9206 	br	8071ec <quorem+0x84>
  8073a4:	0005883a 	mov	r2,zero
  8073a8:	003fc106 	br	8072b0 <quorem+0x148>

008073ac <_dtoa_r>:
  8073ac:	22001017 	ldw	r8,64(r4)
  8073b0:	deffda04 	addi	sp,sp,-152
  8073b4:	dd402115 	stw	r21,132(sp)
  8073b8:	dd002015 	stw	r20,128(sp)
  8073bc:	dc801e15 	stw	r18,120(sp)
  8073c0:	dc401d15 	stw	r17,116(sp)
  8073c4:	dfc02515 	stw	ra,148(sp)
  8073c8:	df002415 	stw	fp,144(sp)
  8073cc:	ddc02315 	stw	r23,140(sp)
  8073d0:	dd802215 	stw	r22,136(sp)
  8073d4:	dcc01f15 	stw	r19,124(sp)
  8073d8:	dc001c15 	stw	r16,112(sp)
  8073dc:	d9001615 	stw	r4,88(sp)
  8073e0:	3023883a 	mov	r17,r6
  8073e4:	2829883a 	mov	r20,r5
  8073e8:	d9c01715 	stw	r7,92(sp)
  8073ec:	dc802817 	ldw	r18,160(sp)
  8073f0:	302b883a 	mov	r21,r6
  8073f4:	40000a26 	beq	r8,zero,807420 <_dtoa_r+0x74>
  8073f8:	20801117 	ldw	r2,68(r4)
  8073fc:	400b883a 	mov	r5,r8
  807400:	40800115 	stw	r2,4(r8)
  807404:	20c01117 	ldw	r3,68(r4)
  807408:	00800044 	movi	r2,1
  80740c:	10c4983a 	sll	r2,r2,r3
  807410:	40800215 	stw	r2,8(r8)
  807414:	080a6280 	call	80a628 <_Bfree>
  807418:	d8c01617 	ldw	r3,88(sp)
  80741c:	18001015 	stw	zero,64(r3)
  807420:	8800a316 	blt	r17,zero,8076b0 <_dtoa_r+0x304>
  807424:	90000015 	stw	zero,0(r18)
  807428:	a8dffc2c 	andhi	r3,r21,32752
  80742c:	009ffc34 	movhi	r2,32752
  807430:	18809126 	beq	r3,r2,807678 <_dtoa_r+0x2cc>
  807434:	000d883a 	mov	r6,zero
  807438:	000f883a 	mov	r7,zero
  80743c:	a009883a 	mov	r4,r20
  807440:	a80b883a 	mov	r5,r21
  807444:	dd001215 	stw	r20,72(sp)
  807448:	dd401315 	stw	r21,76(sp)
  80744c:	080da240 	call	80da24 <__nedf2>
  807450:	1000171e 	bne	r2,zero,8074b0 <_dtoa_r+0x104>
  807454:	d9802717 	ldw	r6,156(sp)
  807458:	00800044 	movi	r2,1
  80745c:	30800015 	stw	r2,0(r6)
  807460:	d8802917 	ldw	r2,164(sp)
  807464:	10029b26 	beq	r2,zero,807ed4 <_dtoa_r+0xb28>
  807468:	d9002917 	ldw	r4,164(sp)
  80746c:	00802074 	movhi	r2,129
  807470:	1086cd44 	addi	r2,r2,6965
  807474:	10ffffc4 	addi	r3,r2,-1
  807478:	20800015 	stw	r2,0(r4)
  80747c:	1805883a 	mov	r2,r3
  807480:	dfc02517 	ldw	ra,148(sp)
  807484:	df002417 	ldw	fp,144(sp)
  807488:	ddc02317 	ldw	r23,140(sp)
  80748c:	dd802217 	ldw	r22,136(sp)
  807490:	dd402117 	ldw	r21,132(sp)
  807494:	dd002017 	ldw	r20,128(sp)
  807498:	dcc01f17 	ldw	r19,124(sp)
  80749c:	dc801e17 	ldw	r18,120(sp)
  8074a0:	dc401d17 	ldw	r17,116(sp)
  8074a4:	dc001c17 	ldw	r16,112(sp)
  8074a8:	dec02604 	addi	sp,sp,152
  8074ac:	f800283a 	ret
  8074b0:	d9001617 	ldw	r4,88(sp)
  8074b4:	d9401217 	ldw	r5,72(sp)
  8074b8:	d8800104 	addi	r2,sp,4
  8074bc:	a80d883a 	mov	r6,r21
  8074c0:	d9c00204 	addi	r7,sp,8
  8074c4:	d8800015 	stw	r2,0(sp)
  8074c8:	080ac640 	call	80ac64 <__d2b>
  8074cc:	d8800715 	stw	r2,28(sp)
  8074d0:	a804d53a 	srli	r2,r21,20
  8074d4:	1101ffcc 	andi	r4,r2,2047
  8074d8:	20008626 	beq	r4,zero,8076f4 <_dtoa_r+0x348>
  8074dc:	d8c01217 	ldw	r3,72(sp)
  8074e0:	00800434 	movhi	r2,16
  8074e4:	10bfffc4 	addi	r2,r2,-1
  8074e8:	ddc00117 	ldw	r23,4(sp)
  8074ec:	a884703a 	and	r2,r21,r2
  8074f0:	1811883a 	mov	r8,r3
  8074f4:	124ffc34 	orhi	r9,r2,16368
  8074f8:	25bf0044 	addi	r22,r4,-1023
  8074fc:	d8000815 	stw	zero,32(sp)
  807500:	0005883a 	mov	r2,zero
  807504:	00cffe34 	movhi	r3,16376
  807508:	480b883a 	mov	r5,r9
  80750c:	4009883a 	mov	r4,r8
  807510:	180f883a 	mov	r7,r3
  807514:	100d883a 	mov	r6,r2
  807518:	080388c0 	call	80388c <__subdf3>
  80751c:	0218dbf4 	movhi	r8,25455
  807520:	4210d844 	addi	r8,r8,17249
  807524:	024ff4f4 	movhi	r9,16339
  807528:	4a61e9c4 	addi	r9,r9,-30809
  80752c:	480f883a 	mov	r7,r9
  807530:	400d883a 	mov	r6,r8
  807534:	180b883a 	mov	r5,r3
  807538:	1009883a 	mov	r4,r2
  80753c:	080d3800 	call	80d380 <__muldf3>
  807540:	0222d874 	movhi	r8,35681
  807544:	42322cc4 	addi	r8,r8,-14157
  807548:	024ff1f4 	movhi	r9,16327
  80754c:	4a628a04 	addi	r9,r9,-30168
  807550:	480f883a 	mov	r7,r9
  807554:	400d883a 	mov	r6,r8
  807558:	180b883a 	mov	r5,r3
  80755c:	1009883a 	mov	r4,r2
  807560:	080390c0 	call	80390c <__adddf3>
  807564:	b009883a 	mov	r4,r22
  807568:	1021883a 	mov	r16,r2
  80756c:	1823883a 	mov	r17,r3
  807570:	0803a080 	call	803a08 <__floatsidf>
  807574:	021427f4 	movhi	r8,20639
  807578:	421e7ec4 	addi	r8,r8,31227
  80757c:	024ff4f4 	movhi	r9,16339
  807580:	4a5104c4 	addi	r9,r9,17427
  807584:	480f883a 	mov	r7,r9
  807588:	400d883a 	mov	r6,r8
  80758c:	180b883a 	mov	r5,r3
  807590:	1009883a 	mov	r4,r2
  807594:	080d3800 	call	80d380 <__muldf3>
  807598:	180f883a 	mov	r7,r3
  80759c:	880b883a 	mov	r5,r17
  8075a0:	100d883a 	mov	r6,r2
  8075a4:	8009883a 	mov	r4,r16
  8075a8:	080390c0 	call	80390c <__adddf3>
  8075ac:	1009883a 	mov	r4,r2
  8075b0:	180b883a 	mov	r5,r3
  8075b4:	1021883a 	mov	r16,r2
  8075b8:	1823883a 	mov	r17,r3
  8075bc:	0803b000 	call	803b00 <__fixdfsi>
  8075c0:	000d883a 	mov	r6,zero
  8075c4:	000f883a 	mov	r7,zero
  8075c8:	8009883a 	mov	r4,r16
  8075cc:	880b883a 	mov	r5,r17
  8075d0:	d8800d15 	stw	r2,52(sp)
  8075d4:	080db340 	call	80db34 <__ltdf2>
  8075d8:	10031716 	blt	r2,zero,808238 <_dtoa_r+0xe8c>
  8075dc:	d8c00d17 	ldw	r3,52(sp)
  8075e0:	00800584 	movi	r2,22
  8075e4:	10c1482e 	bgeu	r2,r3,807b08 <_dtoa_r+0x75c>
  8075e8:	01000044 	movi	r4,1
  8075ec:	d9000c15 	stw	r4,48(sp)
  8075f0:	bd85c83a 	sub	r2,r23,r22
  8075f4:	11bfffc4 	addi	r6,r2,-1
  8075f8:	30030b16 	blt	r6,zero,808228 <_dtoa_r+0xe7c>
  8075fc:	d9800a15 	stw	r6,40(sp)
  807600:	d8001115 	stw	zero,68(sp)
  807604:	d8c00d17 	ldw	r3,52(sp)
  807608:	1802ff16 	blt	r3,zero,808208 <_dtoa_r+0xe5c>
  80760c:	d9000a17 	ldw	r4,40(sp)
  807610:	d8c00915 	stw	r3,36(sp)
  807614:	d8001015 	stw	zero,64(sp)
  807618:	20c9883a 	add	r4,r4,r3
  80761c:	d9000a15 	stw	r4,40(sp)
  807620:	d9001717 	ldw	r4,92(sp)
  807624:	00800244 	movi	r2,9
  807628:	11004636 	bltu	r2,r4,807744 <_dtoa_r+0x398>
  80762c:	00800144 	movi	r2,5
  807630:	11020416 	blt	r2,r4,807e44 <_dtoa_r+0xa98>
  807634:	04400044 	movi	r17,1
  807638:	d8c01717 	ldw	r3,92(sp)
  80763c:	00800144 	movi	r2,5
  807640:	10c1ed36 	bltu	r2,r3,807df8 <_dtoa_r+0xa4c>
  807644:	18c5883a 	add	r2,r3,r3
  807648:	1085883a 	add	r2,r2,r2
  80764c:	00c02034 	movhi	r3,128
  807650:	18dd9804 	addi	r3,r3,30304
  807654:	10c5883a 	add	r2,r2,r3
  807658:	11000017 	ldw	r4,0(r2)
  80765c:	2000683a 	jmp	r4
  807660:	0080774c 	andi	r2,zero,477
  807664:	0080774c 	andi	r2,zero,477
  807668:	0080814c 	andi	r2,zero,517
  80766c:	00808124 	muli	r2,zero,516
  807670:	00808168 	cmpgeui	r2,zero,517
  807674:	00808174 	movhi	r2,517
  807678:	d9002717 	ldw	r4,156(sp)
  80767c:	0089c3c4 	movi	r2,9999
  807680:	20800015 	stw	r2,0(r4)
  807684:	a0001026 	beq	r20,zero,8076c8 <_dtoa_r+0x31c>
  807688:	00c02074 	movhi	r3,129
  80768c:	18c98004 	addi	r3,r3,9728
  807690:	d9802917 	ldw	r6,164(sp)
  807694:	303f7926 	beq	r6,zero,80747c <_dtoa_r+0xd0>
  807698:	188000c7 	ldb	r2,3(r3)
  80769c:	190000c4 	addi	r4,r3,3
  8076a0:	1000101e 	bne	r2,zero,8076e4 <_dtoa_r+0x338>
  8076a4:	d8802917 	ldw	r2,164(sp)
  8076a8:	11000015 	stw	r4,0(r2)
  8076ac:	003f7306 	br	80747c <_dtoa_r+0xd0>
  8076b0:	00a00034 	movhi	r2,32768
  8076b4:	10bfffc4 	addi	r2,r2,-1
  8076b8:	00c00044 	movi	r3,1
  8076bc:	88aa703a 	and	r21,r17,r2
  8076c0:	90c00015 	stw	r3,0(r18)
  8076c4:	003f5806 	br	807428 <_dtoa_r+0x7c>
  8076c8:	00800434 	movhi	r2,16
  8076cc:	10bfffc4 	addi	r2,r2,-1
  8076d0:	a884703a 	and	r2,r21,r2
  8076d4:	103fec1e 	bne	r2,zero,807688 <_dtoa_r+0x2dc>
  8076d8:	00c02074 	movhi	r3,129
  8076dc:	18c97d04 	addi	r3,r3,9716
  8076e0:	003feb06 	br	807690 <_dtoa_r+0x2e4>
  8076e4:	d8802917 	ldw	r2,164(sp)
  8076e8:	19000204 	addi	r4,r3,8
  8076ec:	11000015 	stw	r4,0(r2)
  8076f0:	003f6206 	br	80747c <_dtoa_r+0xd0>
  8076f4:	ddc00117 	ldw	r23,4(sp)
  8076f8:	d8800217 	ldw	r2,8(sp)
  8076fc:	01000804 	movi	r4,32
  807700:	b8c10c84 	addi	r3,r23,1074
  807704:	18a3883a 	add	r17,r3,r2
  807708:	2441b80e 	bge	r4,r17,807dec <_dtoa_r+0xa40>
  80770c:	00c01004 	movi	r3,64
  807710:	1c47c83a 	sub	r3,r3,r17
  807714:	88bff804 	addi	r2,r17,-32
  807718:	a8c6983a 	sll	r3,r21,r3
  80771c:	a084d83a 	srl	r2,r20,r2
  807720:	1888b03a 	or	r4,r3,r2
  807724:	0803bd80 	call	803bd8 <__floatunsidf>
  807728:	1011883a 	mov	r8,r2
  80772c:	00bf8434 	movhi	r2,65040
  807730:	01000044 	movi	r4,1
  807734:	10d3883a 	add	r9,r2,r3
  807738:	8dbef344 	addi	r22,r17,-1075
  80773c:	d9000815 	stw	r4,32(sp)
  807740:	003f6f06 	br	807500 <_dtoa_r+0x154>
  807744:	d8001715 	stw	zero,92(sp)
  807748:	04400044 	movi	r17,1
  80774c:	00bfffc4 	movi	r2,-1
  807750:	00c00044 	movi	r3,1
  807754:	d8800e15 	stw	r2,56(sp)
  807758:	d8002615 	stw	zero,152(sp)
  80775c:	d8800f15 	stw	r2,60(sp)
  807760:	d8c00b15 	stw	r3,44(sp)
  807764:	1021883a 	mov	r16,r2
  807768:	d8801617 	ldw	r2,88(sp)
  80776c:	10001115 	stw	zero,68(r2)
  807770:	d8801617 	ldw	r2,88(sp)
  807774:	11401117 	ldw	r5,68(r2)
  807778:	1009883a 	mov	r4,r2
  80777c:	080aba80 	call	80aba8 <_Balloc>
  807780:	d8c01617 	ldw	r3,88(sp)
  807784:	d8800515 	stw	r2,20(sp)
  807788:	18801015 	stw	r2,64(r3)
  80778c:	00800384 	movi	r2,14
  807790:	14006836 	bltu	r2,r16,807934 <_dtoa_r+0x588>
  807794:	8805003a 	cmpeq	r2,r17,zero
  807798:	1000661e 	bne	r2,zero,807934 <_dtoa_r+0x588>
  80779c:	d9000d17 	ldw	r4,52(sp)
  8077a0:	0102300e 	bge	zero,r4,808064 <_dtoa_r+0xcb8>
  8077a4:	208003cc 	andi	r2,r4,15
  8077a8:	100490fa 	slli	r2,r2,3
  8077ac:	2025d13a 	srai	r18,r4,4
  8077b0:	00c02074 	movhi	r3,129
  8077b4:	18c99004 	addi	r3,r3,9792
  8077b8:	10c5883a 	add	r2,r2,r3
  8077bc:	90c0040c 	andi	r3,r18,16
  8077c0:	14000017 	ldw	r16,0(r2)
  8077c4:	14400117 	ldw	r17,4(r2)
  8077c8:	18036a1e 	bne	r3,zero,808574 <_dtoa_r+0x11c8>
  8077cc:	05800084 	movi	r22,2
  8077d0:	90001026 	beq	r18,zero,807814 <_dtoa_r+0x468>
  8077d4:	04c02074 	movhi	r19,129
  8077d8:	9cc9c204 	addi	r19,r19,9992
  8077dc:	9080004c 	andi	r2,r18,1
  8077e0:	1005003a 	cmpeq	r2,r2,zero
  8077e4:	1000081e 	bne	r2,zero,807808 <_dtoa_r+0x45c>
  8077e8:	99800017 	ldw	r6,0(r19)
  8077ec:	99c00117 	ldw	r7,4(r19)
  8077f0:	880b883a 	mov	r5,r17
  8077f4:	8009883a 	mov	r4,r16
  8077f8:	080d3800 	call	80d380 <__muldf3>
  8077fc:	1021883a 	mov	r16,r2
  807800:	b5800044 	addi	r22,r22,1
  807804:	1823883a 	mov	r17,r3
  807808:	9025d07a 	srai	r18,r18,1
  80780c:	9cc00204 	addi	r19,r19,8
  807810:	903ff21e 	bne	r18,zero,8077dc <_dtoa_r+0x430>
  807814:	a80b883a 	mov	r5,r21
  807818:	a009883a 	mov	r4,r20
  80781c:	880f883a 	mov	r7,r17
  807820:	800d883a 	mov	r6,r16
  807824:	080d7440 	call	80d744 <__divdf3>
  807828:	1029883a 	mov	r20,r2
  80782c:	182b883a 	mov	r21,r3
  807830:	d8c00c17 	ldw	r3,48(sp)
  807834:	1805003a 	cmpeq	r2,r3,zero
  807838:	1000081e 	bne	r2,zero,80785c <_dtoa_r+0x4b0>
  80783c:	0005883a 	mov	r2,zero
  807840:	00cffc34 	movhi	r3,16368
  807844:	180f883a 	mov	r7,r3
  807848:	a009883a 	mov	r4,r20
  80784c:	a80b883a 	mov	r5,r21
  807850:	100d883a 	mov	r6,r2
  807854:	080db340 	call	80db34 <__ltdf2>
  807858:	1003fe16 	blt	r2,zero,808854 <_dtoa_r+0x14a8>
  80785c:	b009883a 	mov	r4,r22
  807860:	0803a080 	call	803a08 <__floatsidf>
  807864:	180b883a 	mov	r5,r3
  807868:	1009883a 	mov	r4,r2
  80786c:	a00d883a 	mov	r6,r20
  807870:	a80f883a 	mov	r7,r21
  807874:	080d3800 	call	80d380 <__muldf3>
  807878:	0011883a 	mov	r8,zero
  80787c:	02500734 	movhi	r9,16412
  807880:	1009883a 	mov	r4,r2
  807884:	180b883a 	mov	r5,r3
  807888:	480f883a 	mov	r7,r9
  80788c:	400d883a 	mov	r6,r8
  807890:	080390c0 	call	80390c <__adddf3>
  807894:	d9000f17 	ldw	r4,60(sp)
  807898:	102d883a 	mov	r22,r2
  80789c:	00bf3034 	movhi	r2,64704
  8078a0:	18b9883a 	add	fp,r3,r2
  8078a4:	e02f883a 	mov	r23,fp
  8078a8:	20028f1e 	bne	r4,zero,8082e8 <_dtoa_r+0xf3c>
  8078ac:	0005883a 	mov	r2,zero
  8078b0:	00d00534 	movhi	r3,16404
  8078b4:	a009883a 	mov	r4,r20
  8078b8:	a80b883a 	mov	r5,r21
  8078bc:	180f883a 	mov	r7,r3
  8078c0:	100d883a 	mov	r6,r2
  8078c4:	080388c0 	call	80388c <__subdf3>
  8078c8:	1009883a 	mov	r4,r2
  8078cc:	e00f883a 	mov	r7,fp
  8078d0:	180b883a 	mov	r5,r3
  8078d4:	b00d883a 	mov	r6,r22
  8078d8:	1025883a 	mov	r18,r2
  8078dc:	1827883a 	mov	r19,r3
  8078e0:	08039800 	call	803980 <__gtdf2>
  8078e4:	00834f16 	blt	zero,r2,808624 <_dtoa_r+0x1278>
  8078e8:	e0e0003c 	xorhi	r3,fp,32768
  8078ec:	9009883a 	mov	r4,r18
  8078f0:	980b883a 	mov	r5,r19
  8078f4:	180f883a 	mov	r7,r3
  8078f8:	b00d883a 	mov	r6,r22
  8078fc:	080db340 	call	80db34 <__ltdf2>
  807900:	1000080e 	bge	r2,zero,807924 <_dtoa_r+0x578>
  807904:	0027883a 	mov	r19,zero
  807908:	0025883a 	mov	r18,zero
  80790c:	d8802617 	ldw	r2,152(sp)
  807910:	df000517 	ldw	fp,20(sp)
  807914:	d8000615 	stw	zero,24(sp)
  807918:	0084303a 	nor	r2,zero,r2
  80791c:	d8800d15 	stw	r2,52(sp)
  807920:	00019b06 	br	807f90 <_dtoa_r+0xbe4>
  807924:	d9801217 	ldw	r6,72(sp)
  807928:	d8801317 	ldw	r2,76(sp)
  80792c:	3029883a 	mov	r20,r6
  807930:	102b883a 	mov	r21,r2
  807934:	d8c00217 	ldw	r3,8(sp)
  807938:	18008516 	blt	r3,zero,807b50 <_dtoa_r+0x7a4>
  80793c:	d9000d17 	ldw	r4,52(sp)
  807940:	00800384 	movi	r2,14
  807944:	11008216 	blt	r2,r4,807b50 <_dtoa_r+0x7a4>
  807948:	200490fa 	slli	r2,r4,3
  80794c:	d9802617 	ldw	r6,152(sp)
  807950:	00c02074 	movhi	r3,129
  807954:	18c99004 	addi	r3,r3,9792
  807958:	10c5883a 	add	r2,r2,r3
  80795c:	14800017 	ldw	r18,0(r2)
  807960:	14c00117 	ldw	r19,4(r2)
  807964:	30031e16 	blt	r6,zero,8085e0 <_dtoa_r+0x1234>
  807968:	d9000517 	ldw	r4,20(sp)
  80796c:	d8c00f17 	ldw	r3,60(sp)
  807970:	a823883a 	mov	r17,r21
  807974:	a021883a 	mov	r16,r20
  807978:	192b883a 	add	r21,r3,r4
  80797c:	2039883a 	mov	fp,r4
  807980:	00000f06 	br	8079c0 <_dtoa_r+0x614>
  807984:	0005883a 	mov	r2,zero
  807988:	00d00934 	movhi	r3,16420
  80798c:	5009883a 	mov	r4,r10
  807990:	580b883a 	mov	r5,r11
  807994:	180f883a 	mov	r7,r3
  807998:	100d883a 	mov	r6,r2
  80799c:	080d3800 	call	80d380 <__muldf3>
  8079a0:	180b883a 	mov	r5,r3
  8079a4:	000d883a 	mov	r6,zero
  8079a8:	000f883a 	mov	r7,zero
  8079ac:	1009883a 	mov	r4,r2
  8079b0:	1021883a 	mov	r16,r2
  8079b4:	1823883a 	mov	r17,r3
  8079b8:	080da240 	call	80da24 <__nedf2>
  8079bc:	10004526 	beq	r2,zero,807ad4 <_dtoa_r+0x728>
  8079c0:	900d883a 	mov	r6,r18
  8079c4:	980f883a 	mov	r7,r19
  8079c8:	8009883a 	mov	r4,r16
  8079cc:	880b883a 	mov	r5,r17
  8079d0:	080d7440 	call	80d744 <__divdf3>
  8079d4:	180b883a 	mov	r5,r3
  8079d8:	1009883a 	mov	r4,r2
  8079dc:	0803b000 	call	803b00 <__fixdfsi>
  8079e0:	1009883a 	mov	r4,r2
  8079e4:	1029883a 	mov	r20,r2
  8079e8:	0803a080 	call	803a08 <__floatsidf>
  8079ec:	180f883a 	mov	r7,r3
  8079f0:	9009883a 	mov	r4,r18
  8079f4:	980b883a 	mov	r5,r19
  8079f8:	100d883a 	mov	r6,r2
  8079fc:	080d3800 	call	80d380 <__muldf3>
  807a00:	180f883a 	mov	r7,r3
  807a04:	880b883a 	mov	r5,r17
  807a08:	8009883a 	mov	r4,r16
  807a0c:	100d883a 	mov	r6,r2
  807a10:	080388c0 	call	80388c <__subdf3>
  807a14:	1015883a 	mov	r10,r2
  807a18:	a0800c04 	addi	r2,r20,48
  807a1c:	e0800005 	stb	r2,0(fp)
  807a20:	e7000044 	addi	fp,fp,1
  807a24:	1817883a 	mov	r11,r3
  807a28:	e57fd61e 	bne	fp,r21,807984 <_dtoa_r+0x5d8>
  807a2c:	500d883a 	mov	r6,r10
  807a30:	180f883a 	mov	r7,r3
  807a34:	5009883a 	mov	r4,r10
  807a38:	180b883a 	mov	r5,r3
  807a3c:	080390c0 	call	80390c <__adddf3>
  807a40:	100d883a 	mov	r6,r2
  807a44:	9009883a 	mov	r4,r18
  807a48:	980b883a 	mov	r5,r19
  807a4c:	180f883a 	mov	r7,r3
  807a50:	1021883a 	mov	r16,r2
  807a54:	1823883a 	mov	r17,r3
  807a58:	080db340 	call	80db34 <__ltdf2>
  807a5c:	10000816 	blt	r2,zero,807a80 <_dtoa_r+0x6d4>
  807a60:	980b883a 	mov	r5,r19
  807a64:	800d883a 	mov	r6,r16
  807a68:	880f883a 	mov	r7,r17
  807a6c:	9009883a 	mov	r4,r18
  807a70:	080d99c0 	call	80d99c <__eqdf2>
  807a74:	1000171e 	bne	r2,zero,807ad4 <_dtoa_r+0x728>
  807a78:	a080004c 	andi	r2,r20,1
  807a7c:	10001526 	beq	r2,zero,807ad4 <_dtoa_r+0x728>
  807a80:	d8800d17 	ldw	r2,52(sp)
  807a84:	d8800415 	stw	r2,16(sp)
  807a88:	e009883a 	mov	r4,fp
  807a8c:	213fffc4 	addi	r4,r4,-1
  807a90:	20c00007 	ldb	r3,0(r4)
  807a94:	00800e44 	movi	r2,57
  807a98:	1880081e 	bne	r3,r2,807abc <_dtoa_r+0x710>
  807a9c:	d8800517 	ldw	r2,20(sp)
  807aa0:	113ffa1e 	bne	r2,r4,807a8c <_dtoa_r+0x6e0>
  807aa4:	d8c00417 	ldw	r3,16(sp)
  807aa8:	d9800517 	ldw	r6,20(sp)
  807aac:	00800c04 	movi	r2,48
  807ab0:	18c00044 	addi	r3,r3,1
  807ab4:	d8c00415 	stw	r3,16(sp)
  807ab8:	30800005 	stb	r2,0(r6)
  807abc:	20800003 	ldbu	r2,0(r4)
  807ac0:	d8c00417 	ldw	r3,16(sp)
  807ac4:	27000044 	addi	fp,r4,1
  807ac8:	10800044 	addi	r2,r2,1
  807acc:	d8c00d15 	stw	r3,52(sp)
  807ad0:	20800005 	stb	r2,0(r4)
  807ad4:	d9001617 	ldw	r4,88(sp)
  807ad8:	d9400717 	ldw	r5,28(sp)
  807adc:	080a6280 	call	80a628 <_Bfree>
  807ae0:	e0000005 	stb	zero,0(fp)
  807ae4:	d9800d17 	ldw	r6,52(sp)
  807ae8:	d8c02717 	ldw	r3,156(sp)
  807aec:	d9002917 	ldw	r4,164(sp)
  807af0:	30800044 	addi	r2,r6,1
  807af4:	18800015 	stw	r2,0(r3)
  807af8:	20029c26 	beq	r4,zero,80856c <_dtoa_r+0x11c0>
  807afc:	d8c00517 	ldw	r3,20(sp)
  807b00:	27000015 	stw	fp,0(r4)
  807b04:	003e5d06 	br	80747c <_dtoa_r+0xd0>
  807b08:	d9800d17 	ldw	r6,52(sp)
  807b0c:	00c02074 	movhi	r3,129
  807b10:	18c99004 	addi	r3,r3,9792
  807b14:	d9001217 	ldw	r4,72(sp)
  807b18:	300490fa 	slli	r2,r6,3
  807b1c:	d9401317 	ldw	r5,76(sp)
  807b20:	10c5883a 	add	r2,r2,r3
  807b24:	12000017 	ldw	r8,0(r2)
  807b28:	12400117 	ldw	r9,4(r2)
  807b2c:	400d883a 	mov	r6,r8
  807b30:	480f883a 	mov	r7,r9
  807b34:	080db340 	call	80db34 <__ltdf2>
  807b38:	1000030e 	bge	r2,zero,807b48 <_dtoa_r+0x79c>
  807b3c:	d8800d17 	ldw	r2,52(sp)
  807b40:	10bfffc4 	addi	r2,r2,-1
  807b44:	d8800d15 	stw	r2,52(sp)
  807b48:	d8000c15 	stw	zero,48(sp)
  807b4c:	003ea806 	br	8075f0 <_dtoa_r+0x244>
  807b50:	d9000b17 	ldw	r4,44(sp)
  807b54:	202cc03a 	cmpne	r22,r4,zero
  807b58:	b000c71e 	bne	r22,zero,807e78 <_dtoa_r+0xacc>
  807b5c:	dc001117 	ldw	r16,68(sp)
  807b60:	dc801017 	ldw	r18,64(sp)
  807b64:	0027883a 	mov	r19,zero
  807b68:	04000b0e 	bge	zero,r16,807b98 <_dtoa_r+0x7ec>
  807b6c:	d8c00a17 	ldw	r3,40(sp)
  807b70:	00c0090e 	bge	zero,r3,807b98 <_dtoa_r+0x7ec>
  807b74:	8005883a 	mov	r2,r16
  807b78:	1c011316 	blt	r3,r16,807fc8 <_dtoa_r+0xc1c>
  807b7c:	d9000a17 	ldw	r4,40(sp)
  807b80:	d9801117 	ldw	r6,68(sp)
  807b84:	80a1c83a 	sub	r16,r16,r2
  807b88:	2089c83a 	sub	r4,r4,r2
  807b8c:	308dc83a 	sub	r6,r6,r2
  807b90:	d9000a15 	stw	r4,40(sp)
  807b94:	d9801115 	stw	r6,68(sp)
  807b98:	d8801017 	ldw	r2,64(sp)
  807b9c:	0080150e 	bge	zero,r2,807bf4 <_dtoa_r+0x848>
  807ba0:	d8c00b17 	ldw	r3,44(sp)
  807ba4:	1805003a 	cmpeq	r2,r3,zero
  807ba8:	1001c91e 	bne	r2,zero,8082d0 <_dtoa_r+0xf24>
  807bac:	04800e0e 	bge	zero,r18,807be8 <_dtoa_r+0x83c>
  807bb0:	d9001617 	ldw	r4,88(sp)
  807bb4:	980b883a 	mov	r5,r19
  807bb8:	900d883a 	mov	r6,r18
  807bbc:	080b4740 	call	80b474 <__pow5mult>
  807bc0:	d9001617 	ldw	r4,88(sp)
  807bc4:	d9800717 	ldw	r6,28(sp)
  807bc8:	100b883a 	mov	r5,r2
  807bcc:	1027883a 	mov	r19,r2
  807bd0:	080b0b80 	call	80b0b8 <__multiply>
  807bd4:	d9001617 	ldw	r4,88(sp)
  807bd8:	d9400717 	ldw	r5,28(sp)
  807bdc:	1023883a 	mov	r17,r2
  807be0:	080a6280 	call	80a628 <_Bfree>
  807be4:	dc400715 	stw	r17,28(sp)
  807be8:	d9001017 	ldw	r4,64(sp)
  807bec:	248dc83a 	sub	r6,r4,r18
  807bf0:	30010e1e 	bne	r6,zero,80802c <_dtoa_r+0xc80>
  807bf4:	d9001617 	ldw	r4,88(sp)
  807bf8:	04400044 	movi	r17,1
  807bfc:	880b883a 	mov	r5,r17
  807c00:	080b30c0 	call	80b30c <__i2b>
  807c04:	d9800917 	ldw	r6,36(sp)
  807c08:	1025883a 	mov	r18,r2
  807c0c:	0180040e 	bge	zero,r6,807c20 <_dtoa_r+0x874>
  807c10:	d9001617 	ldw	r4,88(sp)
  807c14:	100b883a 	mov	r5,r2
  807c18:	080b4740 	call	80b474 <__pow5mult>
  807c1c:	1025883a 	mov	r18,r2
  807c20:	d8801717 	ldw	r2,92(sp)
  807c24:	8880f30e 	bge	r17,r2,807ff4 <_dtoa_r+0xc48>
  807c28:	0023883a 	mov	r17,zero
  807c2c:	d9800917 	ldw	r6,36(sp)
  807c30:	30019e1e 	bne	r6,zero,8082ac <_dtoa_r+0xf00>
  807c34:	00c00044 	movi	r3,1
  807c38:	d9000a17 	ldw	r4,40(sp)
  807c3c:	20c5883a 	add	r2,r4,r3
  807c40:	10c007cc 	andi	r3,r2,31
  807c44:	1800841e 	bne	r3,zero,807e58 <_dtoa_r+0xaac>
  807c48:	00800704 	movi	r2,28
  807c4c:	d9000a17 	ldw	r4,40(sp)
  807c50:	d9801117 	ldw	r6,68(sp)
  807c54:	80a1883a 	add	r16,r16,r2
  807c58:	2089883a 	add	r4,r4,r2
  807c5c:	308d883a 	add	r6,r6,r2
  807c60:	d9000a15 	stw	r4,40(sp)
  807c64:	d9801115 	stw	r6,68(sp)
  807c68:	d8801117 	ldw	r2,68(sp)
  807c6c:	0080050e 	bge	zero,r2,807c84 <_dtoa_r+0x8d8>
  807c70:	d9400717 	ldw	r5,28(sp)
  807c74:	d9001617 	ldw	r4,88(sp)
  807c78:	100d883a 	mov	r6,r2
  807c7c:	080af6c0 	call	80af6c <__lshift>
  807c80:	d8800715 	stw	r2,28(sp)
  807c84:	d8c00a17 	ldw	r3,40(sp)
  807c88:	00c0050e 	bge	zero,r3,807ca0 <_dtoa_r+0x8f4>
  807c8c:	d9001617 	ldw	r4,88(sp)
  807c90:	900b883a 	mov	r5,r18
  807c94:	180d883a 	mov	r6,r3
  807c98:	080af6c0 	call	80af6c <__lshift>
  807c9c:	1025883a 	mov	r18,r2
  807ca0:	d9000c17 	ldw	r4,48(sp)
  807ca4:	2005003a 	cmpeq	r2,r4,zero
  807ca8:	10016f26 	beq	r2,zero,808268 <_dtoa_r+0xebc>
  807cac:	d9000f17 	ldw	r4,60(sp)
  807cb0:	0102170e 	bge	zero,r4,808510 <_dtoa_r+0x1164>
  807cb4:	d9800b17 	ldw	r6,44(sp)
  807cb8:	3005003a 	cmpeq	r2,r6,zero
  807cbc:	1000881e 	bne	r2,zero,807ee0 <_dtoa_r+0xb34>
  807cc0:	0400050e 	bge	zero,r16,807cd8 <_dtoa_r+0x92c>
  807cc4:	d9001617 	ldw	r4,88(sp)
  807cc8:	980b883a 	mov	r5,r19
  807ccc:	800d883a 	mov	r6,r16
  807cd0:	080af6c0 	call	80af6c <__lshift>
  807cd4:	1027883a 	mov	r19,r2
  807cd8:	8804c03a 	cmpne	r2,r17,zero
  807cdc:	1002541e 	bne	r2,zero,808630 <_dtoa_r+0x1284>
  807ce0:	980b883a 	mov	r5,r19
  807ce4:	dd800517 	ldw	r22,20(sp)
  807ce8:	dcc00615 	stw	r19,24(sp)
  807cec:	a700004c 	andi	fp,r20,1
  807cf0:	2827883a 	mov	r19,r5
  807cf4:	d9000717 	ldw	r4,28(sp)
  807cf8:	900b883a 	mov	r5,r18
  807cfc:	08071680 	call	807168 <quorem>
  807d00:	d9000717 	ldw	r4,28(sp)
  807d04:	d9400617 	ldw	r5,24(sp)
  807d08:	1023883a 	mov	r17,r2
  807d0c:	8dc00c04 	addi	r23,r17,48
  807d10:	080a7840 	call	80a784 <__mcmp>
  807d14:	d9001617 	ldw	r4,88(sp)
  807d18:	900b883a 	mov	r5,r18
  807d1c:	980d883a 	mov	r6,r19
  807d20:	1029883a 	mov	r20,r2
  807d24:	080ade00 	call	80ade0 <__mdiff>
  807d28:	102b883a 	mov	r21,r2
  807d2c:	10800317 	ldw	r2,12(r2)
  807d30:	1001281e 	bne	r2,zero,8081d4 <_dtoa_r+0xe28>
  807d34:	d9000717 	ldw	r4,28(sp)
  807d38:	a80b883a 	mov	r5,r21
  807d3c:	080a7840 	call	80a784 <__mcmp>
  807d40:	d9001617 	ldw	r4,88(sp)
  807d44:	1021883a 	mov	r16,r2
  807d48:	a80b883a 	mov	r5,r21
  807d4c:	080a6280 	call	80a628 <_Bfree>
  807d50:	8000041e 	bne	r16,zero,807d64 <_dtoa_r+0x9b8>
  807d54:	d8801717 	ldw	r2,92(sp)
  807d58:	1000021e 	bne	r2,zero,807d64 <_dtoa_r+0x9b8>
  807d5c:	e004c03a 	cmpne	r2,fp,zero
  807d60:	10011726 	beq	r2,zero,8081c0 <_dtoa_r+0xe14>
  807d64:	a0010616 	blt	r20,zero,808180 <_dtoa_r+0xdd4>
  807d68:	a000041e 	bne	r20,zero,807d7c <_dtoa_r+0x9d0>
  807d6c:	d8c01717 	ldw	r3,92(sp)
  807d70:	1800021e 	bne	r3,zero,807d7c <_dtoa_r+0x9d0>
  807d74:	e004c03a 	cmpne	r2,fp,zero
  807d78:	10010126 	beq	r2,zero,808180 <_dtoa_r+0xdd4>
  807d7c:	04023d16 	blt	zero,r16,808674 <_dtoa_r+0x12c8>
  807d80:	b5c00005 	stb	r23,0(r22)
  807d84:	d9800517 	ldw	r6,20(sp)
  807d88:	d9000f17 	ldw	r4,60(sp)
  807d8c:	b5800044 	addi	r22,r22,1
  807d90:	3105883a 	add	r2,r6,r4
  807d94:	b0806526 	beq	r22,r2,807f2c <_dtoa_r+0xb80>
  807d98:	d9400717 	ldw	r5,28(sp)
  807d9c:	d9001617 	ldw	r4,88(sp)
  807da0:	01800284 	movi	r6,10
  807da4:	000f883a 	mov	r7,zero
  807da8:	080b3480 	call	80b348 <__multadd>
  807dac:	d8800715 	stw	r2,28(sp)
  807db0:	d8800617 	ldw	r2,24(sp)
  807db4:	14c10c26 	beq	r2,r19,8081e8 <_dtoa_r+0xe3c>
  807db8:	d9400617 	ldw	r5,24(sp)
  807dbc:	d9001617 	ldw	r4,88(sp)
  807dc0:	01800284 	movi	r6,10
  807dc4:	000f883a 	mov	r7,zero
  807dc8:	080b3480 	call	80b348 <__multadd>
  807dcc:	d9001617 	ldw	r4,88(sp)
  807dd0:	980b883a 	mov	r5,r19
  807dd4:	01800284 	movi	r6,10
  807dd8:	000f883a 	mov	r7,zero
  807ddc:	d8800615 	stw	r2,24(sp)
  807de0:	080b3480 	call	80b348 <__multadd>
  807de4:	1027883a 	mov	r19,r2
  807de8:	003fc206 	br	807cf4 <_dtoa_r+0x948>
  807dec:	2445c83a 	sub	r2,r4,r17
  807df0:	a088983a 	sll	r4,r20,r2
  807df4:	003e4b06 	br	807724 <_dtoa_r+0x378>
  807df8:	01bfffc4 	movi	r6,-1
  807dfc:	00800044 	movi	r2,1
  807e00:	d9800e15 	stw	r6,56(sp)
  807e04:	d9800f15 	stw	r6,60(sp)
  807e08:	d8800b15 	stw	r2,44(sp)
  807e0c:	d8c01617 	ldw	r3,88(sp)
  807e10:	008005c4 	movi	r2,23
  807e14:	18001115 	stw	zero,68(r3)
  807e18:	1580082e 	bgeu	r2,r22,807e3c <_dtoa_r+0xa90>
  807e1c:	00c00104 	movi	r3,4
  807e20:	0009883a 	mov	r4,zero
  807e24:	18c7883a 	add	r3,r3,r3
  807e28:	18800504 	addi	r2,r3,20
  807e2c:	21000044 	addi	r4,r4,1
  807e30:	b0bffc2e 	bgeu	r22,r2,807e24 <_dtoa_r+0xa78>
  807e34:	d9801617 	ldw	r6,88(sp)
  807e38:	31001115 	stw	r4,68(r6)
  807e3c:	dc000f17 	ldw	r16,60(sp)
  807e40:	003e4b06 	br	807770 <_dtoa_r+0x3c4>
  807e44:	d9801717 	ldw	r6,92(sp)
  807e48:	0023883a 	mov	r17,zero
  807e4c:	31bfff04 	addi	r6,r6,-4
  807e50:	d9801715 	stw	r6,92(sp)
  807e54:	003df806 	br	807638 <_dtoa_r+0x28c>
  807e58:	00800804 	movi	r2,32
  807e5c:	10c9c83a 	sub	r4,r2,r3
  807e60:	00c00104 	movi	r3,4
  807e64:	19005a16 	blt	r3,r4,807fd0 <_dtoa_r+0xc24>
  807e68:	008000c4 	movi	r2,3
  807e6c:	113f7e16 	blt	r2,r4,807c68 <_dtoa_r+0x8bc>
  807e70:	20800704 	addi	r2,r4,28
  807e74:	003f7506 	br	807c4c <_dtoa_r+0x8a0>
  807e78:	d9801717 	ldw	r6,92(sp)
  807e7c:	00800044 	movi	r2,1
  807e80:	1180a10e 	bge	r2,r6,808108 <_dtoa_r+0xd5c>
  807e84:	d9800f17 	ldw	r6,60(sp)
  807e88:	d8c01017 	ldw	r3,64(sp)
  807e8c:	30bfffc4 	addi	r2,r6,-1
  807e90:	1881c616 	blt	r3,r2,8085ac <_dtoa_r+0x1200>
  807e94:	18a5c83a 	sub	r18,r3,r2
  807e98:	d8800f17 	ldw	r2,60(sp)
  807e9c:	10026216 	blt	r2,zero,808828 <_dtoa_r+0x147c>
  807ea0:	dc001117 	ldw	r16,68(sp)
  807ea4:	1007883a 	mov	r3,r2
  807ea8:	d9800a17 	ldw	r6,40(sp)
  807eac:	d8801117 	ldw	r2,68(sp)
  807eb0:	d9001617 	ldw	r4,88(sp)
  807eb4:	30cd883a 	add	r6,r6,r3
  807eb8:	10c5883a 	add	r2,r2,r3
  807ebc:	01400044 	movi	r5,1
  807ec0:	d9800a15 	stw	r6,40(sp)
  807ec4:	d8801115 	stw	r2,68(sp)
  807ec8:	080b30c0 	call	80b30c <__i2b>
  807ecc:	1027883a 	mov	r19,r2
  807ed0:	003f2506 	br	807b68 <_dtoa_r+0x7bc>
  807ed4:	00c02074 	movhi	r3,129
  807ed8:	18c6cd04 	addi	r3,r3,6964
  807edc:	003d6706 	br	80747c <_dtoa_r+0xd0>
  807ee0:	dd800517 	ldw	r22,20(sp)
  807ee4:	04000044 	movi	r16,1
  807ee8:	00000706 	br	807f08 <_dtoa_r+0xb5c>
  807eec:	d9400717 	ldw	r5,28(sp)
  807ef0:	d9001617 	ldw	r4,88(sp)
  807ef4:	01800284 	movi	r6,10
  807ef8:	000f883a 	mov	r7,zero
  807efc:	080b3480 	call	80b348 <__multadd>
  807f00:	d8800715 	stw	r2,28(sp)
  807f04:	84000044 	addi	r16,r16,1
  807f08:	d9000717 	ldw	r4,28(sp)
  807f0c:	900b883a 	mov	r5,r18
  807f10:	08071680 	call	807168 <quorem>
  807f14:	15c00c04 	addi	r23,r2,48
  807f18:	b5c00005 	stb	r23,0(r22)
  807f1c:	d8c00f17 	ldw	r3,60(sp)
  807f20:	b5800044 	addi	r22,r22,1
  807f24:	80fff116 	blt	r16,r3,807eec <_dtoa_r+0xb40>
  807f28:	d8000615 	stw	zero,24(sp)
  807f2c:	d9400717 	ldw	r5,28(sp)
  807f30:	d9001617 	ldw	r4,88(sp)
  807f34:	01800044 	movi	r6,1
  807f38:	080af6c0 	call	80af6c <__lshift>
  807f3c:	1009883a 	mov	r4,r2
  807f40:	900b883a 	mov	r5,r18
  807f44:	d8800715 	stw	r2,28(sp)
  807f48:	080a7840 	call	80a784 <__mcmp>
  807f4c:	00803c0e 	bge	zero,r2,808040 <_dtoa_r+0xc94>
  807f50:	b009883a 	mov	r4,r22
  807f54:	213fffc4 	addi	r4,r4,-1
  807f58:	21400003 	ldbu	r5,0(r4)
  807f5c:	00800e44 	movi	r2,57
  807f60:	28c03fcc 	andi	r3,r5,255
  807f64:	18c0201c 	xori	r3,r3,128
  807f68:	18ffe004 	addi	r3,r3,-128
  807f6c:	1881981e 	bne	r3,r2,8085d0 <_dtoa_r+0x1224>
  807f70:	d9800517 	ldw	r6,20(sp)
  807f74:	21bff71e 	bne	r4,r6,807f54 <_dtoa_r+0xba8>
  807f78:	d8800d17 	ldw	r2,52(sp)
  807f7c:	37000044 	addi	fp,r6,1
  807f80:	10800044 	addi	r2,r2,1
  807f84:	d8800d15 	stw	r2,52(sp)
  807f88:	00800c44 	movi	r2,49
  807f8c:	30800005 	stb	r2,0(r6)
  807f90:	d9001617 	ldw	r4,88(sp)
  807f94:	900b883a 	mov	r5,r18
  807f98:	080a6280 	call	80a628 <_Bfree>
  807f9c:	983ecd26 	beq	r19,zero,807ad4 <_dtoa_r+0x728>
  807fa0:	d8c00617 	ldw	r3,24(sp)
  807fa4:	18000426 	beq	r3,zero,807fb8 <_dtoa_r+0xc0c>
  807fa8:	1cc00326 	beq	r3,r19,807fb8 <_dtoa_r+0xc0c>
  807fac:	d9001617 	ldw	r4,88(sp)
  807fb0:	180b883a 	mov	r5,r3
  807fb4:	080a6280 	call	80a628 <_Bfree>
  807fb8:	d9001617 	ldw	r4,88(sp)
  807fbc:	980b883a 	mov	r5,r19
  807fc0:	080a6280 	call	80a628 <_Bfree>
  807fc4:	003ec306 	br	807ad4 <_dtoa_r+0x728>
  807fc8:	1805883a 	mov	r2,r3
  807fcc:	003eeb06 	br	807b7c <_dtoa_r+0x7d0>
  807fd0:	d9800a17 	ldw	r6,40(sp)
  807fd4:	d8c01117 	ldw	r3,68(sp)
  807fd8:	20bfff04 	addi	r2,r4,-4
  807fdc:	308d883a 	add	r6,r6,r2
  807fe0:	1887883a 	add	r3,r3,r2
  807fe4:	80a1883a 	add	r16,r16,r2
  807fe8:	d9800a15 	stw	r6,40(sp)
  807fec:	d8c01115 	stw	r3,68(sp)
  807ff0:	003f1d06 	br	807c68 <_dtoa_r+0x8bc>
  807ff4:	a03f0c1e 	bne	r20,zero,807c28 <_dtoa_r+0x87c>
  807ff8:	00800434 	movhi	r2,16
  807ffc:	10bfffc4 	addi	r2,r2,-1
  808000:	a884703a 	and	r2,r21,r2
  808004:	103f081e 	bne	r2,zero,807c28 <_dtoa_r+0x87c>
  808008:	a89ffc2c 	andhi	r2,r21,32752
  80800c:	103f0626 	beq	r2,zero,807c28 <_dtoa_r+0x87c>
  808010:	d8c01117 	ldw	r3,68(sp)
  808014:	d9000a17 	ldw	r4,40(sp)
  808018:	18c00044 	addi	r3,r3,1
  80801c:	21000044 	addi	r4,r4,1
  808020:	d8c01115 	stw	r3,68(sp)
  808024:	d9000a15 	stw	r4,40(sp)
  808028:	003f0006 	br	807c2c <_dtoa_r+0x880>
  80802c:	d9400717 	ldw	r5,28(sp)
  808030:	d9001617 	ldw	r4,88(sp)
  808034:	080b4740 	call	80b474 <__pow5mult>
  808038:	d8800715 	stw	r2,28(sp)
  80803c:	003eed06 	br	807bf4 <_dtoa_r+0x848>
  808040:	1000021e 	bne	r2,zero,80804c <_dtoa_r+0xca0>
  808044:	b880004c 	andi	r2,r23,1
  808048:	103fc11e 	bne	r2,zero,807f50 <_dtoa_r+0xba4>
  80804c:	b5bfffc4 	addi	r22,r22,-1
  808050:	b0c00007 	ldb	r3,0(r22)
  808054:	00800c04 	movi	r2,48
  808058:	18bffc26 	beq	r3,r2,80804c <_dtoa_r+0xca0>
  80805c:	b7000044 	addi	fp,r22,1
  808060:	003fcb06 	br	807f90 <_dtoa_r+0xbe4>
  808064:	d9800d17 	ldw	r6,52(sp)
  808068:	018fc83a 	sub	r7,zero,r6
  80806c:	3801f726 	beq	r7,zero,80884c <_dtoa_r+0x14a0>
  808070:	398003cc 	andi	r6,r7,15
  808074:	300c90fa 	slli	r6,r6,3
  808078:	01402074 	movhi	r5,129
  80807c:	29499004 	addi	r5,r5,9792
  808080:	d9001217 	ldw	r4,72(sp)
  808084:	314d883a 	add	r6,r6,r5
  808088:	30c00117 	ldw	r3,4(r6)
  80808c:	30800017 	ldw	r2,0(r6)
  808090:	d9401317 	ldw	r5,76(sp)
  808094:	3821d13a 	srai	r16,r7,4
  808098:	100d883a 	mov	r6,r2
  80809c:	180f883a 	mov	r7,r3
  8080a0:	080d3800 	call	80d380 <__muldf3>
  8080a4:	1011883a 	mov	r8,r2
  8080a8:	1813883a 	mov	r9,r3
  8080ac:	1029883a 	mov	r20,r2
  8080b0:	182b883a 	mov	r21,r3
  8080b4:	8001e526 	beq	r16,zero,80884c <_dtoa_r+0x14a0>
  8080b8:	05800084 	movi	r22,2
  8080bc:	04402074 	movhi	r17,129
  8080c0:	8c49c204 	addi	r17,r17,9992
  8080c4:	8080004c 	andi	r2,r16,1
  8080c8:	1005003a 	cmpeq	r2,r2,zero
  8080cc:	1000081e 	bne	r2,zero,8080f0 <_dtoa_r+0xd44>
  8080d0:	89800017 	ldw	r6,0(r17)
  8080d4:	89c00117 	ldw	r7,4(r17)
  8080d8:	480b883a 	mov	r5,r9
  8080dc:	4009883a 	mov	r4,r8
  8080e0:	080d3800 	call	80d380 <__muldf3>
  8080e4:	1011883a 	mov	r8,r2
  8080e8:	b5800044 	addi	r22,r22,1
  8080ec:	1813883a 	mov	r9,r3
  8080f0:	8021d07a 	srai	r16,r16,1
  8080f4:	8c400204 	addi	r17,r17,8
  8080f8:	803ff21e 	bne	r16,zero,8080c4 <_dtoa_r+0xd18>
  8080fc:	4029883a 	mov	r20,r8
  808100:	482b883a 	mov	r21,r9
  808104:	003dca06 	br	807830 <_dtoa_r+0x484>
  808108:	d9000817 	ldw	r4,32(sp)
  80810c:	2005003a 	cmpeq	r2,r4,zero
  808110:	1001f61e 	bne	r2,zero,8088ec <_dtoa_r+0x1540>
  808114:	dc001117 	ldw	r16,68(sp)
  808118:	dc801017 	ldw	r18,64(sp)
  80811c:	18c10cc4 	addi	r3,r3,1075
  808120:	003f6106 	br	807ea8 <_dtoa_r+0xafc>
  808124:	d8000b15 	stw	zero,44(sp)
  808128:	d9802617 	ldw	r6,152(sp)
  80812c:	d8c00d17 	ldw	r3,52(sp)
  808130:	30800044 	addi	r2,r6,1
  808134:	18ad883a 	add	r22,r3,r2
  808138:	b13fffc4 	addi	r4,r22,-1
  80813c:	d9000e15 	stw	r4,56(sp)
  808140:	0581f60e 	bge	zero,r22,80891c <_dtoa_r+0x1570>
  808144:	dd800f15 	stw	r22,60(sp)
  808148:	003f3006 	br	807e0c <_dtoa_r+0xa60>
  80814c:	d8000b15 	stw	zero,44(sp)
  808150:	d9002617 	ldw	r4,152(sp)
  808154:	0101eb0e 	bge	zero,r4,808904 <_dtoa_r+0x1558>
  808158:	202d883a 	mov	r22,r4
  80815c:	d9000e15 	stw	r4,56(sp)
  808160:	d9000f15 	stw	r4,60(sp)
  808164:	003f2906 	br	807e0c <_dtoa_r+0xa60>
  808168:	01800044 	movi	r6,1
  80816c:	d9800b15 	stw	r6,44(sp)
  808170:	003ff706 	br	808150 <_dtoa_r+0xda4>
  808174:	01000044 	movi	r4,1
  808178:	d9000b15 	stw	r4,44(sp)
  80817c:	003fea06 	br	808128 <_dtoa_r+0xd7c>
  808180:	04000c0e 	bge	zero,r16,8081b4 <_dtoa_r+0xe08>
  808184:	d9400717 	ldw	r5,28(sp)
  808188:	d9001617 	ldw	r4,88(sp)
  80818c:	01800044 	movi	r6,1
  808190:	080af6c0 	call	80af6c <__lshift>
  808194:	1009883a 	mov	r4,r2
  808198:	900b883a 	mov	r5,r18
  80819c:	d8800715 	stw	r2,28(sp)
  8081a0:	080a7840 	call	80a784 <__mcmp>
  8081a4:	0081e00e 	bge	zero,r2,808928 <_dtoa_r+0x157c>
  8081a8:	bdc00044 	addi	r23,r23,1
  8081ac:	00800e84 	movi	r2,58
  8081b0:	b881a226 	beq	r23,r2,80883c <_dtoa_r+0x1490>
  8081b4:	b7000044 	addi	fp,r22,1
  8081b8:	b5c00005 	stb	r23,0(r22)
  8081bc:	003f7406 	br	807f90 <_dtoa_r+0xbe4>
  8081c0:	00800e44 	movi	r2,57
  8081c4:	b8819d26 	beq	r23,r2,80883c <_dtoa_r+0x1490>
  8081c8:	053ffa0e 	bge	zero,r20,8081b4 <_dtoa_r+0xe08>
  8081cc:	8dc00c44 	addi	r23,r17,49
  8081d0:	003ff806 	br	8081b4 <_dtoa_r+0xe08>
  8081d4:	d9001617 	ldw	r4,88(sp)
  8081d8:	a80b883a 	mov	r5,r21
  8081dc:	04000044 	movi	r16,1
  8081e0:	080a6280 	call	80a628 <_Bfree>
  8081e4:	003edf06 	br	807d64 <_dtoa_r+0x9b8>
  8081e8:	d9001617 	ldw	r4,88(sp)
  8081ec:	980b883a 	mov	r5,r19
  8081f0:	01800284 	movi	r6,10
  8081f4:	000f883a 	mov	r7,zero
  8081f8:	080b3480 	call	80b348 <__multadd>
  8081fc:	1027883a 	mov	r19,r2
  808200:	d8800615 	stw	r2,24(sp)
  808204:	003ebb06 	br	807cf4 <_dtoa_r+0x948>
  808208:	d9801117 	ldw	r6,68(sp)
  80820c:	d8800d17 	ldw	r2,52(sp)
  808210:	d8000915 	stw	zero,36(sp)
  808214:	308dc83a 	sub	r6,r6,r2
  808218:	0087c83a 	sub	r3,zero,r2
  80821c:	d9801115 	stw	r6,68(sp)
  808220:	d8c01015 	stw	r3,64(sp)
  808224:	003cfe06 	br	807620 <_dtoa_r+0x274>
  808228:	018dc83a 	sub	r6,zero,r6
  80822c:	d9801115 	stw	r6,68(sp)
  808230:	d8000a15 	stw	zero,40(sp)
  808234:	003cf306 	br	807604 <_dtoa_r+0x258>
  808238:	d9000d17 	ldw	r4,52(sp)
  80823c:	0803a080 	call	803a08 <__floatsidf>
  808240:	880b883a 	mov	r5,r17
  808244:	8009883a 	mov	r4,r16
  808248:	180f883a 	mov	r7,r3
  80824c:	100d883a 	mov	r6,r2
  808250:	080da240 	call	80da24 <__nedf2>
  808254:	103ce126 	beq	r2,zero,8075dc <_dtoa_r+0x230>
  808258:	d9800d17 	ldw	r6,52(sp)
  80825c:	31bfffc4 	addi	r6,r6,-1
  808260:	d9800d15 	stw	r6,52(sp)
  808264:	003cdd06 	br	8075dc <_dtoa_r+0x230>
  808268:	d9000717 	ldw	r4,28(sp)
  80826c:	900b883a 	mov	r5,r18
  808270:	080a7840 	call	80a784 <__mcmp>
  808274:	103e8d0e 	bge	r2,zero,807cac <_dtoa_r+0x900>
  808278:	d9400717 	ldw	r5,28(sp)
  80827c:	d9001617 	ldw	r4,88(sp)
  808280:	01800284 	movi	r6,10
  808284:	000f883a 	mov	r7,zero
  808288:	080b3480 	call	80b348 <__multadd>
  80828c:	d9800d17 	ldw	r6,52(sp)
  808290:	d8800715 	stw	r2,28(sp)
  808294:	31bfffc4 	addi	r6,r6,-1
  808298:	d9800d15 	stw	r6,52(sp)
  80829c:	b001a71e 	bne	r22,zero,80893c <_dtoa_r+0x1590>
  8082a0:	d8800e17 	ldw	r2,56(sp)
  8082a4:	d8800f15 	stw	r2,60(sp)
  8082a8:	003e8006 	br	807cac <_dtoa_r+0x900>
  8082ac:	90800417 	ldw	r2,16(r18)
  8082b0:	1085883a 	add	r2,r2,r2
  8082b4:	1085883a 	add	r2,r2,r2
  8082b8:	1485883a 	add	r2,r2,r18
  8082bc:	11000417 	ldw	r4,16(r2)
  8082c0:	080a6500 	call	80a650 <__hi0bits>
  8082c4:	00c00804 	movi	r3,32
  8082c8:	1887c83a 	sub	r3,r3,r2
  8082cc:	003e5a06 	br	807c38 <_dtoa_r+0x88c>
  8082d0:	d9400717 	ldw	r5,28(sp)
  8082d4:	d9801017 	ldw	r6,64(sp)
  8082d8:	d9001617 	ldw	r4,88(sp)
  8082dc:	080b4740 	call	80b474 <__pow5mult>
  8082e0:	d8800715 	stw	r2,28(sp)
  8082e4:	003e4306 	br	807bf4 <_dtoa_r+0x848>
  8082e8:	d9800f17 	ldw	r6,60(sp)
  8082ec:	d8800d17 	ldw	r2,52(sp)
  8082f0:	d9800315 	stw	r6,12(sp)
  8082f4:	d8800415 	stw	r2,16(sp)
  8082f8:	d8c00b17 	ldw	r3,44(sp)
  8082fc:	1805003a 	cmpeq	r2,r3,zero
  808300:	1000e21e 	bne	r2,zero,80868c <_dtoa_r+0x12e0>
  808304:	d9000317 	ldw	r4,12(sp)
  808308:	0005883a 	mov	r2,zero
  80830c:	00cff834 	movhi	r3,16352
  808310:	200c90fa 	slli	r6,r4,3
  808314:	01002074 	movhi	r4,129
  808318:	21099004 	addi	r4,r4,9792
  80831c:	180b883a 	mov	r5,r3
  808320:	310d883a 	add	r6,r6,r4
  808324:	327fff17 	ldw	r9,-4(r6)
  808328:	323ffe17 	ldw	r8,-8(r6)
  80832c:	1009883a 	mov	r4,r2
  808330:	480f883a 	mov	r7,r9
  808334:	400d883a 	mov	r6,r8
  808338:	080d7440 	call	80d744 <__divdf3>
  80833c:	180b883a 	mov	r5,r3
  808340:	b00d883a 	mov	r6,r22
  808344:	b80f883a 	mov	r7,r23
  808348:	1009883a 	mov	r4,r2
  80834c:	080388c0 	call	80388c <__subdf3>
  808350:	a80b883a 	mov	r5,r21
  808354:	a009883a 	mov	r4,r20
  808358:	d8c01915 	stw	r3,100(sp)
  80835c:	d8801815 	stw	r2,96(sp)
  808360:	0803b000 	call	803b00 <__fixdfsi>
  808364:	1009883a 	mov	r4,r2
  808368:	1027883a 	mov	r19,r2
  80836c:	0803a080 	call	803a08 <__floatsidf>
  808370:	a80b883a 	mov	r5,r21
  808374:	a009883a 	mov	r4,r20
  808378:	180f883a 	mov	r7,r3
  80837c:	100d883a 	mov	r6,r2
  808380:	080388c0 	call	80388c <__subdf3>
  808384:	d9801817 	ldw	r6,96(sp)
  808388:	1823883a 	mov	r17,r3
  80838c:	d8801415 	stw	r2,80(sp)
  808390:	302d883a 	mov	r22,r6
  808394:	d9800517 	ldw	r6,20(sp)
  808398:	9cc00c04 	addi	r19,r19,48
  80839c:	dc401515 	stw	r17,84(sp)
  8083a0:	d8c01917 	ldw	r3,100(sp)
  8083a4:	34c00005 	stb	r19,0(r6)
  8083a8:	d8800517 	ldw	r2,20(sp)
  8083ac:	d9401917 	ldw	r5,100(sp)
  8083b0:	d9801417 	ldw	r6,80(sp)
  8083b4:	b009883a 	mov	r4,r22
  8083b8:	880f883a 	mov	r7,r17
  8083bc:	182f883a 	mov	r23,r3
  8083c0:	17000044 	addi	fp,r2,1
  8083c4:	08039800 	call	803980 <__gtdf2>
  8083c8:	00804e16 	blt	zero,r2,808504 <_dtoa_r+0x1158>
  8083cc:	d9801417 	ldw	r6,80(sp)
  8083d0:	0005883a 	mov	r2,zero
  8083d4:	00cffc34 	movhi	r3,16368
  8083d8:	180b883a 	mov	r5,r3
  8083dc:	880f883a 	mov	r7,r17
  8083e0:	1009883a 	mov	r4,r2
  8083e4:	080388c0 	call	80388c <__subdf3>
  8083e8:	d9401917 	ldw	r5,100(sp)
  8083ec:	180f883a 	mov	r7,r3
  8083f0:	b009883a 	mov	r4,r22
  8083f4:	100d883a 	mov	r6,r2
  8083f8:	08039800 	call	803980 <__gtdf2>
  8083fc:	00bda216 	blt	zero,r2,807a88 <_dtoa_r+0x6dc>
  808400:	d8c00317 	ldw	r3,12(sp)
  808404:	00800044 	movi	r2,1
  808408:	10c01216 	blt	r2,r3,808454 <_dtoa_r+0x10a8>
  80840c:	003d4506 	br	807924 <_dtoa_r+0x578>
  808410:	d9801417 	ldw	r6,80(sp)
  808414:	0005883a 	mov	r2,zero
  808418:	00cffc34 	movhi	r3,16368
  80841c:	180b883a 	mov	r5,r3
  808420:	880f883a 	mov	r7,r17
  808424:	1009883a 	mov	r4,r2
  808428:	080388c0 	call	80388c <__subdf3>
  80842c:	d9c01b17 	ldw	r7,108(sp)
  808430:	180b883a 	mov	r5,r3
  808434:	1009883a 	mov	r4,r2
  808438:	b00d883a 	mov	r6,r22
  80843c:	080db340 	call	80db34 <__ltdf2>
  808440:	103d9116 	blt	r2,zero,807a88 <_dtoa_r+0x6dc>
  808444:	d9800517 	ldw	r6,20(sp)
  808448:	d9000317 	ldw	r4,12(sp)
  80844c:	3105883a 	add	r2,r6,r4
  808450:	e0bd3426 	beq	fp,r2,807924 <_dtoa_r+0x578>
  808454:	04500934 	movhi	r17,16420
  808458:	0021883a 	mov	r16,zero
  80845c:	b80b883a 	mov	r5,r23
  808460:	b009883a 	mov	r4,r22
  808464:	800d883a 	mov	r6,r16
  808468:	880f883a 	mov	r7,r17
  80846c:	080d3800 	call	80d380 <__muldf3>
  808470:	d9401517 	ldw	r5,84(sp)
  808474:	d9001417 	ldw	r4,80(sp)
  808478:	880f883a 	mov	r7,r17
  80847c:	000d883a 	mov	r6,zero
  808480:	d8801a15 	stw	r2,104(sp)
  808484:	d8c01b15 	stw	r3,108(sp)
  808488:	080d3800 	call	80d380 <__muldf3>
  80848c:	180b883a 	mov	r5,r3
  808490:	1009883a 	mov	r4,r2
  808494:	1823883a 	mov	r17,r3
  808498:	1021883a 	mov	r16,r2
  80849c:	0803b000 	call	803b00 <__fixdfsi>
  8084a0:	1009883a 	mov	r4,r2
  8084a4:	102b883a 	mov	r21,r2
  8084a8:	0803a080 	call	803a08 <__floatsidf>
  8084ac:	880b883a 	mov	r5,r17
  8084b0:	8009883a 	mov	r4,r16
  8084b4:	180f883a 	mov	r7,r3
  8084b8:	100d883a 	mov	r6,r2
  8084bc:	080388c0 	call	80388c <__subdf3>
  8084c0:	1021883a 	mov	r16,r2
  8084c4:	d9001b17 	ldw	r4,108(sp)
  8084c8:	1823883a 	mov	r17,r3
  8084cc:	dc001415 	stw	r16,80(sp)
  8084d0:	ad400c04 	addi	r21,r21,48
  8084d4:	dc401515 	stw	r17,84(sp)
  8084d8:	d8801a17 	ldw	r2,104(sp)
  8084dc:	e5400005 	stb	r21,0(fp)
  8084e0:	202f883a 	mov	r23,r4
  8084e4:	d9c01b17 	ldw	r7,108(sp)
  8084e8:	d9001417 	ldw	r4,80(sp)
  8084ec:	880b883a 	mov	r5,r17
  8084f0:	100d883a 	mov	r6,r2
  8084f4:	102d883a 	mov	r22,r2
  8084f8:	e7000044 	addi	fp,fp,1
  8084fc:	080db340 	call	80db34 <__ltdf2>
  808500:	103fc30e 	bge	r2,zero,808410 <_dtoa_r+0x1064>
  808504:	d9000417 	ldw	r4,16(sp)
  808508:	d9000d15 	stw	r4,52(sp)
  80850c:	003d7106 	br	807ad4 <_dtoa_r+0x728>
  808510:	d9801717 	ldw	r6,92(sp)
  808514:	00800084 	movi	r2,2
  808518:	11bde60e 	bge	r2,r6,807cb4 <_dtoa_r+0x908>
  80851c:	203cfb1e 	bne	r4,zero,80790c <_dtoa_r+0x560>
  808520:	d9001617 	ldw	r4,88(sp)
  808524:	900b883a 	mov	r5,r18
  808528:	01800144 	movi	r6,5
  80852c:	000f883a 	mov	r7,zero
  808530:	080b3480 	call	80b348 <__multadd>
  808534:	d9000717 	ldw	r4,28(sp)
  808538:	100b883a 	mov	r5,r2
  80853c:	1025883a 	mov	r18,r2
  808540:	080a7840 	call	80a784 <__mcmp>
  808544:	00bcf10e 	bge	zero,r2,80790c <_dtoa_r+0x560>
  808548:	d8c00d17 	ldw	r3,52(sp)
  80854c:	d9000517 	ldw	r4,20(sp)
  808550:	d8000615 	stw	zero,24(sp)
  808554:	18c00044 	addi	r3,r3,1
  808558:	d8c00d15 	stw	r3,52(sp)
  80855c:	00800c44 	movi	r2,49
  808560:	27000044 	addi	fp,r4,1
  808564:	20800005 	stb	r2,0(r4)
  808568:	003e8906 	br	807f90 <_dtoa_r+0xbe4>
  80856c:	d8c00517 	ldw	r3,20(sp)
  808570:	003bc206 	br	80747c <_dtoa_r+0xd0>
  808574:	01802074 	movhi	r6,129
  808578:	3189c204 	addi	r6,r6,9992
  80857c:	30c00917 	ldw	r3,36(r6)
  808580:	30800817 	ldw	r2,32(r6)
  808584:	d9001217 	ldw	r4,72(sp)
  808588:	d9401317 	ldw	r5,76(sp)
  80858c:	180f883a 	mov	r7,r3
  808590:	100d883a 	mov	r6,r2
  808594:	080d7440 	call	80d744 <__divdf3>
  808598:	948003cc 	andi	r18,r18,15
  80859c:	058000c4 	movi	r22,3
  8085a0:	1029883a 	mov	r20,r2
  8085a4:	182b883a 	mov	r21,r3
  8085a8:	003c8906 	br	8077d0 <_dtoa_r+0x424>
  8085ac:	d9001017 	ldw	r4,64(sp)
  8085b0:	d9800917 	ldw	r6,36(sp)
  8085b4:	0025883a 	mov	r18,zero
  8085b8:	1105c83a 	sub	r2,r2,r4
  8085bc:	2089883a 	add	r4,r4,r2
  8085c0:	308d883a 	add	r6,r6,r2
  8085c4:	d9001015 	stw	r4,64(sp)
  8085c8:	d9800915 	stw	r6,36(sp)
  8085cc:	003e3206 	br	807e98 <_dtoa_r+0xaec>
  8085d0:	28800044 	addi	r2,r5,1
  8085d4:	27000044 	addi	fp,r4,1
  8085d8:	20800005 	stb	r2,0(r4)
  8085dc:	003e6c06 	br	807f90 <_dtoa_r+0xbe4>
  8085e0:	d8800f17 	ldw	r2,60(sp)
  8085e4:	00bce016 	blt	zero,r2,807968 <_dtoa_r+0x5bc>
  8085e8:	d9800f17 	ldw	r6,60(sp)
  8085ec:	303cc51e 	bne	r6,zero,807904 <_dtoa_r+0x558>
  8085f0:	0005883a 	mov	r2,zero
  8085f4:	00d00534 	movhi	r3,16404
  8085f8:	980b883a 	mov	r5,r19
  8085fc:	180f883a 	mov	r7,r3
  808600:	9009883a 	mov	r4,r18
  808604:	100d883a 	mov	r6,r2
  808608:	080d3800 	call	80d380 <__muldf3>
  80860c:	180b883a 	mov	r5,r3
  808610:	a80f883a 	mov	r7,r21
  808614:	1009883a 	mov	r4,r2
  808618:	a00d883a 	mov	r6,r20
  80861c:	080daac0 	call	80daac <__gedf2>
  808620:	103cb80e 	bge	r2,zero,807904 <_dtoa_r+0x558>
  808624:	0027883a 	mov	r19,zero
  808628:	0025883a 	mov	r18,zero
  80862c:	003fc606 	br	808548 <_dtoa_r+0x119c>
  808630:	99400117 	ldw	r5,4(r19)
  808634:	d9001617 	ldw	r4,88(sp)
  808638:	080aba80 	call	80aba8 <_Balloc>
  80863c:	99800417 	ldw	r6,16(r19)
  808640:	11000304 	addi	r4,r2,12
  808644:	99400304 	addi	r5,r19,12
  808648:	318d883a 	add	r6,r6,r6
  80864c:	318d883a 	add	r6,r6,r6
  808650:	31800204 	addi	r6,r6,8
  808654:	1023883a 	mov	r17,r2
  808658:	080a4a80 	call	80a4a8 <memcpy>
  80865c:	d9001617 	ldw	r4,88(sp)
  808660:	880b883a 	mov	r5,r17
  808664:	01800044 	movi	r6,1
  808668:	080af6c0 	call	80af6c <__lshift>
  80866c:	100b883a 	mov	r5,r2
  808670:	003d9c06 	br	807ce4 <_dtoa_r+0x938>
  808674:	00800e44 	movi	r2,57
  808678:	b8807026 	beq	r23,r2,80883c <_dtoa_r+0x1490>
  80867c:	b8800044 	addi	r2,r23,1
  808680:	b7000044 	addi	fp,r22,1
  808684:	b0800005 	stb	r2,0(r22)
  808688:	003e4106 	br	807f90 <_dtoa_r+0xbe4>
  80868c:	d8800317 	ldw	r2,12(sp)
  808690:	01802074 	movhi	r6,129
  808694:	31899004 	addi	r6,r6,9792
  808698:	b009883a 	mov	r4,r22
  80869c:	100e90fa 	slli	r7,r2,3
  8086a0:	b80b883a 	mov	r5,r23
  8086a4:	398f883a 	add	r7,r7,r6
  8086a8:	38bffe17 	ldw	r2,-8(r7)
  8086ac:	d9800517 	ldw	r6,20(sp)
  8086b0:	38ffff17 	ldw	r3,-4(r7)
  8086b4:	37000044 	addi	fp,r6,1
  8086b8:	180f883a 	mov	r7,r3
  8086bc:	100d883a 	mov	r6,r2
  8086c0:	080d3800 	call	80d380 <__muldf3>
  8086c4:	a80b883a 	mov	r5,r21
  8086c8:	a009883a 	mov	r4,r20
  8086cc:	182f883a 	mov	r23,r3
  8086d0:	102d883a 	mov	r22,r2
  8086d4:	0803b000 	call	803b00 <__fixdfsi>
  8086d8:	1009883a 	mov	r4,r2
  8086dc:	1027883a 	mov	r19,r2
  8086e0:	0803a080 	call	803a08 <__floatsidf>
  8086e4:	a80b883a 	mov	r5,r21
  8086e8:	a009883a 	mov	r4,r20
  8086ec:	180f883a 	mov	r7,r3
  8086f0:	100d883a 	mov	r6,r2
  8086f4:	080388c0 	call	80388c <__subdf3>
  8086f8:	180b883a 	mov	r5,r3
  8086fc:	d8c00517 	ldw	r3,20(sp)
  808700:	9cc00c04 	addi	r19,r19,48
  808704:	1009883a 	mov	r4,r2
  808708:	1cc00005 	stb	r19,0(r3)
  80870c:	2021883a 	mov	r16,r4
  808710:	d9000317 	ldw	r4,12(sp)
  808714:	00800044 	movi	r2,1
  808718:	2823883a 	mov	r17,r5
  80871c:	20802226 	beq	r4,r2,8087a8 <_dtoa_r+0x13fc>
  808720:	1029883a 	mov	r20,r2
  808724:	0005883a 	mov	r2,zero
  808728:	00d00934 	movhi	r3,16420
  80872c:	180f883a 	mov	r7,r3
  808730:	100d883a 	mov	r6,r2
  808734:	880b883a 	mov	r5,r17
  808738:	8009883a 	mov	r4,r16
  80873c:	080d3800 	call	80d380 <__muldf3>
  808740:	180b883a 	mov	r5,r3
  808744:	1009883a 	mov	r4,r2
  808748:	1823883a 	mov	r17,r3
  80874c:	1021883a 	mov	r16,r2
  808750:	0803b000 	call	803b00 <__fixdfsi>
  808754:	1009883a 	mov	r4,r2
  808758:	102b883a 	mov	r21,r2
  80875c:	0803a080 	call	803a08 <__floatsidf>
  808760:	880b883a 	mov	r5,r17
  808764:	8009883a 	mov	r4,r16
  808768:	180f883a 	mov	r7,r3
  80876c:	100d883a 	mov	r6,r2
  808770:	080388c0 	call	80388c <__subdf3>
  808774:	180b883a 	mov	r5,r3
  808778:	d8c00517 	ldw	r3,20(sp)
  80877c:	1009883a 	mov	r4,r2
  808780:	ad400c04 	addi	r21,r21,48
  808784:	1d05883a 	add	r2,r3,r20
  808788:	15400005 	stb	r21,0(r2)
  80878c:	2021883a 	mov	r16,r4
  808790:	d9000317 	ldw	r4,12(sp)
  808794:	a5000044 	addi	r20,r20,1
  808798:	2823883a 	mov	r17,r5
  80879c:	a13fe11e 	bne	r20,r4,808724 <_dtoa_r+0x1378>
  8087a0:	e505883a 	add	r2,fp,r20
  8087a4:	173fffc4 	addi	fp,r2,-1
  8087a8:	0025883a 	mov	r18,zero
  8087ac:	04cff834 	movhi	r19,16352
  8087b0:	b009883a 	mov	r4,r22
  8087b4:	b80b883a 	mov	r5,r23
  8087b8:	900d883a 	mov	r6,r18
  8087bc:	980f883a 	mov	r7,r19
  8087c0:	080390c0 	call	80390c <__adddf3>
  8087c4:	180b883a 	mov	r5,r3
  8087c8:	1009883a 	mov	r4,r2
  8087cc:	800d883a 	mov	r6,r16
  8087d0:	880f883a 	mov	r7,r17
  8087d4:	080db340 	call	80db34 <__ltdf2>
  8087d8:	103cab16 	blt	r2,zero,807a88 <_dtoa_r+0x6dc>
  8087dc:	0009883a 	mov	r4,zero
  8087e0:	980b883a 	mov	r5,r19
  8087e4:	b80f883a 	mov	r7,r23
  8087e8:	b00d883a 	mov	r6,r22
  8087ec:	080388c0 	call	80388c <__subdf3>
  8087f0:	180b883a 	mov	r5,r3
  8087f4:	880f883a 	mov	r7,r17
  8087f8:	1009883a 	mov	r4,r2
  8087fc:	800d883a 	mov	r6,r16
  808800:	08039800 	call	803980 <__gtdf2>
  808804:	00bc470e 	bge	zero,r2,807924 <_dtoa_r+0x578>
  808808:	00c00c04 	movi	r3,48
  80880c:	e73fffc4 	addi	fp,fp,-1
  808810:	e0800007 	ldb	r2,0(fp)
  808814:	10fffd26 	beq	r2,r3,80880c <_dtoa_r+0x1460>
  808818:	d9800417 	ldw	r6,16(sp)
  80881c:	e7000044 	addi	fp,fp,1
  808820:	d9800d15 	stw	r6,52(sp)
  808824:	003cab06 	br	807ad4 <_dtoa_r+0x728>
  808828:	d8c00f17 	ldw	r3,60(sp)
  80882c:	d9001117 	ldw	r4,68(sp)
  808830:	20e1c83a 	sub	r16,r4,r3
  808834:	0007883a 	mov	r3,zero
  808838:	003d9b06 	br	807ea8 <_dtoa_r+0xafc>
  80883c:	00800e44 	movi	r2,57
  808840:	b0800005 	stb	r2,0(r22)
  808844:	b5800044 	addi	r22,r22,1
  808848:	003dc106 	br	807f50 <_dtoa_r+0xba4>
  80884c:	05800084 	movi	r22,2
  808850:	003bf706 	br	807830 <_dtoa_r+0x484>
  808854:	d9000f17 	ldw	r4,60(sp)
  808858:	013c000e 	bge	zero,r4,80785c <_dtoa_r+0x4b0>
  80885c:	d9800e17 	ldw	r6,56(sp)
  808860:	01bc300e 	bge	zero,r6,807924 <_dtoa_r+0x578>
  808864:	0005883a 	mov	r2,zero
  808868:	00d00934 	movhi	r3,16420
  80886c:	a80b883a 	mov	r5,r21
  808870:	180f883a 	mov	r7,r3
  808874:	a009883a 	mov	r4,r20
  808878:	100d883a 	mov	r6,r2
  80887c:	080d3800 	call	80d380 <__muldf3>
  808880:	b1000044 	addi	r4,r22,1
  808884:	1021883a 	mov	r16,r2
  808888:	1823883a 	mov	r17,r3
  80888c:	0803a080 	call	803a08 <__floatsidf>
  808890:	880b883a 	mov	r5,r17
  808894:	8009883a 	mov	r4,r16
  808898:	180f883a 	mov	r7,r3
  80889c:	100d883a 	mov	r6,r2
  8088a0:	080d3800 	call	80d380 <__muldf3>
  8088a4:	0011883a 	mov	r8,zero
  8088a8:	02500734 	movhi	r9,16412
  8088ac:	180b883a 	mov	r5,r3
  8088b0:	480f883a 	mov	r7,r9
  8088b4:	1009883a 	mov	r4,r2
  8088b8:	400d883a 	mov	r6,r8
  8088bc:	080390c0 	call	80390c <__adddf3>
  8088c0:	102d883a 	mov	r22,r2
  8088c4:	00bf3034 	movhi	r2,64704
  8088c8:	10ef883a 	add	r23,r2,r3
  8088cc:	d8800d17 	ldw	r2,52(sp)
  8088d0:	d8c00e17 	ldw	r3,56(sp)
  8088d4:	8029883a 	mov	r20,r16
  8088d8:	10bfffc4 	addi	r2,r2,-1
  8088dc:	882b883a 	mov	r21,r17
  8088e0:	d8800415 	stw	r2,16(sp)
  8088e4:	d8c00315 	stw	r3,12(sp)
  8088e8:	003e8306 	br	8082f8 <_dtoa_r+0xf4c>
  8088ec:	d8800117 	ldw	r2,4(sp)
  8088f0:	dc001117 	ldw	r16,68(sp)
  8088f4:	dc801017 	ldw	r18,64(sp)
  8088f8:	00c00d84 	movi	r3,54
  8088fc:	1887c83a 	sub	r3,r3,r2
  808900:	003d6906 	br	807ea8 <_dtoa_r+0xafc>
  808904:	01800044 	movi	r6,1
  808908:	3021883a 	mov	r16,r6
  80890c:	d9800f15 	stw	r6,60(sp)
  808910:	d9802615 	stw	r6,152(sp)
  808914:	d9800e15 	stw	r6,56(sp)
  808918:	003b9306 	br	807768 <_dtoa_r+0x3bc>
  80891c:	b021883a 	mov	r16,r22
  808920:	dd800f15 	stw	r22,60(sp)
  808924:	003b9006 	br	807768 <_dtoa_r+0x3bc>
  808928:	103e221e 	bne	r2,zero,8081b4 <_dtoa_r+0xe08>
  80892c:	b880004c 	andi	r2,r23,1
  808930:	1005003a 	cmpeq	r2,r2,zero
  808934:	103e1f1e 	bne	r2,zero,8081b4 <_dtoa_r+0xe08>
  808938:	003e1b06 	br	8081a8 <_dtoa_r+0xdfc>
  80893c:	d9001617 	ldw	r4,88(sp)
  808940:	980b883a 	mov	r5,r19
  808944:	01800284 	movi	r6,10
  808948:	000f883a 	mov	r7,zero
  80894c:	080b3480 	call	80b348 <__multadd>
  808950:	d8c00e17 	ldw	r3,56(sp)
  808954:	1027883a 	mov	r19,r2
  808958:	d8c00f15 	stw	r3,60(sp)
  80895c:	003cd306 	br	807cac <_dtoa_r+0x900>

00808960 <_fflush_r>:
  808960:	defffb04 	addi	sp,sp,-20
  808964:	dcc00315 	stw	r19,12(sp)
  808968:	dc800215 	stw	r18,8(sp)
  80896c:	dfc00415 	stw	ra,16(sp)
  808970:	dc400115 	stw	r17,4(sp)
  808974:	dc000015 	stw	r16,0(sp)
  808978:	2027883a 	mov	r19,r4
  80897c:	2825883a 	mov	r18,r5
  808980:	20000226 	beq	r4,zero,80898c <_fflush_r+0x2c>
  808984:	20800e17 	ldw	r2,56(r4)
  808988:	10005626 	beq	r2,zero,808ae4 <_fflush_r+0x184>
  80898c:	9100030b 	ldhu	r4,12(r18)
  808990:	20ffffcc 	andi	r3,r4,65535
  808994:	18e0001c 	xori	r3,r3,32768
  808998:	18e00004 	addi	r3,r3,-32768
  80899c:	1880020c 	andi	r2,r3,8
  8089a0:	1000261e 	bne	r2,zero,808a3c <_fflush_r+0xdc>
  8089a4:	90c00117 	ldw	r3,4(r18)
  8089a8:	20820014 	ori	r2,r4,2048
  8089ac:	9080030d 	sth	r2,12(r18)
  8089b0:	1009883a 	mov	r4,r2
  8089b4:	00c0400e 	bge	zero,r3,808ab8 <_fflush_r+0x158>
  8089b8:	92000a17 	ldw	r8,40(r18)
  8089bc:	40004026 	beq	r8,zero,808ac0 <_fflush_r+0x160>
  8089c0:	2084000c 	andi	r2,r4,4096
  8089c4:	10005326 	beq	r2,zero,808b14 <_fflush_r+0x1b4>
  8089c8:	94001417 	ldw	r16,80(r18)
  8089cc:	9080030b 	ldhu	r2,12(r18)
  8089d0:	1080010c 	andi	r2,r2,4
  8089d4:	1000481e 	bne	r2,zero,808af8 <_fflush_r+0x198>
  8089d8:	91400717 	ldw	r5,28(r18)
  8089dc:	9809883a 	mov	r4,r19
  8089e0:	800d883a 	mov	r6,r16
  8089e4:	000f883a 	mov	r7,zero
  8089e8:	403ee83a 	callr	r8
  8089ec:	8080261e 	bne	r16,r2,808a88 <_fflush_r+0x128>
  8089f0:	9080030b 	ldhu	r2,12(r18)
  8089f4:	91000417 	ldw	r4,16(r18)
  8089f8:	90000115 	stw	zero,4(r18)
  8089fc:	10bdffcc 	andi	r2,r2,63487
  808a00:	10ffffcc 	andi	r3,r2,65535
  808a04:	18c4000c 	andi	r3,r3,4096
  808a08:	9080030d 	sth	r2,12(r18)
  808a0c:	91000015 	stw	r4,0(r18)
  808a10:	18002b26 	beq	r3,zero,808ac0 <_fflush_r+0x160>
  808a14:	0007883a 	mov	r3,zero
  808a18:	1805883a 	mov	r2,r3
  808a1c:	94001415 	stw	r16,80(r18)
  808a20:	dfc00417 	ldw	ra,16(sp)
  808a24:	dcc00317 	ldw	r19,12(sp)
  808a28:	dc800217 	ldw	r18,8(sp)
  808a2c:	dc400117 	ldw	r17,4(sp)
  808a30:	dc000017 	ldw	r16,0(sp)
  808a34:	dec00504 	addi	sp,sp,20
  808a38:	f800283a 	ret
  808a3c:	94400417 	ldw	r17,16(r18)
  808a40:	88001f26 	beq	r17,zero,808ac0 <_fflush_r+0x160>
  808a44:	90800017 	ldw	r2,0(r18)
  808a48:	18c000cc 	andi	r3,r3,3
  808a4c:	94400015 	stw	r17,0(r18)
  808a50:	1461c83a 	sub	r16,r2,r17
  808a54:	18002526 	beq	r3,zero,808aec <_fflush_r+0x18c>
  808a58:	0005883a 	mov	r2,zero
  808a5c:	90800215 	stw	r2,8(r18)
  808a60:	0400170e 	bge	zero,r16,808ac0 <_fflush_r+0x160>
  808a64:	90c00917 	ldw	r3,36(r18)
  808a68:	91400717 	ldw	r5,28(r18)
  808a6c:	880d883a 	mov	r6,r17
  808a70:	800f883a 	mov	r7,r16
  808a74:	9809883a 	mov	r4,r19
  808a78:	183ee83a 	callr	r3
  808a7c:	88a3883a 	add	r17,r17,r2
  808a80:	80a1c83a 	sub	r16,r16,r2
  808a84:	00bff616 	blt	zero,r2,808a60 <_fflush_r+0x100>
  808a88:	9080030b 	ldhu	r2,12(r18)
  808a8c:	00ffffc4 	movi	r3,-1
  808a90:	10801014 	ori	r2,r2,64
  808a94:	9080030d 	sth	r2,12(r18)
  808a98:	1805883a 	mov	r2,r3
  808a9c:	dfc00417 	ldw	ra,16(sp)
  808aa0:	dcc00317 	ldw	r19,12(sp)
  808aa4:	dc800217 	ldw	r18,8(sp)
  808aa8:	dc400117 	ldw	r17,4(sp)
  808aac:	dc000017 	ldw	r16,0(sp)
  808ab0:	dec00504 	addi	sp,sp,20
  808ab4:	f800283a 	ret
  808ab8:	90800f17 	ldw	r2,60(r18)
  808abc:	00bfbe16 	blt	zero,r2,8089b8 <_fflush_r+0x58>
  808ac0:	0007883a 	mov	r3,zero
  808ac4:	1805883a 	mov	r2,r3
  808ac8:	dfc00417 	ldw	ra,16(sp)
  808acc:	dcc00317 	ldw	r19,12(sp)
  808ad0:	dc800217 	ldw	r18,8(sp)
  808ad4:	dc400117 	ldw	r17,4(sp)
  808ad8:	dc000017 	ldw	r16,0(sp)
  808adc:	dec00504 	addi	sp,sp,20
  808ae0:	f800283a 	ret
  808ae4:	0808bf80 	call	808bf8 <__sinit>
  808ae8:	003fa806 	br	80898c <_fflush_r+0x2c>
  808aec:	90800517 	ldw	r2,20(r18)
  808af0:	90800215 	stw	r2,8(r18)
  808af4:	003fda06 	br	808a60 <_fflush_r+0x100>
  808af8:	90800117 	ldw	r2,4(r18)
  808afc:	90c00c17 	ldw	r3,48(r18)
  808b00:	80a1c83a 	sub	r16,r16,r2
  808b04:	183fb426 	beq	r3,zero,8089d8 <_fflush_r+0x78>
  808b08:	90800f17 	ldw	r2,60(r18)
  808b0c:	80a1c83a 	sub	r16,r16,r2
  808b10:	003fb106 	br	8089d8 <_fflush_r+0x78>
  808b14:	91400717 	ldw	r5,28(r18)
  808b18:	9809883a 	mov	r4,r19
  808b1c:	000d883a 	mov	r6,zero
  808b20:	01c00044 	movi	r7,1
  808b24:	403ee83a 	callr	r8
  808b28:	1021883a 	mov	r16,r2
  808b2c:	00bfffc4 	movi	r2,-1
  808b30:	80800226 	beq	r16,r2,808b3c <_fflush_r+0x1dc>
  808b34:	92000a17 	ldw	r8,40(r18)
  808b38:	003fa406 	br	8089cc <_fflush_r+0x6c>
  808b3c:	98c00017 	ldw	r3,0(r19)
  808b40:	00800744 	movi	r2,29
  808b44:	18bfde26 	beq	r3,r2,808ac0 <_fflush_r+0x160>
  808b48:	9080030b 	ldhu	r2,12(r18)
  808b4c:	8007883a 	mov	r3,r16
  808b50:	10801014 	ori	r2,r2,64
  808b54:	9080030d 	sth	r2,12(r18)
  808b58:	003fcf06 	br	808a98 <_fflush_r+0x138>

00808b5c <fflush>:
  808b5c:	01402074 	movhi	r5,129
  808b60:	29625804 	addi	r5,r5,-30368
  808b64:	2007883a 	mov	r3,r4
  808b68:	20000526 	beq	r4,zero,808b80 <fflush+0x24>
  808b6c:	00802074 	movhi	r2,129
  808b70:	1091ac04 	addi	r2,r2,18096
  808b74:	11000017 	ldw	r4,0(r2)
  808b78:	180b883a 	mov	r5,r3
  808b7c:	08089601 	jmpi	808960 <_fflush_r>
  808b80:	00802074 	movhi	r2,129
  808b84:	1091ad04 	addi	r2,r2,18100
  808b88:	11000017 	ldw	r4,0(r2)
  808b8c:	08098ac1 	jmpi	8098ac <_fwalk_reent>

00808b90 <std>:
  808b90:	00802074 	movhi	r2,129
  808b94:	10afdd04 	addi	r2,r2,-16524
  808b98:	20800b15 	stw	r2,44(r4)
  808b9c:	00802074 	movhi	r2,129
  808ba0:	10b01804 	addi	r2,r2,-16288
  808ba4:	20800815 	stw	r2,32(r4)
  808ba8:	00c02074 	movhi	r3,129
  808bac:	18eff904 	addi	r3,r3,-16412
  808bb0:	00802074 	movhi	r2,129
  808bb4:	10afdf04 	addi	r2,r2,-16516
  808bb8:	2140030d 	sth	r5,12(r4)
  808bbc:	2180038d 	sth	r6,14(r4)
  808bc0:	20c00915 	stw	r3,36(r4)
  808bc4:	20800a15 	stw	r2,40(r4)
  808bc8:	20000015 	stw	zero,0(r4)
  808bcc:	20000115 	stw	zero,4(r4)
  808bd0:	20000215 	stw	zero,8(r4)
  808bd4:	20000415 	stw	zero,16(r4)
  808bd8:	20000515 	stw	zero,20(r4)
  808bdc:	20000615 	stw	zero,24(r4)
  808be0:	21000715 	stw	r4,28(r4)
  808be4:	f800283a 	ret

00808be8 <__sfp_lock_acquire>:
  808be8:	f800283a 	ret

00808bec <__sfp_lock_release>:
  808bec:	f800283a 	ret

00808bf0 <__sinit_lock_acquire>:
  808bf0:	f800283a 	ret

00808bf4 <__sinit_lock_release>:
  808bf4:	f800283a 	ret

00808bf8 <__sinit>:
  808bf8:	20800e17 	ldw	r2,56(r4)
  808bfc:	defffd04 	addi	sp,sp,-12
  808c00:	dc400115 	stw	r17,4(sp)
  808c04:	dc000015 	stw	r16,0(sp)
  808c08:	dfc00215 	stw	ra,8(sp)
  808c0c:	04400044 	movi	r17,1
  808c10:	01400104 	movi	r5,4
  808c14:	000d883a 	mov	r6,zero
  808c18:	2021883a 	mov	r16,r4
  808c1c:	2200bb04 	addi	r8,r4,748
  808c20:	200f883a 	mov	r7,r4
  808c24:	10000526 	beq	r2,zero,808c3c <__sinit+0x44>
  808c28:	dfc00217 	ldw	ra,8(sp)
  808c2c:	dc400117 	ldw	r17,4(sp)
  808c30:	dc000017 	ldw	r16,0(sp)
  808c34:	dec00304 	addi	sp,sp,12
  808c38:	f800283a 	ret
  808c3c:	21000117 	ldw	r4,4(r4)
  808c40:	00802074 	movhi	r2,129
  808c44:	10a33704 	addi	r2,r2,-29476
  808c48:	00c000c4 	movi	r3,3
  808c4c:	80800f15 	stw	r2,60(r16)
  808c50:	80c0b915 	stw	r3,740(r16)
  808c54:	8200ba15 	stw	r8,744(r16)
  808c58:	84400e15 	stw	r17,56(r16)
  808c5c:	8000b815 	stw	zero,736(r16)
  808c60:	0808b900 	call	808b90 <std>
  808c64:	81000217 	ldw	r4,8(r16)
  808c68:	880d883a 	mov	r6,r17
  808c6c:	800f883a 	mov	r7,r16
  808c70:	01400284 	movi	r5,10
  808c74:	0808b900 	call	808b90 <std>
  808c78:	81000317 	ldw	r4,12(r16)
  808c7c:	800f883a 	mov	r7,r16
  808c80:	01400484 	movi	r5,18
  808c84:	01800084 	movi	r6,2
  808c88:	dfc00217 	ldw	ra,8(sp)
  808c8c:	dc400117 	ldw	r17,4(sp)
  808c90:	dc000017 	ldw	r16,0(sp)
  808c94:	dec00304 	addi	sp,sp,12
  808c98:	0808b901 	jmpi	808b90 <std>

00808c9c <__fp_lock>:
  808c9c:	0005883a 	mov	r2,zero
  808ca0:	f800283a 	ret

00808ca4 <__fp_unlock>:
  808ca4:	0005883a 	mov	r2,zero
  808ca8:	f800283a 	ret

00808cac <__fp_unlock_all>:
  808cac:	00802074 	movhi	r2,129
  808cb0:	1091ac04 	addi	r2,r2,18096
  808cb4:	11000017 	ldw	r4,0(r2)
  808cb8:	01402074 	movhi	r5,129
  808cbc:	29632904 	addi	r5,r5,-29532
  808cc0:	08099741 	jmpi	809974 <_fwalk>

00808cc4 <__fp_lock_all>:
  808cc4:	00802074 	movhi	r2,129
  808cc8:	1091ac04 	addi	r2,r2,18096
  808ccc:	11000017 	ldw	r4,0(r2)
  808cd0:	01402074 	movhi	r5,129
  808cd4:	29632704 	addi	r5,r5,-29540
  808cd8:	08099741 	jmpi	809974 <_fwalk>

00808cdc <_cleanup_r>:
  808cdc:	01402074 	movhi	r5,129
  808ce0:	29713304 	addi	r5,r5,-15156
  808ce4:	08099741 	jmpi	809974 <_fwalk>

00808ce8 <_cleanup>:
  808ce8:	00802074 	movhi	r2,129
  808cec:	1091ad04 	addi	r2,r2,18100
  808cf0:	11000017 	ldw	r4,0(r2)
  808cf4:	0808cdc1 	jmpi	808cdc <_cleanup_r>

00808cf8 <__sfmoreglue>:
  808cf8:	defffc04 	addi	sp,sp,-16
  808cfc:	dc000015 	stw	r16,0(sp)
  808d00:	2821883a 	mov	r16,r5
  808d04:	dc400115 	stw	r17,4(sp)
  808d08:	01401704 	movi	r5,92
  808d0c:	2023883a 	mov	r17,r4
  808d10:	8009883a 	mov	r4,r16
  808d14:	dfc00315 	stw	ra,12(sp)
  808d18:	dcc00215 	stw	r19,8(sp)
  808d1c:	0803eb80 	call	803eb8 <__mulsi3>
  808d20:	11400304 	addi	r5,r2,12
  808d24:	8809883a 	mov	r4,r17
  808d28:	1027883a 	mov	r19,r2
  808d2c:	0809c840 	call	809c84 <_malloc_r>
  808d30:	10c00304 	addi	r3,r2,12
  808d34:	1023883a 	mov	r17,r2
  808d38:	1809883a 	mov	r4,r3
  808d3c:	980d883a 	mov	r6,r19
  808d40:	000b883a 	mov	r5,zero
  808d44:	10000b26 	beq	r2,zero,808d74 <__sfmoreglue+0x7c>
  808d48:	14000115 	stw	r16,4(r2)
  808d4c:	10c00215 	stw	r3,8(r2)
  808d50:	10000015 	stw	zero,0(r2)
  808d54:	08044bc0 	call	8044bc <memset>
  808d58:	8805883a 	mov	r2,r17
  808d5c:	dfc00317 	ldw	ra,12(sp)
  808d60:	dcc00217 	ldw	r19,8(sp)
  808d64:	dc400117 	ldw	r17,4(sp)
  808d68:	dc000017 	ldw	r16,0(sp)
  808d6c:	dec00404 	addi	sp,sp,16
  808d70:	f800283a 	ret
  808d74:	0023883a 	mov	r17,zero
  808d78:	8805883a 	mov	r2,r17
  808d7c:	dfc00317 	ldw	ra,12(sp)
  808d80:	dcc00217 	ldw	r19,8(sp)
  808d84:	dc400117 	ldw	r17,4(sp)
  808d88:	dc000017 	ldw	r16,0(sp)
  808d8c:	dec00404 	addi	sp,sp,16
  808d90:	f800283a 	ret

00808d94 <__sfp>:
  808d94:	defffd04 	addi	sp,sp,-12
  808d98:	00802074 	movhi	r2,129
  808d9c:	1091ad04 	addi	r2,r2,18100
  808da0:	dc000015 	stw	r16,0(sp)
  808da4:	14000017 	ldw	r16,0(r2)
  808da8:	dc400115 	stw	r17,4(sp)
  808dac:	dfc00215 	stw	ra,8(sp)
  808db0:	80800e17 	ldw	r2,56(r16)
  808db4:	2023883a 	mov	r17,r4
  808db8:	10002626 	beq	r2,zero,808e54 <__sfp+0xc0>
  808dbc:	8400b804 	addi	r16,r16,736
  808dc0:	80800117 	ldw	r2,4(r16)
  808dc4:	81000217 	ldw	r4,8(r16)
  808dc8:	10ffffc4 	addi	r3,r2,-1
  808dcc:	18000916 	blt	r3,zero,808df4 <__sfp+0x60>
  808dd0:	2080030f 	ldh	r2,12(r4)
  808dd4:	10000b26 	beq	r2,zero,808e04 <__sfp+0x70>
  808dd8:	017fffc4 	movi	r5,-1
  808ddc:	00000206 	br	808de8 <__sfp+0x54>
  808de0:	2080030f 	ldh	r2,12(r4)
  808de4:	10000726 	beq	r2,zero,808e04 <__sfp+0x70>
  808de8:	18ffffc4 	addi	r3,r3,-1
  808dec:	21001704 	addi	r4,r4,92
  808df0:	197ffb1e 	bne	r3,r5,808de0 <__sfp+0x4c>
  808df4:	80800017 	ldw	r2,0(r16)
  808df8:	10001926 	beq	r2,zero,808e60 <__sfp+0xcc>
  808dfc:	1021883a 	mov	r16,r2
  808e00:	003fef06 	br	808dc0 <__sfp+0x2c>
  808e04:	00bfffc4 	movi	r2,-1
  808e08:	00c00044 	movi	r3,1
  808e0c:	2080038d 	sth	r2,14(r4)
  808e10:	20c0030d 	sth	r3,12(r4)
  808e14:	20000015 	stw	zero,0(r4)
  808e18:	20000215 	stw	zero,8(r4)
  808e1c:	20000115 	stw	zero,4(r4)
  808e20:	20000415 	stw	zero,16(r4)
  808e24:	20000515 	stw	zero,20(r4)
  808e28:	20000615 	stw	zero,24(r4)
  808e2c:	20000c15 	stw	zero,48(r4)
  808e30:	20000d15 	stw	zero,52(r4)
  808e34:	20001115 	stw	zero,68(r4)
  808e38:	20001215 	stw	zero,72(r4)
  808e3c:	2005883a 	mov	r2,r4
  808e40:	dfc00217 	ldw	ra,8(sp)
  808e44:	dc400117 	ldw	r17,4(sp)
  808e48:	dc000017 	ldw	r16,0(sp)
  808e4c:	dec00304 	addi	sp,sp,12
  808e50:	f800283a 	ret
  808e54:	8009883a 	mov	r4,r16
  808e58:	0808bf80 	call	808bf8 <__sinit>
  808e5c:	003fd706 	br	808dbc <__sfp+0x28>
  808e60:	8809883a 	mov	r4,r17
  808e64:	01400104 	movi	r5,4
  808e68:	0808cf80 	call	808cf8 <__sfmoreglue>
  808e6c:	80800015 	stw	r2,0(r16)
  808e70:	103fe21e 	bne	r2,zero,808dfc <__sfp+0x68>
  808e74:	00800304 	movi	r2,12
  808e78:	0009883a 	mov	r4,zero
  808e7c:	88800015 	stw	r2,0(r17)
  808e80:	003fee06 	br	808e3c <__sfp+0xa8>

00808e84 <fputc>:
  808e84:	defffc04 	addi	sp,sp,-16
  808e88:	dc800215 	stw	r18,8(sp)
  808e8c:	04802074 	movhi	r18,129
  808e90:	9491ac04 	addi	r18,r18,18096
  808e94:	90c00017 	ldw	r3,0(r18)
  808e98:	dc400115 	stw	r17,4(sp)
  808e9c:	dc000015 	stw	r16,0(sp)
  808ea0:	dfc00315 	stw	ra,12(sp)
  808ea4:	2021883a 	mov	r16,r4
  808ea8:	2823883a 	mov	r17,r5
  808eac:	18000326 	beq	r3,zero,808ebc <fputc+0x38>
  808eb0:	18800e17 	ldw	r2,56(r3)
  808eb4:	1809883a 	mov	r4,r3
  808eb8:	10000926 	beq	r2,zero,808ee0 <fputc+0x5c>
  808ebc:	91000017 	ldw	r4,0(r18)
  808ec0:	800b883a 	mov	r5,r16
  808ec4:	880d883a 	mov	r6,r17
  808ec8:	dfc00317 	ldw	ra,12(sp)
  808ecc:	dc800217 	ldw	r18,8(sp)
  808ed0:	dc400117 	ldw	r17,4(sp)
  808ed4:	dc000017 	ldw	r16,0(sp)
  808ed8:	dec00404 	addi	sp,sp,16
  808edc:	080b7b81 	jmpi	80b7b8 <_putc_r>
  808ee0:	0808bf80 	call	808bf8 <__sinit>
  808ee4:	003ff506 	br	808ebc <fputc+0x38>

00808ee8 <_fputc_r>:
  808ee8:	defffc04 	addi	sp,sp,-16
  808eec:	dc800215 	stw	r18,8(sp)
  808ef0:	dc400115 	stw	r17,4(sp)
  808ef4:	dc000015 	stw	r16,0(sp)
  808ef8:	dfc00315 	stw	ra,12(sp)
  808efc:	2021883a 	mov	r16,r4
  808f00:	2823883a 	mov	r17,r5
  808f04:	3025883a 	mov	r18,r6
  808f08:	20000226 	beq	r4,zero,808f14 <_fputc_r+0x2c>
  808f0c:	20800e17 	ldw	r2,56(r4)
  808f10:	10000926 	beq	r2,zero,808f38 <_fputc_r+0x50>
  808f14:	8009883a 	mov	r4,r16
  808f18:	880b883a 	mov	r5,r17
  808f1c:	900d883a 	mov	r6,r18
  808f20:	dfc00317 	ldw	ra,12(sp)
  808f24:	dc800217 	ldw	r18,8(sp)
  808f28:	dc400117 	ldw	r17,4(sp)
  808f2c:	dc000017 	ldw	r16,0(sp)
  808f30:	dec00404 	addi	sp,sp,16
  808f34:	080b7b81 	jmpi	80b7b8 <_putc_r>
  808f38:	0808bf80 	call	808bf8 <__sinit>
  808f3c:	003ff506 	br	808f14 <_fputc_r+0x2c>

00808f40 <_fputs_r>:
  808f40:	defff804 	addi	sp,sp,-32
  808f44:	dc000515 	stw	r16,20(sp)
  808f48:	2021883a 	mov	r16,r4
  808f4c:	2809883a 	mov	r4,r5
  808f50:	dc400615 	stw	r17,24(sp)
  808f54:	dfc00715 	stw	ra,28(sp)
  808f58:	3023883a 	mov	r17,r6
  808f5c:	d9400015 	stw	r5,0(sp)
  808f60:	0804ebc0 	call	804ebc <strlen>
  808f64:	00c00044 	movi	r3,1
  808f68:	d8800115 	stw	r2,4(sp)
  808f6c:	d8c00315 	stw	r3,12(sp)
  808f70:	d8800415 	stw	r2,16(sp)
  808f74:	dec00215 	stw	sp,8(sp)
  808f78:	80000326 	beq	r16,zero,808f88 <_fputs_r+0x48>
  808f7c:	80800e17 	ldw	r2,56(r16)
  808f80:	8009883a 	mov	r4,r16
  808f84:	10000926 	beq	r2,zero,808fac <_fputs_r+0x6c>
  808f88:	8009883a 	mov	r4,r16
  808f8c:	880b883a 	mov	r5,r17
  808f90:	d9800204 	addi	r6,sp,8
  808f94:	08094100 	call	809410 <__sfvwrite_r>
  808f98:	dfc00717 	ldw	ra,28(sp)
  808f9c:	dc400617 	ldw	r17,24(sp)
  808fa0:	dc000517 	ldw	r16,20(sp)
  808fa4:	dec00804 	addi	sp,sp,32
  808fa8:	f800283a 	ret
  808fac:	0808bf80 	call	808bf8 <__sinit>
  808fb0:	003ff506 	br	808f88 <_fputs_r+0x48>

00808fb4 <fputs>:
  808fb4:	01802074 	movhi	r6,129
  808fb8:	3191ac04 	addi	r6,r6,18096
  808fbc:	2007883a 	mov	r3,r4
  808fc0:	31000017 	ldw	r4,0(r6)
  808fc4:	280d883a 	mov	r6,r5
  808fc8:	180b883a 	mov	r5,r3
  808fcc:	0808f401 	jmpi	808f40 <_fputs_r>

00808fd0 <_malloc_trim_r>:
  808fd0:	defffb04 	addi	sp,sp,-20
  808fd4:	dcc00315 	stw	r19,12(sp)
  808fd8:	04c02074 	movhi	r19,129
  808fdc:	9ccbcf04 	addi	r19,r19,12092
  808fe0:	dc800215 	stw	r18,8(sp)
  808fe4:	dc400115 	stw	r17,4(sp)
  808fe8:	dc000015 	stw	r16,0(sp)
  808fec:	2823883a 	mov	r17,r5
  808ff0:	2025883a 	mov	r18,r4
  808ff4:	dfc00415 	stw	ra,16(sp)
  808ff8:	080e5940 	call	80e594 <__malloc_lock>
  808ffc:	98800217 	ldw	r2,8(r19)
  809000:	9009883a 	mov	r4,r18
  809004:	000b883a 	mov	r5,zero
  809008:	10c00117 	ldw	r3,4(r2)
  80900c:	00bfff04 	movi	r2,-4
  809010:	18a0703a 	and	r16,r3,r2
  809014:	8463c83a 	sub	r17,r16,r17
  809018:	8c43fbc4 	addi	r17,r17,4079
  80901c:	8822d33a 	srli	r17,r17,12
  809020:	0083ffc4 	movi	r2,4095
  809024:	8c7fffc4 	addi	r17,r17,-1
  809028:	8822933a 	slli	r17,r17,12
  80902c:	1440060e 	bge	r2,r17,809048 <_malloc_trim_r+0x78>
  809030:	080bf040 	call	80bf04 <_sbrk_r>
  809034:	98c00217 	ldw	r3,8(r19)
  809038:	9009883a 	mov	r4,r18
  80903c:	044bc83a 	sub	r5,zero,r17
  809040:	80c7883a 	add	r3,r16,r3
  809044:	10c00926 	beq	r2,r3,80906c <_malloc_trim_r+0x9c>
  809048:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80904c:	0005883a 	mov	r2,zero
  809050:	dfc00417 	ldw	ra,16(sp)
  809054:	dcc00317 	ldw	r19,12(sp)
  809058:	dc800217 	ldw	r18,8(sp)
  80905c:	dc400117 	ldw	r17,4(sp)
  809060:	dc000017 	ldw	r16,0(sp)
  809064:	dec00504 	addi	sp,sp,20
  809068:	f800283a 	ret
  80906c:	9009883a 	mov	r4,r18
  809070:	080bf040 	call	80bf04 <_sbrk_r>
  809074:	844dc83a 	sub	r6,r16,r17
  809078:	00ffffc4 	movi	r3,-1
  80907c:	9009883a 	mov	r4,r18
  809080:	000b883a 	mov	r5,zero
  809084:	01c02074 	movhi	r7,129
  809088:	39d93904 	addi	r7,r7,25828
  80908c:	31800054 	ori	r6,r6,1
  809090:	10c00926 	beq	r2,r3,8090b8 <_malloc_trim_r+0xe8>
  809094:	38800017 	ldw	r2,0(r7)
  809098:	98c00217 	ldw	r3,8(r19)
  80909c:	9009883a 	mov	r4,r18
  8090a0:	1445c83a 	sub	r2,r2,r17
  8090a4:	38800015 	stw	r2,0(r7)
  8090a8:	19800115 	stw	r6,4(r3)
  8090ac:	080e5b40 	call	80e5b4 <__malloc_unlock>
  8090b0:	00800044 	movi	r2,1
  8090b4:	003fe606 	br	809050 <_malloc_trim_r+0x80>
  8090b8:	080bf040 	call	80bf04 <_sbrk_r>
  8090bc:	99800217 	ldw	r6,8(r19)
  8090c0:	100f883a 	mov	r7,r2
  8090c4:	9009883a 	mov	r4,r18
  8090c8:	1187c83a 	sub	r3,r2,r6
  8090cc:	008003c4 	movi	r2,15
  8090d0:	19400054 	ori	r5,r3,1
  8090d4:	10ffdc0e 	bge	r2,r3,809048 <_malloc_trim_r+0x78>
  8090d8:	00802074 	movhi	r2,129
  8090dc:	1091b104 	addi	r2,r2,18116
  8090e0:	10c00017 	ldw	r3,0(r2)
  8090e4:	00802074 	movhi	r2,129
  8090e8:	10993904 	addi	r2,r2,25828
  8090ec:	31400115 	stw	r5,4(r6)
  8090f0:	38c7c83a 	sub	r3,r7,r3
  8090f4:	10c00015 	stw	r3,0(r2)
  8090f8:	003fd306 	br	809048 <_malloc_trim_r+0x78>

008090fc <_free_r>:
  8090fc:	defffd04 	addi	sp,sp,-12
  809100:	dc400115 	stw	r17,4(sp)
  809104:	dc000015 	stw	r16,0(sp)
  809108:	dfc00215 	stw	ra,8(sp)
  80910c:	2821883a 	mov	r16,r5
  809110:	2023883a 	mov	r17,r4
  809114:	28005a26 	beq	r5,zero,809280 <_free_r+0x184>
  809118:	080e5940 	call	80e594 <__malloc_lock>
  80911c:	823ffe04 	addi	r8,r16,-8
  809120:	41400117 	ldw	r5,4(r8)
  809124:	00bfff84 	movi	r2,-2
  809128:	02802074 	movhi	r10,129
  80912c:	528bcf04 	addi	r10,r10,12092
  809130:	288e703a 	and	r7,r5,r2
  809134:	41cd883a 	add	r6,r8,r7
  809138:	30c00117 	ldw	r3,4(r6)
  80913c:	51000217 	ldw	r4,8(r10)
  809140:	00bfff04 	movi	r2,-4
  809144:	1892703a 	and	r9,r3,r2
  809148:	5017883a 	mov	r11,r10
  80914c:	31006726 	beq	r6,r4,8092ec <_free_r+0x1f0>
  809150:	2880004c 	andi	r2,r5,1
  809154:	1005003a 	cmpeq	r2,r2,zero
  809158:	32400115 	stw	r9,4(r6)
  80915c:	10001a1e 	bne	r2,zero,8091c8 <_free_r+0xcc>
  809160:	000b883a 	mov	r5,zero
  809164:	3247883a 	add	r3,r6,r9
  809168:	18800117 	ldw	r2,4(r3)
  80916c:	1080004c 	andi	r2,r2,1
  809170:	1000231e 	bne	r2,zero,809200 <_free_r+0x104>
  809174:	280ac03a 	cmpne	r5,r5,zero
  809178:	3a4f883a 	add	r7,r7,r9
  80917c:	2800451e 	bne	r5,zero,809294 <_free_r+0x198>
  809180:	31000217 	ldw	r4,8(r6)
  809184:	00802074 	movhi	r2,129
  809188:	108bd104 	addi	r2,r2,12100
  80918c:	20807b26 	beq	r4,r2,80937c <_free_r+0x280>
  809190:	30800317 	ldw	r2,12(r6)
  809194:	3a07883a 	add	r3,r7,r8
  809198:	19c00015 	stw	r7,0(r3)
  80919c:	11000215 	stw	r4,8(r2)
  8091a0:	20800315 	stw	r2,12(r4)
  8091a4:	38800054 	ori	r2,r7,1
  8091a8:	40800115 	stw	r2,4(r8)
  8091ac:	28001a26 	beq	r5,zero,809218 <_free_r+0x11c>
  8091b0:	8809883a 	mov	r4,r17
  8091b4:	dfc00217 	ldw	ra,8(sp)
  8091b8:	dc400117 	ldw	r17,4(sp)
  8091bc:	dc000017 	ldw	r16,0(sp)
  8091c0:	dec00304 	addi	sp,sp,12
  8091c4:	080e5b41 	jmpi	80e5b4 <__malloc_unlock>
  8091c8:	80bffe17 	ldw	r2,-8(r16)
  8091cc:	50c00204 	addi	r3,r10,8
  8091d0:	4091c83a 	sub	r8,r8,r2
  8091d4:	41000217 	ldw	r4,8(r8)
  8091d8:	388f883a 	add	r7,r7,r2
  8091dc:	20c06126 	beq	r4,r3,809364 <_free_r+0x268>
  8091e0:	40800317 	ldw	r2,12(r8)
  8091e4:	3247883a 	add	r3,r6,r9
  8091e8:	000b883a 	mov	r5,zero
  8091ec:	11000215 	stw	r4,8(r2)
  8091f0:	20800315 	stw	r2,12(r4)
  8091f4:	18800117 	ldw	r2,4(r3)
  8091f8:	1080004c 	andi	r2,r2,1
  8091fc:	103fdd26 	beq	r2,zero,809174 <_free_r+0x78>
  809200:	38800054 	ori	r2,r7,1
  809204:	3a07883a 	add	r3,r7,r8
  809208:	280ac03a 	cmpne	r5,r5,zero
  80920c:	40800115 	stw	r2,4(r8)
  809210:	19c00015 	stw	r7,0(r3)
  809214:	283fe61e 	bne	r5,zero,8091b0 <_free_r+0xb4>
  809218:	00807fc4 	movi	r2,511
  80921c:	11c01f2e 	bgeu	r2,r7,80929c <_free_r+0x1a0>
  809220:	3806d27a 	srli	r3,r7,9
  809224:	1800481e 	bne	r3,zero,809348 <_free_r+0x24c>
  809228:	3804d0fa 	srli	r2,r7,3
  80922c:	100690fa 	slli	r3,r2,3
  809230:	1acd883a 	add	r6,r3,r11
  809234:	31400217 	ldw	r5,8(r6)
  809238:	31405926 	beq	r6,r5,8093a0 <_free_r+0x2a4>
  80923c:	28800117 	ldw	r2,4(r5)
  809240:	00ffff04 	movi	r3,-4
  809244:	10c4703a 	and	r2,r2,r3
  809248:	3880022e 	bgeu	r7,r2,809254 <_free_r+0x158>
  80924c:	29400217 	ldw	r5,8(r5)
  809250:	317ffa1e 	bne	r6,r5,80923c <_free_r+0x140>
  809254:	29800317 	ldw	r6,12(r5)
  809258:	41800315 	stw	r6,12(r8)
  80925c:	41400215 	stw	r5,8(r8)
  809260:	8809883a 	mov	r4,r17
  809264:	2a000315 	stw	r8,12(r5)
  809268:	32000215 	stw	r8,8(r6)
  80926c:	dfc00217 	ldw	ra,8(sp)
  809270:	dc400117 	ldw	r17,4(sp)
  809274:	dc000017 	ldw	r16,0(sp)
  809278:	dec00304 	addi	sp,sp,12
  80927c:	080e5b41 	jmpi	80e5b4 <__malloc_unlock>
  809280:	dfc00217 	ldw	ra,8(sp)
  809284:	dc400117 	ldw	r17,4(sp)
  809288:	dc000017 	ldw	r16,0(sp)
  80928c:	dec00304 	addi	sp,sp,12
  809290:	f800283a 	ret
  809294:	31000217 	ldw	r4,8(r6)
  809298:	003fbd06 	br	809190 <_free_r+0x94>
  80929c:	3806d0fa 	srli	r3,r7,3
  8092a0:	00800044 	movi	r2,1
  8092a4:	51400117 	ldw	r5,4(r10)
  8092a8:	180890fa 	slli	r4,r3,3
  8092ac:	1807d0ba 	srai	r3,r3,2
  8092b0:	22c9883a 	add	r4,r4,r11
  8092b4:	21800217 	ldw	r6,8(r4)
  8092b8:	10c4983a 	sll	r2,r2,r3
  8092bc:	41000315 	stw	r4,12(r8)
  8092c0:	41800215 	stw	r6,8(r8)
  8092c4:	288ab03a 	or	r5,r5,r2
  8092c8:	22000215 	stw	r8,8(r4)
  8092cc:	8809883a 	mov	r4,r17
  8092d0:	51400115 	stw	r5,4(r10)
  8092d4:	32000315 	stw	r8,12(r6)
  8092d8:	dfc00217 	ldw	ra,8(sp)
  8092dc:	dc400117 	ldw	r17,4(sp)
  8092e0:	dc000017 	ldw	r16,0(sp)
  8092e4:	dec00304 	addi	sp,sp,12
  8092e8:	080e5b41 	jmpi	80e5b4 <__malloc_unlock>
  8092ec:	2880004c 	andi	r2,r5,1
  8092f0:	3a4d883a 	add	r6,r7,r9
  8092f4:	1000071e 	bne	r2,zero,809314 <_free_r+0x218>
  8092f8:	80bffe17 	ldw	r2,-8(r16)
  8092fc:	4091c83a 	sub	r8,r8,r2
  809300:	41000317 	ldw	r4,12(r8)
  809304:	40c00217 	ldw	r3,8(r8)
  809308:	308d883a 	add	r6,r6,r2
  80930c:	20c00215 	stw	r3,8(r4)
  809310:	19000315 	stw	r4,12(r3)
  809314:	00802074 	movhi	r2,129
  809318:	1091b004 	addi	r2,r2,18112
  80931c:	11000017 	ldw	r4,0(r2)
  809320:	30c00054 	ori	r3,r6,1
  809324:	52000215 	stw	r8,8(r10)
  809328:	40c00115 	stw	r3,4(r8)
  80932c:	313fa036 	bltu	r6,r4,8091b0 <_free_r+0xb4>
  809330:	00802074 	movhi	r2,129
  809334:	10992f04 	addi	r2,r2,25788
  809338:	11400017 	ldw	r5,0(r2)
  80933c:	8809883a 	mov	r4,r17
  809340:	0808fd00 	call	808fd0 <_malloc_trim_r>
  809344:	003f9a06 	br	8091b0 <_free_r+0xb4>
  809348:	00800104 	movi	r2,4
  80934c:	10c0072e 	bgeu	r2,r3,80936c <_free_r+0x270>
  809350:	00800504 	movi	r2,20
  809354:	10c01936 	bltu	r2,r3,8093bc <_free_r+0x2c0>
  809358:	188016c4 	addi	r2,r3,91
  80935c:	100690fa 	slli	r3,r2,3
  809360:	003fb306 	br	809230 <_free_r+0x134>
  809364:	01400044 	movi	r5,1
  809368:	003f7e06 	br	809164 <_free_r+0x68>
  80936c:	3804d1ba 	srli	r2,r7,6
  809370:	10800e04 	addi	r2,r2,56
  809374:	100690fa 	slli	r3,r2,3
  809378:	003fad06 	br	809230 <_free_r+0x134>
  80937c:	22000315 	stw	r8,12(r4)
  809380:	22000215 	stw	r8,8(r4)
  809384:	3a05883a 	add	r2,r7,r8
  809388:	38c00054 	ori	r3,r7,1
  80938c:	11c00015 	stw	r7,0(r2)
  809390:	41000215 	stw	r4,8(r8)
  809394:	40c00115 	stw	r3,4(r8)
  809398:	41000315 	stw	r4,12(r8)
  80939c:	003f8406 	br	8091b0 <_free_r+0xb4>
  8093a0:	1005d0ba 	srai	r2,r2,2
  8093a4:	00c00044 	movi	r3,1
  8093a8:	51000117 	ldw	r4,4(r10)
  8093ac:	1886983a 	sll	r3,r3,r2
  8093b0:	20c8b03a 	or	r4,r4,r3
  8093b4:	51000115 	stw	r4,4(r10)
  8093b8:	003fa706 	br	809258 <_free_r+0x15c>
  8093bc:	00801504 	movi	r2,84
  8093c0:	10c00436 	bltu	r2,r3,8093d4 <_free_r+0x2d8>
  8093c4:	3804d33a 	srli	r2,r7,12
  8093c8:	10801b84 	addi	r2,r2,110
  8093cc:	100690fa 	slli	r3,r2,3
  8093d0:	003f9706 	br	809230 <_free_r+0x134>
  8093d4:	00805504 	movi	r2,340
  8093d8:	10c00436 	bltu	r2,r3,8093ec <_free_r+0x2f0>
  8093dc:	3804d3fa 	srli	r2,r7,15
  8093e0:	10801dc4 	addi	r2,r2,119
  8093e4:	100690fa 	slli	r3,r2,3
  8093e8:	003f9106 	br	809230 <_free_r+0x134>
  8093ec:	00815504 	movi	r2,1364
  8093f0:	10c0032e 	bgeu	r2,r3,809400 <_free_r+0x304>
  8093f4:	00801f84 	movi	r2,126
  8093f8:	00c0fc04 	movi	r3,1008
  8093fc:	003f8c06 	br	809230 <_free_r+0x134>
  809400:	3804d4ba 	srli	r2,r7,18
  809404:	10801f04 	addi	r2,r2,124
  809408:	100690fa 	slli	r3,r2,3
  80940c:	003f8806 	br	809230 <_free_r+0x134>

00809410 <__sfvwrite_r>:
  809410:	30800217 	ldw	r2,8(r6)
  809414:	defff504 	addi	sp,sp,-44
  809418:	df000915 	stw	fp,36(sp)
  80941c:	dd800715 	stw	r22,28(sp)
  809420:	dc800315 	stw	r18,12(sp)
  809424:	dfc00a15 	stw	ra,40(sp)
  809428:	ddc00815 	stw	r23,32(sp)
  80942c:	dd400615 	stw	r21,24(sp)
  809430:	dd000515 	stw	r20,20(sp)
  809434:	dcc00415 	stw	r19,16(sp)
  809438:	dc400215 	stw	r17,8(sp)
  80943c:	dc000115 	stw	r16,4(sp)
  809440:	302d883a 	mov	r22,r6
  809444:	2039883a 	mov	fp,r4
  809448:	2825883a 	mov	r18,r5
  80944c:	10001c26 	beq	r2,zero,8094c0 <__sfvwrite_r+0xb0>
  809450:	29c0030b 	ldhu	r7,12(r5)
  809454:	3880020c 	andi	r2,r7,8
  809458:	10002726 	beq	r2,zero,8094f8 <__sfvwrite_r+0xe8>
  80945c:	28800417 	ldw	r2,16(r5)
  809460:	10002526 	beq	r2,zero,8094f8 <__sfvwrite_r+0xe8>
  809464:	3880008c 	andi	r2,r7,2
  809468:	b5400017 	ldw	r21,0(r22)
  80946c:	10002826 	beq	r2,zero,809510 <__sfvwrite_r+0x100>
  809470:	0021883a 	mov	r16,zero
  809474:	0023883a 	mov	r17,zero
  809478:	880d883a 	mov	r6,r17
  80947c:	e009883a 	mov	r4,fp
  809480:	00810004 	movi	r2,1024
  809484:	80006e26 	beq	r16,zero,809640 <__sfvwrite_r+0x230>
  809488:	800f883a 	mov	r7,r16
  80948c:	91400717 	ldw	r5,28(r18)
  809490:	1400012e 	bgeu	r2,r16,809498 <__sfvwrite_r+0x88>
  809494:	100f883a 	mov	r7,r2
  809498:	90c00917 	ldw	r3,36(r18)
  80949c:	183ee83a 	callr	r3
  8094a0:	1007883a 	mov	r3,r2
  8094a4:	80a1c83a 	sub	r16,r16,r2
  8094a8:	88a3883a 	add	r17,r17,r2
  8094ac:	00806d0e 	bge	zero,r2,809664 <__sfvwrite_r+0x254>
  8094b0:	b0800217 	ldw	r2,8(r22)
  8094b4:	10c5c83a 	sub	r2,r2,r3
  8094b8:	b0800215 	stw	r2,8(r22)
  8094bc:	103fee1e 	bne	r2,zero,809478 <__sfvwrite_r+0x68>
  8094c0:	0009883a 	mov	r4,zero
  8094c4:	2005883a 	mov	r2,r4
  8094c8:	dfc00a17 	ldw	ra,40(sp)
  8094cc:	df000917 	ldw	fp,36(sp)
  8094d0:	ddc00817 	ldw	r23,32(sp)
  8094d4:	dd800717 	ldw	r22,28(sp)
  8094d8:	dd400617 	ldw	r21,24(sp)
  8094dc:	dd000517 	ldw	r20,20(sp)
  8094e0:	dcc00417 	ldw	r19,16(sp)
  8094e4:	dc800317 	ldw	r18,12(sp)
  8094e8:	dc400217 	ldw	r17,8(sp)
  8094ec:	dc000117 	ldw	r16,4(sp)
  8094f0:	dec00b04 	addi	sp,sp,44
  8094f4:	f800283a 	ret
  8094f8:	0806e780 	call	806e78 <__swsetup_r>
  8094fc:	1000e41e 	bne	r2,zero,809890 <__sfvwrite_r+0x480>
  809500:	91c0030b 	ldhu	r7,12(r18)
  809504:	b5400017 	ldw	r21,0(r22)
  809508:	3880008c 	andi	r2,r7,2
  80950c:	103fd81e 	bne	r2,zero,809470 <__sfvwrite_r+0x60>
  809510:	3880004c 	andi	r2,r7,1
  809514:	1005003a 	cmpeq	r2,r2,zero
  809518:	10005726 	beq	r2,zero,809678 <__sfvwrite_r+0x268>
  80951c:	0029883a 	mov	r20,zero
  809520:	002f883a 	mov	r23,zero
  809524:	a0004226 	beq	r20,zero,809630 <__sfvwrite_r+0x220>
  809528:	3880800c 	andi	r2,r7,512
  80952c:	94000217 	ldw	r16,8(r18)
  809530:	10008b26 	beq	r2,zero,809760 <__sfvwrite_r+0x350>
  809534:	800d883a 	mov	r6,r16
  809538:	a400a536 	bltu	r20,r16,8097d0 <__sfvwrite_r+0x3c0>
  80953c:	3881200c 	andi	r2,r7,1152
  809540:	10002726 	beq	r2,zero,8095e0 <__sfvwrite_r+0x1d0>
  809544:	90800517 	ldw	r2,20(r18)
  809548:	92000417 	ldw	r8,16(r18)
  80954c:	91400017 	ldw	r5,0(r18)
  809550:	1087883a 	add	r3,r2,r2
  809554:	1887883a 	add	r3,r3,r2
  809558:	1808d7fa 	srli	r4,r3,31
  80955c:	2a21c83a 	sub	r16,r5,r8
  809560:	80800044 	addi	r2,r16,1
  809564:	20c9883a 	add	r4,r4,r3
  809568:	2027d07a 	srai	r19,r4,1
  80956c:	a085883a 	add	r2,r20,r2
  809570:	980d883a 	mov	r6,r19
  809574:	9880022e 	bgeu	r19,r2,809580 <__sfvwrite_r+0x170>
  809578:	1027883a 	mov	r19,r2
  80957c:	100d883a 	mov	r6,r2
  809580:	3881000c 	andi	r2,r7,1024
  809584:	1000b826 	beq	r2,zero,809868 <__sfvwrite_r+0x458>
  809588:	300b883a 	mov	r5,r6
  80958c:	e009883a 	mov	r4,fp
  809590:	0809c840 	call	809c84 <_malloc_r>
  809594:	10003126 	beq	r2,zero,80965c <__sfvwrite_r+0x24c>
  809598:	91400417 	ldw	r5,16(r18)
  80959c:	1009883a 	mov	r4,r2
  8095a0:	800d883a 	mov	r6,r16
  8095a4:	1023883a 	mov	r17,r2
  8095a8:	080a4a80 	call	80a4a8 <memcpy>
  8095ac:	90c0030b 	ldhu	r3,12(r18)
  8095b0:	00beffc4 	movi	r2,-1025
  8095b4:	1886703a 	and	r3,r3,r2
  8095b8:	18c02014 	ori	r3,r3,128
  8095bc:	90c0030d 	sth	r3,12(r18)
  8095c0:	9c07c83a 	sub	r3,r19,r16
  8095c4:	8c05883a 	add	r2,r17,r16
  8095c8:	a00d883a 	mov	r6,r20
  8095cc:	a021883a 	mov	r16,r20
  8095d0:	90800015 	stw	r2,0(r18)
  8095d4:	90c00215 	stw	r3,8(r18)
  8095d8:	94400415 	stw	r17,16(r18)
  8095dc:	94c00515 	stw	r19,20(r18)
  8095e0:	91000017 	ldw	r4,0(r18)
  8095e4:	b80b883a 	mov	r5,r23
  8095e8:	a023883a 	mov	r17,r20
  8095ec:	080a5480 	call	80a548 <memmove>
  8095f0:	90c00217 	ldw	r3,8(r18)
  8095f4:	90800017 	ldw	r2,0(r18)
  8095f8:	a027883a 	mov	r19,r20
  8095fc:	1c07c83a 	sub	r3,r3,r16
  809600:	1405883a 	add	r2,r2,r16
  809604:	90c00215 	stw	r3,8(r18)
  809608:	a021883a 	mov	r16,r20
  80960c:	90800015 	stw	r2,0(r18)
  809610:	b0800217 	ldw	r2,8(r22)
  809614:	1405c83a 	sub	r2,r2,r16
  809618:	b0800215 	stw	r2,8(r22)
  80961c:	103fa826 	beq	r2,zero,8094c0 <__sfvwrite_r+0xb0>
  809620:	a469c83a 	sub	r20,r20,r17
  809624:	91c0030b 	ldhu	r7,12(r18)
  809628:	bcef883a 	add	r23,r23,r19
  80962c:	a03fbe1e 	bne	r20,zero,809528 <__sfvwrite_r+0x118>
  809630:	adc00017 	ldw	r23,0(r21)
  809634:	ad000117 	ldw	r20,4(r21)
  809638:	ad400204 	addi	r21,r21,8
  80963c:	003fb906 	br	809524 <__sfvwrite_r+0x114>
  809640:	ac400017 	ldw	r17,0(r21)
  809644:	ac000117 	ldw	r16,4(r21)
  809648:	ad400204 	addi	r21,r21,8
  80964c:	003f8a06 	br	809478 <__sfvwrite_r+0x68>
  809650:	91400417 	ldw	r5,16(r18)
  809654:	e009883a 	mov	r4,fp
  809658:	08090fc0 	call	8090fc <_free_r>
  80965c:	00800304 	movi	r2,12
  809660:	e0800015 	stw	r2,0(fp)
  809664:	9080030b 	ldhu	r2,12(r18)
  809668:	013fffc4 	movi	r4,-1
  80966c:	10801014 	ori	r2,r2,64
  809670:	9080030d 	sth	r2,12(r18)
  809674:	003f9306 	br	8094c4 <__sfvwrite_r+0xb4>
  809678:	0027883a 	mov	r19,zero
  80967c:	002f883a 	mov	r23,zero
  809680:	d8000015 	stw	zero,0(sp)
  809684:	0029883a 	mov	r20,zero
  809688:	98001e26 	beq	r19,zero,809704 <__sfvwrite_r+0x2f4>
  80968c:	d8c00017 	ldw	r3,0(sp)
  809690:	1804c03a 	cmpne	r2,r3,zero
  809694:	10005e26 	beq	r2,zero,809810 <__sfvwrite_r+0x400>
  809698:	9821883a 	mov	r16,r19
  80969c:	a4c0012e 	bgeu	r20,r19,8096a4 <__sfvwrite_r+0x294>
  8096a0:	a021883a 	mov	r16,r20
  8096a4:	91000017 	ldw	r4,0(r18)
  8096a8:	90800417 	ldw	r2,16(r18)
  8096ac:	91800217 	ldw	r6,8(r18)
  8096b0:	91c00517 	ldw	r7,20(r18)
  8096b4:	1100022e 	bgeu	r2,r4,8096c0 <__sfvwrite_r+0x2b0>
  8096b8:	31e3883a 	add	r17,r6,r7
  8096bc:	8c001616 	blt	r17,r16,809718 <__sfvwrite_r+0x308>
  8096c0:	81c03816 	blt	r16,r7,8097a4 <__sfvwrite_r+0x394>
  8096c4:	90c00917 	ldw	r3,36(r18)
  8096c8:	91400717 	ldw	r5,28(r18)
  8096cc:	e009883a 	mov	r4,fp
  8096d0:	b80d883a 	mov	r6,r23
  8096d4:	183ee83a 	callr	r3
  8096d8:	1023883a 	mov	r17,r2
  8096dc:	00bfe10e 	bge	zero,r2,809664 <__sfvwrite_r+0x254>
  8096e0:	a469c83a 	sub	r20,r20,r17
  8096e4:	a0001826 	beq	r20,zero,809748 <__sfvwrite_r+0x338>
  8096e8:	b0800217 	ldw	r2,8(r22)
  8096ec:	1445c83a 	sub	r2,r2,r17
  8096f0:	b0800215 	stw	r2,8(r22)
  8096f4:	103f7226 	beq	r2,zero,8094c0 <__sfvwrite_r+0xb0>
  8096f8:	9c67c83a 	sub	r19,r19,r17
  8096fc:	bc6f883a 	add	r23,r23,r17
  809700:	983fe21e 	bne	r19,zero,80968c <__sfvwrite_r+0x27c>
  809704:	adc00017 	ldw	r23,0(r21)
  809708:	acc00117 	ldw	r19,4(r21)
  80970c:	ad400204 	addi	r21,r21,8
  809710:	d8000015 	stw	zero,0(sp)
  809714:	003fdc06 	br	809688 <__sfvwrite_r+0x278>
  809718:	b80b883a 	mov	r5,r23
  80971c:	880d883a 	mov	r6,r17
  809720:	080a5480 	call	80a548 <memmove>
  809724:	90c00017 	ldw	r3,0(r18)
  809728:	e009883a 	mov	r4,fp
  80972c:	900b883a 	mov	r5,r18
  809730:	1c47883a 	add	r3,r3,r17
  809734:	90c00015 	stw	r3,0(r18)
  809738:	08089600 	call	808960 <_fflush_r>
  80973c:	103fc91e 	bne	r2,zero,809664 <__sfvwrite_r+0x254>
  809740:	a469c83a 	sub	r20,r20,r17
  809744:	a03fe81e 	bne	r20,zero,8096e8 <__sfvwrite_r+0x2d8>
  809748:	e009883a 	mov	r4,fp
  80974c:	900b883a 	mov	r5,r18
  809750:	08089600 	call	808960 <_fflush_r>
  809754:	103fc31e 	bne	r2,zero,809664 <__sfvwrite_r+0x254>
  809758:	d8000015 	stw	zero,0(sp)
  80975c:	003fe206 	br	8096e8 <__sfvwrite_r+0x2d8>
  809760:	91000017 	ldw	r4,0(r18)
  809764:	90800417 	ldw	r2,16(r18)
  809768:	1100022e 	bgeu	r2,r4,809774 <__sfvwrite_r+0x364>
  80976c:	8023883a 	mov	r17,r16
  809770:	85003136 	bltu	r16,r20,809838 <__sfvwrite_r+0x428>
  809774:	91c00517 	ldw	r7,20(r18)
  809778:	a1c01836 	bltu	r20,r7,8097dc <__sfvwrite_r+0x3cc>
  80977c:	90c00917 	ldw	r3,36(r18)
  809780:	91400717 	ldw	r5,28(r18)
  809784:	e009883a 	mov	r4,fp
  809788:	b80d883a 	mov	r6,r23
  80978c:	183ee83a 	callr	r3
  809790:	1021883a 	mov	r16,r2
  809794:	00bfb30e 	bge	zero,r2,809664 <__sfvwrite_r+0x254>
  809798:	1023883a 	mov	r17,r2
  80979c:	1027883a 	mov	r19,r2
  8097a0:	003f9b06 	br	809610 <__sfvwrite_r+0x200>
  8097a4:	b80b883a 	mov	r5,r23
  8097a8:	800d883a 	mov	r6,r16
  8097ac:	080a5480 	call	80a548 <memmove>
  8097b0:	90c00217 	ldw	r3,8(r18)
  8097b4:	90800017 	ldw	r2,0(r18)
  8097b8:	8023883a 	mov	r17,r16
  8097bc:	1c07c83a 	sub	r3,r3,r16
  8097c0:	1405883a 	add	r2,r2,r16
  8097c4:	90c00215 	stw	r3,8(r18)
  8097c8:	90800015 	stw	r2,0(r18)
  8097cc:	003fc406 	br	8096e0 <__sfvwrite_r+0x2d0>
  8097d0:	a00d883a 	mov	r6,r20
  8097d4:	a021883a 	mov	r16,r20
  8097d8:	003f8106 	br	8095e0 <__sfvwrite_r+0x1d0>
  8097dc:	b80b883a 	mov	r5,r23
  8097e0:	a00d883a 	mov	r6,r20
  8097e4:	080a5480 	call	80a548 <memmove>
  8097e8:	90c00217 	ldw	r3,8(r18)
  8097ec:	90800017 	ldw	r2,0(r18)
  8097f0:	a021883a 	mov	r16,r20
  8097f4:	1d07c83a 	sub	r3,r3,r20
  8097f8:	1505883a 	add	r2,r2,r20
  8097fc:	a023883a 	mov	r17,r20
  809800:	a027883a 	mov	r19,r20
  809804:	90c00215 	stw	r3,8(r18)
  809808:	90800015 	stw	r2,0(r18)
  80980c:	003f8006 	br	809610 <__sfvwrite_r+0x200>
  809810:	b809883a 	mov	r4,r23
  809814:	01400284 	movi	r5,10
  809818:	980d883a 	mov	r6,r19
  80981c:	080a3c40 	call	80a3c4 <memchr>
  809820:	10001726 	beq	r2,zero,809880 <__sfvwrite_r+0x470>
  809824:	15c5c83a 	sub	r2,r2,r23
  809828:	15000044 	addi	r20,r2,1
  80982c:	00800044 	movi	r2,1
  809830:	d8800015 	stw	r2,0(sp)
  809834:	003f9806 	br	809698 <__sfvwrite_r+0x288>
  809838:	b80b883a 	mov	r5,r23
  80983c:	800d883a 	mov	r6,r16
  809840:	080a5480 	call	80a548 <memmove>
  809844:	90c00017 	ldw	r3,0(r18)
  809848:	e009883a 	mov	r4,fp
  80984c:	900b883a 	mov	r5,r18
  809850:	1c07883a 	add	r3,r3,r16
  809854:	90c00015 	stw	r3,0(r18)
  809858:	8027883a 	mov	r19,r16
  80985c:	08089600 	call	808960 <_fflush_r>
  809860:	103f6b26 	beq	r2,zero,809610 <__sfvwrite_r+0x200>
  809864:	003f7f06 	br	809664 <__sfvwrite_r+0x254>
  809868:	400b883a 	mov	r5,r8
  80986c:	e009883a 	mov	r4,fp
  809870:	080b8a00 	call	80b8a0 <_realloc_r>
  809874:	103f7626 	beq	r2,zero,809650 <__sfvwrite_r+0x240>
  809878:	1023883a 	mov	r17,r2
  80987c:	003f5006 	br	8095c0 <__sfvwrite_r+0x1b0>
  809880:	00c00044 	movi	r3,1
  809884:	9d000044 	addi	r20,r19,1
  809888:	d8c00015 	stw	r3,0(sp)
  80988c:	003f8206 	br	809698 <__sfvwrite_r+0x288>
  809890:	9080030b 	ldhu	r2,12(r18)
  809894:	00c00244 	movi	r3,9
  809898:	013fffc4 	movi	r4,-1
  80989c:	10801014 	ori	r2,r2,64
  8098a0:	9080030d 	sth	r2,12(r18)
  8098a4:	e0c00015 	stw	r3,0(fp)
  8098a8:	003f0606 	br	8094c4 <__sfvwrite_r+0xb4>

008098ac <_fwalk_reent>:
  8098ac:	defff704 	addi	sp,sp,-36
  8098b0:	dcc00315 	stw	r19,12(sp)
  8098b4:	24c0b804 	addi	r19,r4,736
  8098b8:	dd800615 	stw	r22,24(sp)
  8098bc:	dd400515 	stw	r21,20(sp)
  8098c0:	dfc00815 	stw	ra,32(sp)
  8098c4:	ddc00715 	stw	r23,28(sp)
  8098c8:	dd000415 	stw	r20,16(sp)
  8098cc:	dc800215 	stw	r18,8(sp)
  8098d0:	dc400115 	stw	r17,4(sp)
  8098d4:	dc000015 	stw	r16,0(sp)
  8098d8:	202b883a 	mov	r21,r4
  8098dc:	282d883a 	mov	r22,r5
  8098e0:	0808be80 	call	808be8 <__sfp_lock_acquire>
  8098e4:	98002126 	beq	r19,zero,80996c <_fwalk_reent+0xc0>
  8098e8:	002f883a 	mov	r23,zero
  8098ec:	9c800117 	ldw	r18,4(r19)
  8098f0:	9c000217 	ldw	r16,8(r19)
  8098f4:	90bfffc4 	addi	r2,r18,-1
  8098f8:	10000d16 	blt	r2,zero,809930 <_fwalk_reent+0x84>
  8098fc:	0023883a 	mov	r17,zero
  809900:	053fffc4 	movi	r20,-1
  809904:	8080030f 	ldh	r2,12(r16)
  809908:	8c400044 	addi	r17,r17,1
  80990c:	10000626 	beq	r2,zero,809928 <_fwalk_reent+0x7c>
  809910:	8080038f 	ldh	r2,14(r16)
  809914:	800b883a 	mov	r5,r16
  809918:	a809883a 	mov	r4,r21
  80991c:	15000226 	beq	r2,r20,809928 <_fwalk_reent+0x7c>
  809920:	b03ee83a 	callr	r22
  809924:	b8aeb03a 	or	r23,r23,r2
  809928:	84001704 	addi	r16,r16,92
  80992c:	947ff51e 	bne	r18,r17,809904 <_fwalk_reent+0x58>
  809930:	9cc00017 	ldw	r19,0(r19)
  809934:	983fed1e 	bne	r19,zero,8098ec <_fwalk_reent+0x40>
  809938:	0808bec0 	call	808bec <__sfp_lock_release>
  80993c:	b805883a 	mov	r2,r23
  809940:	dfc00817 	ldw	ra,32(sp)
  809944:	ddc00717 	ldw	r23,28(sp)
  809948:	dd800617 	ldw	r22,24(sp)
  80994c:	dd400517 	ldw	r21,20(sp)
  809950:	dd000417 	ldw	r20,16(sp)
  809954:	dcc00317 	ldw	r19,12(sp)
  809958:	dc800217 	ldw	r18,8(sp)
  80995c:	dc400117 	ldw	r17,4(sp)
  809960:	dc000017 	ldw	r16,0(sp)
  809964:	dec00904 	addi	sp,sp,36
  809968:	f800283a 	ret
  80996c:	002f883a 	mov	r23,zero
  809970:	003ff106 	br	809938 <_fwalk_reent+0x8c>

00809974 <_fwalk>:
  809974:	defff804 	addi	sp,sp,-32
  809978:	dcc00315 	stw	r19,12(sp)
  80997c:	24c0b804 	addi	r19,r4,736
  809980:	dd400515 	stw	r21,20(sp)
  809984:	dfc00715 	stw	ra,28(sp)
  809988:	dd800615 	stw	r22,24(sp)
  80998c:	dd000415 	stw	r20,16(sp)
  809990:	dc800215 	stw	r18,8(sp)
  809994:	dc400115 	stw	r17,4(sp)
  809998:	dc000015 	stw	r16,0(sp)
  80999c:	282b883a 	mov	r21,r5
  8099a0:	0808be80 	call	808be8 <__sfp_lock_acquire>
  8099a4:	98001f26 	beq	r19,zero,809a24 <_fwalk+0xb0>
  8099a8:	002d883a 	mov	r22,zero
  8099ac:	9c800117 	ldw	r18,4(r19)
  8099b0:	9c000217 	ldw	r16,8(r19)
  8099b4:	90bfffc4 	addi	r2,r18,-1
  8099b8:	10000c16 	blt	r2,zero,8099ec <_fwalk+0x78>
  8099bc:	0023883a 	mov	r17,zero
  8099c0:	053fffc4 	movi	r20,-1
  8099c4:	8080030f 	ldh	r2,12(r16)
  8099c8:	8c400044 	addi	r17,r17,1
  8099cc:	10000526 	beq	r2,zero,8099e4 <_fwalk+0x70>
  8099d0:	8080038f 	ldh	r2,14(r16)
  8099d4:	8009883a 	mov	r4,r16
  8099d8:	15000226 	beq	r2,r20,8099e4 <_fwalk+0x70>
  8099dc:	a83ee83a 	callr	r21
  8099e0:	b0acb03a 	or	r22,r22,r2
  8099e4:	84001704 	addi	r16,r16,92
  8099e8:	947ff61e 	bne	r18,r17,8099c4 <_fwalk+0x50>
  8099ec:	9cc00017 	ldw	r19,0(r19)
  8099f0:	983fee1e 	bne	r19,zero,8099ac <_fwalk+0x38>
  8099f4:	0808bec0 	call	808bec <__sfp_lock_release>
  8099f8:	b005883a 	mov	r2,r22
  8099fc:	dfc00717 	ldw	ra,28(sp)
  809a00:	dd800617 	ldw	r22,24(sp)
  809a04:	dd400517 	ldw	r21,20(sp)
  809a08:	dd000417 	ldw	r20,16(sp)
  809a0c:	dcc00317 	ldw	r19,12(sp)
  809a10:	dc800217 	ldw	r18,8(sp)
  809a14:	dc400117 	ldw	r17,4(sp)
  809a18:	dc000017 	ldw	r16,0(sp)
  809a1c:	dec00804 	addi	sp,sp,32
  809a20:	f800283a 	ret
  809a24:	002d883a 	mov	r22,zero
  809a28:	003ff206 	br	8099f4 <_fwalk+0x80>

00809a2c <__locale_charset>:
  809a2c:	d0a01417 	ldw	r2,-32688(gp)
  809a30:	f800283a 	ret

00809a34 <_localeconv_r>:
  809a34:	00802074 	movhi	r2,129
  809a38:	10898404 	addi	r2,r2,9744
  809a3c:	f800283a 	ret

00809a40 <localeconv>:
  809a40:	00802074 	movhi	r2,129
  809a44:	1091ac04 	addi	r2,r2,18096
  809a48:	11000017 	ldw	r4,0(r2)
  809a4c:	0809a341 	jmpi	809a34 <_localeconv_r>

00809a50 <_setlocale_r>:
  809a50:	defffc04 	addi	sp,sp,-16
  809a54:	00c02074 	movhi	r3,129
  809a58:	18c77204 	addi	r3,r3,7624
  809a5c:	dc800215 	stw	r18,8(sp)
  809a60:	dc400115 	stw	r17,4(sp)
  809a64:	dc000015 	stw	r16,0(sp)
  809a68:	2023883a 	mov	r17,r4
  809a6c:	2825883a 	mov	r18,r5
  809a70:	dfc00315 	stw	ra,12(sp)
  809a74:	3021883a 	mov	r16,r6
  809a78:	3009883a 	mov	r4,r6
  809a7c:	180b883a 	mov	r5,r3
  809a80:	30000926 	beq	r6,zero,809aa8 <_setlocale_r+0x58>
  809a84:	08047000 	call	804700 <strcmp>
  809a88:	8009883a 	mov	r4,r16
  809a8c:	01402074 	movhi	r5,129
  809a90:	29496d04 	addi	r5,r5,9652
  809a94:	10000b1e 	bne	r2,zero,809ac4 <_setlocale_r+0x74>
  809a98:	8c000d15 	stw	r16,52(r17)
  809a9c:	8c800c15 	stw	r18,48(r17)
  809aa0:	00c02074 	movhi	r3,129
  809aa4:	18c77204 	addi	r3,r3,7624
  809aa8:	1805883a 	mov	r2,r3
  809aac:	dfc00317 	ldw	ra,12(sp)
  809ab0:	dc800217 	ldw	r18,8(sp)
  809ab4:	dc400117 	ldw	r17,4(sp)
  809ab8:	dc000017 	ldw	r16,0(sp)
  809abc:	dec00404 	addi	sp,sp,16
  809ac0:	f800283a 	ret
  809ac4:	08047000 	call	804700 <strcmp>
  809ac8:	0007883a 	mov	r3,zero
  809acc:	103ff226 	beq	r2,zero,809a98 <_setlocale_r+0x48>
  809ad0:	003ff506 	br	809aa8 <_setlocale_r+0x58>

00809ad4 <setlocale>:
  809ad4:	01802074 	movhi	r6,129
  809ad8:	3191ac04 	addi	r6,r6,18096
  809adc:	2007883a 	mov	r3,r4
  809ae0:	31000017 	ldw	r4,0(r6)
  809ae4:	280d883a 	mov	r6,r5
  809ae8:	180b883a 	mov	r5,r3
  809aec:	0809a501 	jmpi	809a50 <_setlocale_r>

00809af0 <__smakebuf_r>:
  809af0:	2880030b 	ldhu	r2,12(r5)
  809af4:	deffed04 	addi	sp,sp,-76
  809af8:	dc401015 	stw	r17,64(sp)
  809afc:	1080008c 	andi	r2,r2,2
  809b00:	dc000f15 	stw	r16,60(sp)
  809b04:	dfc01215 	stw	ra,72(sp)
  809b08:	dc801115 	stw	r18,68(sp)
  809b0c:	2821883a 	mov	r16,r5
  809b10:	2023883a 	mov	r17,r4
  809b14:	10000b26 	beq	r2,zero,809b44 <__smakebuf_r+0x54>
  809b18:	28c010c4 	addi	r3,r5,67
  809b1c:	00800044 	movi	r2,1
  809b20:	28800515 	stw	r2,20(r5)
  809b24:	28c00415 	stw	r3,16(r5)
  809b28:	28c00015 	stw	r3,0(r5)
  809b2c:	dfc01217 	ldw	ra,72(sp)
  809b30:	dc801117 	ldw	r18,68(sp)
  809b34:	dc401017 	ldw	r17,64(sp)
  809b38:	dc000f17 	ldw	r16,60(sp)
  809b3c:	dec01304 	addi	sp,sp,76
  809b40:	f800283a 	ret
  809b44:	2940038f 	ldh	r5,14(r5)
  809b48:	28002116 	blt	r5,zero,809bd0 <__smakebuf_r+0xe0>
  809b4c:	d80d883a 	mov	r6,sp
  809b50:	080c4e00 	call	80c4e0 <_fstat_r>
  809b54:	10001e16 	blt	r2,zero,809bd0 <__smakebuf_r+0xe0>
  809b58:	d8800117 	ldw	r2,4(sp)
  809b5c:	00e00014 	movui	r3,32768
  809b60:	113c000c 	andi	r4,r2,61440
  809b64:	20c03126 	beq	r4,r3,809c2c <__smakebuf_r+0x13c>
  809b68:	8080030b 	ldhu	r2,12(r16)
  809b6c:	00c80004 	movi	r3,8192
  809b70:	10820014 	ori	r2,r2,2048
  809b74:	8080030d 	sth	r2,12(r16)
  809b78:	20c01e26 	beq	r4,r3,809bf4 <__smakebuf_r+0x104>
  809b7c:	04810004 	movi	r18,1024
  809b80:	8809883a 	mov	r4,r17
  809b84:	900b883a 	mov	r5,r18
  809b88:	0809c840 	call	809c84 <_malloc_r>
  809b8c:	1009883a 	mov	r4,r2
  809b90:	10003126 	beq	r2,zero,809c58 <__smakebuf_r+0x168>
  809b94:	80c0030b 	ldhu	r3,12(r16)
  809b98:	00802074 	movhi	r2,129
  809b9c:	10a33704 	addi	r2,r2,-29476
  809ba0:	88800f15 	stw	r2,60(r17)
  809ba4:	18c02014 	ori	r3,r3,128
  809ba8:	84800515 	stw	r18,20(r16)
  809bac:	80c0030d 	sth	r3,12(r16)
  809bb0:	81000415 	stw	r4,16(r16)
  809bb4:	81000015 	stw	r4,0(r16)
  809bb8:	dfc01217 	ldw	ra,72(sp)
  809bbc:	dc801117 	ldw	r18,68(sp)
  809bc0:	dc401017 	ldw	r17,64(sp)
  809bc4:	dc000f17 	ldw	r16,60(sp)
  809bc8:	dec01304 	addi	sp,sp,76
  809bcc:	f800283a 	ret
  809bd0:	80c0030b 	ldhu	r3,12(r16)
  809bd4:	1880200c 	andi	r2,r3,128
  809bd8:	10000426 	beq	r2,zero,809bec <__smakebuf_r+0xfc>
  809bdc:	04801004 	movi	r18,64
  809be0:	18820014 	ori	r2,r3,2048
  809be4:	8080030d 	sth	r2,12(r16)
  809be8:	003fe506 	br	809b80 <__smakebuf_r+0x90>
  809bec:	04810004 	movi	r18,1024
  809bf0:	003ffb06 	br	809be0 <__smakebuf_r+0xf0>
  809bf4:	8140038f 	ldh	r5,14(r16)
  809bf8:	8809883a 	mov	r4,r17
  809bfc:	080c5540 	call	80c554 <_isatty_r>
  809c00:	103fde26 	beq	r2,zero,809b7c <__smakebuf_r+0x8c>
  809c04:	8080030b 	ldhu	r2,12(r16)
  809c08:	80c010c4 	addi	r3,r16,67
  809c0c:	04810004 	movi	r18,1024
  809c10:	10800054 	ori	r2,r2,1
  809c14:	8080030d 	sth	r2,12(r16)
  809c18:	00800044 	movi	r2,1
  809c1c:	80c00415 	stw	r3,16(r16)
  809c20:	80800515 	stw	r2,20(r16)
  809c24:	80c00015 	stw	r3,0(r16)
  809c28:	003fd506 	br	809b80 <__smakebuf_r+0x90>
  809c2c:	80c00a17 	ldw	r3,40(r16)
  809c30:	00802074 	movhi	r2,129
  809c34:	10afdf04 	addi	r2,r2,-16516
  809c38:	18bfcb1e 	bne	r3,r2,809b68 <__smakebuf_r+0x78>
  809c3c:	8080030b 	ldhu	r2,12(r16)
  809c40:	00c10004 	movi	r3,1024
  809c44:	1825883a 	mov	r18,r3
  809c48:	10c4b03a 	or	r2,r2,r3
  809c4c:	8080030d 	sth	r2,12(r16)
  809c50:	80c01315 	stw	r3,76(r16)
  809c54:	003fca06 	br	809b80 <__smakebuf_r+0x90>
  809c58:	8100030b 	ldhu	r4,12(r16)
  809c5c:	2080800c 	andi	r2,r4,512
  809c60:	103fb21e 	bne	r2,zero,809b2c <__smakebuf_r+0x3c>
  809c64:	80c010c4 	addi	r3,r16,67
  809c68:	21000094 	ori	r4,r4,2
  809c6c:	00800044 	movi	r2,1
  809c70:	80800515 	stw	r2,20(r16)
  809c74:	8100030d 	sth	r4,12(r16)
  809c78:	80c00415 	stw	r3,16(r16)
  809c7c:	80c00015 	stw	r3,0(r16)
  809c80:	003faa06 	br	809b2c <__smakebuf_r+0x3c>

00809c84 <_malloc_r>:
  809c84:	defff604 	addi	sp,sp,-40
  809c88:	28c002c4 	addi	r3,r5,11
  809c8c:	00800584 	movi	r2,22
  809c90:	dc800215 	stw	r18,8(sp)
  809c94:	dfc00915 	stw	ra,36(sp)
  809c98:	df000815 	stw	fp,32(sp)
  809c9c:	ddc00715 	stw	r23,28(sp)
  809ca0:	dd800615 	stw	r22,24(sp)
  809ca4:	dd400515 	stw	r21,20(sp)
  809ca8:	dd000415 	stw	r20,16(sp)
  809cac:	dcc00315 	stw	r19,12(sp)
  809cb0:	dc400115 	stw	r17,4(sp)
  809cb4:	dc000015 	stw	r16,0(sp)
  809cb8:	2025883a 	mov	r18,r4
  809cbc:	10c01236 	bltu	r2,r3,809d08 <_malloc_r+0x84>
  809cc0:	04400404 	movi	r17,16
  809cc4:	8940142e 	bgeu	r17,r5,809d18 <_malloc_r+0x94>
  809cc8:	00800304 	movi	r2,12
  809ccc:	0007883a 	mov	r3,zero
  809cd0:	90800015 	stw	r2,0(r18)
  809cd4:	1805883a 	mov	r2,r3
  809cd8:	dfc00917 	ldw	ra,36(sp)
  809cdc:	df000817 	ldw	fp,32(sp)
  809ce0:	ddc00717 	ldw	r23,28(sp)
  809ce4:	dd800617 	ldw	r22,24(sp)
  809ce8:	dd400517 	ldw	r21,20(sp)
  809cec:	dd000417 	ldw	r20,16(sp)
  809cf0:	dcc00317 	ldw	r19,12(sp)
  809cf4:	dc800217 	ldw	r18,8(sp)
  809cf8:	dc400117 	ldw	r17,4(sp)
  809cfc:	dc000017 	ldw	r16,0(sp)
  809d00:	dec00a04 	addi	sp,sp,40
  809d04:	f800283a 	ret
  809d08:	00bffe04 	movi	r2,-8
  809d0c:	18a2703a 	and	r17,r3,r2
  809d10:	883fed16 	blt	r17,zero,809cc8 <_malloc_r+0x44>
  809d14:	897fec36 	bltu	r17,r5,809cc8 <_malloc_r+0x44>
  809d18:	9009883a 	mov	r4,r18
  809d1c:	080e5940 	call	80e594 <__malloc_lock>
  809d20:	00807dc4 	movi	r2,503
  809d24:	14402b2e 	bgeu	r2,r17,809dd4 <_malloc_r+0x150>
  809d28:	8806d27a 	srli	r3,r17,9
  809d2c:	18003f1e 	bne	r3,zero,809e2c <_malloc_r+0x1a8>
  809d30:	880cd0fa 	srli	r6,r17,3
  809d34:	300490fa 	slli	r2,r6,3
  809d38:	02c02074 	movhi	r11,129
  809d3c:	5acbcf04 	addi	r11,r11,12092
  809d40:	12cb883a 	add	r5,r2,r11
  809d44:	2c000317 	ldw	r16,12(r5)
  809d48:	580f883a 	mov	r7,r11
  809d4c:	2c00041e 	bne	r5,r16,809d60 <_malloc_r+0xdc>
  809d50:	00000a06 	br	809d7c <_malloc_r+0xf8>
  809d54:	1800860e 	bge	r3,zero,809f70 <_malloc_r+0x2ec>
  809d58:	84000317 	ldw	r16,12(r16)
  809d5c:	2c000726 	beq	r5,r16,809d7c <_malloc_r+0xf8>
  809d60:	80800117 	ldw	r2,4(r16)
  809d64:	00ffff04 	movi	r3,-4
  809d68:	10c8703a 	and	r4,r2,r3
  809d6c:	2447c83a 	sub	r3,r4,r17
  809d70:	008003c4 	movi	r2,15
  809d74:	10fff70e 	bge	r2,r3,809d54 <_malloc_r+0xd0>
  809d78:	31bfffc4 	addi	r6,r6,-1
  809d7c:	32400044 	addi	r9,r6,1
  809d80:	02802074 	movhi	r10,129
  809d84:	528bd104 	addi	r10,r10,12100
  809d88:	54000217 	ldw	r16,8(r10)
  809d8c:	8280a026 	beq	r16,r10,80a010 <_malloc_r+0x38c>
  809d90:	80800117 	ldw	r2,4(r16)
  809d94:	00ffff04 	movi	r3,-4
  809d98:	10ca703a 	and	r5,r2,r3
  809d9c:	2c4dc83a 	sub	r6,r5,r17
  809da0:	008003c4 	movi	r2,15
  809da4:	11808316 	blt	r2,r6,809fb4 <_malloc_r+0x330>
  809da8:	52800315 	stw	r10,12(r10)
  809dac:	52800215 	stw	r10,8(r10)
  809db0:	30002916 	blt	r6,zero,809e58 <_malloc_r+0x1d4>
  809db4:	8147883a 	add	r3,r16,r5
  809db8:	18800117 	ldw	r2,4(r3)
  809dbc:	9009883a 	mov	r4,r18
  809dc0:	10800054 	ori	r2,r2,1
  809dc4:	18800115 	stw	r2,4(r3)
  809dc8:	080e5b40 	call	80e5b4 <__malloc_unlock>
  809dcc:	80c00204 	addi	r3,r16,8
  809dd0:	003fc006 	br	809cd4 <_malloc_r+0x50>
  809dd4:	02c02074 	movhi	r11,129
  809dd8:	5acbcf04 	addi	r11,r11,12092
  809ddc:	8ac5883a 	add	r2,r17,r11
  809de0:	14000317 	ldw	r16,12(r2)
  809de4:	580f883a 	mov	r7,r11
  809de8:	8806d0fa 	srli	r3,r17,3
  809dec:	14006c26 	beq	r2,r16,809fa0 <_malloc_r+0x31c>
  809df0:	80c00117 	ldw	r3,4(r16)
  809df4:	00bfff04 	movi	r2,-4
  809df8:	81800317 	ldw	r6,12(r16)
  809dfc:	1886703a 	and	r3,r3,r2
  809e00:	80c7883a 	add	r3,r16,r3
  809e04:	18800117 	ldw	r2,4(r3)
  809e08:	81400217 	ldw	r5,8(r16)
  809e0c:	9009883a 	mov	r4,r18
  809e10:	10800054 	ori	r2,r2,1
  809e14:	18800115 	stw	r2,4(r3)
  809e18:	31400215 	stw	r5,8(r6)
  809e1c:	29800315 	stw	r6,12(r5)
  809e20:	080e5b40 	call	80e5b4 <__malloc_unlock>
  809e24:	80c00204 	addi	r3,r16,8
  809e28:	003faa06 	br	809cd4 <_malloc_r+0x50>
  809e2c:	00800104 	movi	r2,4
  809e30:	10c0052e 	bgeu	r2,r3,809e48 <_malloc_r+0x1c4>
  809e34:	00800504 	movi	r2,20
  809e38:	10c07836 	bltu	r2,r3,80a01c <_malloc_r+0x398>
  809e3c:	198016c4 	addi	r6,r3,91
  809e40:	300490fa 	slli	r2,r6,3
  809e44:	003fbc06 	br	809d38 <_malloc_r+0xb4>
  809e48:	8804d1ba 	srli	r2,r17,6
  809e4c:	11800e04 	addi	r6,r2,56
  809e50:	300490fa 	slli	r2,r6,3
  809e54:	003fb806 	br	809d38 <_malloc_r+0xb4>
  809e58:	00807fc4 	movi	r2,511
  809e5c:	1140bb36 	bltu	r2,r5,80a14c <_malloc_r+0x4c8>
  809e60:	2806d0fa 	srli	r3,r5,3
  809e64:	573ffe04 	addi	fp,r10,-8
  809e68:	00800044 	movi	r2,1
  809e6c:	180890fa 	slli	r4,r3,3
  809e70:	1807d0ba 	srai	r3,r3,2
  809e74:	e1c00117 	ldw	r7,4(fp)
  809e78:	5909883a 	add	r4,r11,r4
  809e7c:	21400217 	ldw	r5,8(r4)
  809e80:	10c4983a 	sll	r2,r2,r3
  809e84:	81000315 	stw	r4,12(r16)
  809e88:	81400215 	stw	r5,8(r16)
  809e8c:	388eb03a 	or	r7,r7,r2
  809e90:	2c000315 	stw	r16,12(r5)
  809e94:	24000215 	stw	r16,8(r4)
  809e98:	e1c00115 	stw	r7,4(fp)
  809e9c:	4807883a 	mov	r3,r9
  809ea0:	4800cd16 	blt	r9,zero,80a1d8 <_malloc_r+0x554>
  809ea4:	1807d0ba 	srai	r3,r3,2
  809ea8:	00800044 	movi	r2,1
  809eac:	10c8983a 	sll	r4,r2,r3
  809eb0:	39004436 	bltu	r7,r4,809fc4 <_malloc_r+0x340>
  809eb4:	21c4703a 	and	r2,r4,r7
  809eb8:	10000a1e 	bne	r2,zero,809ee4 <_malloc_r+0x260>
  809ebc:	2109883a 	add	r4,r4,r4
  809ec0:	00bfff04 	movi	r2,-4
  809ec4:	4884703a 	and	r2,r9,r2
  809ec8:	3906703a 	and	r3,r7,r4
  809ecc:	12400104 	addi	r9,r2,4
  809ed0:	1800041e 	bne	r3,zero,809ee4 <_malloc_r+0x260>
  809ed4:	2109883a 	add	r4,r4,r4
  809ed8:	3904703a 	and	r2,r7,r4
  809edc:	4a400104 	addi	r9,r9,4
  809ee0:	103ffc26 	beq	r2,zero,809ed4 <_malloc_r+0x250>
  809ee4:	480490fa 	slli	r2,r9,3
  809ee8:	4819883a 	mov	r12,r9
  809eec:	023fff04 	movi	r8,-4
  809ef0:	589b883a 	add	r13,r11,r2
  809ef4:	6807883a 	mov	r3,r13
  809ef8:	014003c4 	movi	r5,15
  809efc:	1c000317 	ldw	r16,12(r3)
  809f00:	1c00041e 	bne	r3,r16,809f14 <_malloc_r+0x290>
  809f04:	0000a706 	br	80a1a4 <_malloc_r+0x520>
  809f08:	3000ab0e 	bge	r6,zero,80a1b8 <_malloc_r+0x534>
  809f0c:	84000317 	ldw	r16,12(r16)
  809f10:	1c00a426 	beq	r3,r16,80a1a4 <_malloc_r+0x520>
  809f14:	80800117 	ldw	r2,4(r16)
  809f18:	1204703a 	and	r2,r2,r8
  809f1c:	144dc83a 	sub	r6,r2,r17
  809f20:	29bff90e 	bge	r5,r6,809f08 <_malloc_r+0x284>
  809f24:	81000317 	ldw	r4,12(r16)
  809f28:	80c00217 	ldw	r3,8(r16)
  809f2c:	89400054 	ori	r5,r17,1
  809f30:	8445883a 	add	r2,r16,r17
  809f34:	20c00215 	stw	r3,8(r4)
  809f38:	19000315 	stw	r4,12(r3)
  809f3c:	81400115 	stw	r5,4(r16)
  809f40:	1187883a 	add	r3,r2,r6
  809f44:	31000054 	ori	r4,r6,1
  809f48:	50800315 	stw	r2,12(r10)
  809f4c:	50800215 	stw	r2,8(r10)
  809f50:	19800015 	stw	r6,0(r3)
  809f54:	11000115 	stw	r4,4(r2)
  809f58:	12800215 	stw	r10,8(r2)
  809f5c:	12800315 	stw	r10,12(r2)
  809f60:	9009883a 	mov	r4,r18
  809f64:	080e5b40 	call	80e5b4 <__malloc_unlock>
  809f68:	80c00204 	addi	r3,r16,8
  809f6c:	003f5906 	br	809cd4 <_malloc_r+0x50>
  809f70:	8109883a 	add	r4,r16,r4
  809f74:	20800117 	ldw	r2,4(r4)
  809f78:	80c00217 	ldw	r3,8(r16)
  809f7c:	81400317 	ldw	r5,12(r16)
  809f80:	10800054 	ori	r2,r2,1
  809f84:	20800115 	stw	r2,4(r4)
  809f88:	28c00215 	stw	r3,8(r5)
  809f8c:	19400315 	stw	r5,12(r3)
  809f90:	9009883a 	mov	r4,r18
  809f94:	080e5b40 	call	80e5b4 <__malloc_unlock>
  809f98:	80c00204 	addi	r3,r16,8
  809f9c:	003f4d06 	br	809cd4 <_malloc_r+0x50>
  809fa0:	80800204 	addi	r2,r16,8
  809fa4:	14000317 	ldw	r16,12(r2)
  809fa8:	143f911e 	bne	r2,r16,809df0 <_malloc_r+0x16c>
  809fac:	1a400084 	addi	r9,r3,2
  809fb0:	003f7306 	br	809d80 <_malloc_r+0xfc>
  809fb4:	88c00054 	ori	r3,r17,1
  809fb8:	8445883a 	add	r2,r16,r17
  809fbc:	80c00115 	stw	r3,4(r16)
  809fc0:	003fdf06 	br	809f40 <_malloc_r+0x2bc>
  809fc4:	e4000217 	ldw	r16,8(fp)
  809fc8:	00bfff04 	movi	r2,-4
  809fcc:	80c00117 	ldw	r3,4(r16)
  809fd0:	802d883a 	mov	r22,r16
  809fd4:	18aa703a 	and	r21,r3,r2
  809fd8:	ac401636 	bltu	r21,r17,80a034 <_malloc_r+0x3b0>
  809fdc:	ac49c83a 	sub	r4,r21,r17
  809fe0:	008003c4 	movi	r2,15
  809fe4:	1100130e 	bge	r2,r4,80a034 <_malloc_r+0x3b0>
  809fe8:	88800054 	ori	r2,r17,1
  809fec:	8447883a 	add	r3,r16,r17
  809ff0:	80800115 	stw	r2,4(r16)
  809ff4:	20800054 	ori	r2,r4,1
  809ff8:	18800115 	stw	r2,4(r3)
  809ffc:	e0c00215 	stw	r3,8(fp)
  80a000:	9009883a 	mov	r4,r18
  80a004:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80a008:	80c00204 	addi	r3,r16,8
  80a00c:	003f3106 	br	809cd4 <_malloc_r+0x50>
  80a010:	39c00117 	ldw	r7,4(r7)
  80a014:	573ffe04 	addi	fp,r10,-8
  80a018:	003fa006 	br	809e9c <_malloc_r+0x218>
  80a01c:	00801504 	movi	r2,84
  80a020:	10c06736 	bltu	r2,r3,80a1c0 <_malloc_r+0x53c>
  80a024:	8804d33a 	srli	r2,r17,12
  80a028:	11801b84 	addi	r6,r2,110
  80a02c:	300490fa 	slli	r2,r6,3
  80a030:	003f4106 	br	809d38 <_malloc_r+0xb4>
  80a034:	d0a79417 	ldw	r2,-25008(gp)
  80a038:	d0e01617 	ldw	r3,-32680(gp)
  80a03c:	053fffc4 	movi	r20,-1
  80a040:	10800404 	addi	r2,r2,16
  80a044:	88a7883a 	add	r19,r17,r2
  80a048:	1d000326 	beq	r3,r20,80a058 <_malloc_r+0x3d4>
  80a04c:	98c3ffc4 	addi	r3,r19,4095
  80a050:	00bc0004 	movi	r2,-4096
  80a054:	18a6703a 	and	r19,r3,r2
  80a058:	9009883a 	mov	r4,r18
  80a05c:	980b883a 	mov	r5,r19
  80a060:	080bf040 	call	80bf04 <_sbrk_r>
  80a064:	1009883a 	mov	r4,r2
  80a068:	15000426 	beq	r2,r20,80a07c <_malloc_r+0x3f8>
  80a06c:	854b883a 	add	r5,r16,r21
  80a070:	1029883a 	mov	r20,r2
  80a074:	11405a2e 	bgeu	r2,r5,80a1e0 <_malloc_r+0x55c>
  80a078:	87000c26 	beq	r16,fp,80a0ac <_malloc_r+0x428>
  80a07c:	e4000217 	ldw	r16,8(fp)
  80a080:	80c00117 	ldw	r3,4(r16)
  80a084:	00bfff04 	movi	r2,-4
  80a088:	1884703a 	and	r2,r3,r2
  80a08c:	14400336 	bltu	r2,r17,80a09c <_malloc_r+0x418>
  80a090:	1449c83a 	sub	r4,r2,r17
  80a094:	008003c4 	movi	r2,15
  80a098:	113fd316 	blt	r2,r4,809fe8 <_malloc_r+0x364>
  80a09c:	9009883a 	mov	r4,r18
  80a0a0:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80a0a4:	0007883a 	mov	r3,zero
  80a0a8:	003f0a06 	br	809cd4 <_malloc_r+0x50>
  80a0ac:	05c02074 	movhi	r23,129
  80a0b0:	bdd93904 	addi	r23,r23,25828
  80a0b4:	b8800017 	ldw	r2,0(r23)
  80a0b8:	988d883a 	add	r6,r19,r2
  80a0bc:	b9800015 	stw	r6,0(r23)
  80a0c0:	d0e01617 	ldw	r3,-32680(gp)
  80a0c4:	00bfffc4 	movi	r2,-1
  80a0c8:	18808e26 	beq	r3,r2,80a304 <_malloc_r+0x680>
  80a0cc:	2145c83a 	sub	r2,r4,r5
  80a0d0:	3085883a 	add	r2,r6,r2
  80a0d4:	b8800015 	stw	r2,0(r23)
  80a0d8:	20c001cc 	andi	r3,r4,7
  80a0dc:	18005f1e 	bne	r3,zero,80a25c <_malloc_r+0x5d8>
  80a0e0:	000b883a 	mov	r5,zero
  80a0e4:	a4c5883a 	add	r2,r20,r19
  80a0e8:	1083ffcc 	andi	r2,r2,4095
  80a0ec:	00c40004 	movi	r3,4096
  80a0f0:	1887c83a 	sub	r3,r3,r2
  80a0f4:	28e7883a 	add	r19,r5,r3
  80a0f8:	9009883a 	mov	r4,r18
  80a0fc:	980b883a 	mov	r5,r19
  80a100:	080bf040 	call	80bf04 <_sbrk_r>
  80a104:	1007883a 	mov	r3,r2
  80a108:	00bfffc4 	movi	r2,-1
  80a10c:	18807a26 	beq	r3,r2,80a2f8 <_malloc_r+0x674>
  80a110:	1d05c83a 	sub	r2,r3,r20
  80a114:	9885883a 	add	r2,r19,r2
  80a118:	10c00054 	ori	r3,r2,1
  80a11c:	b8800017 	ldw	r2,0(r23)
  80a120:	a021883a 	mov	r16,r20
  80a124:	a0c00115 	stw	r3,4(r20)
  80a128:	9885883a 	add	r2,r19,r2
  80a12c:	b8800015 	stw	r2,0(r23)
  80a130:	e5000215 	stw	r20,8(fp)
  80a134:	b7003626 	beq	r22,fp,80a210 <_malloc_r+0x58c>
  80a138:	018003c4 	movi	r6,15
  80a13c:	35404b36 	bltu	r6,r21,80a26c <_malloc_r+0x5e8>
  80a140:	00800044 	movi	r2,1
  80a144:	a0800115 	stw	r2,4(r20)
  80a148:	003fcd06 	br	80a080 <_malloc_r+0x3fc>
  80a14c:	2808d27a 	srli	r4,r5,9
  80a150:	2000371e 	bne	r4,zero,80a230 <_malloc_r+0x5ac>
  80a154:	2808d0fa 	srli	r4,r5,3
  80a158:	200690fa 	slli	r3,r4,3
  80a15c:	1ad1883a 	add	r8,r3,r11
  80a160:	41800217 	ldw	r6,8(r8)
  80a164:	41805b26 	beq	r8,r6,80a2d4 <_malloc_r+0x650>
  80a168:	30800117 	ldw	r2,4(r6)
  80a16c:	00ffff04 	movi	r3,-4
  80a170:	10c4703a 	and	r2,r2,r3
  80a174:	2880022e 	bgeu	r5,r2,80a180 <_malloc_r+0x4fc>
  80a178:	31800217 	ldw	r6,8(r6)
  80a17c:	41bffa1e 	bne	r8,r6,80a168 <_malloc_r+0x4e4>
  80a180:	32000317 	ldw	r8,12(r6)
  80a184:	39c00117 	ldw	r7,4(r7)
  80a188:	82000315 	stw	r8,12(r16)
  80a18c:	81800215 	stw	r6,8(r16)
  80a190:	07002074 	movhi	fp,129
  80a194:	e70bcf04 	addi	fp,fp,12092
  80a198:	34000315 	stw	r16,12(r6)
  80a19c:	44000215 	stw	r16,8(r8)
  80a1a0:	003f3e06 	br	809e9c <_malloc_r+0x218>
  80a1a4:	63000044 	addi	r12,r12,1
  80a1a8:	608000cc 	andi	r2,r12,3
  80a1ac:	10005d26 	beq	r2,zero,80a324 <_malloc_r+0x6a0>
  80a1b0:	18c00204 	addi	r3,r3,8
  80a1b4:	003f5106 	br	809efc <_malloc_r+0x278>
  80a1b8:	8089883a 	add	r4,r16,r2
  80a1bc:	003f6d06 	br	809f74 <_malloc_r+0x2f0>
  80a1c0:	00805504 	movi	r2,340
  80a1c4:	10c02036 	bltu	r2,r3,80a248 <_malloc_r+0x5c4>
  80a1c8:	8804d3fa 	srli	r2,r17,15
  80a1cc:	11801dc4 	addi	r6,r2,119
  80a1d0:	300490fa 	slli	r2,r6,3
  80a1d4:	003ed806 	br	809d38 <_malloc_r+0xb4>
  80a1d8:	48c000c4 	addi	r3,r9,3
  80a1dc:	003f3106 	br	809ea4 <_malloc_r+0x220>
  80a1e0:	05c02074 	movhi	r23,129
  80a1e4:	bdd93904 	addi	r23,r23,25828
  80a1e8:	b8800017 	ldw	r2,0(r23)
  80a1ec:	988d883a 	add	r6,r19,r2
  80a1f0:	b9800015 	stw	r6,0(r23)
  80a1f4:	293fb21e 	bne	r5,r4,80a0c0 <_malloc_r+0x43c>
  80a1f8:	2083ffcc 	andi	r2,r4,4095
  80a1fc:	103fb01e 	bne	r2,zero,80a0c0 <_malloc_r+0x43c>
  80a200:	e4000217 	ldw	r16,8(fp)
  80a204:	9d45883a 	add	r2,r19,r21
  80a208:	10800054 	ori	r2,r2,1
  80a20c:	80800115 	stw	r2,4(r16)
  80a210:	b8c00017 	ldw	r3,0(r23)
  80a214:	d0a79517 	ldw	r2,-25004(gp)
  80a218:	10c0012e 	bgeu	r2,r3,80a220 <_malloc_r+0x59c>
  80a21c:	d0e79515 	stw	r3,-25004(gp)
  80a220:	d0a79617 	ldw	r2,-25000(gp)
  80a224:	10ff962e 	bgeu	r2,r3,80a080 <_malloc_r+0x3fc>
  80a228:	d0e79615 	stw	r3,-25000(gp)
  80a22c:	003f9406 	br	80a080 <_malloc_r+0x3fc>
  80a230:	00800104 	movi	r2,4
  80a234:	11001e36 	bltu	r2,r4,80a2b0 <_malloc_r+0x62c>
  80a238:	2804d1ba 	srli	r2,r5,6
  80a23c:	11000e04 	addi	r4,r2,56
  80a240:	200690fa 	slli	r3,r4,3
  80a244:	003fc506 	br	80a15c <_malloc_r+0x4d8>
  80a248:	00815504 	movi	r2,1364
  80a24c:	10c01d2e 	bgeu	r2,r3,80a2c4 <_malloc_r+0x640>
  80a250:	01801f84 	movi	r6,126
  80a254:	0080fc04 	movi	r2,1008
  80a258:	003eb706 	br	809d38 <_malloc_r+0xb4>
  80a25c:	00800204 	movi	r2,8
  80a260:	10cbc83a 	sub	r5,r2,r3
  80a264:	2169883a 	add	r20,r4,r5
  80a268:	003f9e06 	br	80a0e4 <_malloc_r+0x460>
  80a26c:	00bffe04 	movi	r2,-8
  80a270:	a93ffd04 	addi	r4,r21,-12
  80a274:	2088703a 	and	r4,r4,r2
  80a278:	b10b883a 	add	r5,r22,r4
  80a27c:	00c00144 	movi	r3,5
  80a280:	28c00215 	stw	r3,8(r5)
  80a284:	28c00115 	stw	r3,4(r5)
  80a288:	b0800117 	ldw	r2,4(r22)
  80a28c:	1080004c 	andi	r2,r2,1
  80a290:	2084b03a 	or	r2,r4,r2
  80a294:	b0800115 	stw	r2,4(r22)
  80a298:	313fdd2e 	bgeu	r6,r4,80a210 <_malloc_r+0x58c>
  80a29c:	b1400204 	addi	r5,r22,8
  80a2a0:	9009883a 	mov	r4,r18
  80a2a4:	08090fc0 	call	8090fc <_free_r>
  80a2a8:	e4000217 	ldw	r16,8(fp)
  80a2ac:	003fd806 	br	80a210 <_malloc_r+0x58c>
  80a2b0:	00800504 	movi	r2,20
  80a2b4:	11001536 	bltu	r2,r4,80a30c <_malloc_r+0x688>
  80a2b8:	210016c4 	addi	r4,r4,91
  80a2bc:	200690fa 	slli	r3,r4,3
  80a2c0:	003fa606 	br	80a15c <_malloc_r+0x4d8>
  80a2c4:	8804d4ba 	srli	r2,r17,18
  80a2c8:	11801f04 	addi	r6,r2,124
  80a2cc:	300490fa 	slli	r2,r6,3
  80a2d0:	003e9906 	br	809d38 <_malloc_r+0xb4>
  80a2d4:	2009d0ba 	srai	r4,r4,2
  80a2d8:	01402074 	movhi	r5,129
  80a2dc:	294bcf04 	addi	r5,r5,12092
  80a2e0:	00c00044 	movi	r3,1
  80a2e4:	28800117 	ldw	r2,4(r5)
  80a2e8:	1906983a 	sll	r3,r3,r4
  80a2ec:	10c4b03a 	or	r2,r2,r3
  80a2f0:	28800115 	stw	r2,4(r5)
  80a2f4:	003fa306 	br	80a184 <_malloc_r+0x500>
  80a2f8:	0027883a 	mov	r19,zero
  80a2fc:	00c00044 	movi	r3,1
  80a300:	003f8606 	br	80a11c <_malloc_r+0x498>
  80a304:	d1201615 	stw	r4,-32680(gp)
  80a308:	003f7306 	br	80a0d8 <_malloc_r+0x454>
  80a30c:	00801504 	movi	r2,84
  80a310:	11001936 	bltu	r2,r4,80a378 <_malloc_r+0x6f4>
  80a314:	2804d33a 	srli	r2,r5,12
  80a318:	11001b84 	addi	r4,r2,110
  80a31c:	200690fa 	slli	r3,r4,3
  80a320:	003f8e06 	br	80a15c <_malloc_r+0x4d8>
  80a324:	480b883a 	mov	r5,r9
  80a328:	6807883a 	mov	r3,r13
  80a32c:	288000cc 	andi	r2,r5,3
  80a330:	18fffe04 	addi	r3,r3,-8
  80a334:	297fffc4 	addi	r5,r5,-1
  80a338:	10001526 	beq	r2,zero,80a390 <_malloc_r+0x70c>
  80a33c:	18800217 	ldw	r2,8(r3)
  80a340:	10fffa26 	beq	r2,r3,80a32c <_malloc_r+0x6a8>
  80a344:	2109883a 	add	r4,r4,r4
  80a348:	393f1e36 	bltu	r7,r4,809fc4 <_malloc_r+0x340>
  80a34c:	203f1d26 	beq	r4,zero,809fc4 <_malloc_r+0x340>
  80a350:	21c4703a 	and	r2,r4,r7
  80a354:	10000226 	beq	r2,zero,80a360 <_malloc_r+0x6dc>
  80a358:	6013883a 	mov	r9,r12
  80a35c:	003ee106 	br	809ee4 <_malloc_r+0x260>
  80a360:	2109883a 	add	r4,r4,r4
  80a364:	3904703a 	and	r2,r7,r4
  80a368:	63000104 	addi	r12,r12,4
  80a36c:	103ffc26 	beq	r2,zero,80a360 <_malloc_r+0x6dc>
  80a370:	6013883a 	mov	r9,r12
  80a374:	003edb06 	br	809ee4 <_malloc_r+0x260>
  80a378:	00805504 	movi	r2,340
  80a37c:	11000836 	bltu	r2,r4,80a3a0 <_malloc_r+0x71c>
  80a380:	2804d3fa 	srli	r2,r5,15
  80a384:	11001dc4 	addi	r4,r2,119
  80a388:	200690fa 	slli	r3,r4,3
  80a38c:	003f7306 	br	80a15c <_malloc_r+0x4d8>
  80a390:	0104303a 	nor	r2,zero,r4
  80a394:	388e703a 	and	r7,r7,r2
  80a398:	e1c00115 	stw	r7,4(fp)
  80a39c:	003fe906 	br	80a344 <_malloc_r+0x6c0>
  80a3a0:	00815504 	movi	r2,1364
  80a3a4:	1100032e 	bgeu	r2,r4,80a3b4 <_malloc_r+0x730>
  80a3a8:	01001f84 	movi	r4,126
  80a3ac:	00c0fc04 	movi	r3,1008
  80a3b0:	003f6a06 	br	80a15c <_malloc_r+0x4d8>
  80a3b4:	2804d4ba 	srli	r2,r5,18
  80a3b8:	11001f04 	addi	r4,r2,124
  80a3bc:	200690fa 	slli	r3,r4,3
  80a3c0:	003f6606 	br	80a15c <_malloc_r+0x4d8>

0080a3c4 <memchr>:
  80a3c4:	008000c4 	movi	r2,3
  80a3c8:	29403fcc 	andi	r5,r5,255
  80a3cc:	2007883a 	mov	r3,r4
  80a3d0:	1180022e 	bgeu	r2,r6,80a3dc <memchr+0x18>
  80a3d4:	2084703a 	and	r2,r4,r2
  80a3d8:	10000b26 	beq	r2,zero,80a408 <memchr+0x44>
  80a3dc:	313fffc4 	addi	r4,r6,-1
  80a3e0:	3000051e 	bne	r6,zero,80a3f8 <memchr+0x34>
  80a3e4:	00002c06 	br	80a498 <memchr+0xd4>
  80a3e8:	213fffc4 	addi	r4,r4,-1
  80a3ec:	00bfffc4 	movi	r2,-1
  80a3f0:	18c00044 	addi	r3,r3,1
  80a3f4:	20802826 	beq	r4,r2,80a498 <memchr+0xd4>
  80a3f8:	18800003 	ldbu	r2,0(r3)
  80a3fc:	28bffa1e 	bne	r5,r2,80a3e8 <memchr+0x24>
  80a400:	1805883a 	mov	r2,r3
  80a404:	f800283a 	ret
  80a408:	0011883a 	mov	r8,zero
  80a40c:	0007883a 	mov	r3,zero
  80a410:	01c00104 	movi	r7,4
  80a414:	4004923a 	slli	r2,r8,8
  80a418:	18c00044 	addi	r3,r3,1
  80a41c:	1151883a 	add	r8,r2,r5
  80a420:	19fffc1e 	bne	r3,r7,80a414 <memchr+0x50>
  80a424:	02bfbff4 	movhi	r10,65279
  80a428:	52bfbfc4 	addi	r10,r10,-257
  80a42c:	02602074 	movhi	r9,32897
  80a430:	4a602004 	addi	r9,r9,-32640
  80a434:	02c000c4 	movi	r11,3
  80a438:	20800017 	ldw	r2,0(r4)
  80a43c:	31bfff04 	addi	r6,r6,-4
  80a440:	200f883a 	mov	r7,r4
  80a444:	1204f03a 	xor	r2,r2,r8
  80a448:	1287883a 	add	r3,r2,r10
  80a44c:	1a46703a 	and	r3,r3,r9
  80a450:	0084303a 	nor	r2,zero,r2
  80a454:	10c4703a 	and	r2,r2,r3
  80a458:	10000b26 	beq	r2,zero,80a488 <memchr+0xc4>
  80a45c:	20800003 	ldbu	r2,0(r4)
  80a460:	28800f26 	beq	r5,r2,80a4a0 <memchr+0xdc>
  80a464:	20800043 	ldbu	r2,1(r4)
  80a468:	21c00044 	addi	r7,r4,1
  80a46c:	28800c26 	beq	r5,r2,80a4a0 <memchr+0xdc>
  80a470:	20800083 	ldbu	r2,2(r4)
  80a474:	21c00084 	addi	r7,r4,2
  80a478:	28800926 	beq	r5,r2,80a4a0 <memchr+0xdc>
  80a47c:	208000c3 	ldbu	r2,3(r4)
  80a480:	21c000c4 	addi	r7,r4,3
  80a484:	28800626 	beq	r5,r2,80a4a0 <memchr+0xdc>
  80a488:	21000104 	addi	r4,r4,4
  80a48c:	59bfea36 	bltu	r11,r6,80a438 <memchr+0x74>
  80a490:	2007883a 	mov	r3,r4
  80a494:	003fd106 	br	80a3dc <memchr+0x18>
  80a498:	0005883a 	mov	r2,zero
  80a49c:	f800283a 	ret
  80a4a0:	3805883a 	mov	r2,r7
  80a4a4:	f800283a 	ret

0080a4a8 <memcpy>:
  80a4a8:	01c003c4 	movi	r7,15
  80a4ac:	2007883a 	mov	r3,r4
  80a4b0:	3980032e 	bgeu	r7,r6,80a4c0 <memcpy+0x18>
  80a4b4:	2904b03a 	or	r2,r5,r4
  80a4b8:	108000cc 	andi	r2,r2,3
  80a4bc:	10000926 	beq	r2,zero,80a4e4 <memcpy+0x3c>
  80a4c0:	30000626 	beq	r6,zero,80a4dc <memcpy+0x34>
  80a4c4:	30cd883a 	add	r6,r6,r3
  80a4c8:	28800003 	ldbu	r2,0(r5)
  80a4cc:	29400044 	addi	r5,r5,1
  80a4d0:	18800005 	stb	r2,0(r3)
  80a4d4:	18c00044 	addi	r3,r3,1
  80a4d8:	30fffb1e 	bne	r6,r3,80a4c8 <memcpy+0x20>
  80a4dc:	2005883a 	mov	r2,r4
  80a4e0:	f800283a 	ret
  80a4e4:	3811883a 	mov	r8,r7
  80a4e8:	200f883a 	mov	r7,r4
  80a4ec:	28c00017 	ldw	r3,0(r5)
  80a4f0:	31bffc04 	addi	r6,r6,-16
  80a4f4:	38c00015 	stw	r3,0(r7)
  80a4f8:	28800117 	ldw	r2,4(r5)
  80a4fc:	38800115 	stw	r2,4(r7)
  80a500:	28c00217 	ldw	r3,8(r5)
  80a504:	38c00215 	stw	r3,8(r7)
  80a508:	28800317 	ldw	r2,12(r5)
  80a50c:	29400404 	addi	r5,r5,16
  80a510:	38800315 	stw	r2,12(r7)
  80a514:	39c00404 	addi	r7,r7,16
  80a518:	41bff436 	bltu	r8,r6,80a4ec <memcpy+0x44>
  80a51c:	008000c4 	movi	r2,3
  80a520:	1180072e 	bgeu	r2,r6,80a540 <memcpy+0x98>
  80a524:	1007883a 	mov	r3,r2
  80a528:	28800017 	ldw	r2,0(r5)
  80a52c:	31bfff04 	addi	r6,r6,-4
  80a530:	29400104 	addi	r5,r5,4
  80a534:	38800015 	stw	r2,0(r7)
  80a538:	39c00104 	addi	r7,r7,4
  80a53c:	19bffa36 	bltu	r3,r6,80a528 <memcpy+0x80>
  80a540:	3807883a 	mov	r3,r7
  80a544:	003fde06 	br	80a4c0 <memcpy+0x18>

0080a548 <memmove>:
  80a548:	2807883a 	mov	r3,r5
  80a54c:	2011883a 	mov	r8,r4
  80a550:	29000c2e 	bgeu	r5,r4,80a584 <memmove+0x3c>
  80a554:	298f883a 	add	r7,r5,r6
  80a558:	21c00a2e 	bgeu	r4,r7,80a584 <memmove+0x3c>
  80a55c:	30000726 	beq	r6,zero,80a57c <memmove+0x34>
  80a560:	2187883a 	add	r3,r4,r6
  80a564:	198dc83a 	sub	r6,r3,r6
  80a568:	39ffffc4 	addi	r7,r7,-1
  80a56c:	38800003 	ldbu	r2,0(r7)
  80a570:	18ffffc4 	addi	r3,r3,-1
  80a574:	18800005 	stb	r2,0(r3)
  80a578:	19bffb1e 	bne	r3,r6,80a568 <memmove+0x20>
  80a57c:	2005883a 	mov	r2,r4
  80a580:	f800283a 	ret
  80a584:	01c003c4 	movi	r7,15
  80a588:	39800a36 	bltu	r7,r6,80a5b4 <memmove+0x6c>
  80a58c:	303ffb26 	beq	r6,zero,80a57c <memmove+0x34>
  80a590:	400f883a 	mov	r7,r8
  80a594:	320d883a 	add	r6,r6,r8
  80a598:	28800003 	ldbu	r2,0(r5)
  80a59c:	29400044 	addi	r5,r5,1
  80a5a0:	38800005 	stb	r2,0(r7)
  80a5a4:	39c00044 	addi	r7,r7,1
  80a5a8:	39bffb1e 	bne	r7,r6,80a598 <memmove+0x50>
  80a5ac:	2005883a 	mov	r2,r4
  80a5b0:	f800283a 	ret
  80a5b4:	1904b03a 	or	r2,r3,r4
  80a5b8:	108000cc 	andi	r2,r2,3
  80a5bc:	103ff31e 	bne	r2,zero,80a58c <memmove+0x44>
  80a5c0:	3811883a 	mov	r8,r7
  80a5c4:	180b883a 	mov	r5,r3
  80a5c8:	200f883a 	mov	r7,r4
  80a5cc:	28c00017 	ldw	r3,0(r5)
  80a5d0:	31bffc04 	addi	r6,r6,-16
  80a5d4:	38c00015 	stw	r3,0(r7)
  80a5d8:	28800117 	ldw	r2,4(r5)
  80a5dc:	38800115 	stw	r2,4(r7)
  80a5e0:	28c00217 	ldw	r3,8(r5)
  80a5e4:	38c00215 	stw	r3,8(r7)
  80a5e8:	28800317 	ldw	r2,12(r5)
  80a5ec:	29400404 	addi	r5,r5,16
  80a5f0:	38800315 	stw	r2,12(r7)
  80a5f4:	39c00404 	addi	r7,r7,16
  80a5f8:	41bff436 	bltu	r8,r6,80a5cc <memmove+0x84>
  80a5fc:	008000c4 	movi	r2,3
  80a600:	1180072e 	bgeu	r2,r6,80a620 <memmove+0xd8>
  80a604:	1007883a 	mov	r3,r2
  80a608:	28800017 	ldw	r2,0(r5)
  80a60c:	31bfff04 	addi	r6,r6,-4
  80a610:	29400104 	addi	r5,r5,4
  80a614:	38800015 	stw	r2,0(r7)
  80a618:	39c00104 	addi	r7,r7,4
  80a61c:	19bffa36 	bltu	r3,r6,80a608 <memmove+0xc0>
  80a620:	3811883a 	mov	r8,r7
  80a624:	003fd906 	br	80a58c <memmove+0x44>

0080a628 <_Bfree>:
  80a628:	28000826 	beq	r5,zero,80a64c <_Bfree+0x24>
  80a62c:	28800117 	ldw	r2,4(r5)
  80a630:	21001317 	ldw	r4,76(r4)
  80a634:	1085883a 	add	r2,r2,r2
  80a638:	1085883a 	add	r2,r2,r2
  80a63c:	1105883a 	add	r2,r2,r4
  80a640:	10c00017 	ldw	r3,0(r2)
  80a644:	28c00015 	stw	r3,0(r5)
  80a648:	11400015 	stw	r5,0(r2)
  80a64c:	f800283a 	ret

0080a650 <__hi0bits>:
  80a650:	20bfffec 	andhi	r2,r4,65535
  80a654:	10001426 	beq	r2,zero,80a6a8 <__hi0bits+0x58>
  80a658:	0007883a 	mov	r3,zero
  80a65c:	20bfc02c 	andhi	r2,r4,65280
  80a660:	1000021e 	bne	r2,zero,80a66c <__hi0bits+0x1c>
  80a664:	2008923a 	slli	r4,r4,8
  80a668:	18c00204 	addi	r3,r3,8
  80a66c:	20bc002c 	andhi	r2,r4,61440
  80a670:	1000021e 	bne	r2,zero,80a67c <__hi0bits+0x2c>
  80a674:	2008913a 	slli	r4,r4,4
  80a678:	18c00104 	addi	r3,r3,4
  80a67c:	20b0002c 	andhi	r2,r4,49152
  80a680:	1000031e 	bne	r2,zero,80a690 <__hi0bits+0x40>
  80a684:	2105883a 	add	r2,r4,r4
  80a688:	18c00084 	addi	r3,r3,2
  80a68c:	1089883a 	add	r4,r2,r2
  80a690:	20000316 	blt	r4,zero,80a6a0 <__hi0bits+0x50>
  80a694:	2090002c 	andhi	r2,r4,16384
  80a698:	10000626 	beq	r2,zero,80a6b4 <__hi0bits+0x64>
  80a69c:	18c00044 	addi	r3,r3,1
  80a6a0:	1805883a 	mov	r2,r3
  80a6a4:	f800283a 	ret
  80a6a8:	2008943a 	slli	r4,r4,16
  80a6ac:	00c00404 	movi	r3,16
  80a6b0:	003fea06 	br	80a65c <__hi0bits+0xc>
  80a6b4:	00c00804 	movi	r3,32
  80a6b8:	1805883a 	mov	r2,r3
  80a6bc:	f800283a 	ret

0080a6c0 <__lo0bits>:
  80a6c0:	20c00017 	ldw	r3,0(r4)
  80a6c4:	188001cc 	andi	r2,r3,7
  80a6c8:	10000a26 	beq	r2,zero,80a6f4 <__lo0bits+0x34>
  80a6cc:	1880004c 	andi	r2,r3,1
  80a6d0:	1005003a 	cmpeq	r2,r2,zero
  80a6d4:	10002126 	beq	r2,zero,80a75c <__lo0bits+0x9c>
  80a6d8:	1880008c 	andi	r2,r3,2
  80a6dc:	1000251e 	bne	r2,zero,80a774 <__lo0bits+0xb4>
  80a6e0:	1804d0ba 	srli	r2,r3,2
  80a6e4:	01400084 	movi	r5,2
  80a6e8:	20800015 	stw	r2,0(r4)
  80a6ec:	2805883a 	mov	r2,r5
  80a6f0:	f800283a 	ret
  80a6f4:	18bfffcc 	andi	r2,r3,65535
  80a6f8:	10001526 	beq	r2,zero,80a750 <__lo0bits+0x90>
  80a6fc:	000b883a 	mov	r5,zero
  80a700:	18803fcc 	andi	r2,r3,255
  80a704:	1000021e 	bne	r2,zero,80a710 <__lo0bits+0x50>
  80a708:	1806d23a 	srli	r3,r3,8
  80a70c:	29400204 	addi	r5,r5,8
  80a710:	188003cc 	andi	r2,r3,15
  80a714:	1000021e 	bne	r2,zero,80a720 <__lo0bits+0x60>
  80a718:	1806d13a 	srli	r3,r3,4
  80a71c:	29400104 	addi	r5,r5,4
  80a720:	188000cc 	andi	r2,r3,3
  80a724:	1000021e 	bne	r2,zero,80a730 <__lo0bits+0x70>
  80a728:	1806d0ba 	srli	r3,r3,2
  80a72c:	29400084 	addi	r5,r5,2
  80a730:	1880004c 	andi	r2,r3,1
  80a734:	1000031e 	bne	r2,zero,80a744 <__lo0bits+0x84>
  80a738:	1806d07a 	srli	r3,r3,1
  80a73c:	18000a26 	beq	r3,zero,80a768 <__lo0bits+0xa8>
  80a740:	29400044 	addi	r5,r5,1
  80a744:	2805883a 	mov	r2,r5
  80a748:	20c00015 	stw	r3,0(r4)
  80a74c:	f800283a 	ret
  80a750:	1806d43a 	srli	r3,r3,16
  80a754:	01400404 	movi	r5,16
  80a758:	003fe906 	br	80a700 <__lo0bits+0x40>
  80a75c:	000b883a 	mov	r5,zero
  80a760:	2805883a 	mov	r2,r5
  80a764:	f800283a 	ret
  80a768:	01400804 	movi	r5,32
  80a76c:	2805883a 	mov	r2,r5
  80a770:	f800283a 	ret
  80a774:	1804d07a 	srli	r2,r3,1
  80a778:	01400044 	movi	r5,1
  80a77c:	20800015 	stw	r2,0(r4)
  80a780:	003fda06 	br	80a6ec <__lo0bits+0x2c>

0080a784 <__mcmp>:
  80a784:	20800417 	ldw	r2,16(r4)
  80a788:	28c00417 	ldw	r3,16(r5)
  80a78c:	10cfc83a 	sub	r7,r2,r3
  80a790:	38000c1e 	bne	r7,zero,80a7c4 <__mcmp+0x40>
  80a794:	18c5883a 	add	r2,r3,r3
  80a798:	1085883a 	add	r2,r2,r2
  80a79c:	10c00504 	addi	r3,r2,20
  80a7a0:	21000504 	addi	r4,r4,20
  80a7a4:	28cb883a 	add	r5,r5,r3
  80a7a8:	2085883a 	add	r2,r4,r2
  80a7ac:	10bfff04 	addi	r2,r2,-4
  80a7b0:	297fff04 	addi	r5,r5,-4
  80a7b4:	11800017 	ldw	r6,0(r2)
  80a7b8:	28c00017 	ldw	r3,0(r5)
  80a7bc:	30c0031e 	bne	r6,r3,80a7cc <__mcmp+0x48>
  80a7c0:	20bffa36 	bltu	r4,r2,80a7ac <__mcmp+0x28>
  80a7c4:	3805883a 	mov	r2,r7
  80a7c8:	f800283a 	ret
  80a7cc:	30c00336 	bltu	r6,r3,80a7dc <__mcmp+0x58>
  80a7d0:	01c00044 	movi	r7,1
  80a7d4:	3805883a 	mov	r2,r7
  80a7d8:	f800283a 	ret
  80a7dc:	01ffffc4 	movi	r7,-1
  80a7e0:	003ff806 	br	80a7c4 <__mcmp+0x40>

0080a7e4 <__ulp>:
  80a7e4:	295ffc2c 	andhi	r5,r5,32752
  80a7e8:	013f3034 	movhi	r4,64704
  80a7ec:	290b883a 	add	r5,r5,r4
  80a7f0:	0145c83a 	sub	r2,zero,r5
  80a7f4:	1007d53a 	srai	r3,r2,20
  80a7f8:	000d883a 	mov	r6,zero
  80a7fc:	0140040e 	bge	zero,r5,80a810 <__ulp+0x2c>
  80a800:	280f883a 	mov	r7,r5
  80a804:	3807883a 	mov	r3,r7
  80a808:	3005883a 	mov	r2,r6
  80a80c:	f800283a 	ret
  80a810:	008004c4 	movi	r2,19
  80a814:	193ffb04 	addi	r4,r3,-20
  80a818:	10c00c0e 	bge	r2,r3,80a84c <__ulp+0x68>
  80a81c:	008007c4 	movi	r2,31
  80a820:	1107c83a 	sub	r3,r2,r4
  80a824:	00800784 	movi	r2,30
  80a828:	01400044 	movi	r5,1
  80a82c:	11000216 	blt	r2,r4,80a838 <__ulp+0x54>
  80a830:	00800044 	movi	r2,1
  80a834:	10ca983a 	sll	r5,r2,r3
  80a838:	000f883a 	mov	r7,zero
  80a83c:	280d883a 	mov	r6,r5
  80a840:	3807883a 	mov	r3,r7
  80a844:	3005883a 	mov	r2,r6
  80a848:	f800283a 	ret
  80a84c:	00800234 	movhi	r2,8
  80a850:	10cfd83a 	sra	r7,r2,r3
  80a854:	000d883a 	mov	r6,zero
  80a858:	3005883a 	mov	r2,r6
  80a85c:	3807883a 	mov	r3,r7
  80a860:	f800283a 	ret

0080a864 <__b2d>:
  80a864:	20800417 	ldw	r2,16(r4)
  80a868:	defff904 	addi	sp,sp,-28
  80a86c:	dd000415 	stw	r20,16(sp)
  80a870:	1085883a 	add	r2,r2,r2
  80a874:	25000504 	addi	r20,r4,20
  80a878:	1085883a 	add	r2,r2,r2
  80a87c:	dc000015 	stw	r16,0(sp)
  80a880:	a0a1883a 	add	r16,r20,r2
  80a884:	dd400515 	stw	r21,20(sp)
  80a888:	857fff17 	ldw	r21,-4(r16)
  80a88c:	dc400115 	stw	r17,4(sp)
  80a890:	dfc00615 	stw	ra,24(sp)
  80a894:	a809883a 	mov	r4,r21
  80a898:	2823883a 	mov	r17,r5
  80a89c:	dcc00315 	stw	r19,12(sp)
  80a8a0:	dc800215 	stw	r18,8(sp)
  80a8a4:	080a6500 	call	80a650 <__hi0bits>
  80a8a8:	100b883a 	mov	r5,r2
  80a8ac:	00800804 	movi	r2,32
  80a8b0:	1145c83a 	sub	r2,r2,r5
  80a8b4:	88800015 	stw	r2,0(r17)
  80a8b8:	00800284 	movi	r2,10
  80a8bc:	80ffff04 	addi	r3,r16,-4
  80a8c0:	11401416 	blt	r2,r5,80a914 <__b2d+0xb0>
  80a8c4:	008002c4 	movi	r2,11
  80a8c8:	1149c83a 	sub	r4,r2,r5
  80a8cc:	a0c02736 	bltu	r20,r3,80a96c <__b2d+0x108>
  80a8d0:	000d883a 	mov	r6,zero
  80a8d4:	28800544 	addi	r2,r5,21
  80a8d8:	a906d83a 	srl	r3,r21,r4
  80a8dc:	a884983a 	sll	r2,r21,r2
  80a8e0:	1ccffc34 	orhi	r19,r3,16368
  80a8e4:	11a4b03a 	or	r18,r2,r6
  80a8e8:	9005883a 	mov	r2,r18
  80a8ec:	9807883a 	mov	r3,r19
  80a8f0:	dfc00617 	ldw	ra,24(sp)
  80a8f4:	dd400517 	ldw	r21,20(sp)
  80a8f8:	dd000417 	ldw	r20,16(sp)
  80a8fc:	dcc00317 	ldw	r19,12(sp)
  80a900:	dc800217 	ldw	r18,8(sp)
  80a904:	dc400117 	ldw	r17,4(sp)
  80a908:	dc000017 	ldw	r16,0(sp)
  80a90c:	dec00704 	addi	sp,sp,28
  80a910:	f800283a 	ret
  80a914:	a0c00e36 	bltu	r20,r3,80a950 <__b2d+0xec>
  80a918:	293ffd44 	addi	r4,r5,-11
  80a91c:	000d883a 	mov	r6,zero
  80a920:	20000f26 	beq	r4,zero,80a960 <__b2d+0xfc>
  80a924:	00800804 	movi	r2,32
  80a928:	110bc83a 	sub	r5,r2,r4
  80a92c:	a0c01236 	bltu	r20,r3,80a978 <__b2d+0x114>
  80a930:	000f883a 	mov	r7,zero
  80a934:	a904983a 	sll	r2,r21,r4
  80a938:	3146d83a 	srl	r3,r6,r5
  80a93c:	3108983a 	sll	r4,r6,r4
  80a940:	108ffc34 	orhi	r2,r2,16368
  80a944:	18a6b03a 	or	r19,r3,r2
  80a948:	3924b03a 	or	r18,r7,r4
  80a94c:	003fe606 	br	80a8e8 <__b2d+0x84>
  80a950:	293ffd44 	addi	r4,r5,-11
  80a954:	81bffe17 	ldw	r6,-8(r16)
  80a958:	80fffe04 	addi	r3,r16,-8
  80a95c:	203ff11e 	bne	r4,zero,80a924 <__b2d+0xc0>
  80a960:	accffc34 	orhi	r19,r21,16368
  80a964:	3025883a 	mov	r18,r6
  80a968:	003fdf06 	br	80a8e8 <__b2d+0x84>
  80a96c:	18bfff17 	ldw	r2,-4(r3)
  80a970:	110cd83a 	srl	r6,r2,r4
  80a974:	003fd706 	br	80a8d4 <__b2d+0x70>
  80a978:	18bfff17 	ldw	r2,-4(r3)
  80a97c:	114ed83a 	srl	r7,r2,r5
  80a980:	003fec06 	br	80a934 <__b2d+0xd0>

0080a984 <__ratio>:
  80a984:	defff904 	addi	sp,sp,-28
  80a988:	dc400215 	stw	r17,8(sp)
  80a98c:	2823883a 	mov	r17,r5
  80a990:	d80b883a 	mov	r5,sp
  80a994:	dfc00615 	stw	ra,24(sp)
  80a998:	dd000515 	stw	r20,20(sp)
  80a99c:	dcc00415 	stw	r19,16(sp)
  80a9a0:	dc800315 	stw	r18,12(sp)
  80a9a4:	2025883a 	mov	r18,r4
  80a9a8:	080a8640 	call	80a864 <__b2d>
  80a9ac:	8809883a 	mov	r4,r17
  80a9b0:	d9400104 	addi	r5,sp,4
  80a9b4:	1027883a 	mov	r19,r2
  80a9b8:	1829883a 	mov	r20,r3
  80a9bc:	080a8640 	call	80a864 <__b2d>
  80a9c0:	89000417 	ldw	r4,16(r17)
  80a9c4:	91c00417 	ldw	r7,16(r18)
  80a9c8:	d9800117 	ldw	r6,4(sp)
  80a9cc:	180b883a 	mov	r5,r3
  80a9d0:	390fc83a 	sub	r7,r7,r4
  80a9d4:	1009883a 	mov	r4,r2
  80a9d8:	d8800017 	ldw	r2,0(sp)
  80a9dc:	380e917a 	slli	r7,r7,5
  80a9e0:	2011883a 	mov	r8,r4
  80a9e4:	1185c83a 	sub	r2,r2,r6
  80a9e8:	11c5883a 	add	r2,r2,r7
  80a9ec:	1006953a 	slli	r3,r2,20
  80a9f0:	2813883a 	mov	r9,r5
  80a9f4:	00800d0e 	bge	zero,r2,80aa2c <__ratio+0xa8>
  80a9f8:	1d29883a 	add	r20,r3,r20
  80a9fc:	a00b883a 	mov	r5,r20
  80aa00:	480f883a 	mov	r7,r9
  80aa04:	9809883a 	mov	r4,r19
  80aa08:	400d883a 	mov	r6,r8
  80aa0c:	080d7440 	call	80d744 <__divdf3>
  80aa10:	dfc00617 	ldw	ra,24(sp)
  80aa14:	dd000517 	ldw	r20,20(sp)
  80aa18:	dcc00417 	ldw	r19,16(sp)
  80aa1c:	dc800317 	ldw	r18,12(sp)
  80aa20:	dc400217 	ldw	r17,8(sp)
  80aa24:	dec00704 	addi	sp,sp,28
  80aa28:	f800283a 	ret
  80aa2c:	28d3c83a 	sub	r9,r5,r3
  80aa30:	003ff206 	br	80a9fc <__ratio+0x78>

0080aa34 <_mprec_log10>:
  80aa34:	defffe04 	addi	sp,sp,-8
  80aa38:	008005c4 	movi	r2,23
  80aa3c:	dc000015 	stw	r16,0(sp)
  80aa40:	dfc00115 	stw	ra,4(sp)
  80aa44:	2021883a 	mov	r16,r4
  80aa48:	11000c16 	blt	r2,r4,80aa7c <_mprec_log10+0x48>
  80aa4c:	200490fa 	slli	r2,r4,3
  80aa50:	00c02074 	movhi	r3,129
  80aa54:	18c99004 	addi	r3,r3,9792
  80aa58:	10c5883a 	add	r2,r2,r3
  80aa5c:	12400117 	ldw	r9,4(r2)
  80aa60:	12000017 	ldw	r8,0(r2)
  80aa64:	4807883a 	mov	r3,r9
  80aa68:	4005883a 	mov	r2,r8
  80aa6c:	dfc00117 	ldw	ra,4(sp)
  80aa70:	dc000017 	ldw	r16,0(sp)
  80aa74:	dec00204 	addi	sp,sp,8
  80aa78:	f800283a 	ret
  80aa7c:	0011883a 	mov	r8,zero
  80aa80:	024ffc34 	movhi	r9,16368
  80aa84:	0005883a 	mov	r2,zero
  80aa88:	00d00934 	movhi	r3,16420
  80aa8c:	480b883a 	mov	r5,r9
  80aa90:	4009883a 	mov	r4,r8
  80aa94:	180f883a 	mov	r7,r3
  80aa98:	100d883a 	mov	r6,r2
  80aa9c:	080d3800 	call	80d380 <__muldf3>
  80aaa0:	843fffc4 	addi	r16,r16,-1
  80aaa4:	1011883a 	mov	r8,r2
  80aaa8:	1813883a 	mov	r9,r3
  80aaac:	803ff51e 	bne	r16,zero,80aa84 <_mprec_log10+0x50>
  80aab0:	4005883a 	mov	r2,r8
  80aab4:	4807883a 	mov	r3,r9
  80aab8:	dfc00117 	ldw	ra,4(sp)
  80aabc:	dc000017 	ldw	r16,0(sp)
  80aac0:	dec00204 	addi	sp,sp,8
  80aac4:	f800283a 	ret

0080aac8 <__copybits>:
  80aac8:	297fffc4 	addi	r5,r5,-1
  80aacc:	30800417 	ldw	r2,16(r6)
  80aad0:	280bd17a 	srai	r5,r5,5
  80aad4:	31800504 	addi	r6,r6,20
  80aad8:	1085883a 	add	r2,r2,r2
  80aadc:	294b883a 	add	r5,r5,r5
  80aae0:	294b883a 	add	r5,r5,r5
  80aae4:	1085883a 	add	r2,r2,r2
  80aae8:	290b883a 	add	r5,r5,r4
  80aaec:	3087883a 	add	r3,r6,r2
  80aaf0:	29400104 	addi	r5,r5,4
  80aaf4:	30c0052e 	bgeu	r6,r3,80ab0c <__copybits+0x44>
  80aaf8:	30800017 	ldw	r2,0(r6)
  80aafc:	31800104 	addi	r6,r6,4
  80ab00:	20800015 	stw	r2,0(r4)
  80ab04:	21000104 	addi	r4,r4,4
  80ab08:	30fffb36 	bltu	r6,r3,80aaf8 <__copybits+0x30>
  80ab0c:	2140032e 	bgeu	r4,r5,80ab1c <__copybits+0x54>
  80ab10:	20000015 	stw	zero,0(r4)
  80ab14:	21000104 	addi	r4,r4,4
  80ab18:	217ffd36 	bltu	r4,r5,80ab10 <__copybits+0x48>
  80ab1c:	f800283a 	ret

0080ab20 <__any_on>:
  80ab20:	20800417 	ldw	r2,16(r4)
  80ab24:	2807d17a 	srai	r3,r5,5
  80ab28:	21000504 	addi	r4,r4,20
  80ab2c:	10c00d0e 	bge	r2,r3,80ab64 <__any_on+0x44>
  80ab30:	1085883a 	add	r2,r2,r2
  80ab34:	1085883a 	add	r2,r2,r2
  80ab38:	208d883a 	add	r6,r4,r2
  80ab3c:	2180182e 	bgeu	r4,r6,80aba0 <__any_on+0x80>
  80ab40:	30bfff17 	ldw	r2,-4(r6)
  80ab44:	30ffff04 	addi	r3,r6,-4
  80ab48:	1000041e 	bne	r2,zero,80ab5c <__any_on+0x3c>
  80ab4c:	20c0142e 	bgeu	r4,r3,80aba0 <__any_on+0x80>
  80ab50:	18ffff04 	addi	r3,r3,-4
  80ab54:	18800017 	ldw	r2,0(r3)
  80ab58:	103ffc26 	beq	r2,zero,80ab4c <__any_on+0x2c>
  80ab5c:	00800044 	movi	r2,1
  80ab60:	f800283a 	ret
  80ab64:	18800a0e 	bge	r3,r2,80ab90 <__any_on+0x70>
  80ab68:	294007cc 	andi	r5,r5,31
  80ab6c:	28000826 	beq	r5,zero,80ab90 <__any_on+0x70>
  80ab70:	18c5883a 	add	r2,r3,r3
  80ab74:	1085883a 	add	r2,r2,r2
  80ab78:	208d883a 	add	r6,r4,r2
  80ab7c:	30c00017 	ldw	r3,0(r6)
  80ab80:	1944d83a 	srl	r2,r3,r5
  80ab84:	1144983a 	sll	r2,r2,r5
  80ab88:	18bff41e 	bne	r3,r2,80ab5c <__any_on+0x3c>
  80ab8c:	003feb06 	br	80ab3c <__any_on+0x1c>
  80ab90:	18c5883a 	add	r2,r3,r3
  80ab94:	1085883a 	add	r2,r2,r2
  80ab98:	208d883a 	add	r6,r4,r2
  80ab9c:	003fe706 	br	80ab3c <__any_on+0x1c>
  80aba0:	0005883a 	mov	r2,zero
  80aba4:	f800283a 	ret

0080aba8 <_Balloc>:
  80aba8:	20c01317 	ldw	r3,76(r4)
  80abac:	defffb04 	addi	sp,sp,-20
  80abb0:	dcc00315 	stw	r19,12(sp)
  80abb4:	dc800215 	stw	r18,8(sp)
  80abb8:	dfc00415 	stw	ra,16(sp)
  80abbc:	2825883a 	mov	r18,r5
  80abc0:	dc400115 	stw	r17,4(sp)
  80abc4:	dc000015 	stw	r16,0(sp)
  80abc8:	2027883a 	mov	r19,r4
  80abcc:	01800404 	movi	r6,16
  80abd0:	01400104 	movi	r5,4
  80abd4:	18001726 	beq	r3,zero,80ac34 <_Balloc+0x8c>
  80abd8:	01400044 	movi	r5,1
  80abdc:	9485883a 	add	r2,r18,r18
  80abe0:	2ca2983a 	sll	r17,r5,r18
  80abe4:	1085883a 	add	r2,r2,r2
  80abe8:	10c7883a 	add	r3,r2,r3
  80abec:	1c000017 	ldw	r16,0(r3)
  80abf0:	8c4d883a 	add	r6,r17,r17
  80abf4:	318d883a 	add	r6,r6,r6
  80abf8:	9809883a 	mov	r4,r19
  80abfc:	31800504 	addi	r6,r6,20
  80ac00:	80001226 	beq	r16,zero,80ac4c <_Balloc+0xa4>
  80ac04:	80800017 	ldw	r2,0(r16)
  80ac08:	18800015 	stw	r2,0(r3)
  80ac0c:	80000415 	stw	zero,16(r16)
  80ac10:	80000315 	stw	zero,12(r16)
  80ac14:	8005883a 	mov	r2,r16
  80ac18:	dfc00417 	ldw	ra,16(sp)
  80ac1c:	dcc00317 	ldw	r19,12(sp)
  80ac20:	dc800217 	ldw	r18,8(sp)
  80ac24:	dc400117 	ldw	r17,4(sp)
  80ac28:	dc000017 	ldw	r16,0(sp)
  80ac2c:	dec00504 	addi	sp,sp,20
  80ac30:	f800283a 	ret
  80ac34:	080c2840 	call	80c284 <_calloc_r>
  80ac38:	1007883a 	mov	r3,r2
  80ac3c:	0021883a 	mov	r16,zero
  80ac40:	98801315 	stw	r2,76(r19)
  80ac44:	103fe41e 	bne	r2,zero,80abd8 <_Balloc+0x30>
  80ac48:	003ff206 	br	80ac14 <_Balloc+0x6c>
  80ac4c:	080c2840 	call	80c284 <_calloc_r>
  80ac50:	103ff026 	beq	r2,zero,80ac14 <_Balloc+0x6c>
  80ac54:	1021883a 	mov	r16,r2
  80ac58:	14800115 	stw	r18,4(r2)
  80ac5c:	14400215 	stw	r17,8(r2)
  80ac60:	003fea06 	br	80ac0c <_Balloc+0x64>

0080ac64 <__d2b>:
  80ac64:	defff504 	addi	sp,sp,-44
  80ac68:	dcc00515 	stw	r19,20(sp)
  80ac6c:	04c00044 	movi	r19,1
  80ac70:	dc000215 	stw	r16,8(sp)
  80ac74:	2821883a 	mov	r16,r5
  80ac78:	980b883a 	mov	r5,r19
  80ac7c:	ddc00915 	stw	r23,36(sp)
  80ac80:	dd800815 	stw	r22,32(sp)
  80ac84:	dd400715 	stw	r21,28(sp)
  80ac88:	dd000615 	stw	r20,24(sp)
  80ac8c:	dc800415 	stw	r18,16(sp)
  80ac90:	dc400315 	stw	r17,12(sp)
  80ac94:	dfc00a15 	stw	ra,40(sp)
  80ac98:	3023883a 	mov	r17,r6
  80ac9c:	382d883a 	mov	r22,r7
  80aca0:	ddc00b17 	ldw	r23,44(sp)
  80aca4:	080aba80 	call	80aba8 <_Balloc>
  80aca8:	1025883a 	mov	r18,r2
  80acac:	00a00034 	movhi	r2,32768
  80acb0:	10bfffc4 	addi	r2,r2,-1
  80acb4:	8888703a 	and	r4,r17,r2
  80acb8:	202ad53a 	srli	r21,r4,20
  80acbc:	00800434 	movhi	r2,16
  80acc0:	10bfffc4 	addi	r2,r2,-1
  80acc4:	8886703a 	and	r3,r17,r2
  80acc8:	a829003a 	cmpeq	r20,r21,zero
  80accc:	800b883a 	mov	r5,r16
  80acd0:	d8c00115 	stw	r3,4(sp)
  80acd4:	94000504 	addi	r16,r18,20
  80acd8:	a000021e 	bne	r20,zero,80ace4 <__d2b+0x80>
  80acdc:	18c00434 	orhi	r3,r3,16
  80ace0:	d8c00115 	stw	r3,4(sp)
  80ace4:	28002726 	beq	r5,zero,80ad84 <__d2b+0x120>
  80ace8:	d809883a 	mov	r4,sp
  80acec:	d9400015 	stw	r5,0(sp)
  80acf0:	080a6c00 	call	80a6c0 <__lo0bits>
  80acf4:	100d883a 	mov	r6,r2
  80acf8:	10003526 	beq	r2,zero,80add0 <__d2b+0x16c>
  80acfc:	d8c00117 	ldw	r3,4(sp)
  80ad00:	00800804 	movi	r2,32
  80ad04:	1185c83a 	sub	r2,r2,r6
  80ad08:	d9000017 	ldw	r4,0(sp)
  80ad0c:	1886983a 	sll	r3,r3,r2
  80ad10:	1906b03a 	or	r3,r3,r4
  80ad14:	90c00515 	stw	r3,20(r18)
  80ad18:	d8c00117 	ldw	r3,4(sp)
  80ad1c:	1986d83a 	srl	r3,r3,r6
  80ad20:	d8c00115 	stw	r3,4(sp)
  80ad24:	180b003a 	cmpeq	r5,r3,zero
  80ad28:	00800084 	movi	r2,2
  80ad2c:	114bc83a 	sub	r5,r2,r5
  80ad30:	80c00115 	stw	r3,4(r16)
  80ad34:	91400415 	stw	r5,16(r18)
  80ad38:	a0001a1e 	bne	r20,zero,80ada4 <__d2b+0x140>
  80ad3c:	3545883a 	add	r2,r6,r21
  80ad40:	10bef344 	addi	r2,r2,-1075
  80ad44:	00c00d44 	movi	r3,53
  80ad48:	b0800015 	stw	r2,0(r22)
  80ad4c:	1987c83a 	sub	r3,r3,r6
  80ad50:	b8c00015 	stw	r3,0(r23)
  80ad54:	9005883a 	mov	r2,r18
  80ad58:	dfc00a17 	ldw	ra,40(sp)
  80ad5c:	ddc00917 	ldw	r23,36(sp)
  80ad60:	dd800817 	ldw	r22,32(sp)
  80ad64:	dd400717 	ldw	r21,28(sp)
  80ad68:	dd000617 	ldw	r20,24(sp)
  80ad6c:	dcc00517 	ldw	r19,20(sp)
  80ad70:	dc800417 	ldw	r18,16(sp)
  80ad74:	dc400317 	ldw	r17,12(sp)
  80ad78:	dc000217 	ldw	r16,8(sp)
  80ad7c:	dec00b04 	addi	sp,sp,44
  80ad80:	f800283a 	ret
  80ad84:	d9000104 	addi	r4,sp,4
  80ad88:	080a6c00 	call	80a6c0 <__lo0bits>
  80ad8c:	11800804 	addi	r6,r2,32
  80ad90:	d8800117 	ldw	r2,4(sp)
  80ad94:	94c00415 	stw	r19,16(r18)
  80ad98:	980b883a 	mov	r5,r19
  80ad9c:	90800515 	stw	r2,20(r18)
  80ada0:	a03fe626 	beq	r20,zero,80ad3c <__d2b+0xd8>
  80ada4:	2945883a 	add	r2,r5,r5
  80ada8:	1085883a 	add	r2,r2,r2
  80adac:	1405883a 	add	r2,r2,r16
  80adb0:	113fff17 	ldw	r4,-4(r2)
  80adb4:	30fef384 	addi	r3,r6,-1074
  80adb8:	2820917a 	slli	r16,r5,5
  80adbc:	b0c00015 	stw	r3,0(r22)
  80adc0:	080a6500 	call	80a650 <__hi0bits>
  80adc4:	80a1c83a 	sub	r16,r16,r2
  80adc8:	bc000015 	stw	r16,0(r23)
  80adcc:	003fe106 	br	80ad54 <__d2b+0xf0>
  80add0:	d8800017 	ldw	r2,0(sp)
  80add4:	90800515 	stw	r2,20(r18)
  80add8:	d8c00117 	ldw	r3,4(sp)
  80addc:	003fd106 	br	80ad24 <__d2b+0xc0>

0080ade0 <__mdiff>:
  80ade0:	defffb04 	addi	sp,sp,-20
  80ade4:	dc000015 	stw	r16,0(sp)
  80ade8:	2821883a 	mov	r16,r5
  80adec:	dc800215 	stw	r18,8(sp)
  80adf0:	300b883a 	mov	r5,r6
  80adf4:	2025883a 	mov	r18,r4
  80adf8:	8009883a 	mov	r4,r16
  80adfc:	dc400115 	stw	r17,4(sp)
  80ae00:	dfc00415 	stw	ra,16(sp)
  80ae04:	dcc00315 	stw	r19,12(sp)
  80ae08:	3023883a 	mov	r17,r6
  80ae0c:	080a7840 	call	80a784 <__mcmp>
  80ae10:	10004226 	beq	r2,zero,80af1c <__mdiff+0x13c>
  80ae14:	10005016 	blt	r2,zero,80af58 <__mdiff+0x178>
  80ae18:	0027883a 	mov	r19,zero
  80ae1c:	81400117 	ldw	r5,4(r16)
  80ae20:	9009883a 	mov	r4,r18
  80ae24:	080aba80 	call	80aba8 <_Balloc>
  80ae28:	1019883a 	mov	r12,r2
  80ae2c:	82800417 	ldw	r10,16(r16)
  80ae30:	88800417 	ldw	r2,16(r17)
  80ae34:	81800504 	addi	r6,r16,20
  80ae38:	5287883a 	add	r3,r10,r10
  80ae3c:	1085883a 	add	r2,r2,r2
  80ae40:	18c7883a 	add	r3,r3,r3
  80ae44:	1085883a 	add	r2,r2,r2
  80ae48:	8a000504 	addi	r8,r17,20
  80ae4c:	64c00315 	stw	r19,12(r12)
  80ae50:	30db883a 	add	r13,r6,r3
  80ae54:	4097883a 	add	r11,r8,r2
  80ae58:	61c00504 	addi	r7,r12,20
  80ae5c:	0013883a 	mov	r9,zero
  80ae60:	31000017 	ldw	r4,0(r6)
  80ae64:	41400017 	ldw	r5,0(r8)
  80ae68:	42000104 	addi	r8,r8,4
  80ae6c:	20bfffcc 	andi	r2,r4,65535
  80ae70:	28ffffcc 	andi	r3,r5,65535
  80ae74:	10c5c83a 	sub	r2,r2,r3
  80ae78:	1245883a 	add	r2,r2,r9
  80ae7c:	2008d43a 	srli	r4,r4,16
  80ae80:	280ad43a 	srli	r5,r5,16
  80ae84:	1007d43a 	srai	r3,r2,16
  80ae88:	3880000d 	sth	r2,0(r7)
  80ae8c:	2149c83a 	sub	r4,r4,r5
  80ae90:	20c9883a 	add	r4,r4,r3
  80ae94:	3900008d 	sth	r4,2(r7)
  80ae98:	31800104 	addi	r6,r6,4
  80ae9c:	39c00104 	addi	r7,r7,4
  80aea0:	2013d43a 	srai	r9,r4,16
  80aea4:	42ffee36 	bltu	r8,r11,80ae60 <__mdiff+0x80>
  80aea8:	33400c2e 	bgeu	r6,r13,80aedc <__mdiff+0xfc>
  80aeac:	30800017 	ldw	r2,0(r6)
  80aeb0:	31800104 	addi	r6,r6,4
  80aeb4:	10ffffcc 	andi	r3,r2,65535
  80aeb8:	1a47883a 	add	r3,r3,r9
  80aebc:	1004d43a 	srli	r2,r2,16
  80aec0:	1809d43a 	srai	r4,r3,16
  80aec4:	38c0000d 	sth	r3,0(r7)
  80aec8:	1105883a 	add	r2,r2,r4
  80aecc:	3880008d 	sth	r2,2(r7)
  80aed0:	1013d43a 	srai	r9,r2,16
  80aed4:	39c00104 	addi	r7,r7,4
  80aed8:	337ff436 	bltu	r6,r13,80aeac <__mdiff+0xcc>
  80aedc:	38bfff17 	ldw	r2,-4(r7)
  80aee0:	38ffff04 	addi	r3,r7,-4
  80aee4:	1000041e 	bne	r2,zero,80aef8 <__mdiff+0x118>
  80aee8:	18ffff04 	addi	r3,r3,-4
  80aeec:	18800017 	ldw	r2,0(r3)
  80aef0:	52bfffc4 	addi	r10,r10,-1
  80aef4:	103ffc26 	beq	r2,zero,80aee8 <__mdiff+0x108>
  80aef8:	6005883a 	mov	r2,r12
  80aefc:	62800415 	stw	r10,16(r12)
  80af00:	dfc00417 	ldw	ra,16(sp)
  80af04:	dcc00317 	ldw	r19,12(sp)
  80af08:	dc800217 	ldw	r18,8(sp)
  80af0c:	dc400117 	ldw	r17,4(sp)
  80af10:	dc000017 	ldw	r16,0(sp)
  80af14:	dec00504 	addi	sp,sp,20
  80af18:	f800283a 	ret
  80af1c:	9009883a 	mov	r4,r18
  80af20:	000b883a 	mov	r5,zero
  80af24:	080aba80 	call	80aba8 <_Balloc>
  80af28:	1019883a 	mov	r12,r2
  80af2c:	00800044 	movi	r2,1
  80af30:	60800415 	stw	r2,16(r12)
  80af34:	6005883a 	mov	r2,r12
  80af38:	60000515 	stw	zero,20(r12)
  80af3c:	dfc00417 	ldw	ra,16(sp)
  80af40:	dcc00317 	ldw	r19,12(sp)
  80af44:	dc800217 	ldw	r18,8(sp)
  80af48:	dc400117 	ldw	r17,4(sp)
  80af4c:	dc000017 	ldw	r16,0(sp)
  80af50:	dec00504 	addi	sp,sp,20
  80af54:	f800283a 	ret
  80af58:	880d883a 	mov	r6,r17
  80af5c:	04c00044 	movi	r19,1
  80af60:	8023883a 	mov	r17,r16
  80af64:	3021883a 	mov	r16,r6
  80af68:	003fac06 	br	80ae1c <__mdiff+0x3c>

0080af6c <__lshift>:
  80af6c:	defff904 	addi	sp,sp,-28
  80af70:	28800417 	ldw	r2,16(r5)
  80af74:	dc000015 	stw	r16,0(sp)
  80af78:	3021d17a 	srai	r16,r6,5
  80af7c:	28c00217 	ldw	r3,8(r5)
  80af80:	10800044 	addi	r2,r2,1
  80af84:	dc400115 	stw	r17,4(sp)
  80af88:	80a3883a 	add	r17,r16,r2
  80af8c:	dd400515 	stw	r21,20(sp)
  80af90:	dd000415 	stw	r20,16(sp)
  80af94:	dc800215 	stw	r18,8(sp)
  80af98:	dfc00615 	stw	ra,24(sp)
  80af9c:	2825883a 	mov	r18,r5
  80afa0:	dcc00315 	stw	r19,12(sp)
  80afa4:	3029883a 	mov	r20,r6
  80afa8:	202b883a 	mov	r21,r4
  80afac:	29400117 	ldw	r5,4(r5)
  80afb0:	1c40030e 	bge	r3,r17,80afc0 <__lshift+0x54>
  80afb4:	18c7883a 	add	r3,r3,r3
  80afb8:	29400044 	addi	r5,r5,1
  80afbc:	1c7ffd16 	blt	r3,r17,80afb4 <__lshift+0x48>
  80afc0:	a809883a 	mov	r4,r21
  80afc4:	080aba80 	call	80aba8 <_Balloc>
  80afc8:	1027883a 	mov	r19,r2
  80afcc:	11400504 	addi	r5,r2,20
  80afd0:	0400090e 	bge	zero,r16,80aff8 <__lshift+0x8c>
  80afd4:	2805883a 	mov	r2,r5
  80afd8:	0007883a 	mov	r3,zero
  80afdc:	18c00044 	addi	r3,r3,1
  80afe0:	10000015 	stw	zero,0(r2)
  80afe4:	10800104 	addi	r2,r2,4
  80afe8:	80fffc1e 	bne	r16,r3,80afdc <__lshift+0x70>
  80afec:	8405883a 	add	r2,r16,r16
  80aff0:	1085883a 	add	r2,r2,r2
  80aff4:	288b883a 	add	r5,r5,r2
  80aff8:	90800417 	ldw	r2,16(r18)
  80affc:	91000504 	addi	r4,r18,20
  80b000:	a18007cc 	andi	r6,r20,31
  80b004:	1085883a 	add	r2,r2,r2
  80b008:	1085883a 	add	r2,r2,r2
  80b00c:	208f883a 	add	r7,r4,r2
  80b010:	30001e26 	beq	r6,zero,80b08c <__lshift+0x120>
  80b014:	00800804 	movi	r2,32
  80b018:	1191c83a 	sub	r8,r2,r6
  80b01c:	0007883a 	mov	r3,zero
  80b020:	20800017 	ldw	r2,0(r4)
  80b024:	1184983a 	sll	r2,r2,r6
  80b028:	1884b03a 	or	r2,r3,r2
  80b02c:	28800015 	stw	r2,0(r5)
  80b030:	20c00017 	ldw	r3,0(r4)
  80b034:	21000104 	addi	r4,r4,4
  80b038:	29400104 	addi	r5,r5,4
  80b03c:	1a06d83a 	srl	r3,r3,r8
  80b040:	21fff736 	bltu	r4,r7,80b020 <__lshift+0xb4>
  80b044:	28c00015 	stw	r3,0(r5)
  80b048:	18000126 	beq	r3,zero,80b050 <__lshift+0xe4>
  80b04c:	8c400044 	addi	r17,r17,1
  80b050:	88bfffc4 	addi	r2,r17,-1
  80b054:	98800415 	stw	r2,16(r19)
  80b058:	a809883a 	mov	r4,r21
  80b05c:	900b883a 	mov	r5,r18
  80b060:	080a6280 	call	80a628 <_Bfree>
  80b064:	9805883a 	mov	r2,r19
  80b068:	dfc00617 	ldw	ra,24(sp)
  80b06c:	dd400517 	ldw	r21,20(sp)
  80b070:	dd000417 	ldw	r20,16(sp)
  80b074:	dcc00317 	ldw	r19,12(sp)
  80b078:	dc800217 	ldw	r18,8(sp)
  80b07c:	dc400117 	ldw	r17,4(sp)
  80b080:	dc000017 	ldw	r16,0(sp)
  80b084:	dec00704 	addi	sp,sp,28
  80b088:	f800283a 	ret
  80b08c:	20800017 	ldw	r2,0(r4)
  80b090:	21000104 	addi	r4,r4,4
  80b094:	28800015 	stw	r2,0(r5)
  80b098:	29400104 	addi	r5,r5,4
  80b09c:	21ffec2e 	bgeu	r4,r7,80b050 <__lshift+0xe4>
  80b0a0:	20800017 	ldw	r2,0(r4)
  80b0a4:	21000104 	addi	r4,r4,4
  80b0a8:	28800015 	stw	r2,0(r5)
  80b0ac:	29400104 	addi	r5,r5,4
  80b0b0:	21fff636 	bltu	r4,r7,80b08c <__lshift+0x120>
  80b0b4:	003fe606 	br	80b050 <__lshift+0xe4>

0080b0b8 <__multiply>:
  80b0b8:	defff004 	addi	sp,sp,-64
  80b0bc:	dc800815 	stw	r18,32(sp)
  80b0c0:	dc400715 	stw	r17,28(sp)
  80b0c4:	2c800417 	ldw	r18,16(r5)
  80b0c8:	34400417 	ldw	r17,16(r6)
  80b0cc:	dcc00915 	stw	r19,36(sp)
  80b0d0:	dc000615 	stw	r16,24(sp)
  80b0d4:	dfc00f15 	stw	ra,60(sp)
  80b0d8:	df000e15 	stw	fp,56(sp)
  80b0dc:	ddc00d15 	stw	r23,52(sp)
  80b0e0:	dd800c15 	stw	r22,48(sp)
  80b0e4:	dd400b15 	stw	r21,44(sp)
  80b0e8:	dd000a15 	stw	r20,40(sp)
  80b0ec:	2821883a 	mov	r16,r5
  80b0f0:	3027883a 	mov	r19,r6
  80b0f4:	9440040e 	bge	r18,r17,80b108 <__multiply+0x50>
  80b0f8:	8825883a 	mov	r18,r17
  80b0fc:	2c400417 	ldw	r17,16(r5)
  80b100:	2827883a 	mov	r19,r5
  80b104:	3021883a 	mov	r16,r6
  80b108:	80800217 	ldw	r2,8(r16)
  80b10c:	9447883a 	add	r3,r18,r17
  80b110:	d8c00415 	stw	r3,16(sp)
  80b114:	81400117 	ldw	r5,4(r16)
  80b118:	10c0010e 	bge	r2,r3,80b120 <__multiply+0x68>
  80b11c:	29400044 	addi	r5,r5,1
  80b120:	080aba80 	call	80aba8 <_Balloc>
  80b124:	d8800515 	stw	r2,20(sp)
  80b128:	d9000417 	ldw	r4,16(sp)
  80b12c:	d8c00517 	ldw	r3,20(sp)
  80b130:	2105883a 	add	r2,r4,r4
  80b134:	1085883a 	add	r2,r2,r2
  80b138:	19000504 	addi	r4,r3,20
  80b13c:	2085883a 	add	r2,r4,r2
  80b140:	d8800315 	stw	r2,12(sp)
  80b144:	2080052e 	bgeu	r4,r2,80b15c <__multiply+0xa4>
  80b148:	2005883a 	mov	r2,r4
  80b14c:	d8c00317 	ldw	r3,12(sp)
  80b150:	10000015 	stw	zero,0(r2)
  80b154:	10800104 	addi	r2,r2,4
  80b158:	10fffc36 	bltu	r2,r3,80b14c <__multiply+0x94>
  80b15c:	8c45883a 	add	r2,r17,r17
  80b160:	9487883a 	add	r3,r18,r18
  80b164:	9dc00504 	addi	r23,r19,20
  80b168:	1085883a 	add	r2,r2,r2
  80b16c:	84000504 	addi	r16,r16,20
  80b170:	18c7883a 	add	r3,r3,r3
  80b174:	b885883a 	add	r2,r23,r2
  80b178:	dc000015 	stw	r16,0(sp)
  80b17c:	d8800215 	stw	r2,8(sp)
  80b180:	80f9883a 	add	fp,r16,r3
  80b184:	b880432e 	bgeu	r23,r2,80b294 <__multiply+0x1dc>
  80b188:	d9000115 	stw	r4,4(sp)
  80b18c:	b9000017 	ldw	r4,0(r23)
  80b190:	253fffcc 	andi	r20,r4,65535
  80b194:	a0001a26 	beq	r20,zero,80b200 <__multiply+0x148>
  80b198:	dcc00017 	ldw	r19,0(sp)
  80b19c:	dc800117 	ldw	r18,4(sp)
  80b1a0:	002b883a 	mov	r21,zero
  80b1a4:	9c400017 	ldw	r17,0(r19)
  80b1a8:	94000017 	ldw	r16,0(r18)
  80b1ac:	a009883a 	mov	r4,r20
  80b1b0:	897fffcc 	andi	r5,r17,65535
  80b1b4:	0803eb80 	call	803eb8 <__mulsi3>
  80b1b8:	880ad43a 	srli	r5,r17,16
  80b1bc:	80ffffcc 	andi	r3,r16,65535
  80b1c0:	a8c7883a 	add	r3,r21,r3
  80b1c4:	a009883a 	mov	r4,r20
  80b1c8:	10e3883a 	add	r17,r2,r3
  80b1cc:	8020d43a 	srli	r16,r16,16
  80b1d0:	0803eb80 	call	803eb8 <__mulsi3>
  80b1d4:	8806d43a 	srli	r3,r17,16
  80b1d8:	1405883a 	add	r2,r2,r16
  80b1dc:	9cc00104 	addi	r19,r19,4
  80b1e0:	1887883a 	add	r3,r3,r2
  80b1e4:	90c0008d 	sth	r3,2(r18)
  80b1e8:	9440000d 	sth	r17,0(r18)
  80b1ec:	182ad43a 	srli	r21,r3,16
  80b1f0:	94800104 	addi	r18,r18,4
  80b1f4:	9f3feb36 	bltu	r19,fp,80b1a4 <__multiply+0xec>
  80b1f8:	95400015 	stw	r21,0(r18)
  80b1fc:	b9000017 	ldw	r4,0(r23)
  80b200:	202ad43a 	srli	r21,r4,16
  80b204:	a8001c26 	beq	r21,zero,80b278 <__multiply+0x1c0>
  80b208:	d9000117 	ldw	r4,4(sp)
  80b20c:	dd000017 	ldw	r20,0(sp)
  80b210:	002d883a 	mov	r22,zero
  80b214:	24c00017 	ldw	r19,0(r4)
  80b218:	2025883a 	mov	r18,r4
  80b21c:	9823883a 	mov	r17,r19
  80b220:	a4000017 	ldw	r16,0(r20)
  80b224:	a809883a 	mov	r4,r21
  80b228:	a5000104 	addi	r20,r20,4
  80b22c:	817fffcc 	andi	r5,r16,65535
  80b230:	0803eb80 	call	803eb8 <__mulsi3>
  80b234:	8806d43a 	srli	r3,r17,16
  80b238:	800ad43a 	srli	r5,r16,16
  80b23c:	94c0000d 	sth	r19,0(r18)
  80b240:	b0c7883a 	add	r3,r22,r3
  80b244:	10e1883a 	add	r16,r2,r3
  80b248:	9400008d 	sth	r16,2(r18)
  80b24c:	a809883a 	mov	r4,r21
  80b250:	94800104 	addi	r18,r18,4
  80b254:	0803eb80 	call	803eb8 <__mulsi3>
  80b258:	94400017 	ldw	r17,0(r18)
  80b25c:	8020d43a 	srli	r16,r16,16
  80b260:	88ffffcc 	andi	r3,r17,65535
  80b264:	10c5883a 	add	r2,r2,r3
  80b268:	80a7883a 	add	r19,r16,r2
  80b26c:	982cd43a 	srli	r22,r19,16
  80b270:	a73feb36 	bltu	r20,fp,80b220 <__multiply+0x168>
  80b274:	94c00015 	stw	r19,0(r18)
  80b278:	d8800217 	ldw	r2,8(sp)
  80b27c:	bdc00104 	addi	r23,r23,4
  80b280:	b880042e 	bgeu	r23,r2,80b294 <__multiply+0x1dc>
  80b284:	d8c00117 	ldw	r3,4(sp)
  80b288:	18c00104 	addi	r3,r3,4
  80b28c:	d8c00115 	stw	r3,4(sp)
  80b290:	003fbe06 	br	80b18c <__multiply+0xd4>
  80b294:	d9000417 	ldw	r4,16(sp)
  80b298:	01000c0e 	bge	zero,r4,80b2cc <__multiply+0x214>
  80b29c:	d8c00317 	ldw	r3,12(sp)
  80b2a0:	18bfff17 	ldw	r2,-4(r3)
  80b2a4:	18ffff04 	addi	r3,r3,-4
  80b2a8:	10000326 	beq	r2,zero,80b2b8 <__multiply+0x200>
  80b2ac:	00000706 	br	80b2cc <__multiply+0x214>
  80b2b0:	18800017 	ldw	r2,0(r3)
  80b2b4:	1000051e 	bne	r2,zero,80b2cc <__multiply+0x214>
  80b2b8:	d9000417 	ldw	r4,16(sp)
  80b2bc:	18ffff04 	addi	r3,r3,-4
  80b2c0:	213fffc4 	addi	r4,r4,-1
  80b2c4:	d9000415 	stw	r4,16(sp)
  80b2c8:	203ff91e 	bne	r4,zero,80b2b0 <__multiply+0x1f8>
  80b2cc:	d8800417 	ldw	r2,16(sp)
  80b2d0:	d8c00517 	ldw	r3,20(sp)
  80b2d4:	18800415 	stw	r2,16(r3)
  80b2d8:	1805883a 	mov	r2,r3
  80b2dc:	dfc00f17 	ldw	ra,60(sp)
  80b2e0:	df000e17 	ldw	fp,56(sp)
  80b2e4:	ddc00d17 	ldw	r23,52(sp)
  80b2e8:	dd800c17 	ldw	r22,48(sp)
  80b2ec:	dd400b17 	ldw	r21,44(sp)
  80b2f0:	dd000a17 	ldw	r20,40(sp)
  80b2f4:	dcc00917 	ldw	r19,36(sp)
  80b2f8:	dc800817 	ldw	r18,32(sp)
  80b2fc:	dc400717 	ldw	r17,28(sp)
  80b300:	dc000617 	ldw	r16,24(sp)
  80b304:	dec01004 	addi	sp,sp,64
  80b308:	f800283a 	ret

0080b30c <__i2b>:
  80b30c:	defffd04 	addi	sp,sp,-12
  80b310:	dc000015 	stw	r16,0(sp)
  80b314:	04000044 	movi	r16,1
  80b318:	dc800115 	stw	r18,4(sp)
  80b31c:	2825883a 	mov	r18,r5
  80b320:	800b883a 	mov	r5,r16
  80b324:	dfc00215 	stw	ra,8(sp)
  80b328:	080aba80 	call	80aba8 <_Balloc>
  80b32c:	14000415 	stw	r16,16(r2)
  80b330:	14800515 	stw	r18,20(r2)
  80b334:	dfc00217 	ldw	ra,8(sp)
  80b338:	dc800117 	ldw	r18,4(sp)
  80b33c:	dc000017 	ldw	r16,0(sp)
  80b340:	dec00304 	addi	sp,sp,12
  80b344:	f800283a 	ret

0080b348 <__multadd>:
  80b348:	defff604 	addi	sp,sp,-40
  80b34c:	dd800615 	stw	r22,24(sp)
  80b350:	2d800417 	ldw	r22,16(r5)
  80b354:	df000815 	stw	fp,32(sp)
  80b358:	ddc00715 	stw	r23,28(sp)
  80b35c:	dd400515 	stw	r21,20(sp)
  80b360:	dd000415 	stw	r20,16(sp)
  80b364:	dcc00315 	stw	r19,12(sp)
  80b368:	dc800215 	stw	r18,8(sp)
  80b36c:	dfc00915 	stw	ra,36(sp)
  80b370:	dc400115 	stw	r17,4(sp)
  80b374:	dc000015 	stw	r16,0(sp)
  80b378:	282f883a 	mov	r23,r5
  80b37c:	2039883a 	mov	fp,r4
  80b380:	302b883a 	mov	r21,r6
  80b384:	3829883a 	mov	r20,r7
  80b388:	2c800504 	addi	r18,r5,20
  80b38c:	0027883a 	mov	r19,zero
  80b390:	94400017 	ldw	r17,0(r18)
  80b394:	a80b883a 	mov	r5,r21
  80b398:	9cc00044 	addi	r19,r19,1
  80b39c:	893fffcc 	andi	r4,r17,65535
  80b3a0:	0803eb80 	call	803eb8 <__mulsi3>
  80b3a4:	8808d43a 	srli	r4,r17,16
  80b3a8:	1521883a 	add	r16,r2,r20
  80b3ac:	a80b883a 	mov	r5,r21
  80b3b0:	0803eb80 	call	803eb8 <__mulsi3>
  80b3b4:	8008d43a 	srli	r4,r16,16
  80b3b8:	843fffcc 	andi	r16,r16,65535
  80b3bc:	1105883a 	add	r2,r2,r4
  80b3c0:	1006943a 	slli	r3,r2,16
  80b3c4:	1028d43a 	srli	r20,r2,16
  80b3c8:	1c07883a 	add	r3,r3,r16
  80b3cc:	90c00015 	stw	r3,0(r18)
  80b3d0:	94800104 	addi	r18,r18,4
  80b3d4:	9dbfee16 	blt	r19,r22,80b390 <__multadd+0x48>
  80b3d8:	a0000826 	beq	r20,zero,80b3fc <__multadd+0xb4>
  80b3dc:	b8800217 	ldw	r2,8(r23)
  80b3e0:	b080130e 	bge	r22,r2,80b430 <__multadd+0xe8>
  80b3e4:	b585883a 	add	r2,r22,r22
  80b3e8:	1085883a 	add	r2,r2,r2
  80b3ec:	15c5883a 	add	r2,r2,r23
  80b3f0:	b0c00044 	addi	r3,r22,1
  80b3f4:	15000515 	stw	r20,20(r2)
  80b3f8:	b8c00415 	stw	r3,16(r23)
  80b3fc:	b805883a 	mov	r2,r23
  80b400:	dfc00917 	ldw	ra,36(sp)
  80b404:	df000817 	ldw	fp,32(sp)
  80b408:	ddc00717 	ldw	r23,28(sp)
  80b40c:	dd800617 	ldw	r22,24(sp)
  80b410:	dd400517 	ldw	r21,20(sp)
  80b414:	dd000417 	ldw	r20,16(sp)
  80b418:	dcc00317 	ldw	r19,12(sp)
  80b41c:	dc800217 	ldw	r18,8(sp)
  80b420:	dc400117 	ldw	r17,4(sp)
  80b424:	dc000017 	ldw	r16,0(sp)
  80b428:	dec00a04 	addi	sp,sp,40
  80b42c:	f800283a 	ret
  80b430:	b9400117 	ldw	r5,4(r23)
  80b434:	e009883a 	mov	r4,fp
  80b438:	29400044 	addi	r5,r5,1
  80b43c:	080aba80 	call	80aba8 <_Balloc>
  80b440:	b9800417 	ldw	r6,16(r23)
  80b444:	b9400304 	addi	r5,r23,12
  80b448:	11000304 	addi	r4,r2,12
  80b44c:	318d883a 	add	r6,r6,r6
  80b450:	318d883a 	add	r6,r6,r6
  80b454:	31800204 	addi	r6,r6,8
  80b458:	1023883a 	mov	r17,r2
  80b45c:	080a4a80 	call	80a4a8 <memcpy>
  80b460:	b80b883a 	mov	r5,r23
  80b464:	e009883a 	mov	r4,fp
  80b468:	080a6280 	call	80a628 <_Bfree>
  80b46c:	882f883a 	mov	r23,r17
  80b470:	003fdc06 	br	80b3e4 <__multadd+0x9c>

0080b474 <__pow5mult>:
  80b474:	defffa04 	addi	sp,sp,-24
  80b478:	308000cc 	andi	r2,r6,3
  80b47c:	dd000415 	stw	r20,16(sp)
  80b480:	dcc00315 	stw	r19,12(sp)
  80b484:	dc000015 	stw	r16,0(sp)
  80b488:	dfc00515 	stw	ra,20(sp)
  80b48c:	dc800215 	stw	r18,8(sp)
  80b490:	dc400115 	stw	r17,4(sp)
  80b494:	3021883a 	mov	r16,r6
  80b498:	2027883a 	mov	r19,r4
  80b49c:	2829883a 	mov	r20,r5
  80b4a0:	10002b1e 	bne	r2,zero,80b550 <__pow5mult+0xdc>
  80b4a4:	8025d0ba 	srai	r18,r16,2
  80b4a8:	90001b26 	beq	r18,zero,80b518 <__pow5mult+0xa4>
  80b4ac:	9c001217 	ldw	r16,72(r19)
  80b4b0:	8000081e 	bne	r16,zero,80b4d4 <__pow5mult+0x60>
  80b4b4:	00003006 	br	80b578 <__pow5mult+0x104>
  80b4b8:	800b883a 	mov	r5,r16
  80b4bc:	800d883a 	mov	r6,r16
  80b4c0:	9809883a 	mov	r4,r19
  80b4c4:	90001426 	beq	r18,zero,80b518 <__pow5mult+0xa4>
  80b4c8:	80800017 	ldw	r2,0(r16)
  80b4cc:	10001b26 	beq	r2,zero,80b53c <__pow5mult+0xc8>
  80b4d0:	1021883a 	mov	r16,r2
  80b4d4:	9080004c 	andi	r2,r18,1
  80b4d8:	1005003a 	cmpeq	r2,r2,zero
  80b4dc:	9025d07a 	srai	r18,r18,1
  80b4e0:	800d883a 	mov	r6,r16
  80b4e4:	9809883a 	mov	r4,r19
  80b4e8:	a00b883a 	mov	r5,r20
  80b4ec:	103ff21e 	bne	r2,zero,80b4b8 <__pow5mult+0x44>
  80b4f0:	080b0b80 	call	80b0b8 <__multiply>
  80b4f4:	a00b883a 	mov	r5,r20
  80b4f8:	9809883a 	mov	r4,r19
  80b4fc:	1023883a 	mov	r17,r2
  80b500:	080a6280 	call	80a628 <_Bfree>
  80b504:	8829883a 	mov	r20,r17
  80b508:	800b883a 	mov	r5,r16
  80b50c:	800d883a 	mov	r6,r16
  80b510:	9809883a 	mov	r4,r19
  80b514:	903fec1e 	bne	r18,zero,80b4c8 <__pow5mult+0x54>
  80b518:	a005883a 	mov	r2,r20
  80b51c:	dfc00517 	ldw	ra,20(sp)
  80b520:	dd000417 	ldw	r20,16(sp)
  80b524:	dcc00317 	ldw	r19,12(sp)
  80b528:	dc800217 	ldw	r18,8(sp)
  80b52c:	dc400117 	ldw	r17,4(sp)
  80b530:	dc000017 	ldw	r16,0(sp)
  80b534:	dec00604 	addi	sp,sp,24
  80b538:	f800283a 	ret
  80b53c:	080b0b80 	call	80b0b8 <__multiply>
  80b540:	80800015 	stw	r2,0(r16)
  80b544:	1021883a 	mov	r16,r2
  80b548:	10000015 	stw	zero,0(r2)
  80b54c:	003fe106 	br	80b4d4 <__pow5mult+0x60>
  80b550:	1085883a 	add	r2,r2,r2
  80b554:	00c02074 	movhi	r3,129
  80b558:	18c9d604 	addi	r3,r3,10072
  80b55c:	1085883a 	add	r2,r2,r2
  80b560:	10c5883a 	add	r2,r2,r3
  80b564:	11bfff17 	ldw	r6,-4(r2)
  80b568:	000f883a 	mov	r7,zero
  80b56c:	080b3480 	call	80b348 <__multadd>
  80b570:	1029883a 	mov	r20,r2
  80b574:	003fcb06 	br	80b4a4 <__pow5mult+0x30>
  80b578:	9809883a 	mov	r4,r19
  80b57c:	01409c44 	movi	r5,625
  80b580:	080b30c0 	call	80b30c <__i2b>
  80b584:	98801215 	stw	r2,72(r19)
  80b588:	1021883a 	mov	r16,r2
  80b58c:	10000015 	stw	zero,0(r2)
  80b590:	003fd006 	br	80b4d4 <__pow5mult+0x60>

0080b594 <__s2b>:
  80b594:	defff904 	addi	sp,sp,-28
  80b598:	dcc00315 	stw	r19,12(sp)
  80b59c:	dc800215 	stw	r18,8(sp)
  80b5a0:	2827883a 	mov	r19,r5
  80b5a4:	2025883a 	mov	r18,r4
  80b5a8:	01400244 	movi	r5,9
  80b5ac:	39000204 	addi	r4,r7,8
  80b5b0:	dd000415 	stw	r20,16(sp)
  80b5b4:	dc400115 	stw	r17,4(sp)
  80b5b8:	dfc00615 	stw	ra,24(sp)
  80b5bc:	dd400515 	stw	r21,20(sp)
  80b5c0:	dc000015 	stw	r16,0(sp)
  80b5c4:	3829883a 	mov	r20,r7
  80b5c8:	3023883a 	mov	r17,r6
  80b5cc:	0803de80 	call	803de8 <__divsi3>
  80b5d0:	00c00044 	movi	r3,1
  80b5d4:	1880350e 	bge	r3,r2,80b6ac <__s2b+0x118>
  80b5d8:	000b883a 	mov	r5,zero
  80b5dc:	18c7883a 	add	r3,r3,r3
  80b5e0:	29400044 	addi	r5,r5,1
  80b5e4:	18bffd16 	blt	r3,r2,80b5dc <__s2b+0x48>
  80b5e8:	9009883a 	mov	r4,r18
  80b5ec:	080aba80 	call	80aba8 <_Balloc>
  80b5f0:	1011883a 	mov	r8,r2
  80b5f4:	d8800717 	ldw	r2,28(sp)
  80b5f8:	00c00044 	movi	r3,1
  80b5fc:	01800244 	movi	r6,9
  80b600:	40800515 	stw	r2,20(r8)
  80b604:	40c00415 	stw	r3,16(r8)
  80b608:	3440260e 	bge	r6,r17,80b6a4 <__s2b+0x110>
  80b60c:	3021883a 	mov	r16,r6
  80b610:	99ab883a 	add	r21,r19,r6
  80b614:	9c05883a 	add	r2,r19,r16
  80b618:	11c00007 	ldb	r7,0(r2)
  80b61c:	400b883a 	mov	r5,r8
  80b620:	9009883a 	mov	r4,r18
  80b624:	39fff404 	addi	r7,r7,-48
  80b628:	01800284 	movi	r6,10
  80b62c:	080b3480 	call	80b348 <__multadd>
  80b630:	84000044 	addi	r16,r16,1
  80b634:	1011883a 	mov	r8,r2
  80b638:	8c3ff61e 	bne	r17,r16,80b614 <__s2b+0x80>
  80b63c:	ac45883a 	add	r2,r21,r17
  80b640:	117ffe04 	addi	r5,r2,-8
  80b644:	880d883a 	mov	r6,r17
  80b648:	35000c0e 	bge	r6,r20,80b67c <__s2b+0xe8>
  80b64c:	a185c83a 	sub	r2,r20,r6
  80b650:	2821883a 	mov	r16,r5
  80b654:	28a3883a 	add	r17,r5,r2
  80b658:	81c00007 	ldb	r7,0(r16)
  80b65c:	400b883a 	mov	r5,r8
  80b660:	9009883a 	mov	r4,r18
  80b664:	39fff404 	addi	r7,r7,-48
  80b668:	01800284 	movi	r6,10
  80b66c:	080b3480 	call	80b348 <__multadd>
  80b670:	84000044 	addi	r16,r16,1
  80b674:	1011883a 	mov	r8,r2
  80b678:	847ff71e 	bne	r16,r17,80b658 <__s2b+0xc4>
  80b67c:	4005883a 	mov	r2,r8
  80b680:	dfc00617 	ldw	ra,24(sp)
  80b684:	dd400517 	ldw	r21,20(sp)
  80b688:	dd000417 	ldw	r20,16(sp)
  80b68c:	dcc00317 	ldw	r19,12(sp)
  80b690:	dc800217 	ldw	r18,8(sp)
  80b694:	dc400117 	ldw	r17,4(sp)
  80b698:	dc000017 	ldw	r16,0(sp)
  80b69c:	dec00704 	addi	sp,sp,28
  80b6a0:	f800283a 	ret
  80b6a4:	99400284 	addi	r5,r19,10
  80b6a8:	003fe706 	br	80b648 <__s2b+0xb4>
  80b6ac:	000b883a 	mov	r5,zero
  80b6b0:	003fcd06 	br	80b5e8 <__s2b+0x54>

0080b6b4 <putc>:
  80b6b4:	defffc04 	addi	sp,sp,-16
  80b6b8:	dc800215 	stw	r18,8(sp)
  80b6bc:	04802074 	movhi	r18,129
  80b6c0:	9491ac04 	addi	r18,r18,18096
  80b6c4:	90c00017 	ldw	r3,0(r18)
  80b6c8:	dc400115 	stw	r17,4(sp)
  80b6cc:	dc000015 	stw	r16,0(sp)
  80b6d0:	dfc00315 	stw	ra,12(sp)
  80b6d4:	2023883a 	mov	r17,r4
  80b6d8:	2821883a 	mov	r16,r5
  80b6dc:	18000226 	beq	r3,zero,80b6e8 <putc+0x34>
  80b6e0:	18800e17 	ldw	r2,56(r3)
  80b6e4:	10001126 	beq	r2,zero,80b72c <putc+0x78>
  80b6e8:	80800217 	ldw	r2,8(r16)
  80b6ec:	10ffffc4 	addi	r3,r2,-1
  80b6f0:	80c00215 	stw	r3,8(r16)
  80b6f4:	18001316 	blt	r3,zero,80b744 <putc+0x90>
  80b6f8:	80800017 	ldw	r2,0(r16)
  80b6fc:	14400005 	stb	r17,0(r2)
  80b700:	80c00017 	ldw	r3,0(r16)
  80b704:	18800044 	addi	r2,r3,1
  80b708:	18c00003 	ldbu	r3,0(r3)
  80b70c:	80800015 	stw	r2,0(r16)
  80b710:	1805883a 	mov	r2,r3
  80b714:	dfc00317 	ldw	ra,12(sp)
  80b718:	dc800217 	ldw	r18,8(sp)
  80b71c:	dc400117 	ldw	r17,4(sp)
  80b720:	dc000017 	ldw	r16,0(sp)
  80b724:	dec00404 	addi	sp,sp,16
  80b728:	f800283a 	ret
  80b72c:	1809883a 	mov	r4,r3
  80b730:	0808bf80 	call	808bf8 <__sinit>
  80b734:	80800217 	ldw	r2,8(r16)
  80b738:	10ffffc4 	addi	r3,r2,-1
  80b73c:	80c00215 	stw	r3,8(r16)
  80b740:	183fed0e 	bge	r3,zero,80b6f8 <putc+0x44>
  80b744:	80800617 	ldw	r2,24(r16)
  80b748:	18800f16 	blt	r3,r2,80b788 <putc+0xd4>
  80b74c:	80800017 	ldw	r2,0(r16)
  80b750:	14400005 	stb	r17,0(r2)
  80b754:	81000017 	ldw	r4,0(r16)
  80b758:	00800284 	movi	r2,10
  80b75c:	20c00003 	ldbu	r3,0(r4)
  80b760:	18801226 	beq	r3,r2,80b7ac <putc+0xf8>
  80b764:	20800044 	addi	r2,r4,1
  80b768:	80800015 	stw	r2,0(r16)
  80b76c:	1805883a 	mov	r2,r3
  80b770:	dfc00317 	ldw	ra,12(sp)
  80b774:	dc800217 	ldw	r18,8(sp)
  80b778:	dc400117 	ldw	r17,4(sp)
  80b77c:	dc000017 	ldw	r16,0(sp)
  80b780:	dec00404 	addi	sp,sp,16
  80b784:	f800283a 	ret
  80b788:	91000017 	ldw	r4,0(r18)
  80b78c:	880b883a 	mov	r5,r17
  80b790:	800d883a 	mov	r6,r16
  80b794:	dfc00317 	ldw	ra,12(sp)
  80b798:	dc800217 	ldw	r18,8(sp)
  80b79c:	dc400117 	ldw	r17,4(sp)
  80b7a0:	dc000017 	ldw	r16,0(sp)
  80b7a4:	dec00404 	addi	sp,sp,16
  80b7a8:	080c0c01 	jmpi	80c0c0 <__swbuf_r>
  80b7ac:	91000017 	ldw	r4,0(r18)
  80b7b0:	180b883a 	mov	r5,r3
  80b7b4:	003ff606 	br	80b790 <putc+0xdc>

0080b7b8 <_putc_r>:
  80b7b8:	defffc04 	addi	sp,sp,-16
  80b7bc:	dc400215 	stw	r17,8(sp)
  80b7c0:	dc000115 	stw	r16,4(sp)
  80b7c4:	dfc00315 	stw	ra,12(sp)
  80b7c8:	2021883a 	mov	r16,r4
  80b7cc:	2823883a 	mov	r17,r5
  80b7d0:	20000226 	beq	r4,zero,80b7dc <_putc_r+0x24>
  80b7d4:	20800e17 	ldw	r2,56(r4)
  80b7d8:	10001026 	beq	r2,zero,80b81c <_putc_r+0x64>
  80b7dc:	30800217 	ldw	r2,8(r6)
  80b7e0:	10ffffc4 	addi	r3,r2,-1
  80b7e4:	30c00215 	stw	r3,8(r6)
  80b7e8:	18001316 	blt	r3,zero,80b838 <_putc_r+0x80>
  80b7ec:	30800017 	ldw	r2,0(r6)
  80b7f0:	14400005 	stb	r17,0(r2)
  80b7f4:	30c00017 	ldw	r3,0(r6)
  80b7f8:	18800044 	addi	r2,r3,1
  80b7fc:	18c00003 	ldbu	r3,0(r3)
  80b800:	30800015 	stw	r2,0(r6)
  80b804:	1805883a 	mov	r2,r3
  80b808:	dfc00317 	ldw	ra,12(sp)
  80b80c:	dc400217 	ldw	r17,8(sp)
  80b810:	dc000117 	ldw	r16,4(sp)
  80b814:	dec00404 	addi	sp,sp,16
  80b818:	f800283a 	ret
  80b81c:	d9800015 	stw	r6,0(sp)
  80b820:	0808bf80 	call	808bf8 <__sinit>
  80b824:	d9800017 	ldw	r6,0(sp)
  80b828:	30800217 	ldw	r2,8(r6)
  80b82c:	10ffffc4 	addi	r3,r2,-1
  80b830:	30c00215 	stw	r3,8(r6)
  80b834:	183fed0e 	bge	r3,zero,80b7ec <_putc_r+0x34>
  80b838:	30800617 	ldw	r2,24(r6)
  80b83c:	18800e16 	blt	r3,r2,80b878 <_putc_r+0xc0>
  80b840:	30800017 	ldw	r2,0(r6)
  80b844:	14400005 	stb	r17,0(r2)
  80b848:	31000017 	ldw	r4,0(r6)
  80b84c:	00800284 	movi	r2,10
  80b850:	20c00003 	ldbu	r3,0(r4)
  80b854:	18800f26 	beq	r3,r2,80b894 <_putc_r+0xdc>
  80b858:	20800044 	addi	r2,r4,1
  80b85c:	30800015 	stw	r2,0(r6)
  80b860:	1805883a 	mov	r2,r3
  80b864:	dfc00317 	ldw	ra,12(sp)
  80b868:	dc400217 	ldw	r17,8(sp)
  80b86c:	dc000117 	ldw	r16,4(sp)
  80b870:	dec00404 	addi	sp,sp,16
  80b874:	f800283a 	ret
  80b878:	8009883a 	mov	r4,r16
  80b87c:	880b883a 	mov	r5,r17
  80b880:	dfc00317 	ldw	ra,12(sp)
  80b884:	dc400217 	ldw	r17,8(sp)
  80b888:	dc000117 	ldw	r16,4(sp)
  80b88c:	dec00404 	addi	sp,sp,16
  80b890:	080c0c01 	jmpi	80c0c0 <__swbuf_r>
  80b894:	8009883a 	mov	r4,r16
  80b898:	180b883a 	mov	r5,r3
  80b89c:	003ff806 	br	80b880 <_putc_r+0xc8>

0080b8a0 <_realloc_r>:
  80b8a0:	defff404 	addi	sp,sp,-48
  80b8a4:	dd800815 	stw	r22,32(sp)
  80b8a8:	dc800415 	stw	r18,16(sp)
  80b8ac:	dc400315 	stw	r17,12(sp)
  80b8b0:	dfc00b15 	stw	ra,44(sp)
  80b8b4:	df000a15 	stw	fp,40(sp)
  80b8b8:	ddc00915 	stw	r23,36(sp)
  80b8bc:	dd400715 	stw	r21,28(sp)
  80b8c0:	dd000615 	stw	r20,24(sp)
  80b8c4:	dcc00515 	stw	r19,20(sp)
  80b8c8:	dc000215 	stw	r16,8(sp)
  80b8cc:	2825883a 	mov	r18,r5
  80b8d0:	3023883a 	mov	r17,r6
  80b8d4:	202d883a 	mov	r22,r4
  80b8d8:	2800c926 	beq	r5,zero,80bc00 <_realloc_r+0x360>
  80b8dc:	080e5940 	call	80e594 <__malloc_lock>
  80b8e0:	943ffe04 	addi	r16,r18,-8
  80b8e4:	88c002c4 	addi	r3,r17,11
  80b8e8:	00800584 	movi	r2,22
  80b8ec:	82000117 	ldw	r8,4(r16)
  80b8f0:	10c01b2e 	bgeu	r2,r3,80b960 <_realloc_r+0xc0>
  80b8f4:	00bffe04 	movi	r2,-8
  80b8f8:	188e703a 	and	r7,r3,r2
  80b8fc:	3839883a 	mov	fp,r7
  80b900:	38001a16 	blt	r7,zero,80b96c <_realloc_r+0xcc>
  80b904:	e4401936 	bltu	fp,r17,80b96c <_realloc_r+0xcc>
  80b908:	013fff04 	movi	r4,-4
  80b90c:	4126703a 	and	r19,r8,r4
  80b910:	99c02616 	blt	r19,r7,80b9ac <_realloc_r+0x10c>
  80b914:	802b883a 	mov	r21,r16
  80b918:	9829883a 	mov	r20,r19
  80b91c:	84000204 	addi	r16,r16,8
  80b920:	a80f883a 	mov	r7,r21
  80b924:	a70dc83a 	sub	r6,r20,fp
  80b928:	008003c4 	movi	r2,15
  80b92c:	1180c136 	bltu	r2,r6,80bc34 <_realloc_r+0x394>
  80b930:	38800117 	ldw	r2,4(r7)
  80b934:	a549883a 	add	r4,r20,r21
  80b938:	1080004c 	andi	r2,r2,1
  80b93c:	a084b03a 	or	r2,r20,r2
  80b940:	38800115 	stw	r2,4(r7)
  80b944:	20c00117 	ldw	r3,4(r4)
  80b948:	18c00054 	ori	r3,r3,1
  80b94c:	20c00115 	stw	r3,4(r4)
  80b950:	b009883a 	mov	r4,r22
  80b954:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80b958:	8023883a 	mov	r17,r16
  80b95c:	00000606 	br	80b978 <_realloc_r+0xd8>
  80b960:	01c00404 	movi	r7,16
  80b964:	3839883a 	mov	fp,r7
  80b968:	e47fe72e 	bgeu	fp,r17,80b908 <_realloc_r+0x68>
  80b96c:	00800304 	movi	r2,12
  80b970:	0023883a 	mov	r17,zero
  80b974:	b0800015 	stw	r2,0(r22)
  80b978:	8805883a 	mov	r2,r17
  80b97c:	dfc00b17 	ldw	ra,44(sp)
  80b980:	df000a17 	ldw	fp,40(sp)
  80b984:	ddc00917 	ldw	r23,36(sp)
  80b988:	dd800817 	ldw	r22,32(sp)
  80b98c:	dd400717 	ldw	r21,28(sp)
  80b990:	dd000617 	ldw	r20,24(sp)
  80b994:	dcc00517 	ldw	r19,20(sp)
  80b998:	dc800417 	ldw	r18,16(sp)
  80b99c:	dc400317 	ldw	r17,12(sp)
  80b9a0:	dc000217 	ldw	r16,8(sp)
  80b9a4:	dec00c04 	addi	sp,sp,48
  80b9a8:	f800283a 	ret
  80b9ac:	00802074 	movhi	r2,129
  80b9b0:	108bcf04 	addi	r2,r2,12092
  80b9b4:	12400217 	ldw	r9,8(r2)
  80b9b8:	84cd883a 	add	r6,r16,r19
  80b9bc:	802b883a 	mov	r21,r16
  80b9c0:	3240b926 	beq	r6,r9,80bca8 <_realloc_r+0x408>
  80b9c4:	31400117 	ldw	r5,4(r6)
  80b9c8:	00bfff84 	movi	r2,-2
  80b9cc:	2884703a 	and	r2,r5,r2
  80b9d0:	1185883a 	add	r2,r2,r6
  80b9d4:	10c00117 	ldw	r3,4(r2)
  80b9d8:	18c0004c 	andi	r3,r3,1
  80b9dc:	1807003a 	cmpeq	r3,r3,zero
  80b9e0:	1800a326 	beq	r3,zero,80bc70 <_realloc_r+0x3d0>
  80b9e4:	2908703a 	and	r4,r5,r4
  80b9e8:	9929883a 	add	r20,r19,r4
  80b9ec:	a1c0a30e 	bge	r20,r7,80bc7c <_realloc_r+0x3dc>
  80b9f0:	4080004c 	andi	r2,r8,1
  80b9f4:	1000551e 	bne	r2,zero,80bb4c <_realloc_r+0x2ac>
  80b9f8:	80800017 	ldw	r2,0(r16)
  80b9fc:	80afc83a 	sub	r23,r16,r2
  80ba00:	b8c00117 	ldw	r3,4(r23)
  80ba04:	00bfff04 	movi	r2,-4
  80ba08:	1884703a 	and	r2,r3,r2
  80ba0c:	30002e26 	beq	r6,zero,80bac8 <_realloc_r+0x228>
  80ba10:	3240b926 	beq	r6,r9,80bcf8 <_realloc_r+0x458>
  80ba14:	98a9883a 	add	r20,r19,r2
  80ba18:	2509883a 	add	r4,r4,r20
  80ba1c:	d9000015 	stw	r4,0(sp)
  80ba20:	21c02a16 	blt	r4,r7,80bacc <_realloc_r+0x22c>
  80ba24:	30800317 	ldw	r2,12(r6)
  80ba28:	30c00217 	ldw	r3,8(r6)
  80ba2c:	01400904 	movi	r5,36
  80ba30:	99bfff04 	addi	r6,r19,-4
  80ba34:	18800315 	stw	r2,12(r3)
  80ba38:	10c00215 	stw	r3,8(r2)
  80ba3c:	b9000317 	ldw	r4,12(r23)
  80ba40:	b8800217 	ldw	r2,8(r23)
  80ba44:	b82b883a 	mov	r21,r23
  80ba48:	bc000204 	addi	r16,r23,8
  80ba4c:	20800215 	stw	r2,8(r4)
  80ba50:	11000315 	stw	r4,12(r2)
  80ba54:	2980e436 	bltu	r5,r6,80bde8 <_realloc_r+0x548>
  80ba58:	008004c4 	movi	r2,19
  80ba5c:	9009883a 	mov	r4,r18
  80ba60:	8011883a 	mov	r8,r16
  80ba64:	11800f2e 	bgeu	r2,r6,80baa4 <_realloc_r+0x204>
  80ba68:	90800017 	ldw	r2,0(r18)
  80ba6c:	ba000404 	addi	r8,r23,16
  80ba70:	91000204 	addi	r4,r18,8
  80ba74:	b8800215 	stw	r2,8(r23)
  80ba78:	90c00117 	ldw	r3,4(r18)
  80ba7c:	008006c4 	movi	r2,27
  80ba80:	b8c00315 	stw	r3,12(r23)
  80ba84:	1180072e 	bgeu	r2,r6,80baa4 <_realloc_r+0x204>
  80ba88:	90c00217 	ldw	r3,8(r18)
  80ba8c:	ba000604 	addi	r8,r23,24
  80ba90:	91000404 	addi	r4,r18,16
  80ba94:	b8c00415 	stw	r3,16(r23)
  80ba98:	90800317 	ldw	r2,12(r18)
  80ba9c:	b8800515 	stw	r2,20(r23)
  80baa0:	3140e726 	beq	r6,r5,80be40 <_realloc_r+0x5a0>
  80baa4:	20800017 	ldw	r2,0(r4)
  80baa8:	dd000017 	ldw	r20,0(sp)
  80baac:	b80f883a 	mov	r7,r23
  80bab0:	40800015 	stw	r2,0(r8)
  80bab4:	20c00117 	ldw	r3,4(r4)
  80bab8:	40c00115 	stw	r3,4(r8)
  80babc:	20800217 	ldw	r2,8(r4)
  80bac0:	40800215 	stw	r2,8(r8)
  80bac4:	003f9706 	br	80b924 <_realloc_r+0x84>
  80bac8:	98a9883a 	add	r20,r19,r2
  80bacc:	a1c01f16 	blt	r20,r7,80bb4c <_realloc_r+0x2ac>
  80bad0:	b8c00317 	ldw	r3,12(r23)
  80bad4:	b8800217 	ldw	r2,8(r23)
  80bad8:	99bfff04 	addi	r6,r19,-4
  80badc:	01400904 	movi	r5,36
  80bae0:	b82b883a 	mov	r21,r23
  80bae4:	18800215 	stw	r2,8(r3)
  80bae8:	10c00315 	stw	r3,12(r2)
  80baec:	bc000204 	addi	r16,r23,8
  80baf0:	2980c336 	bltu	r5,r6,80be00 <_realloc_r+0x560>
  80baf4:	008004c4 	movi	r2,19
  80baf8:	9009883a 	mov	r4,r18
  80bafc:	8011883a 	mov	r8,r16
  80bb00:	11800f2e 	bgeu	r2,r6,80bb40 <_realloc_r+0x2a0>
  80bb04:	90800017 	ldw	r2,0(r18)
  80bb08:	ba000404 	addi	r8,r23,16
  80bb0c:	91000204 	addi	r4,r18,8
  80bb10:	b8800215 	stw	r2,8(r23)
  80bb14:	90c00117 	ldw	r3,4(r18)
  80bb18:	008006c4 	movi	r2,27
  80bb1c:	b8c00315 	stw	r3,12(r23)
  80bb20:	1180072e 	bgeu	r2,r6,80bb40 <_realloc_r+0x2a0>
  80bb24:	90c00217 	ldw	r3,8(r18)
  80bb28:	ba000604 	addi	r8,r23,24
  80bb2c:	91000404 	addi	r4,r18,16
  80bb30:	b8c00415 	stw	r3,16(r23)
  80bb34:	90800317 	ldw	r2,12(r18)
  80bb38:	b8800515 	stw	r2,20(r23)
  80bb3c:	3140c726 	beq	r6,r5,80be5c <_realloc_r+0x5bc>
  80bb40:	20800017 	ldw	r2,0(r4)
  80bb44:	b80f883a 	mov	r7,r23
  80bb48:	003fd906 	br	80bab0 <_realloc_r+0x210>
  80bb4c:	880b883a 	mov	r5,r17
  80bb50:	b009883a 	mov	r4,r22
  80bb54:	0809c840 	call	809c84 <_malloc_r>
  80bb58:	1023883a 	mov	r17,r2
  80bb5c:	10002526 	beq	r2,zero,80bbf4 <_realloc_r+0x354>
  80bb60:	80800117 	ldw	r2,4(r16)
  80bb64:	00ffff84 	movi	r3,-2
  80bb68:	893ffe04 	addi	r4,r17,-8
  80bb6c:	10c4703a 	and	r2,r2,r3
  80bb70:	8085883a 	add	r2,r16,r2
  80bb74:	20809526 	beq	r4,r2,80bdcc <_realloc_r+0x52c>
  80bb78:	99bfff04 	addi	r6,r19,-4
  80bb7c:	01c00904 	movi	r7,36
  80bb80:	39804536 	bltu	r7,r6,80bc98 <_realloc_r+0x3f8>
  80bb84:	008004c4 	movi	r2,19
  80bb88:	9009883a 	mov	r4,r18
  80bb8c:	880b883a 	mov	r5,r17
  80bb90:	11800f2e 	bgeu	r2,r6,80bbd0 <_realloc_r+0x330>
  80bb94:	90800017 	ldw	r2,0(r18)
  80bb98:	89400204 	addi	r5,r17,8
  80bb9c:	91000204 	addi	r4,r18,8
  80bba0:	88800015 	stw	r2,0(r17)
  80bba4:	90c00117 	ldw	r3,4(r18)
  80bba8:	008006c4 	movi	r2,27
  80bbac:	88c00115 	stw	r3,4(r17)
  80bbb0:	1180072e 	bgeu	r2,r6,80bbd0 <_realloc_r+0x330>
  80bbb4:	90c00217 	ldw	r3,8(r18)
  80bbb8:	89400404 	addi	r5,r17,16
  80bbbc:	91000404 	addi	r4,r18,16
  80bbc0:	88c00215 	stw	r3,8(r17)
  80bbc4:	90800317 	ldw	r2,12(r18)
  80bbc8:	88800315 	stw	r2,12(r17)
  80bbcc:	31c09126 	beq	r6,r7,80be14 <_realloc_r+0x574>
  80bbd0:	20800017 	ldw	r2,0(r4)
  80bbd4:	28800015 	stw	r2,0(r5)
  80bbd8:	20c00117 	ldw	r3,4(r4)
  80bbdc:	28c00115 	stw	r3,4(r5)
  80bbe0:	20800217 	ldw	r2,8(r4)
  80bbe4:	28800215 	stw	r2,8(r5)
  80bbe8:	900b883a 	mov	r5,r18
  80bbec:	b009883a 	mov	r4,r22
  80bbf0:	08090fc0 	call	8090fc <_free_r>
  80bbf4:	b009883a 	mov	r4,r22
  80bbf8:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80bbfc:	003f5e06 	br	80b978 <_realloc_r+0xd8>
  80bc00:	300b883a 	mov	r5,r6
  80bc04:	dfc00b17 	ldw	ra,44(sp)
  80bc08:	df000a17 	ldw	fp,40(sp)
  80bc0c:	ddc00917 	ldw	r23,36(sp)
  80bc10:	dd800817 	ldw	r22,32(sp)
  80bc14:	dd400717 	ldw	r21,28(sp)
  80bc18:	dd000617 	ldw	r20,24(sp)
  80bc1c:	dcc00517 	ldw	r19,20(sp)
  80bc20:	dc800417 	ldw	r18,16(sp)
  80bc24:	dc400317 	ldw	r17,12(sp)
  80bc28:	dc000217 	ldw	r16,8(sp)
  80bc2c:	dec00c04 	addi	sp,sp,48
  80bc30:	0809c841 	jmpi	809c84 <_malloc_r>
  80bc34:	38800117 	ldw	r2,4(r7)
  80bc38:	e54b883a 	add	r5,fp,r21
  80bc3c:	31000054 	ori	r4,r6,1
  80bc40:	1080004c 	andi	r2,r2,1
  80bc44:	1704b03a 	or	r2,r2,fp
  80bc48:	38800115 	stw	r2,4(r7)
  80bc4c:	29000115 	stw	r4,4(r5)
  80bc50:	2987883a 	add	r3,r5,r6
  80bc54:	18800117 	ldw	r2,4(r3)
  80bc58:	29400204 	addi	r5,r5,8
  80bc5c:	b009883a 	mov	r4,r22
  80bc60:	10800054 	ori	r2,r2,1
  80bc64:	18800115 	stw	r2,4(r3)
  80bc68:	08090fc0 	call	8090fc <_free_r>
  80bc6c:	003f3806 	br	80b950 <_realloc_r+0xb0>
  80bc70:	000d883a 	mov	r6,zero
  80bc74:	0009883a 	mov	r4,zero
  80bc78:	003f5d06 	br	80b9f0 <_realloc_r+0x150>
  80bc7c:	30c00217 	ldw	r3,8(r6)
  80bc80:	30800317 	ldw	r2,12(r6)
  80bc84:	800f883a 	mov	r7,r16
  80bc88:	84000204 	addi	r16,r16,8
  80bc8c:	10c00215 	stw	r3,8(r2)
  80bc90:	18800315 	stw	r2,12(r3)
  80bc94:	003f2306 	br	80b924 <_realloc_r+0x84>
  80bc98:	8809883a 	mov	r4,r17
  80bc9c:	900b883a 	mov	r5,r18
  80bca0:	080a5480 	call	80a548 <memmove>
  80bca4:	003fd006 	br	80bbe8 <_realloc_r+0x348>
  80bca8:	30800117 	ldw	r2,4(r6)
  80bcac:	e0c00404 	addi	r3,fp,16
  80bcb0:	1108703a 	and	r4,r2,r4
  80bcb4:	9905883a 	add	r2,r19,r4
  80bcb8:	10ff4d16 	blt	r2,r3,80b9f0 <_realloc_r+0x150>
  80bcbc:	1705c83a 	sub	r2,r2,fp
  80bcc0:	870b883a 	add	r5,r16,fp
  80bcc4:	10800054 	ori	r2,r2,1
  80bcc8:	28800115 	stw	r2,4(r5)
  80bccc:	80c00117 	ldw	r3,4(r16)
  80bcd0:	00802074 	movhi	r2,129
  80bcd4:	108bcf04 	addi	r2,r2,12092
  80bcd8:	b009883a 	mov	r4,r22
  80bcdc:	18c0004c 	andi	r3,r3,1
  80bce0:	e0c6b03a 	or	r3,fp,r3
  80bce4:	11400215 	stw	r5,8(r2)
  80bce8:	80c00115 	stw	r3,4(r16)
  80bcec:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80bcf0:	84400204 	addi	r17,r16,8
  80bcf4:	003f2006 	br	80b978 <_realloc_r+0xd8>
  80bcf8:	98a9883a 	add	r20,r19,r2
  80bcfc:	2509883a 	add	r4,r4,r20
  80bd00:	e0800404 	addi	r2,fp,16
  80bd04:	d9000115 	stw	r4,4(sp)
  80bd08:	20bf7016 	blt	r4,r2,80bacc <_realloc_r+0x22c>
  80bd0c:	b8c00317 	ldw	r3,12(r23)
  80bd10:	b8800217 	ldw	r2,8(r23)
  80bd14:	99bfff04 	addi	r6,r19,-4
  80bd18:	01400904 	movi	r5,36
  80bd1c:	18800215 	stw	r2,8(r3)
  80bd20:	10c00315 	stw	r3,12(r2)
  80bd24:	bc400204 	addi	r17,r23,8
  80bd28:	29804136 	bltu	r5,r6,80be30 <_realloc_r+0x590>
  80bd2c:	008004c4 	movi	r2,19
  80bd30:	9009883a 	mov	r4,r18
  80bd34:	880f883a 	mov	r7,r17
  80bd38:	11800f2e 	bgeu	r2,r6,80bd78 <_realloc_r+0x4d8>
  80bd3c:	90800017 	ldw	r2,0(r18)
  80bd40:	b9c00404 	addi	r7,r23,16
  80bd44:	91000204 	addi	r4,r18,8
  80bd48:	b8800215 	stw	r2,8(r23)
  80bd4c:	90c00117 	ldw	r3,4(r18)
  80bd50:	008006c4 	movi	r2,27
  80bd54:	b8c00315 	stw	r3,12(r23)
  80bd58:	1180072e 	bgeu	r2,r6,80bd78 <_realloc_r+0x4d8>
  80bd5c:	90c00217 	ldw	r3,8(r18)
  80bd60:	b9c00604 	addi	r7,r23,24
  80bd64:	91000404 	addi	r4,r18,16
  80bd68:	b8c00415 	stw	r3,16(r23)
  80bd6c:	90800317 	ldw	r2,12(r18)
  80bd70:	b8800515 	stw	r2,20(r23)
  80bd74:	31404026 	beq	r6,r5,80be78 <_realloc_r+0x5d8>
  80bd78:	20800017 	ldw	r2,0(r4)
  80bd7c:	38800015 	stw	r2,0(r7)
  80bd80:	20c00117 	ldw	r3,4(r4)
  80bd84:	38c00115 	stw	r3,4(r7)
  80bd88:	20800217 	ldw	r2,8(r4)
  80bd8c:	38800215 	stw	r2,8(r7)
  80bd90:	d8c00117 	ldw	r3,4(sp)
  80bd94:	bf0b883a 	add	r5,r23,fp
  80bd98:	b009883a 	mov	r4,r22
  80bd9c:	1f05c83a 	sub	r2,r3,fp
  80bda0:	10800054 	ori	r2,r2,1
  80bda4:	28800115 	stw	r2,4(r5)
  80bda8:	b8c00117 	ldw	r3,4(r23)
  80bdac:	00802074 	movhi	r2,129
  80bdb0:	108bcf04 	addi	r2,r2,12092
  80bdb4:	11400215 	stw	r5,8(r2)
  80bdb8:	18c0004c 	andi	r3,r3,1
  80bdbc:	e0c6b03a 	or	r3,fp,r3
  80bdc0:	b8c00115 	stw	r3,4(r23)
  80bdc4:	080e5b40 	call	80e5b4 <__malloc_unlock>
  80bdc8:	003eeb06 	br	80b978 <_realloc_r+0xd8>
  80bdcc:	20800117 	ldw	r2,4(r4)
  80bdd0:	00ffff04 	movi	r3,-4
  80bdd4:	800f883a 	mov	r7,r16
  80bdd8:	10c4703a 	and	r2,r2,r3
  80bddc:	98a9883a 	add	r20,r19,r2
  80bde0:	84000204 	addi	r16,r16,8
  80bde4:	003ecf06 	br	80b924 <_realloc_r+0x84>
  80bde8:	900b883a 	mov	r5,r18
  80bdec:	8009883a 	mov	r4,r16
  80bdf0:	080a5480 	call	80a548 <memmove>
  80bdf4:	dd000017 	ldw	r20,0(sp)
  80bdf8:	b80f883a 	mov	r7,r23
  80bdfc:	003ec906 	br	80b924 <_realloc_r+0x84>
  80be00:	900b883a 	mov	r5,r18
  80be04:	8009883a 	mov	r4,r16
  80be08:	080a5480 	call	80a548 <memmove>
  80be0c:	b80f883a 	mov	r7,r23
  80be10:	003ec406 	br	80b924 <_realloc_r+0x84>
  80be14:	90c00417 	ldw	r3,16(r18)
  80be18:	89400604 	addi	r5,r17,24
  80be1c:	91000604 	addi	r4,r18,24
  80be20:	88c00415 	stw	r3,16(r17)
  80be24:	90800517 	ldw	r2,20(r18)
  80be28:	88800515 	stw	r2,20(r17)
  80be2c:	003f6806 	br	80bbd0 <_realloc_r+0x330>
  80be30:	900b883a 	mov	r5,r18
  80be34:	8809883a 	mov	r4,r17
  80be38:	080a5480 	call	80a548 <memmove>
  80be3c:	003fd406 	br	80bd90 <_realloc_r+0x4f0>
  80be40:	90c00417 	ldw	r3,16(r18)
  80be44:	91000604 	addi	r4,r18,24
  80be48:	ba000804 	addi	r8,r23,32
  80be4c:	b8c00615 	stw	r3,24(r23)
  80be50:	90800517 	ldw	r2,20(r18)
  80be54:	b8800715 	stw	r2,28(r23)
  80be58:	003f1206 	br	80baa4 <_realloc_r+0x204>
  80be5c:	90c00417 	ldw	r3,16(r18)
  80be60:	91000604 	addi	r4,r18,24
  80be64:	ba000804 	addi	r8,r23,32
  80be68:	b8c00615 	stw	r3,24(r23)
  80be6c:	90800517 	ldw	r2,20(r18)
  80be70:	b8800715 	stw	r2,28(r23)
  80be74:	003f3206 	br	80bb40 <_realloc_r+0x2a0>
  80be78:	90c00417 	ldw	r3,16(r18)
  80be7c:	91000604 	addi	r4,r18,24
  80be80:	b9c00804 	addi	r7,r23,32
  80be84:	b8c00615 	stw	r3,24(r23)
  80be88:	90800517 	ldw	r2,20(r18)
  80be8c:	b8800715 	stw	r2,28(r23)
  80be90:	003fb906 	br	80bd78 <_realloc_r+0x4d8>

0080be94 <__isinfd>:
  80be94:	200d883a 	mov	r6,r4
  80be98:	0109c83a 	sub	r4,zero,r4
  80be9c:	2188b03a 	or	r4,r4,r6
  80bea0:	2008d7fa 	srli	r4,r4,31
  80bea4:	00a00034 	movhi	r2,32768
  80bea8:	10bfffc4 	addi	r2,r2,-1
  80beac:	1144703a 	and	r2,r2,r5
  80beb0:	2088b03a 	or	r4,r4,r2
  80beb4:	009ffc34 	movhi	r2,32752
  80beb8:	1105c83a 	sub	r2,r2,r4
  80bebc:	0087c83a 	sub	r3,zero,r2
  80bec0:	10c4b03a 	or	r2,r2,r3
  80bec4:	1004d7fa 	srli	r2,r2,31
  80bec8:	00c00044 	movi	r3,1
  80becc:	1885c83a 	sub	r2,r3,r2
  80bed0:	f800283a 	ret

0080bed4 <__isnand>:
  80bed4:	200d883a 	mov	r6,r4
  80bed8:	0109c83a 	sub	r4,zero,r4
  80bedc:	2188b03a 	or	r4,r4,r6
  80bee0:	2008d7fa 	srli	r4,r4,31
  80bee4:	00a00034 	movhi	r2,32768
  80bee8:	10bfffc4 	addi	r2,r2,-1
  80beec:	1144703a 	and	r2,r2,r5
  80bef0:	2088b03a 	or	r4,r4,r2
  80bef4:	009ffc34 	movhi	r2,32752
  80bef8:	1105c83a 	sub	r2,r2,r4
  80befc:	1004d7fa 	srli	r2,r2,31
  80bf00:	f800283a 	ret

0080bf04 <_sbrk_r>:
  80bf04:	defffd04 	addi	sp,sp,-12
  80bf08:	dc000015 	stw	r16,0(sp)
  80bf0c:	04002074 	movhi	r16,129
  80bf10:	84193204 	addi	r16,r16,25800
  80bf14:	dc400115 	stw	r17,4(sp)
  80bf18:	80000015 	stw	zero,0(r16)
  80bf1c:	2023883a 	mov	r17,r4
  80bf20:	2809883a 	mov	r4,r5
  80bf24:	dfc00215 	stw	ra,8(sp)
  80bf28:	080e7d00 	call	80e7d0 <sbrk>
  80bf2c:	1007883a 	mov	r3,r2
  80bf30:	00bfffc4 	movi	r2,-1
  80bf34:	18800626 	beq	r3,r2,80bf50 <_sbrk_r+0x4c>
  80bf38:	1805883a 	mov	r2,r3
  80bf3c:	dfc00217 	ldw	ra,8(sp)
  80bf40:	dc400117 	ldw	r17,4(sp)
  80bf44:	dc000017 	ldw	r16,0(sp)
  80bf48:	dec00304 	addi	sp,sp,12
  80bf4c:	f800283a 	ret
  80bf50:	80800017 	ldw	r2,0(r16)
  80bf54:	103ff826 	beq	r2,zero,80bf38 <_sbrk_r+0x34>
  80bf58:	88800015 	stw	r2,0(r17)
  80bf5c:	1805883a 	mov	r2,r3
  80bf60:	dfc00217 	ldw	ra,8(sp)
  80bf64:	dc400117 	ldw	r17,4(sp)
  80bf68:	dc000017 	ldw	r16,0(sp)
  80bf6c:	dec00304 	addi	sp,sp,12
  80bf70:	f800283a 	ret

0080bf74 <__sclose>:
  80bf74:	2940038f 	ldh	r5,14(r5)
  80bf78:	080c34c1 	jmpi	80c34c <_close_r>

0080bf7c <__sseek>:
  80bf7c:	defffe04 	addi	sp,sp,-8
  80bf80:	dc000015 	stw	r16,0(sp)
  80bf84:	2821883a 	mov	r16,r5
  80bf88:	2940038f 	ldh	r5,14(r5)
  80bf8c:	dfc00115 	stw	ra,4(sp)
  80bf90:	080c5c40 	call	80c5c4 <_lseek_r>
  80bf94:	1007883a 	mov	r3,r2
  80bf98:	00bfffc4 	movi	r2,-1
  80bf9c:	18800926 	beq	r3,r2,80bfc4 <__sseek+0x48>
  80bfa0:	8080030b 	ldhu	r2,12(r16)
  80bfa4:	80c01415 	stw	r3,80(r16)
  80bfa8:	10840014 	ori	r2,r2,4096
  80bfac:	8080030d 	sth	r2,12(r16)
  80bfb0:	1805883a 	mov	r2,r3
  80bfb4:	dfc00117 	ldw	ra,4(sp)
  80bfb8:	dc000017 	ldw	r16,0(sp)
  80bfbc:	dec00204 	addi	sp,sp,8
  80bfc0:	f800283a 	ret
  80bfc4:	8080030b 	ldhu	r2,12(r16)
  80bfc8:	10bbffcc 	andi	r2,r2,61439
  80bfcc:	8080030d 	sth	r2,12(r16)
  80bfd0:	1805883a 	mov	r2,r3
  80bfd4:	dfc00117 	ldw	ra,4(sp)
  80bfd8:	dc000017 	ldw	r16,0(sp)
  80bfdc:	dec00204 	addi	sp,sp,8
  80bfe0:	f800283a 	ret

0080bfe4 <__swrite>:
  80bfe4:	2880030b 	ldhu	r2,12(r5)
  80bfe8:	defffb04 	addi	sp,sp,-20
  80bfec:	dcc00315 	stw	r19,12(sp)
  80bff0:	1080400c 	andi	r2,r2,256
  80bff4:	dc800215 	stw	r18,8(sp)
  80bff8:	dc400115 	stw	r17,4(sp)
  80bffc:	dc000015 	stw	r16,0(sp)
  80c000:	3027883a 	mov	r19,r6
  80c004:	3825883a 	mov	r18,r7
  80c008:	dfc00415 	stw	ra,16(sp)
  80c00c:	2821883a 	mov	r16,r5
  80c010:	000d883a 	mov	r6,zero
  80c014:	01c00084 	movi	r7,2
  80c018:	2023883a 	mov	r17,r4
  80c01c:	10000226 	beq	r2,zero,80c028 <__swrite+0x44>
  80c020:	2940038f 	ldh	r5,14(r5)
  80c024:	080c5c40 	call	80c5c4 <_lseek_r>
  80c028:	8080030b 	ldhu	r2,12(r16)
  80c02c:	8140038f 	ldh	r5,14(r16)
  80c030:	8809883a 	mov	r4,r17
  80c034:	10bbffcc 	andi	r2,r2,61439
  80c038:	980d883a 	mov	r6,r19
  80c03c:	900f883a 	mov	r7,r18
  80c040:	8080030d 	sth	r2,12(r16)
  80c044:	dfc00417 	ldw	ra,16(sp)
  80c048:	dcc00317 	ldw	r19,12(sp)
  80c04c:	dc800217 	ldw	r18,8(sp)
  80c050:	dc400117 	ldw	r17,4(sp)
  80c054:	dc000017 	ldw	r16,0(sp)
  80c058:	dec00504 	addi	sp,sp,20
  80c05c:	080c20c1 	jmpi	80c20c <_write_r>

0080c060 <__sread>:
  80c060:	defffe04 	addi	sp,sp,-8
  80c064:	dc000015 	stw	r16,0(sp)
  80c068:	2821883a 	mov	r16,r5
  80c06c:	2940038f 	ldh	r5,14(r5)
  80c070:	dfc00115 	stw	ra,4(sp)
  80c074:	080c63c0 	call	80c63c <_read_r>
  80c078:	1007883a 	mov	r3,r2
  80c07c:	10000816 	blt	r2,zero,80c0a0 <__sread+0x40>
  80c080:	80801417 	ldw	r2,80(r16)
  80c084:	10c5883a 	add	r2,r2,r3
  80c088:	80801415 	stw	r2,80(r16)
  80c08c:	1805883a 	mov	r2,r3
  80c090:	dfc00117 	ldw	ra,4(sp)
  80c094:	dc000017 	ldw	r16,0(sp)
  80c098:	dec00204 	addi	sp,sp,8
  80c09c:	f800283a 	ret
  80c0a0:	8080030b 	ldhu	r2,12(r16)
  80c0a4:	10bbffcc 	andi	r2,r2,61439
  80c0a8:	8080030d 	sth	r2,12(r16)
  80c0ac:	1805883a 	mov	r2,r3
  80c0b0:	dfc00117 	ldw	ra,4(sp)
  80c0b4:	dc000017 	ldw	r16,0(sp)
  80c0b8:	dec00204 	addi	sp,sp,8
  80c0bc:	f800283a 	ret

0080c0c0 <__swbuf_r>:
  80c0c0:	defffc04 	addi	sp,sp,-16
  80c0c4:	dc400215 	stw	r17,8(sp)
  80c0c8:	dc000115 	stw	r16,4(sp)
  80c0cc:	dfc00315 	stw	ra,12(sp)
  80c0d0:	2023883a 	mov	r17,r4
  80c0d4:	2821883a 	mov	r16,r5
  80c0d8:	20000226 	beq	r4,zero,80c0e4 <__swbuf_r+0x24>
  80c0dc:	20800e17 	ldw	r2,56(r4)
  80c0e0:	10002f26 	beq	r2,zero,80c1a0 <__swbuf_r+0xe0>
  80c0e4:	3080030b 	ldhu	r2,12(r6)
  80c0e8:	30c00617 	ldw	r3,24(r6)
  80c0ec:	1080020c 	andi	r2,r2,8
  80c0f0:	30c00215 	stw	r3,8(r6)
  80c0f4:	10002226 	beq	r2,zero,80c180 <__swbuf_r+0xc0>
  80c0f8:	30c00417 	ldw	r3,16(r6)
  80c0fc:	18002026 	beq	r3,zero,80c180 <__swbuf_r+0xc0>
  80c100:	31000017 	ldw	r4,0(r6)
  80c104:	30800517 	ldw	r2,20(r6)
  80c108:	20c7c83a 	sub	r3,r4,r3
  80c10c:	18802f0e 	bge	r3,r2,80c1cc <__swbuf_r+0x10c>
  80c110:	19400044 	addi	r5,r3,1
  80c114:	30800217 	ldw	r2,8(r6)
  80c118:	84003fcc 	andi	r16,r16,255
  80c11c:	20c00044 	addi	r3,r4,1
  80c120:	10bfffc4 	addi	r2,r2,-1
  80c124:	30800215 	stw	r2,8(r6)
  80c128:	24000005 	stb	r16,0(r4)
  80c12c:	30800517 	ldw	r2,20(r6)
  80c130:	30c00015 	stw	r3,0(r6)
  80c134:	11400c26 	beq	r2,r5,80c168 <__swbuf_r+0xa8>
  80c138:	3080030b 	ldhu	r2,12(r6)
  80c13c:	1080004c 	andi	r2,r2,1
  80c140:	1005003a 	cmpeq	r2,r2,zero
  80c144:	10000626 	beq	r2,zero,80c160 <__swbuf_r+0xa0>
  80c148:	8005883a 	mov	r2,r16
  80c14c:	dfc00317 	ldw	ra,12(sp)
  80c150:	dc400217 	ldw	r17,8(sp)
  80c154:	dc000117 	ldw	r16,4(sp)
  80c158:	dec00404 	addi	sp,sp,16
  80c15c:	f800283a 	ret
  80c160:	00800284 	movi	r2,10
  80c164:	80bff81e 	bne	r16,r2,80c148 <__swbuf_r+0x88>
  80c168:	8809883a 	mov	r4,r17
  80c16c:	300b883a 	mov	r5,r6
  80c170:	08089600 	call	808960 <_fflush_r>
  80c174:	103ff426 	beq	r2,zero,80c148 <__swbuf_r+0x88>
  80c178:	043fffc4 	movi	r16,-1
  80c17c:	003ff206 	br	80c148 <__swbuf_r+0x88>
  80c180:	300b883a 	mov	r5,r6
  80c184:	8809883a 	mov	r4,r17
  80c188:	d9800015 	stw	r6,0(sp)
  80c18c:	0806e780 	call	806e78 <__swsetup_r>
  80c190:	d9800017 	ldw	r6,0(sp)
  80c194:	1000061e 	bne	r2,zero,80c1b0 <__swbuf_r+0xf0>
  80c198:	30c00417 	ldw	r3,16(r6)
  80c19c:	003fd806 	br	80c100 <__swbuf_r+0x40>
  80c1a0:	d9800015 	stw	r6,0(sp)
  80c1a4:	0808bf80 	call	808bf8 <__sinit>
  80c1a8:	d9800017 	ldw	r6,0(sp)
  80c1ac:	003fcd06 	br	80c0e4 <__swbuf_r+0x24>
  80c1b0:	3080030b 	ldhu	r2,12(r6)
  80c1b4:	00c00244 	movi	r3,9
  80c1b8:	043fffc4 	movi	r16,-1
  80c1bc:	10801014 	ori	r2,r2,64
  80c1c0:	3080030d 	sth	r2,12(r6)
  80c1c4:	88c00015 	stw	r3,0(r17)
  80c1c8:	003fdf06 	br	80c148 <__swbuf_r+0x88>
  80c1cc:	300b883a 	mov	r5,r6
  80c1d0:	8809883a 	mov	r4,r17
  80c1d4:	d9800015 	stw	r6,0(sp)
  80c1d8:	08089600 	call	808960 <_fflush_r>
  80c1dc:	d9800017 	ldw	r6,0(sp)
  80c1e0:	103fe51e 	bne	r2,zero,80c178 <__swbuf_r+0xb8>
  80c1e4:	31000017 	ldw	r4,0(r6)
  80c1e8:	01400044 	movi	r5,1
  80c1ec:	003fc906 	br	80c114 <__swbuf_r+0x54>

0080c1f0 <__swbuf>:
  80c1f0:	01802074 	movhi	r6,129
  80c1f4:	3191ac04 	addi	r6,r6,18096
  80c1f8:	2007883a 	mov	r3,r4
  80c1fc:	31000017 	ldw	r4,0(r6)
  80c200:	280d883a 	mov	r6,r5
  80c204:	180b883a 	mov	r5,r3
  80c208:	080c0c01 	jmpi	80c0c0 <__swbuf_r>

0080c20c <_write_r>:
  80c20c:	defffd04 	addi	sp,sp,-12
  80c210:	dc000015 	stw	r16,0(sp)
  80c214:	04002074 	movhi	r16,129
  80c218:	84193204 	addi	r16,r16,25800
  80c21c:	dc400115 	stw	r17,4(sp)
  80c220:	80000015 	stw	zero,0(r16)
  80c224:	2023883a 	mov	r17,r4
  80c228:	2809883a 	mov	r4,r5
  80c22c:	300b883a 	mov	r5,r6
  80c230:	380d883a 	mov	r6,r7
  80c234:	dfc00215 	stw	ra,8(sp)
  80c238:	080e8bc0 	call	80e8bc <write>
  80c23c:	1007883a 	mov	r3,r2
  80c240:	00bfffc4 	movi	r2,-1
  80c244:	18800626 	beq	r3,r2,80c260 <_write_r+0x54>
  80c248:	1805883a 	mov	r2,r3
  80c24c:	dfc00217 	ldw	ra,8(sp)
  80c250:	dc400117 	ldw	r17,4(sp)
  80c254:	dc000017 	ldw	r16,0(sp)
  80c258:	dec00304 	addi	sp,sp,12
  80c25c:	f800283a 	ret
  80c260:	80800017 	ldw	r2,0(r16)
  80c264:	103ff826 	beq	r2,zero,80c248 <_write_r+0x3c>
  80c268:	88800015 	stw	r2,0(r17)
  80c26c:	1805883a 	mov	r2,r3
  80c270:	dfc00217 	ldw	ra,8(sp)
  80c274:	dc400117 	ldw	r17,4(sp)
  80c278:	dc000017 	ldw	r16,0(sp)
  80c27c:	dec00304 	addi	sp,sp,12
  80c280:	f800283a 	ret

0080c284 <_calloc_r>:
  80c284:	defffe04 	addi	sp,sp,-8
  80c288:	dc400015 	stw	r17,0(sp)
  80c28c:	2023883a 	mov	r17,r4
  80c290:	2809883a 	mov	r4,r5
  80c294:	300b883a 	mov	r5,r6
  80c298:	dfc00115 	stw	ra,4(sp)
  80c29c:	0803eb80 	call	803eb8 <__mulsi3>
  80c2a0:	100b883a 	mov	r5,r2
  80c2a4:	8809883a 	mov	r4,r17
  80c2a8:	0809c840 	call	809c84 <_malloc_r>
  80c2ac:	1023883a 	mov	r17,r2
  80c2b0:	01c00904 	movi	r7,36
  80c2b4:	10000d26 	beq	r2,zero,80c2ec <_calloc_r+0x68>
  80c2b8:	10ffff17 	ldw	r3,-4(r2)
  80c2bc:	1009883a 	mov	r4,r2
  80c2c0:	00bfff04 	movi	r2,-4
  80c2c4:	1886703a 	and	r3,r3,r2
  80c2c8:	1887883a 	add	r3,r3,r2
  80c2cc:	180d883a 	mov	r6,r3
  80c2d0:	000b883a 	mov	r5,zero
  80c2d4:	38c01736 	bltu	r7,r3,80c334 <_calloc_r+0xb0>
  80c2d8:	008004c4 	movi	r2,19
  80c2dc:	10c00836 	bltu	r2,r3,80c300 <_calloc_r+0x7c>
  80c2e0:	20000215 	stw	zero,8(r4)
  80c2e4:	20000015 	stw	zero,0(r4)
  80c2e8:	20000115 	stw	zero,4(r4)
  80c2ec:	8805883a 	mov	r2,r17
  80c2f0:	dfc00117 	ldw	ra,4(sp)
  80c2f4:	dc400017 	ldw	r17,0(sp)
  80c2f8:	dec00204 	addi	sp,sp,8
  80c2fc:	f800283a 	ret
  80c300:	008006c4 	movi	r2,27
  80c304:	88000015 	stw	zero,0(r17)
  80c308:	88000115 	stw	zero,4(r17)
  80c30c:	89000204 	addi	r4,r17,8
  80c310:	10fff32e 	bgeu	r2,r3,80c2e0 <_calloc_r+0x5c>
  80c314:	88000215 	stw	zero,8(r17)
  80c318:	88000315 	stw	zero,12(r17)
  80c31c:	89000404 	addi	r4,r17,16
  80c320:	19ffef1e 	bne	r3,r7,80c2e0 <_calloc_r+0x5c>
  80c324:	89000604 	addi	r4,r17,24
  80c328:	88000415 	stw	zero,16(r17)
  80c32c:	88000515 	stw	zero,20(r17)
  80c330:	003feb06 	br	80c2e0 <_calloc_r+0x5c>
  80c334:	08044bc0 	call	8044bc <memset>
  80c338:	8805883a 	mov	r2,r17
  80c33c:	dfc00117 	ldw	ra,4(sp)
  80c340:	dc400017 	ldw	r17,0(sp)
  80c344:	dec00204 	addi	sp,sp,8
  80c348:	f800283a 	ret

0080c34c <_close_r>:
  80c34c:	defffd04 	addi	sp,sp,-12
  80c350:	dc000015 	stw	r16,0(sp)
  80c354:	04002074 	movhi	r16,129
  80c358:	84193204 	addi	r16,r16,25800
  80c35c:	dc400115 	stw	r17,4(sp)
  80c360:	80000015 	stw	zero,0(r16)
  80c364:	2023883a 	mov	r17,r4
  80c368:	2809883a 	mov	r4,r5
  80c36c:	dfc00215 	stw	ra,8(sp)
  80c370:	080dce00 	call	80dce0 <close>
  80c374:	1007883a 	mov	r3,r2
  80c378:	00bfffc4 	movi	r2,-1
  80c37c:	18800626 	beq	r3,r2,80c398 <_close_r+0x4c>
  80c380:	1805883a 	mov	r2,r3
  80c384:	dfc00217 	ldw	ra,8(sp)
  80c388:	dc400117 	ldw	r17,4(sp)
  80c38c:	dc000017 	ldw	r16,0(sp)
  80c390:	dec00304 	addi	sp,sp,12
  80c394:	f800283a 	ret
  80c398:	80800017 	ldw	r2,0(r16)
  80c39c:	103ff826 	beq	r2,zero,80c380 <_close_r+0x34>
  80c3a0:	88800015 	stw	r2,0(r17)
  80c3a4:	1805883a 	mov	r2,r3
  80c3a8:	dfc00217 	ldw	ra,8(sp)
  80c3ac:	dc400117 	ldw	r17,4(sp)
  80c3b0:	dc000017 	ldw	r16,0(sp)
  80c3b4:	dec00304 	addi	sp,sp,12
  80c3b8:	f800283a 	ret

0080c3bc <_fclose_r>:
  80c3bc:	defffc04 	addi	sp,sp,-16
  80c3c0:	dc400115 	stw	r17,4(sp)
  80c3c4:	dc000015 	stw	r16,0(sp)
  80c3c8:	dfc00315 	stw	ra,12(sp)
  80c3cc:	dc800215 	stw	r18,8(sp)
  80c3d0:	2821883a 	mov	r16,r5
  80c3d4:	2023883a 	mov	r17,r4
  80c3d8:	28002926 	beq	r5,zero,80c480 <_fclose_r+0xc4>
  80c3dc:	0808be80 	call	808be8 <__sfp_lock_acquire>
  80c3e0:	88000226 	beq	r17,zero,80c3ec <_fclose_r+0x30>
  80c3e4:	88800e17 	ldw	r2,56(r17)
  80c3e8:	10002d26 	beq	r2,zero,80c4a0 <_fclose_r+0xe4>
  80c3ec:	8080030f 	ldh	r2,12(r16)
  80c3f0:	10002226 	beq	r2,zero,80c47c <_fclose_r+0xc0>
  80c3f4:	8809883a 	mov	r4,r17
  80c3f8:	800b883a 	mov	r5,r16
  80c3fc:	08089600 	call	808960 <_fflush_r>
  80c400:	1025883a 	mov	r18,r2
  80c404:	80800b17 	ldw	r2,44(r16)
  80c408:	10000426 	beq	r2,zero,80c41c <_fclose_r+0x60>
  80c40c:	81400717 	ldw	r5,28(r16)
  80c410:	8809883a 	mov	r4,r17
  80c414:	103ee83a 	callr	r2
  80c418:	10002a16 	blt	r2,zero,80c4c4 <_fclose_r+0x108>
  80c41c:	8080030b 	ldhu	r2,12(r16)
  80c420:	1080200c 	andi	r2,r2,128
  80c424:	1000231e 	bne	r2,zero,80c4b4 <_fclose_r+0xf8>
  80c428:	81400c17 	ldw	r5,48(r16)
  80c42c:	28000526 	beq	r5,zero,80c444 <_fclose_r+0x88>
  80c430:	80801004 	addi	r2,r16,64
  80c434:	28800226 	beq	r5,r2,80c440 <_fclose_r+0x84>
  80c438:	8809883a 	mov	r4,r17
  80c43c:	08090fc0 	call	8090fc <_free_r>
  80c440:	80000c15 	stw	zero,48(r16)
  80c444:	81401117 	ldw	r5,68(r16)
  80c448:	28000326 	beq	r5,zero,80c458 <_fclose_r+0x9c>
  80c44c:	8809883a 	mov	r4,r17
  80c450:	08090fc0 	call	8090fc <_free_r>
  80c454:	80001115 	stw	zero,68(r16)
  80c458:	8000030d 	sth	zero,12(r16)
  80c45c:	0808bec0 	call	808bec <__sfp_lock_release>
  80c460:	9005883a 	mov	r2,r18
  80c464:	dfc00317 	ldw	ra,12(sp)
  80c468:	dc800217 	ldw	r18,8(sp)
  80c46c:	dc400117 	ldw	r17,4(sp)
  80c470:	dc000017 	ldw	r16,0(sp)
  80c474:	dec00404 	addi	sp,sp,16
  80c478:	f800283a 	ret
  80c47c:	0808bec0 	call	808bec <__sfp_lock_release>
  80c480:	0025883a 	mov	r18,zero
  80c484:	9005883a 	mov	r2,r18
  80c488:	dfc00317 	ldw	ra,12(sp)
  80c48c:	dc800217 	ldw	r18,8(sp)
  80c490:	dc400117 	ldw	r17,4(sp)
  80c494:	dc000017 	ldw	r16,0(sp)
  80c498:	dec00404 	addi	sp,sp,16
  80c49c:	f800283a 	ret
  80c4a0:	8809883a 	mov	r4,r17
  80c4a4:	0808bf80 	call	808bf8 <__sinit>
  80c4a8:	8080030f 	ldh	r2,12(r16)
  80c4ac:	103fd11e 	bne	r2,zero,80c3f4 <_fclose_r+0x38>
  80c4b0:	003ff206 	br	80c47c <_fclose_r+0xc0>
  80c4b4:	81400417 	ldw	r5,16(r16)
  80c4b8:	8809883a 	mov	r4,r17
  80c4bc:	08090fc0 	call	8090fc <_free_r>
  80c4c0:	003fd906 	br	80c428 <_fclose_r+0x6c>
  80c4c4:	04bfffc4 	movi	r18,-1
  80c4c8:	003fd406 	br	80c41c <_fclose_r+0x60>

0080c4cc <fclose>:
  80c4cc:	00802074 	movhi	r2,129
  80c4d0:	1091ac04 	addi	r2,r2,18096
  80c4d4:	200b883a 	mov	r5,r4
  80c4d8:	11000017 	ldw	r4,0(r2)
  80c4dc:	080c3bc1 	jmpi	80c3bc <_fclose_r>

0080c4e0 <_fstat_r>:
  80c4e0:	defffd04 	addi	sp,sp,-12
  80c4e4:	dc000015 	stw	r16,0(sp)
  80c4e8:	04002074 	movhi	r16,129
  80c4ec:	84193204 	addi	r16,r16,25800
  80c4f0:	dc400115 	stw	r17,4(sp)
  80c4f4:	80000015 	stw	zero,0(r16)
  80c4f8:	2023883a 	mov	r17,r4
  80c4fc:	2809883a 	mov	r4,r5
  80c500:	300b883a 	mov	r5,r6
  80c504:	dfc00215 	stw	ra,8(sp)
  80c508:	080decc0 	call	80decc <fstat>
  80c50c:	1007883a 	mov	r3,r2
  80c510:	00bfffc4 	movi	r2,-1
  80c514:	18800626 	beq	r3,r2,80c530 <_fstat_r+0x50>
  80c518:	1805883a 	mov	r2,r3
  80c51c:	dfc00217 	ldw	ra,8(sp)
  80c520:	dc400117 	ldw	r17,4(sp)
  80c524:	dc000017 	ldw	r16,0(sp)
  80c528:	dec00304 	addi	sp,sp,12
  80c52c:	f800283a 	ret
  80c530:	80800017 	ldw	r2,0(r16)
  80c534:	103ff826 	beq	r2,zero,80c518 <_fstat_r+0x38>
  80c538:	88800015 	stw	r2,0(r17)
  80c53c:	1805883a 	mov	r2,r3
  80c540:	dfc00217 	ldw	ra,8(sp)
  80c544:	dc400117 	ldw	r17,4(sp)
  80c548:	dc000017 	ldw	r16,0(sp)
  80c54c:	dec00304 	addi	sp,sp,12
  80c550:	f800283a 	ret

0080c554 <_isatty_r>:
  80c554:	defffd04 	addi	sp,sp,-12
  80c558:	dc000015 	stw	r16,0(sp)
  80c55c:	04002074 	movhi	r16,129
  80c560:	84193204 	addi	r16,r16,25800
  80c564:	dc400115 	stw	r17,4(sp)
  80c568:	80000015 	stw	zero,0(r16)
  80c56c:	2023883a 	mov	r17,r4
  80c570:	2809883a 	mov	r4,r5
  80c574:	dfc00215 	stw	ra,8(sp)
  80c578:	080e1c40 	call	80e1c4 <isatty>
  80c57c:	1007883a 	mov	r3,r2
  80c580:	00bfffc4 	movi	r2,-1
  80c584:	18800626 	beq	r3,r2,80c5a0 <_isatty_r+0x4c>
  80c588:	1805883a 	mov	r2,r3
  80c58c:	dfc00217 	ldw	ra,8(sp)
  80c590:	dc400117 	ldw	r17,4(sp)
  80c594:	dc000017 	ldw	r16,0(sp)
  80c598:	dec00304 	addi	sp,sp,12
  80c59c:	f800283a 	ret
  80c5a0:	80800017 	ldw	r2,0(r16)
  80c5a4:	103ff826 	beq	r2,zero,80c588 <_isatty_r+0x34>
  80c5a8:	88800015 	stw	r2,0(r17)
  80c5ac:	1805883a 	mov	r2,r3
  80c5b0:	dfc00217 	ldw	ra,8(sp)
  80c5b4:	dc400117 	ldw	r17,4(sp)
  80c5b8:	dc000017 	ldw	r16,0(sp)
  80c5bc:	dec00304 	addi	sp,sp,12
  80c5c0:	f800283a 	ret

0080c5c4 <_lseek_r>:
  80c5c4:	defffd04 	addi	sp,sp,-12
  80c5c8:	dc000015 	stw	r16,0(sp)
  80c5cc:	04002074 	movhi	r16,129
  80c5d0:	84193204 	addi	r16,r16,25800
  80c5d4:	dc400115 	stw	r17,4(sp)
  80c5d8:	80000015 	stw	zero,0(r16)
  80c5dc:	2023883a 	mov	r17,r4
  80c5e0:	2809883a 	mov	r4,r5
  80c5e4:	300b883a 	mov	r5,r6
  80c5e8:	380d883a 	mov	r6,r7
  80c5ec:	dfc00215 	stw	ra,8(sp)
  80c5f0:	080e3d40 	call	80e3d4 <lseek>
  80c5f4:	1007883a 	mov	r3,r2
  80c5f8:	00bfffc4 	movi	r2,-1
  80c5fc:	18800626 	beq	r3,r2,80c618 <_lseek_r+0x54>
  80c600:	1805883a 	mov	r2,r3
  80c604:	dfc00217 	ldw	ra,8(sp)
  80c608:	dc400117 	ldw	r17,4(sp)
  80c60c:	dc000017 	ldw	r16,0(sp)
  80c610:	dec00304 	addi	sp,sp,12
  80c614:	f800283a 	ret
  80c618:	80800017 	ldw	r2,0(r16)
  80c61c:	103ff826 	beq	r2,zero,80c600 <_lseek_r+0x3c>
  80c620:	88800015 	stw	r2,0(r17)
  80c624:	1805883a 	mov	r2,r3
  80c628:	dfc00217 	ldw	ra,8(sp)
  80c62c:	dc400117 	ldw	r17,4(sp)
  80c630:	dc000017 	ldw	r16,0(sp)
  80c634:	dec00304 	addi	sp,sp,12
  80c638:	f800283a 	ret

0080c63c <_read_r>:
  80c63c:	defffd04 	addi	sp,sp,-12
  80c640:	dc000015 	stw	r16,0(sp)
  80c644:	04002074 	movhi	r16,129
  80c648:	84193204 	addi	r16,r16,25800
  80c64c:	dc400115 	stw	r17,4(sp)
  80c650:	80000015 	stw	zero,0(r16)
  80c654:	2023883a 	mov	r17,r4
  80c658:	2809883a 	mov	r4,r5
  80c65c:	300b883a 	mov	r5,r6
  80c660:	380d883a 	mov	r6,r7
  80c664:	dfc00215 	stw	ra,8(sp)
  80c668:	080e5d40 	call	80e5d4 <read>
  80c66c:	1007883a 	mov	r3,r2
  80c670:	00bfffc4 	movi	r2,-1
  80c674:	18800626 	beq	r3,r2,80c690 <_read_r+0x54>
  80c678:	1805883a 	mov	r2,r3
  80c67c:	dfc00217 	ldw	ra,8(sp)
  80c680:	dc400117 	ldw	r17,4(sp)
  80c684:	dc000017 	ldw	r16,0(sp)
  80c688:	dec00304 	addi	sp,sp,12
  80c68c:	f800283a 	ret
  80c690:	80800017 	ldw	r2,0(r16)
  80c694:	103ff826 	beq	r2,zero,80c678 <_read_r+0x3c>
  80c698:	88800015 	stw	r2,0(r17)
  80c69c:	1805883a 	mov	r2,r3
  80c6a0:	dfc00217 	ldw	ra,8(sp)
  80c6a4:	dc400117 	ldw	r17,4(sp)
  80c6a8:	dc000017 	ldw	r16,0(sp)
  80c6ac:	dec00304 	addi	sp,sp,12
  80c6b0:	f800283a 	ret

0080c6b4 <__udivdi3>:
  80c6b4:	defff104 	addi	sp,sp,-60
  80c6b8:	0015883a 	mov	r10,zero
  80c6bc:	2005883a 	mov	r2,r4
  80c6c0:	3011883a 	mov	r8,r6
  80c6c4:	df000d15 	stw	fp,52(sp)
  80c6c8:	dd400a15 	stw	r21,40(sp)
  80c6cc:	dcc00815 	stw	r19,32(sp)
  80c6d0:	dfc00e15 	stw	ra,56(sp)
  80c6d4:	ddc00c15 	stw	r23,48(sp)
  80c6d8:	dd800b15 	stw	r22,44(sp)
  80c6dc:	dd000915 	stw	r20,36(sp)
  80c6e0:	dc800715 	stw	r18,28(sp)
  80c6e4:	dc400615 	stw	r17,24(sp)
  80c6e8:	dc000515 	stw	r16,20(sp)
  80c6ec:	da800315 	stw	r10,12(sp)
  80c6f0:	4027883a 	mov	r19,r8
  80c6f4:	1039883a 	mov	fp,r2
  80c6f8:	282b883a 	mov	r21,r5
  80c6fc:	da800415 	stw	r10,16(sp)
  80c700:	3800401e 	bne	r7,zero,80c804 <__udivdi3+0x150>
  80c704:	2a006536 	bltu	r5,r8,80c89c <__udivdi3+0x1e8>
  80c708:	4000b526 	beq	r8,zero,80c9e0 <__udivdi3+0x32c>
  80c70c:	00bfffd4 	movui	r2,65535
  80c710:	14c0ad36 	bltu	r2,r19,80c9c8 <__udivdi3+0x314>
  80c714:	00803fc4 	movi	r2,255
  80c718:	14c15e36 	bltu	r2,r19,80cc94 <__udivdi3+0x5e0>
  80c71c:	000b883a 	mov	r5,zero
  80c720:	0005883a 	mov	r2,zero
  80c724:	9884d83a 	srl	r2,r19,r2
  80c728:	01002074 	movhi	r4,129
  80c72c:	21073204 	addi	r4,r4,7368
  80c730:	01800804 	movi	r6,32
  80c734:	1105883a 	add	r2,r2,r4
  80c738:	10c00003 	ldbu	r3,0(r2)
  80c73c:	28c7883a 	add	r3,r5,r3
  80c740:	30e9c83a 	sub	r20,r6,r3
  80c744:	a0010a1e 	bne	r20,zero,80cb70 <__udivdi3+0x4bc>
  80c748:	982ed43a 	srli	r23,r19,16
  80c74c:	acebc83a 	sub	r21,r21,r19
  80c750:	9dbfffcc 	andi	r22,r19,65535
  80c754:	05000044 	movi	r20,1
  80c758:	a809883a 	mov	r4,r21
  80c75c:	b80b883a 	mov	r5,r23
  80c760:	0803ea80 	call	803ea8 <__udivsi3>
  80c764:	100b883a 	mov	r5,r2
  80c768:	b009883a 	mov	r4,r22
  80c76c:	1021883a 	mov	r16,r2
  80c770:	0803eb80 	call	803eb8 <__mulsi3>
  80c774:	a809883a 	mov	r4,r21
  80c778:	b80b883a 	mov	r5,r23
  80c77c:	1023883a 	mov	r17,r2
  80c780:	0803eb00 	call	803eb0 <__umodsi3>
  80c784:	1004943a 	slli	r2,r2,16
  80c788:	e006d43a 	srli	r3,fp,16
  80c78c:	10c4b03a 	or	r2,r2,r3
  80c790:	1440042e 	bgeu	r2,r17,80c7a4 <__udivdi3+0xf0>
  80c794:	14c5883a 	add	r2,r2,r19
  80c798:	843fffc4 	addi	r16,r16,-1
  80c79c:	14c00136 	bltu	r2,r19,80c7a4 <__udivdi3+0xf0>
  80c7a0:	14415c36 	bltu	r2,r17,80cd14 <__udivdi3+0x660>
  80c7a4:	1463c83a 	sub	r17,r2,r17
  80c7a8:	8809883a 	mov	r4,r17
  80c7ac:	b80b883a 	mov	r5,r23
  80c7b0:	0803ea80 	call	803ea8 <__udivsi3>
  80c7b4:	100b883a 	mov	r5,r2
  80c7b8:	b009883a 	mov	r4,r22
  80c7bc:	102b883a 	mov	r21,r2
  80c7c0:	0803eb80 	call	803eb8 <__mulsi3>
  80c7c4:	8809883a 	mov	r4,r17
  80c7c8:	b80b883a 	mov	r5,r23
  80c7cc:	1025883a 	mov	r18,r2
  80c7d0:	0803eb00 	call	803eb0 <__umodsi3>
  80c7d4:	1004943a 	slli	r2,r2,16
  80c7d8:	e0ffffcc 	andi	r3,fp,65535
  80c7dc:	10c4b03a 	or	r2,r2,r3
  80c7e0:	1480042e 	bgeu	r2,r18,80c7f4 <__udivdi3+0x140>
  80c7e4:	9885883a 	add	r2,r19,r2
  80c7e8:	ad7fffc4 	addi	r21,r21,-1
  80c7ec:	14c00136 	bltu	r2,r19,80c7f4 <__udivdi3+0x140>
  80c7f0:	14813c36 	bltu	r2,r18,80cce4 <__udivdi3+0x630>
  80c7f4:	8004943a 	slli	r2,r16,16
  80c7f8:	a009883a 	mov	r4,r20
  80c7fc:	a884b03a 	or	r2,r21,r2
  80c800:	00001506 	br	80c858 <__udivdi3+0x1a4>
  80c804:	380d883a 	mov	r6,r7
  80c808:	29c06c36 	bltu	r5,r7,80c9bc <__udivdi3+0x308>
  80c80c:	00bfffd4 	movui	r2,65535
  80c810:	11c06436 	bltu	r2,r7,80c9a4 <__udivdi3+0x2f0>
  80c814:	00803fc4 	movi	r2,255
  80c818:	11c11836 	bltu	r2,r7,80cc7c <__udivdi3+0x5c8>
  80c81c:	000b883a 	mov	r5,zero
  80c820:	0005883a 	mov	r2,zero
  80c824:	3084d83a 	srl	r2,r6,r2
  80c828:	01002074 	movhi	r4,129
  80c82c:	21073204 	addi	r4,r4,7368
  80c830:	01c00804 	movi	r7,32
  80c834:	1105883a 	add	r2,r2,r4
  80c838:	10c00003 	ldbu	r3,0(r2)
  80c83c:	28c7883a 	add	r3,r5,r3
  80c840:	38edc83a 	sub	r22,r7,r3
  80c844:	b000731e 	bne	r22,zero,80ca14 <__udivdi3+0x360>
  80c848:	35400136 	bltu	r6,r21,80c850 <__udivdi3+0x19c>
  80c84c:	e4c05b36 	bltu	fp,r19,80c9bc <__udivdi3+0x308>
  80c850:	00800044 	movi	r2,1
  80c854:	0009883a 	mov	r4,zero
  80c858:	d8800315 	stw	r2,12(sp)
  80c85c:	d9400317 	ldw	r5,12(sp)
  80c860:	d9000415 	stw	r4,16(sp)
  80c864:	2007883a 	mov	r3,r4
  80c868:	2805883a 	mov	r2,r5
  80c86c:	dfc00e17 	ldw	ra,56(sp)
  80c870:	df000d17 	ldw	fp,52(sp)
  80c874:	ddc00c17 	ldw	r23,48(sp)
  80c878:	dd800b17 	ldw	r22,44(sp)
  80c87c:	dd400a17 	ldw	r21,40(sp)
  80c880:	dd000917 	ldw	r20,36(sp)
  80c884:	dcc00817 	ldw	r19,32(sp)
  80c888:	dc800717 	ldw	r18,28(sp)
  80c88c:	dc400617 	ldw	r17,24(sp)
  80c890:	dc000517 	ldw	r16,20(sp)
  80c894:	dec00f04 	addi	sp,sp,60
  80c898:	f800283a 	ret
  80c89c:	00bfffd4 	movui	r2,65535
  80c8a0:	12005636 	bltu	r2,r8,80c9fc <__udivdi3+0x348>
  80c8a4:	00803fc4 	movi	r2,255
  80c8a8:	12010036 	bltu	r2,r8,80ccac <__udivdi3+0x5f8>
  80c8ac:	000b883a 	mov	r5,zero
  80c8b0:	0005883a 	mov	r2,zero
  80c8b4:	9884d83a 	srl	r2,r19,r2
  80c8b8:	01002074 	movhi	r4,129
  80c8bc:	21073204 	addi	r4,r4,7368
  80c8c0:	01800804 	movi	r6,32
  80c8c4:	1105883a 	add	r2,r2,r4
  80c8c8:	10c00003 	ldbu	r3,0(r2)
  80c8cc:	28c7883a 	add	r3,r5,r3
  80c8d0:	30cbc83a 	sub	r5,r6,r3
  80c8d4:	28000626 	beq	r5,zero,80c8f0 <__udivdi3+0x23c>
  80c8d8:	3145c83a 	sub	r2,r6,r5
  80c8dc:	e084d83a 	srl	r2,fp,r2
  80c8e0:	a946983a 	sll	r3,r21,r5
  80c8e4:	e178983a 	sll	fp,fp,r5
  80c8e8:	9966983a 	sll	r19,r19,r5
  80c8ec:	18aab03a 	or	r21,r3,r2
  80c8f0:	982ed43a 	srli	r23,r19,16
  80c8f4:	a809883a 	mov	r4,r21
  80c8f8:	9cbfffcc 	andi	r18,r19,65535
  80c8fc:	b80b883a 	mov	r5,r23
  80c900:	0803ea80 	call	803ea8 <__udivsi3>
  80c904:	100b883a 	mov	r5,r2
  80c908:	9009883a 	mov	r4,r18
  80c90c:	1021883a 	mov	r16,r2
  80c910:	0803eb80 	call	803eb8 <__mulsi3>
  80c914:	a809883a 	mov	r4,r21
  80c918:	b80b883a 	mov	r5,r23
  80c91c:	1023883a 	mov	r17,r2
  80c920:	0803eb00 	call	803eb0 <__umodsi3>
  80c924:	1004943a 	slli	r2,r2,16
  80c928:	e006d43a 	srli	r3,fp,16
  80c92c:	10c4b03a 	or	r2,r2,r3
  80c930:	1440042e 	bgeu	r2,r17,80c944 <__udivdi3+0x290>
  80c934:	14c5883a 	add	r2,r2,r19
  80c938:	843fffc4 	addi	r16,r16,-1
  80c93c:	14c00136 	bltu	r2,r19,80c944 <__udivdi3+0x290>
  80c940:	1440ea36 	bltu	r2,r17,80ccec <__udivdi3+0x638>
  80c944:	1463c83a 	sub	r17,r2,r17
  80c948:	8809883a 	mov	r4,r17
  80c94c:	b80b883a 	mov	r5,r23
  80c950:	0803ea80 	call	803ea8 <__udivsi3>
  80c954:	100b883a 	mov	r5,r2
  80c958:	9009883a 	mov	r4,r18
  80c95c:	102b883a 	mov	r21,r2
  80c960:	0803eb80 	call	803eb8 <__mulsi3>
  80c964:	8809883a 	mov	r4,r17
  80c968:	b80b883a 	mov	r5,r23
  80c96c:	1025883a 	mov	r18,r2
  80c970:	0803eb00 	call	803eb0 <__umodsi3>
  80c974:	1004943a 	slli	r2,r2,16
  80c978:	e0ffffcc 	andi	r3,fp,65535
  80c97c:	10c4b03a 	or	r2,r2,r3
  80c980:	1480042e 	bgeu	r2,r18,80c994 <__udivdi3+0x2e0>
  80c984:	9885883a 	add	r2,r19,r2
  80c988:	ad7fffc4 	addi	r21,r21,-1
  80c98c:	14c00136 	bltu	r2,r19,80c994 <__udivdi3+0x2e0>
  80c990:	1480d936 	bltu	r2,r18,80ccf8 <__udivdi3+0x644>
  80c994:	8004943a 	slli	r2,r16,16
  80c998:	0009883a 	mov	r4,zero
  80c99c:	a884b03a 	or	r2,r21,r2
  80c9a0:	003fad06 	br	80c858 <__udivdi3+0x1a4>
  80c9a4:	00804034 	movhi	r2,256
  80c9a8:	10bfffc4 	addi	r2,r2,-1
  80c9ac:	11c0b636 	bltu	r2,r7,80cc88 <__udivdi3+0x5d4>
  80c9b0:	01400404 	movi	r5,16
  80c9b4:	2805883a 	mov	r2,r5
  80c9b8:	003f9a06 	br	80c824 <__udivdi3+0x170>
  80c9bc:	0005883a 	mov	r2,zero
  80c9c0:	0009883a 	mov	r4,zero
  80c9c4:	003fa406 	br	80c858 <__udivdi3+0x1a4>
  80c9c8:	00804034 	movhi	r2,256
  80c9cc:	10bfffc4 	addi	r2,r2,-1
  80c9d0:	14c0b336 	bltu	r2,r19,80cca0 <__udivdi3+0x5ec>
  80c9d4:	01400404 	movi	r5,16
  80c9d8:	2805883a 	mov	r2,r5
  80c9dc:	003f5106 	br	80c724 <__udivdi3+0x70>
  80c9e0:	01000044 	movi	r4,1
  80c9e4:	000b883a 	mov	r5,zero
  80c9e8:	0803ea80 	call	803ea8 <__udivsi3>
  80c9ec:	1027883a 	mov	r19,r2
  80c9f0:	00bfffd4 	movui	r2,65535
  80c9f4:	14fff436 	bltu	r2,r19,80c9c8 <__udivdi3+0x314>
  80c9f8:	003f4606 	br	80c714 <__udivdi3+0x60>
  80c9fc:	00804034 	movhi	r2,256
  80ca00:	10bfffc4 	addi	r2,r2,-1
  80ca04:	1200ac36 	bltu	r2,r8,80ccb8 <__udivdi3+0x604>
  80ca08:	01400404 	movi	r5,16
  80ca0c:	2805883a 	mov	r2,r5
  80ca10:	003fa806 	br	80c8b4 <__udivdi3+0x200>
  80ca14:	3d85c83a 	sub	r2,r7,r22
  80ca18:	3588983a 	sll	r4,r6,r22
  80ca1c:	9886d83a 	srl	r3,r19,r2
  80ca20:	a8a2d83a 	srl	r17,r21,r2
  80ca24:	e084d83a 	srl	r2,fp,r2
  80ca28:	20eeb03a 	or	r23,r4,r3
  80ca2c:	b824d43a 	srli	r18,r23,16
  80ca30:	ad86983a 	sll	r3,r21,r22
  80ca34:	8809883a 	mov	r4,r17
  80ca38:	900b883a 	mov	r5,r18
  80ca3c:	1886b03a 	or	r3,r3,r2
  80ca40:	d8c00115 	stw	r3,4(sp)
  80ca44:	bc3fffcc 	andi	r16,r23,65535
  80ca48:	0803ea80 	call	803ea8 <__udivsi3>
  80ca4c:	100b883a 	mov	r5,r2
  80ca50:	8009883a 	mov	r4,r16
  80ca54:	1029883a 	mov	r20,r2
  80ca58:	0803eb80 	call	803eb8 <__mulsi3>
  80ca5c:	900b883a 	mov	r5,r18
  80ca60:	8809883a 	mov	r4,r17
  80ca64:	102b883a 	mov	r21,r2
  80ca68:	0803eb00 	call	803eb0 <__umodsi3>
  80ca6c:	d9400117 	ldw	r5,4(sp)
  80ca70:	1004943a 	slli	r2,r2,16
  80ca74:	9da6983a 	sll	r19,r19,r22
  80ca78:	2806d43a 	srli	r3,r5,16
  80ca7c:	10c4b03a 	or	r2,r2,r3
  80ca80:	1540032e 	bgeu	r2,r21,80ca90 <__udivdi3+0x3dc>
  80ca84:	15c5883a 	add	r2,r2,r23
  80ca88:	a53fffc4 	addi	r20,r20,-1
  80ca8c:	15c0912e 	bgeu	r2,r23,80ccd4 <__udivdi3+0x620>
  80ca90:	1563c83a 	sub	r17,r2,r21
  80ca94:	8809883a 	mov	r4,r17
  80ca98:	900b883a 	mov	r5,r18
  80ca9c:	0803ea80 	call	803ea8 <__udivsi3>
  80caa0:	100b883a 	mov	r5,r2
  80caa4:	8009883a 	mov	r4,r16
  80caa8:	102b883a 	mov	r21,r2
  80caac:	0803eb80 	call	803eb8 <__mulsi3>
  80cab0:	8809883a 	mov	r4,r17
  80cab4:	900b883a 	mov	r5,r18
  80cab8:	1021883a 	mov	r16,r2
  80cabc:	0803eb00 	call	803eb0 <__umodsi3>
  80cac0:	da800117 	ldw	r10,4(sp)
  80cac4:	1004943a 	slli	r2,r2,16
  80cac8:	50ffffcc 	andi	r3,r10,65535
  80cacc:	10c6b03a 	or	r3,r2,r3
  80cad0:	1c00032e 	bgeu	r3,r16,80cae0 <__udivdi3+0x42c>
  80cad4:	1dc7883a 	add	r3,r3,r23
  80cad8:	ad7fffc4 	addi	r21,r21,-1
  80cadc:	1dc0792e 	bgeu	r3,r23,80ccc4 <__udivdi3+0x610>
  80cae0:	a004943a 	slli	r2,r20,16
  80cae4:	982ed43a 	srli	r23,r19,16
  80cae8:	9cffffcc 	andi	r19,r19,65535
  80caec:	a8a4b03a 	or	r18,r21,r2
  80caf0:	947fffcc 	andi	r17,r18,65535
  80caf4:	902ad43a 	srli	r21,r18,16
  80caf8:	8809883a 	mov	r4,r17
  80cafc:	980b883a 	mov	r5,r19
  80cb00:	1c21c83a 	sub	r16,r3,r16
  80cb04:	0803eb80 	call	803eb8 <__mulsi3>
  80cb08:	8809883a 	mov	r4,r17
  80cb0c:	b80b883a 	mov	r5,r23
  80cb10:	1029883a 	mov	r20,r2
  80cb14:	0803eb80 	call	803eb8 <__mulsi3>
  80cb18:	980b883a 	mov	r5,r19
  80cb1c:	a809883a 	mov	r4,r21
  80cb20:	1023883a 	mov	r17,r2
  80cb24:	0803eb80 	call	803eb8 <__mulsi3>
  80cb28:	a809883a 	mov	r4,r21
  80cb2c:	b80b883a 	mov	r5,r23
  80cb30:	1027883a 	mov	r19,r2
  80cb34:	0803eb80 	call	803eb8 <__mulsi3>
  80cb38:	1009883a 	mov	r4,r2
  80cb3c:	a004d43a 	srli	r2,r20,16
  80cb40:	8ce3883a 	add	r17,r17,r19
  80cb44:	1447883a 	add	r3,r2,r17
  80cb48:	1cc0022e 	bgeu	r3,r19,80cb54 <__udivdi3+0x4a0>
  80cb4c:	00800074 	movhi	r2,1
  80cb50:	2089883a 	add	r4,r4,r2
  80cb54:	1804d43a 	srli	r2,r3,16
  80cb58:	2085883a 	add	r2,r4,r2
  80cb5c:	80804436 	bltu	r16,r2,80cc70 <__udivdi3+0x5bc>
  80cb60:	80803e26 	beq	r16,r2,80cc5c <__udivdi3+0x5a8>
  80cb64:	9005883a 	mov	r2,r18
  80cb68:	0009883a 	mov	r4,zero
  80cb6c:	003f3a06 	br	80c858 <__udivdi3+0x1a4>
  80cb70:	9d26983a 	sll	r19,r19,r20
  80cb74:	3505c83a 	sub	r2,r6,r20
  80cb78:	a8a2d83a 	srl	r17,r21,r2
  80cb7c:	982ed43a 	srli	r23,r19,16
  80cb80:	e084d83a 	srl	r2,fp,r2
  80cb84:	ad06983a 	sll	r3,r21,r20
  80cb88:	8809883a 	mov	r4,r17
  80cb8c:	b80b883a 	mov	r5,r23
  80cb90:	1886b03a 	or	r3,r3,r2
  80cb94:	d8c00015 	stw	r3,0(sp)
  80cb98:	9dbfffcc 	andi	r22,r19,65535
  80cb9c:	0803ea80 	call	803ea8 <__udivsi3>
  80cba0:	100b883a 	mov	r5,r2
  80cba4:	b009883a 	mov	r4,r22
  80cba8:	d8800215 	stw	r2,8(sp)
  80cbac:	0803eb80 	call	803eb8 <__mulsi3>
  80cbb0:	8809883a 	mov	r4,r17
  80cbb4:	b80b883a 	mov	r5,r23
  80cbb8:	102b883a 	mov	r21,r2
  80cbbc:	0803eb00 	call	803eb0 <__umodsi3>
  80cbc0:	d9000017 	ldw	r4,0(sp)
  80cbc4:	1004943a 	slli	r2,r2,16
  80cbc8:	2006d43a 	srli	r3,r4,16
  80cbcc:	10c4b03a 	or	r2,r2,r3
  80cbd0:	1540052e 	bgeu	r2,r21,80cbe8 <__udivdi3+0x534>
  80cbd4:	d9400217 	ldw	r5,8(sp)
  80cbd8:	14c5883a 	add	r2,r2,r19
  80cbdc:	297fffc4 	addi	r5,r5,-1
  80cbe0:	d9400215 	stw	r5,8(sp)
  80cbe4:	14c0462e 	bgeu	r2,r19,80cd00 <__udivdi3+0x64c>
  80cbe8:	1563c83a 	sub	r17,r2,r21
  80cbec:	8809883a 	mov	r4,r17
  80cbf0:	b80b883a 	mov	r5,r23
  80cbf4:	0803ea80 	call	803ea8 <__udivsi3>
  80cbf8:	100b883a 	mov	r5,r2
  80cbfc:	b009883a 	mov	r4,r22
  80cc00:	1025883a 	mov	r18,r2
  80cc04:	0803eb80 	call	803eb8 <__mulsi3>
  80cc08:	8809883a 	mov	r4,r17
  80cc0c:	b80b883a 	mov	r5,r23
  80cc10:	1021883a 	mov	r16,r2
  80cc14:	0803eb00 	call	803eb0 <__umodsi3>
  80cc18:	da800017 	ldw	r10,0(sp)
  80cc1c:	1004943a 	slli	r2,r2,16
  80cc20:	50ffffcc 	andi	r3,r10,65535
  80cc24:	10c6b03a 	or	r3,r2,r3
  80cc28:	1c00062e 	bgeu	r3,r16,80cc44 <__udivdi3+0x590>
  80cc2c:	1cc7883a 	add	r3,r3,r19
  80cc30:	94bfffc4 	addi	r18,r18,-1
  80cc34:	1cc00336 	bltu	r3,r19,80cc44 <__udivdi3+0x590>
  80cc38:	1c00022e 	bgeu	r3,r16,80cc44 <__udivdi3+0x590>
  80cc3c:	94bfffc4 	addi	r18,r18,-1
  80cc40:	1cc7883a 	add	r3,r3,r19
  80cc44:	d9000217 	ldw	r4,8(sp)
  80cc48:	e538983a 	sll	fp,fp,r20
  80cc4c:	1c2bc83a 	sub	r21,r3,r16
  80cc50:	2004943a 	slli	r2,r4,16
  80cc54:	90a8b03a 	or	r20,r18,r2
  80cc58:	003ebf06 	br	80c758 <__udivdi3+0xa4>
  80cc5c:	1804943a 	slli	r2,r3,16
  80cc60:	e588983a 	sll	r4,fp,r22
  80cc64:	a0ffffcc 	andi	r3,r20,65535
  80cc68:	10c5883a 	add	r2,r2,r3
  80cc6c:	20bfbd2e 	bgeu	r4,r2,80cb64 <__udivdi3+0x4b0>
  80cc70:	90bfffc4 	addi	r2,r18,-1
  80cc74:	0009883a 	mov	r4,zero
  80cc78:	003ef706 	br	80c858 <__udivdi3+0x1a4>
  80cc7c:	01400204 	movi	r5,8
  80cc80:	2805883a 	mov	r2,r5
  80cc84:	003ee706 	br	80c824 <__udivdi3+0x170>
  80cc88:	01400604 	movi	r5,24
  80cc8c:	2805883a 	mov	r2,r5
  80cc90:	003ee406 	br	80c824 <__udivdi3+0x170>
  80cc94:	01400204 	movi	r5,8
  80cc98:	2805883a 	mov	r2,r5
  80cc9c:	003ea106 	br	80c724 <__udivdi3+0x70>
  80cca0:	01400604 	movi	r5,24
  80cca4:	2805883a 	mov	r2,r5
  80cca8:	003e9e06 	br	80c724 <__udivdi3+0x70>
  80ccac:	01400204 	movi	r5,8
  80ccb0:	2805883a 	mov	r2,r5
  80ccb4:	003eff06 	br	80c8b4 <__udivdi3+0x200>
  80ccb8:	01400604 	movi	r5,24
  80ccbc:	2805883a 	mov	r2,r5
  80ccc0:	003efc06 	br	80c8b4 <__udivdi3+0x200>
  80ccc4:	1c3f862e 	bgeu	r3,r16,80cae0 <__udivdi3+0x42c>
  80ccc8:	1dc7883a 	add	r3,r3,r23
  80cccc:	ad7fffc4 	addi	r21,r21,-1
  80ccd0:	003f8306 	br	80cae0 <__udivdi3+0x42c>
  80ccd4:	157f6e2e 	bgeu	r2,r21,80ca90 <__udivdi3+0x3dc>
  80ccd8:	a53fffc4 	addi	r20,r20,-1
  80ccdc:	15c5883a 	add	r2,r2,r23
  80cce0:	003f6b06 	br	80ca90 <__udivdi3+0x3dc>
  80cce4:	ad7fffc4 	addi	r21,r21,-1
  80cce8:	003ec206 	br	80c7f4 <__udivdi3+0x140>
  80ccec:	843fffc4 	addi	r16,r16,-1
  80ccf0:	14c5883a 	add	r2,r2,r19
  80ccf4:	003f1306 	br	80c944 <__udivdi3+0x290>
  80ccf8:	ad7fffc4 	addi	r21,r21,-1
  80ccfc:	003f2506 	br	80c994 <__udivdi3+0x2e0>
  80cd00:	157fb92e 	bgeu	r2,r21,80cbe8 <__udivdi3+0x534>
  80cd04:	297fffc4 	addi	r5,r5,-1
  80cd08:	14c5883a 	add	r2,r2,r19
  80cd0c:	d9400215 	stw	r5,8(sp)
  80cd10:	003fb506 	br	80cbe8 <__udivdi3+0x534>
  80cd14:	843fffc4 	addi	r16,r16,-1
  80cd18:	14c5883a 	add	r2,r2,r19
  80cd1c:	003ea106 	br	80c7a4 <__udivdi3+0xf0>

0080cd20 <__umoddi3>:
  80cd20:	defff004 	addi	sp,sp,-64
  80cd24:	3011883a 	mov	r8,r6
  80cd28:	000d883a 	mov	r6,zero
  80cd2c:	dd400b15 	stw	r21,44(sp)
  80cd30:	dcc00915 	stw	r19,36(sp)
  80cd34:	dc000615 	stw	r16,24(sp)
  80cd38:	dfc00f15 	stw	ra,60(sp)
  80cd3c:	df000e15 	stw	fp,56(sp)
  80cd40:	ddc00d15 	stw	r23,52(sp)
  80cd44:	dd800c15 	stw	r22,48(sp)
  80cd48:	dd000a15 	stw	r20,40(sp)
  80cd4c:	dc800815 	stw	r18,32(sp)
  80cd50:	dc400715 	stw	r17,28(sp)
  80cd54:	2817883a 	mov	r11,r5
  80cd58:	d9800415 	stw	r6,16(sp)
  80cd5c:	4027883a 	mov	r19,r8
  80cd60:	d9800515 	stw	r6,20(sp)
  80cd64:	2021883a 	mov	r16,r4
  80cd68:	282b883a 	mov	r21,r5
  80cd6c:	38002c1e 	bne	r7,zero,80ce20 <__umoddi3+0x100>
  80cd70:	2a005636 	bltu	r5,r8,80cecc <__umoddi3+0x1ac>
  80cd74:	40009a26 	beq	r8,zero,80cfe0 <__umoddi3+0x2c0>
  80cd78:	00bfffd4 	movui	r2,65535
  80cd7c:	14c09236 	bltu	r2,r19,80cfc8 <__umoddi3+0x2a8>
  80cd80:	00803fc4 	movi	r2,255
  80cd84:	14c15c36 	bltu	r2,r19,80d2f8 <__umoddi3+0x5d8>
  80cd88:	000b883a 	mov	r5,zero
  80cd8c:	0005883a 	mov	r2,zero
  80cd90:	9884d83a 	srl	r2,r19,r2
  80cd94:	01002074 	movhi	r4,129
  80cd98:	21073204 	addi	r4,r4,7368
  80cd9c:	01800804 	movi	r6,32
  80cda0:	1105883a 	add	r2,r2,r4
  80cda4:	10c00003 	ldbu	r3,0(r2)
  80cda8:	28c7883a 	add	r3,r5,r3
  80cdac:	30e5c83a 	sub	r18,r6,r3
  80cdb0:	9000a41e 	bne	r18,zero,80d044 <__umoddi3+0x324>
  80cdb4:	982ed43a 	srli	r23,r19,16
  80cdb8:	acebc83a 	sub	r21,r21,r19
  80cdbc:	9d3fffcc 	andi	r20,r19,65535
  80cdc0:	002d883a 	mov	r22,zero
  80cdc4:	a809883a 	mov	r4,r21
  80cdc8:	b80b883a 	mov	r5,r23
  80cdcc:	0803ea80 	call	803ea8 <__udivsi3>
  80cdd0:	100b883a 	mov	r5,r2
  80cdd4:	a009883a 	mov	r4,r20
  80cdd8:	0803eb80 	call	803eb8 <__mulsi3>
  80cddc:	a809883a 	mov	r4,r21
  80cde0:	b80b883a 	mov	r5,r23
  80cde4:	1023883a 	mov	r17,r2
  80cde8:	0803eb00 	call	803eb0 <__umodsi3>
  80cdec:	1004943a 	slli	r2,r2,16
  80cdf0:	8006d43a 	srli	r3,r16,16
  80cdf4:	10c4b03a 	or	r2,r2,r3
  80cdf8:	1440032e 	bgeu	r2,r17,80ce08 <__umoddi3+0xe8>
  80cdfc:	14c5883a 	add	r2,r2,r19
  80ce00:	14c00136 	bltu	r2,r19,80ce08 <__umoddi3+0xe8>
  80ce04:	14415836 	bltu	r2,r17,80d368 <__umoddi3+0x648>
  80ce08:	1463c83a 	sub	r17,r2,r17
  80ce0c:	8809883a 	mov	r4,r17
  80ce10:	b80b883a 	mov	r5,r23
  80ce14:	0803ea80 	call	803ea8 <__udivsi3>
  80ce18:	a009883a 	mov	r4,r20
  80ce1c:	00005306 	br	80cf6c <__umoddi3+0x24c>
  80ce20:	380d883a 	mov	r6,r7
  80ce24:	29c0132e 	bgeu	r5,r7,80ce74 <__umoddi3+0x154>
  80ce28:	d9000415 	stw	r4,16(sp)
  80ce2c:	d9400515 	stw	r5,20(sp)
  80ce30:	d9400417 	ldw	r5,16(sp)
  80ce34:	5813883a 	mov	r9,r11
  80ce38:	2811883a 	mov	r8,r5
  80ce3c:	4005883a 	mov	r2,r8
  80ce40:	4807883a 	mov	r3,r9
  80ce44:	dfc00f17 	ldw	ra,60(sp)
  80ce48:	df000e17 	ldw	fp,56(sp)
  80ce4c:	ddc00d17 	ldw	r23,52(sp)
  80ce50:	dd800c17 	ldw	r22,48(sp)
  80ce54:	dd400b17 	ldw	r21,44(sp)
  80ce58:	dd000a17 	ldw	r20,40(sp)
  80ce5c:	dcc00917 	ldw	r19,36(sp)
  80ce60:	dc800817 	ldw	r18,32(sp)
  80ce64:	dc400717 	ldw	r17,28(sp)
  80ce68:	dc000617 	ldw	r16,24(sp)
  80ce6c:	dec01004 	addi	sp,sp,64
  80ce70:	f800283a 	ret
  80ce74:	00bfffd4 	movui	r2,65535
  80ce78:	11c06636 	bltu	r2,r7,80d014 <__umoddi3+0x2f4>
  80ce7c:	00803fc4 	movi	r2,255
  80ce80:	11c12036 	bltu	r2,r7,80d304 <__umoddi3+0x5e4>
  80ce84:	000b883a 	mov	r5,zero
  80ce88:	0005883a 	mov	r2,zero
  80ce8c:	3084d83a 	srl	r2,r6,r2
  80ce90:	01002074 	movhi	r4,129
  80ce94:	21073204 	addi	r4,r4,7368
  80ce98:	01c00804 	movi	r7,32
  80ce9c:	1105883a 	add	r2,r2,r4
  80cea0:	10c00003 	ldbu	r3,0(r2)
  80cea4:	28c7883a 	add	r3,r5,r3
  80cea8:	38e5c83a 	sub	r18,r7,r3
  80ceac:	9000941e 	bne	r18,zero,80d100 <__umoddi3+0x3e0>
  80ceb0:	35405e36 	bltu	r6,r21,80d02c <__umoddi3+0x30c>
  80ceb4:	84c05d2e 	bgeu	r16,r19,80d02c <__umoddi3+0x30c>
  80ceb8:	8011883a 	mov	r8,r16
  80cebc:	a813883a 	mov	r9,r21
  80cec0:	dc000415 	stw	r16,16(sp)
  80cec4:	dd400515 	stw	r21,20(sp)
  80cec8:	003fdc06 	br	80ce3c <__umoddi3+0x11c>
  80cecc:	00bfffd4 	movui	r2,65535
  80ced0:	12004a36 	bltu	r2,r8,80cffc <__umoddi3+0x2dc>
  80ced4:	00803fc4 	movi	r2,255
  80ced8:	12010d36 	bltu	r2,r8,80d310 <__umoddi3+0x5f0>
  80cedc:	000b883a 	mov	r5,zero
  80cee0:	0005883a 	mov	r2,zero
  80cee4:	9884d83a 	srl	r2,r19,r2
  80cee8:	01002074 	movhi	r4,129
  80ceec:	21073204 	addi	r4,r4,7368
  80cef0:	01800804 	movi	r6,32
  80cef4:	1105883a 	add	r2,r2,r4
  80cef8:	10c00003 	ldbu	r3,0(r2)
  80cefc:	28c7883a 	add	r3,r5,r3
  80cf00:	30c7c83a 	sub	r3,r6,r3
  80cf04:	1800dc1e 	bne	r3,zero,80d278 <__umoddi3+0x558>
  80cf08:	002d883a 	mov	r22,zero
  80cf0c:	982ed43a 	srli	r23,r19,16
  80cf10:	a809883a 	mov	r4,r21
  80cf14:	9cbfffcc 	andi	r18,r19,65535
  80cf18:	b80b883a 	mov	r5,r23
  80cf1c:	0803ea80 	call	803ea8 <__udivsi3>
  80cf20:	100b883a 	mov	r5,r2
  80cf24:	9009883a 	mov	r4,r18
  80cf28:	0803eb80 	call	803eb8 <__mulsi3>
  80cf2c:	a809883a 	mov	r4,r21
  80cf30:	b80b883a 	mov	r5,r23
  80cf34:	1023883a 	mov	r17,r2
  80cf38:	0803eb00 	call	803eb0 <__umodsi3>
  80cf3c:	1004943a 	slli	r2,r2,16
  80cf40:	8006d43a 	srli	r3,r16,16
  80cf44:	10c4b03a 	or	r2,r2,r3
  80cf48:	1440032e 	bgeu	r2,r17,80cf58 <__umoddi3+0x238>
  80cf4c:	14c5883a 	add	r2,r2,r19
  80cf50:	14c00136 	bltu	r2,r19,80cf58 <__umoddi3+0x238>
  80cf54:	14410236 	bltu	r2,r17,80d360 <__umoddi3+0x640>
  80cf58:	1463c83a 	sub	r17,r2,r17
  80cf5c:	8809883a 	mov	r4,r17
  80cf60:	b80b883a 	mov	r5,r23
  80cf64:	0803ea80 	call	803ea8 <__udivsi3>
  80cf68:	9009883a 	mov	r4,r18
  80cf6c:	100b883a 	mov	r5,r2
  80cf70:	0803eb80 	call	803eb8 <__mulsi3>
  80cf74:	8809883a 	mov	r4,r17
  80cf78:	b80b883a 	mov	r5,r23
  80cf7c:	102b883a 	mov	r21,r2
  80cf80:	0803eb00 	call	803eb0 <__umodsi3>
  80cf84:	1004943a 	slli	r2,r2,16
  80cf88:	80ffffcc 	andi	r3,r16,65535
  80cf8c:	10c4b03a 	or	r2,r2,r3
  80cf90:	1540042e 	bgeu	r2,r21,80cfa4 <__umoddi3+0x284>
  80cf94:	14c5883a 	add	r2,r2,r19
  80cf98:	14c00236 	bltu	r2,r19,80cfa4 <__umoddi3+0x284>
  80cf9c:	1540012e 	bgeu	r2,r21,80cfa4 <__umoddi3+0x284>
  80cfa0:	14c5883a 	add	r2,r2,r19
  80cfa4:	1545c83a 	sub	r2,r2,r21
  80cfa8:	1584d83a 	srl	r2,r2,r22
  80cfac:	0013883a 	mov	r9,zero
  80cfb0:	d8800415 	stw	r2,16(sp)
  80cfb4:	d8c00417 	ldw	r3,16(sp)
  80cfb8:	0005883a 	mov	r2,zero
  80cfbc:	d8800515 	stw	r2,20(sp)
  80cfc0:	1811883a 	mov	r8,r3
  80cfc4:	003f9d06 	br	80ce3c <__umoddi3+0x11c>
  80cfc8:	00804034 	movhi	r2,256
  80cfcc:	10bfffc4 	addi	r2,r2,-1
  80cfd0:	14c0c636 	bltu	r2,r19,80d2ec <__umoddi3+0x5cc>
  80cfd4:	01400404 	movi	r5,16
  80cfd8:	2805883a 	mov	r2,r5
  80cfdc:	003f6c06 	br	80cd90 <__umoddi3+0x70>
  80cfe0:	01000044 	movi	r4,1
  80cfe4:	000b883a 	mov	r5,zero
  80cfe8:	0803ea80 	call	803ea8 <__udivsi3>
  80cfec:	1027883a 	mov	r19,r2
  80cff0:	00bfffd4 	movui	r2,65535
  80cff4:	14fff436 	bltu	r2,r19,80cfc8 <__umoddi3+0x2a8>
  80cff8:	003f6106 	br	80cd80 <__umoddi3+0x60>
  80cffc:	00804034 	movhi	r2,256
  80d000:	10bfffc4 	addi	r2,r2,-1
  80d004:	1200c536 	bltu	r2,r8,80d31c <__umoddi3+0x5fc>
  80d008:	01400404 	movi	r5,16
  80d00c:	2805883a 	mov	r2,r5
  80d010:	003fb406 	br	80cee4 <__umoddi3+0x1c4>
  80d014:	00804034 	movhi	r2,256
  80d018:	10bfffc4 	addi	r2,r2,-1
  80d01c:	11c0c236 	bltu	r2,r7,80d328 <__umoddi3+0x608>
  80d020:	01400404 	movi	r5,16
  80d024:	2805883a 	mov	r2,r5
  80d028:	003f9806 	br	80ce8c <__umoddi3+0x16c>
  80d02c:	84c9c83a 	sub	r4,r16,r19
  80d030:	8105803a 	cmpltu	r2,r16,r4
  80d034:	a987c83a 	sub	r3,r21,r6
  80d038:	18abc83a 	sub	r21,r3,r2
  80d03c:	2021883a 	mov	r16,r4
  80d040:	003f9d06 	br	80ceb8 <__umoddi3+0x198>
  80d044:	9ca6983a 	sll	r19,r19,r18
  80d048:	3485c83a 	sub	r2,r6,r18
  80d04c:	a8a2d83a 	srl	r17,r21,r2
  80d050:	982ed43a 	srli	r23,r19,16
  80d054:	ac86983a 	sll	r3,r21,r18
  80d058:	8084d83a 	srl	r2,r16,r2
  80d05c:	8809883a 	mov	r4,r17
  80d060:	b80b883a 	mov	r5,r23
  80d064:	18b8b03a 	or	fp,r3,r2
  80d068:	9d3fffcc 	andi	r20,r19,65535
  80d06c:	0803ea80 	call	803ea8 <__udivsi3>
  80d070:	100b883a 	mov	r5,r2
  80d074:	a009883a 	mov	r4,r20
  80d078:	0803eb80 	call	803eb8 <__mulsi3>
  80d07c:	8809883a 	mov	r4,r17
  80d080:	b80b883a 	mov	r5,r23
  80d084:	102b883a 	mov	r21,r2
  80d088:	0803eb00 	call	803eb0 <__umodsi3>
  80d08c:	1004943a 	slli	r2,r2,16
  80d090:	e006d43a 	srli	r3,fp,16
  80d094:	902d883a 	mov	r22,r18
  80d098:	10c4b03a 	or	r2,r2,r3
  80d09c:	1540022e 	bgeu	r2,r21,80d0a8 <__umoddi3+0x388>
  80d0a0:	14c5883a 	add	r2,r2,r19
  80d0a4:	14c0ab2e 	bgeu	r2,r19,80d354 <__umoddi3+0x634>
  80d0a8:	1563c83a 	sub	r17,r2,r21
  80d0ac:	8809883a 	mov	r4,r17
  80d0b0:	b80b883a 	mov	r5,r23
  80d0b4:	0803ea80 	call	803ea8 <__udivsi3>
  80d0b8:	100b883a 	mov	r5,r2
  80d0bc:	a009883a 	mov	r4,r20
  80d0c0:	0803eb80 	call	803eb8 <__mulsi3>
  80d0c4:	8809883a 	mov	r4,r17
  80d0c8:	b80b883a 	mov	r5,r23
  80d0cc:	102b883a 	mov	r21,r2
  80d0d0:	0803eb00 	call	803eb0 <__umodsi3>
  80d0d4:	1004943a 	slli	r2,r2,16
  80d0d8:	e0ffffcc 	andi	r3,fp,65535
  80d0dc:	10c4b03a 	or	r2,r2,r3
  80d0e0:	1540042e 	bgeu	r2,r21,80d0f4 <__umoddi3+0x3d4>
  80d0e4:	14c5883a 	add	r2,r2,r19
  80d0e8:	14c00236 	bltu	r2,r19,80d0f4 <__umoddi3+0x3d4>
  80d0ec:	1540012e 	bgeu	r2,r21,80d0f4 <__umoddi3+0x3d4>
  80d0f0:	14c5883a 	add	r2,r2,r19
  80d0f4:	84a0983a 	sll	r16,r16,r18
  80d0f8:	156bc83a 	sub	r21,r2,r21
  80d0fc:	003f3106 	br	80cdc4 <__umoddi3+0xa4>
  80d100:	3c8fc83a 	sub	r7,r7,r18
  80d104:	3486983a 	sll	r3,r6,r18
  80d108:	99c4d83a 	srl	r2,r19,r7
  80d10c:	a9e2d83a 	srl	r17,r21,r7
  80d110:	ac8c983a 	sll	r6,r21,r18
  80d114:	18acb03a 	or	r22,r3,r2
  80d118:	b02ed43a 	srli	r23,r22,16
  80d11c:	81c4d83a 	srl	r2,r16,r7
  80d120:	8809883a 	mov	r4,r17
  80d124:	b80b883a 	mov	r5,r23
  80d128:	308cb03a 	or	r6,r6,r2
  80d12c:	d9c00315 	stw	r7,12(sp)
  80d130:	d9800215 	stw	r6,8(sp)
  80d134:	b53fffcc 	andi	r20,r22,65535
  80d138:	0803ea80 	call	803ea8 <__udivsi3>
  80d13c:	100b883a 	mov	r5,r2
  80d140:	a009883a 	mov	r4,r20
  80d144:	1039883a 	mov	fp,r2
  80d148:	0803eb80 	call	803eb8 <__mulsi3>
  80d14c:	8809883a 	mov	r4,r17
  80d150:	b80b883a 	mov	r5,r23
  80d154:	102b883a 	mov	r21,r2
  80d158:	0803eb00 	call	803eb0 <__umodsi3>
  80d15c:	d9000217 	ldw	r4,8(sp)
  80d160:	1004943a 	slli	r2,r2,16
  80d164:	9ca6983a 	sll	r19,r19,r18
  80d168:	2006d43a 	srli	r3,r4,16
  80d16c:	84a0983a 	sll	r16,r16,r18
  80d170:	dcc00015 	stw	r19,0(sp)
  80d174:	10c4b03a 	or	r2,r2,r3
  80d178:	dc000115 	stw	r16,4(sp)
  80d17c:	1540032e 	bgeu	r2,r21,80d18c <__umoddi3+0x46c>
  80d180:	1585883a 	add	r2,r2,r22
  80d184:	e73fffc4 	addi	fp,fp,-1
  80d188:	15806e2e 	bgeu	r2,r22,80d344 <__umoddi3+0x624>
  80d18c:	1563c83a 	sub	r17,r2,r21
  80d190:	8809883a 	mov	r4,r17
  80d194:	b80b883a 	mov	r5,r23
  80d198:	0803ea80 	call	803ea8 <__udivsi3>
  80d19c:	100b883a 	mov	r5,r2
  80d1a0:	a009883a 	mov	r4,r20
  80d1a4:	1021883a 	mov	r16,r2
  80d1a8:	0803eb80 	call	803eb8 <__mulsi3>
  80d1ac:	b80b883a 	mov	r5,r23
  80d1b0:	8809883a 	mov	r4,r17
  80d1b4:	1029883a 	mov	r20,r2
  80d1b8:	0803eb00 	call	803eb0 <__umodsi3>
  80d1bc:	d9400217 	ldw	r5,8(sp)
  80d1c0:	1004943a 	slli	r2,r2,16
  80d1c4:	28ffffcc 	andi	r3,r5,65535
  80d1c8:	10c4b03a 	or	r2,r2,r3
  80d1cc:	1500032e 	bgeu	r2,r20,80d1dc <__umoddi3+0x4bc>
  80d1d0:	1585883a 	add	r2,r2,r22
  80d1d4:	843fffc4 	addi	r16,r16,-1
  80d1d8:	1580562e 	bgeu	r2,r22,80d334 <__umoddi3+0x614>
  80d1dc:	d9800017 	ldw	r6,0(sp)
  80d1e0:	e022943a 	slli	r17,fp,16
  80d1e4:	302ed43a 	srli	r23,r6,16
  80d1e8:	8462b03a 	or	r17,r16,r17
  80d1ec:	34ffffcc 	andi	r19,r6,65535
  80d1f0:	882ad43a 	srli	r21,r17,16
  80d1f4:	8c7fffcc 	andi	r17,r17,65535
  80d1f8:	8809883a 	mov	r4,r17
  80d1fc:	980b883a 	mov	r5,r19
  80d200:	1521c83a 	sub	r16,r2,r20
  80d204:	0803eb80 	call	803eb8 <__mulsi3>
  80d208:	8809883a 	mov	r4,r17
  80d20c:	b80b883a 	mov	r5,r23
  80d210:	1029883a 	mov	r20,r2
  80d214:	0803eb80 	call	803eb8 <__mulsi3>
  80d218:	980b883a 	mov	r5,r19
  80d21c:	a809883a 	mov	r4,r21
  80d220:	1023883a 	mov	r17,r2
  80d224:	0803eb80 	call	803eb8 <__mulsi3>
  80d228:	a809883a 	mov	r4,r21
  80d22c:	b80b883a 	mov	r5,r23
  80d230:	1027883a 	mov	r19,r2
  80d234:	0803eb80 	call	803eb8 <__mulsi3>
  80d238:	100b883a 	mov	r5,r2
  80d23c:	a004d43a 	srli	r2,r20,16
  80d240:	8ce3883a 	add	r17,r17,r19
  80d244:	1449883a 	add	r4,r2,r17
  80d248:	24c0022e 	bgeu	r4,r19,80d254 <__umoddi3+0x534>
  80d24c:	00800074 	movhi	r2,1
  80d250:	288b883a 	add	r5,r5,r2
  80d254:	2004d43a 	srli	r2,r4,16
  80d258:	2008943a 	slli	r4,r4,16
  80d25c:	a0ffffcc 	andi	r3,r20,65535
  80d260:	288d883a 	add	r6,r5,r2
  80d264:	20c9883a 	add	r4,r4,r3
  80d268:	81800b36 	bltu	r16,r6,80d298 <__umoddi3+0x578>
  80d26c:	81804026 	beq	r16,r6,80d370 <__umoddi3+0x650>
  80d270:	818dc83a 	sub	r6,r16,r6
  80d274:	00000f06 	br	80d2b4 <__umoddi3+0x594>
  80d278:	30c5c83a 	sub	r2,r6,r3
  80d27c:	182d883a 	mov	r22,r3
  80d280:	8084d83a 	srl	r2,r16,r2
  80d284:	a8c6983a 	sll	r3,r21,r3
  80d288:	9da6983a 	sll	r19,r19,r22
  80d28c:	85a0983a 	sll	r16,r16,r22
  80d290:	18aab03a 	or	r21,r3,r2
  80d294:	003f1d06 	br	80cf0c <__umoddi3+0x1ec>
  80d298:	d8c00017 	ldw	r3,0(sp)
  80d29c:	20c5c83a 	sub	r2,r4,r3
  80d2a0:	2089803a 	cmpltu	r4,r4,r2
  80d2a4:	3587c83a 	sub	r3,r6,r22
  80d2a8:	1907c83a 	sub	r3,r3,r4
  80d2ac:	80cdc83a 	sub	r6,r16,r3
  80d2b0:	1009883a 	mov	r4,r2
  80d2b4:	d9400117 	ldw	r5,4(sp)
  80d2b8:	2905c83a 	sub	r2,r5,r4
  80d2bc:	2887803a 	cmpltu	r3,r5,r2
  80d2c0:	30c7c83a 	sub	r3,r6,r3
  80d2c4:	d9800317 	ldw	r6,12(sp)
  80d2c8:	1484d83a 	srl	r2,r2,r18
  80d2cc:	1988983a 	sll	r4,r3,r6
  80d2d0:	1c86d83a 	srl	r3,r3,r18
  80d2d4:	2088b03a 	or	r4,r4,r2
  80d2d8:	2011883a 	mov	r8,r4
  80d2dc:	1813883a 	mov	r9,r3
  80d2e0:	d9000415 	stw	r4,16(sp)
  80d2e4:	d8c00515 	stw	r3,20(sp)
  80d2e8:	003ed406 	br	80ce3c <__umoddi3+0x11c>
  80d2ec:	01400604 	movi	r5,24
  80d2f0:	2805883a 	mov	r2,r5
  80d2f4:	003ea606 	br	80cd90 <__umoddi3+0x70>
  80d2f8:	01400204 	movi	r5,8
  80d2fc:	2805883a 	mov	r2,r5
  80d300:	003ea306 	br	80cd90 <__umoddi3+0x70>
  80d304:	01400204 	movi	r5,8
  80d308:	2805883a 	mov	r2,r5
  80d30c:	003edf06 	br	80ce8c <__umoddi3+0x16c>
  80d310:	01400204 	movi	r5,8
  80d314:	2805883a 	mov	r2,r5
  80d318:	003ef206 	br	80cee4 <__umoddi3+0x1c4>
  80d31c:	01400604 	movi	r5,24
  80d320:	2805883a 	mov	r2,r5
  80d324:	003eef06 	br	80cee4 <__umoddi3+0x1c4>
  80d328:	01400604 	movi	r5,24
  80d32c:	2805883a 	mov	r2,r5
  80d330:	003ed606 	br	80ce8c <__umoddi3+0x16c>
  80d334:	153fa92e 	bgeu	r2,r20,80d1dc <__umoddi3+0x4bc>
  80d338:	843fffc4 	addi	r16,r16,-1
  80d33c:	1585883a 	add	r2,r2,r22
  80d340:	003fa606 	br	80d1dc <__umoddi3+0x4bc>
  80d344:	157f912e 	bgeu	r2,r21,80d18c <__umoddi3+0x46c>
  80d348:	e73fffc4 	addi	fp,fp,-1
  80d34c:	1585883a 	add	r2,r2,r22
  80d350:	003f8e06 	br	80d18c <__umoddi3+0x46c>
  80d354:	157f542e 	bgeu	r2,r21,80d0a8 <__umoddi3+0x388>
  80d358:	14c5883a 	add	r2,r2,r19
  80d35c:	003f5206 	br	80d0a8 <__umoddi3+0x388>
  80d360:	14c5883a 	add	r2,r2,r19
  80d364:	003efc06 	br	80cf58 <__umoddi3+0x238>
  80d368:	14c5883a 	add	r2,r2,r19
  80d36c:	003ea606 	br	80ce08 <__umoddi3+0xe8>
  80d370:	d8800117 	ldw	r2,4(sp)
  80d374:	113fc836 	bltu	r2,r4,80d298 <__umoddi3+0x578>
  80d378:	000d883a 	mov	r6,zero
  80d37c:	003fcd06 	br	80d2b4 <__umoddi3+0x594>

0080d380 <__muldf3>:
  80d380:	deffe004 	addi	sp,sp,-128
  80d384:	dc401815 	stw	r17,96(sp)
  80d388:	dc400404 	addi	r17,sp,16
  80d38c:	2011883a 	mov	r8,r4
  80d390:	2813883a 	mov	r9,r5
  80d394:	dc001715 	stw	r16,92(sp)
  80d398:	d809883a 	mov	r4,sp
  80d39c:	880b883a 	mov	r5,r17
  80d3a0:	dc000904 	addi	r16,sp,36
  80d3a4:	dfc01f15 	stw	ra,124(sp)
  80d3a8:	da400115 	stw	r9,4(sp)
  80d3ac:	d9c00315 	stw	r7,12(sp)
  80d3b0:	da000015 	stw	r8,0(sp)
  80d3b4:	d9800215 	stw	r6,8(sp)
  80d3b8:	ddc01e15 	stw	r23,120(sp)
  80d3bc:	dd801d15 	stw	r22,116(sp)
  80d3c0:	dd401c15 	stw	r21,112(sp)
  80d3c4:	dd001b15 	stw	r20,108(sp)
  80d3c8:	dcc01a15 	stw	r19,104(sp)
  80d3cc:	dc801915 	stw	r18,100(sp)
  80d3d0:	08042840 	call	804284 <__unpack_d>
  80d3d4:	d9000204 	addi	r4,sp,8
  80d3d8:	800b883a 	mov	r5,r16
  80d3dc:	08042840 	call	804284 <__unpack_d>
  80d3e0:	d9000417 	ldw	r4,16(sp)
  80d3e4:	00800044 	movi	r2,1
  80d3e8:	1100102e 	bgeu	r2,r4,80d42c <__muldf3+0xac>
  80d3ec:	d8c00917 	ldw	r3,36(sp)
  80d3f0:	10c0062e 	bgeu	r2,r3,80d40c <__muldf3+0x8c>
  80d3f4:	00800104 	movi	r2,4
  80d3f8:	20800a26 	beq	r4,r2,80d424 <__muldf3+0xa4>
  80d3fc:	1880cc26 	beq	r3,r2,80d730 <__muldf3+0x3b0>
  80d400:	00800084 	movi	r2,2
  80d404:	20800926 	beq	r4,r2,80d42c <__muldf3+0xac>
  80d408:	1880191e 	bne	r3,r2,80d470 <__muldf3+0xf0>
  80d40c:	d8c00a17 	ldw	r3,40(sp)
  80d410:	d8800517 	ldw	r2,20(sp)
  80d414:	8009883a 	mov	r4,r16
  80d418:	10c4c03a 	cmpne	r2,r2,r3
  80d41c:	d8800a15 	stw	r2,40(sp)
  80d420:	00000706 	br	80d440 <__muldf3+0xc0>
  80d424:	00800084 	movi	r2,2
  80d428:	1880c326 	beq	r3,r2,80d738 <__muldf3+0x3b8>
  80d42c:	d8800517 	ldw	r2,20(sp)
  80d430:	d8c00a17 	ldw	r3,40(sp)
  80d434:	8809883a 	mov	r4,r17
  80d438:	10c4c03a 	cmpne	r2,r2,r3
  80d43c:	d8800515 	stw	r2,20(sp)
  80d440:	0803f700 	call	803f70 <__pack_d>
  80d444:	dfc01f17 	ldw	ra,124(sp)
  80d448:	ddc01e17 	ldw	r23,120(sp)
  80d44c:	dd801d17 	ldw	r22,116(sp)
  80d450:	dd401c17 	ldw	r21,112(sp)
  80d454:	dd001b17 	ldw	r20,108(sp)
  80d458:	dcc01a17 	ldw	r19,104(sp)
  80d45c:	dc801917 	ldw	r18,100(sp)
  80d460:	dc401817 	ldw	r17,96(sp)
  80d464:	dc001717 	ldw	r16,92(sp)
  80d468:	dec02004 	addi	sp,sp,128
  80d46c:	f800283a 	ret
  80d470:	dd800717 	ldw	r22,28(sp)
  80d474:	dc800c17 	ldw	r18,48(sp)
  80d478:	002b883a 	mov	r21,zero
  80d47c:	0023883a 	mov	r17,zero
  80d480:	a80b883a 	mov	r5,r21
  80d484:	b00d883a 	mov	r6,r22
  80d488:	880f883a 	mov	r7,r17
  80d48c:	ddc00817 	ldw	r23,32(sp)
  80d490:	dcc00d17 	ldw	r19,52(sp)
  80d494:	9009883a 	mov	r4,r18
  80d498:	080dbbc0 	call	80dbbc <__muldi3>
  80d49c:	001b883a 	mov	r13,zero
  80d4a0:	680f883a 	mov	r7,r13
  80d4a4:	b009883a 	mov	r4,r22
  80d4a8:	000b883a 	mov	r5,zero
  80d4ac:	980d883a 	mov	r6,r19
  80d4b0:	b82d883a 	mov	r22,r23
  80d4b4:	002f883a 	mov	r23,zero
  80d4b8:	db401615 	stw	r13,88(sp)
  80d4bc:	d8801315 	stw	r2,76(sp)
  80d4c0:	d8c01415 	stw	r3,80(sp)
  80d4c4:	dcc01515 	stw	r19,84(sp)
  80d4c8:	080dbbc0 	call	80dbbc <__muldi3>
  80d4cc:	b00d883a 	mov	r6,r22
  80d4d0:	000b883a 	mov	r5,zero
  80d4d4:	9009883a 	mov	r4,r18
  80d4d8:	b80f883a 	mov	r7,r23
  80d4dc:	1021883a 	mov	r16,r2
  80d4e0:	1823883a 	mov	r17,r3
  80d4e4:	080dbbc0 	call	80dbbc <__muldi3>
  80d4e8:	8085883a 	add	r2,r16,r2
  80d4ec:	140d803a 	cmpltu	r6,r2,r16
  80d4f0:	88c7883a 	add	r3,r17,r3
  80d4f4:	30cd883a 	add	r6,r6,r3
  80d4f8:	1029883a 	mov	r20,r2
  80d4fc:	302b883a 	mov	r21,r6
  80d500:	da801317 	ldw	r10,76(sp)
  80d504:	dac01417 	ldw	r11,80(sp)
  80d508:	db001517 	ldw	r12,84(sp)
  80d50c:	db401617 	ldw	r13,88(sp)
  80d510:	3440612e 	bgeu	r6,r17,80d698 <__muldf3+0x318>
  80d514:	0009883a 	mov	r4,zero
  80d518:	5105883a 	add	r2,r10,r4
  80d51c:	128d803a 	cmpltu	r6,r2,r10
  80d520:	5d07883a 	add	r3,r11,r20
  80d524:	30cd883a 	add	r6,r6,r3
  80d528:	0021883a 	mov	r16,zero
  80d52c:	04400044 	movi	r17,1
  80d530:	1025883a 	mov	r18,r2
  80d534:	3027883a 	mov	r19,r6
  80d538:	32c06236 	bltu	r6,r11,80d6c4 <__muldf3+0x344>
  80d53c:	59807a26 	beq	r11,r6,80d728 <__muldf3+0x3a8>
  80d540:	680b883a 	mov	r5,r13
  80d544:	b80f883a 	mov	r7,r23
  80d548:	6009883a 	mov	r4,r12
  80d54c:	b00d883a 	mov	r6,r22
  80d550:	080dbbc0 	call	80dbbc <__muldi3>
  80d554:	1009883a 	mov	r4,r2
  80d558:	000f883a 	mov	r7,zero
  80d55c:	1545883a 	add	r2,r2,r21
  80d560:	1111803a 	cmpltu	r8,r2,r4
  80d564:	19c7883a 	add	r3,r3,r7
  80d568:	40c7883a 	add	r3,r8,r3
  80d56c:	88cb883a 	add	r5,r17,r3
  80d570:	d8c00617 	ldw	r3,24(sp)
  80d574:	8089883a 	add	r4,r16,r2
  80d578:	d8800b17 	ldw	r2,44(sp)
  80d57c:	18c00104 	addi	r3,r3,4
  80d580:	240d803a 	cmpltu	r6,r4,r16
  80d584:	10c7883a 	add	r3,r2,r3
  80d588:	2013883a 	mov	r9,r4
  80d58c:	d8800a17 	ldw	r2,40(sp)
  80d590:	d9000517 	ldw	r4,20(sp)
  80d594:	314d883a 	add	r6,r6,r5
  80d598:	3015883a 	mov	r10,r6
  80d59c:	2088c03a 	cmpne	r4,r4,r2
  80d5a0:	00880034 	movhi	r2,8192
  80d5a4:	10bfffc4 	addi	r2,r2,-1
  80d5a8:	d9000f15 	stw	r4,60(sp)
  80d5ac:	d8c01015 	stw	r3,64(sp)
  80d5b0:	1180162e 	bgeu	r2,r6,80d60c <__muldf3+0x28c>
  80d5b4:	1811883a 	mov	r8,r3
  80d5b8:	101f883a 	mov	r15,r2
  80d5bc:	980497fa 	slli	r2,r19,31
  80d5c0:	9016d07a 	srli	r11,r18,1
  80d5c4:	500697fa 	slli	r3,r10,31
  80d5c8:	480cd07a 	srli	r6,r9,1
  80d5cc:	500ed07a 	srli	r7,r10,1
  80d5d0:	12d6b03a 	or	r11,r2,r11
  80d5d4:	00800044 	movi	r2,1
  80d5d8:	198cb03a 	or	r6,r3,r6
  80d5dc:	4888703a 	and	r4,r9,r2
  80d5e0:	9818d07a 	srli	r12,r19,1
  80d5e4:	001b883a 	mov	r13,zero
  80d5e8:	03a00034 	movhi	r14,32768
  80d5ec:	3013883a 	mov	r9,r6
  80d5f0:	3815883a 	mov	r10,r7
  80d5f4:	4091883a 	add	r8,r8,r2
  80d5f8:	20000226 	beq	r4,zero,80d604 <__muldf3+0x284>
  80d5fc:	5b64b03a 	or	r18,r11,r13
  80d600:	63a6b03a 	or	r19,r12,r14
  80d604:	7abfed36 	bltu	r15,r10,80d5bc <__muldf3+0x23c>
  80d608:	da001015 	stw	r8,64(sp)
  80d60c:	00840034 	movhi	r2,4096
  80d610:	10bfffc4 	addi	r2,r2,-1
  80d614:	12801436 	bltu	r2,r10,80d668 <__muldf3+0x2e8>
  80d618:	da001017 	ldw	r8,64(sp)
  80d61c:	101f883a 	mov	r15,r2
  80d620:	4a45883a 	add	r2,r9,r9
  80d624:	124d803a 	cmpltu	r6,r2,r9
  80d628:	5287883a 	add	r3,r10,r10
  80d62c:	9497883a 	add	r11,r18,r18
  80d630:	5c8f803a 	cmpltu	r7,r11,r18
  80d634:	9cd9883a 	add	r12,r19,r19
  80d638:	01000044 	movi	r4,1
  80d63c:	30cd883a 	add	r6,r6,r3
  80d640:	3b0f883a 	add	r7,r7,r12
  80d644:	423fffc4 	addi	r8,r8,-1
  80d648:	1013883a 	mov	r9,r2
  80d64c:	3015883a 	mov	r10,r6
  80d650:	111ab03a 	or	r13,r2,r4
  80d654:	98003016 	blt	r19,zero,80d718 <__muldf3+0x398>
  80d658:	5825883a 	mov	r18,r11
  80d65c:	3827883a 	mov	r19,r7
  80d660:	7abfef2e 	bgeu	r15,r10,80d620 <__muldf3+0x2a0>
  80d664:	da001015 	stw	r8,64(sp)
  80d668:	00803fc4 	movi	r2,255
  80d66c:	488e703a 	and	r7,r9,r2
  80d670:	00802004 	movi	r2,128
  80d674:	0007883a 	mov	r3,zero
  80d678:	0011883a 	mov	r8,zero
  80d67c:	38801826 	beq	r7,r2,80d6e0 <__muldf3+0x360>
  80d680:	008000c4 	movi	r2,3
  80d684:	d9000e04 	addi	r4,sp,56
  80d688:	da801215 	stw	r10,72(sp)
  80d68c:	d8800e15 	stw	r2,56(sp)
  80d690:	da401115 	stw	r9,68(sp)
  80d694:	003f6a06 	br	80d440 <__muldf3+0xc0>
  80d698:	89802126 	beq	r17,r6,80d720 <__muldf3+0x3a0>
  80d69c:	0009883a 	mov	r4,zero
  80d6a0:	5105883a 	add	r2,r10,r4
  80d6a4:	128d803a 	cmpltu	r6,r2,r10
  80d6a8:	5d07883a 	add	r3,r11,r20
  80d6ac:	30cd883a 	add	r6,r6,r3
  80d6b0:	0021883a 	mov	r16,zero
  80d6b4:	0023883a 	mov	r17,zero
  80d6b8:	1025883a 	mov	r18,r2
  80d6bc:	3027883a 	mov	r19,r6
  80d6c0:	32ff9e2e 	bgeu	r6,r11,80d53c <__muldf3+0x1bc>
  80d6c4:	00800044 	movi	r2,1
  80d6c8:	8089883a 	add	r4,r16,r2
  80d6cc:	240d803a 	cmpltu	r6,r4,r16
  80d6d0:	344d883a 	add	r6,r6,r17
  80d6d4:	2021883a 	mov	r16,r4
  80d6d8:	3023883a 	mov	r17,r6
  80d6dc:	003f9806 	br	80d540 <__muldf3+0x1c0>
  80d6e0:	403fe71e 	bne	r8,zero,80d680 <__muldf3+0x300>
  80d6e4:	01004004 	movi	r4,256
  80d6e8:	4904703a 	and	r2,r9,r4
  80d6ec:	10c4b03a 	or	r2,r2,r3
  80d6f0:	103fe31e 	bne	r2,zero,80d680 <__muldf3+0x300>
  80d6f4:	94c4b03a 	or	r2,r18,r19
  80d6f8:	103fe126 	beq	r2,zero,80d680 <__muldf3+0x300>
  80d6fc:	49c5883a 	add	r2,r9,r7
  80d700:	1251803a 	cmpltu	r8,r2,r9
  80d704:	4291883a 	add	r8,r8,r10
  80d708:	013fc004 	movi	r4,-256
  80d70c:	1112703a 	and	r9,r2,r4
  80d710:	4015883a 	mov	r10,r8
  80d714:	003fda06 	br	80d680 <__muldf3+0x300>
  80d718:	6813883a 	mov	r9,r13
  80d71c:	003fce06 	br	80d658 <__muldf3+0x2d8>
  80d720:	143f7c36 	bltu	r2,r16,80d514 <__muldf3+0x194>
  80d724:	003fdd06 	br	80d69c <__muldf3+0x31c>
  80d728:	12bf852e 	bgeu	r2,r10,80d540 <__muldf3+0x1c0>
  80d72c:	003fe506 	br	80d6c4 <__muldf3+0x344>
  80d730:	00800084 	movi	r2,2
  80d734:	20bf351e 	bne	r4,r2,80d40c <__muldf3+0x8c>
  80d738:	01002074 	movhi	r4,129
  80d73c:	21072d04 	addi	r4,r4,7348
  80d740:	003f3f06 	br	80d440 <__muldf3+0xc0>

0080d744 <__divdf3>:
  80d744:	deffed04 	addi	sp,sp,-76
  80d748:	dcc01115 	stw	r19,68(sp)
  80d74c:	dcc00404 	addi	r19,sp,16
  80d750:	2011883a 	mov	r8,r4
  80d754:	2813883a 	mov	r9,r5
  80d758:	dc000e15 	stw	r16,56(sp)
  80d75c:	d809883a 	mov	r4,sp
  80d760:	980b883a 	mov	r5,r19
  80d764:	dc000904 	addi	r16,sp,36
  80d768:	dfc01215 	stw	ra,72(sp)
  80d76c:	da400115 	stw	r9,4(sp)
  80d770:	d9c00315 	stw	r7,12(sp)
  80d774:	da000015 	stw	r8,0(sp)
  80d778:	d9800215 	stw	r6,8(sp)
  80d77c:	dc801015 	stw	r18,64(sp)
  80d780:	dc400f15 	stw	r17,60(sp)
  80d784:	08042840 	call	804284 <__unpack_d>
  80d788:	d9000204 	addi	r4,sp,8
  80d78c:	800b883a 	mov	r5,r16
  80d790:	08042840 	call	804284 <__unpack_d>
  80d794:	d9000417 	ldw	r4,16(sp)
  80d798:	00800044 	movi	r2,1
  80d79c:	11000b2e 	bgeu	r2,r4,80d7cc <__divdf3+0x88>
  80d7a0:	d9400917 	ldw	r5,36(sp)
  80d7a4:	1140762e 	bgeu	r2,r5,80d980 <__divdf3+0x23c>
  80d7a8:	d8800517 	ldw	r2,20(sp)
  80d7ac:	d8c00a17 	ldw	r3,40(sp)
  80d7b0:	01800104 	movi	r6,4
  80d7b4:	10c4f03a 	xor	r2,r2,r3
  80d7b8:	d8800515 	stw	r2,20(sp)
  80d7bc:	21800226 	beq	r4,r6,80d7c8 <__divdf3+0x84>
  80d7c0:	00800084 	movi	r2,2
  80d7c4:	2080141e 	bne	r4,r2,80d818 <__divdf3+0xd4>
  80d7c8:	29000926 	beq	r5,r4,80d7f0 <__divdf3+0xac>
  80d7cc:	9809883a 	mov	r4,r19
  80d7d0:	0803f700 	call	803f70 <__pack_d>
  80d7d4:	dfc01217 	ldw	ra,72(sp)
  80d7d8:	dcc01117 	ldw	r19,68(sp)
  80d7dc:	dc801017 	ldw	r18,64(sp)
  80d7e0:	dc400f17 	ldw	r17,60(sp)
  80d7e4:	dc000e17 	ldw	r16,56(sp)
  80d7e8:	dec01304 	addi	sp,sp,76
  80d7ec:	f800283a 	ret
  80d7f0:	01002074 	movhi	r4,129
  80d7f4:	21072d04 	addi	r4,r4,7348
  80d7f8:	0803f700 	call	803f70 <__pack_d>
  80d7fc:	dfc01217 	ldw	ra,72(sp)
  80d800:	dcc01117 	ldw	r19,68(sp)
  80d804:	dc801017 	ldw	r18,64(sp)
  80d808:	dc400f17 	ldw	r17,60(sp)
  80d80c:	dc000e17 	ldw	r16,56(sp)
  80d810:	dec01304 	addi	sp,sp,76
  80d814:	f800283a 	ret
  80d818:	29805b26 	beq	r5,r6,80d988 <__divdf3+0x244>
  80d81c:	28802d26 	beq	r5,r2,80d8d4 <__divdf3+0x190>
  80d820:	d8c00617 	ldw	r3,24(sp)
  80d824:	d8800b17 	ldw	r2,44(sp)
  80d828:	d9c00817 	ldw	r7,32(sp)
  80d82c:	dc400d17 	ldw	r17,52(sp)
  80d830:	188bc83a 	sub	r5,r3,r2
  80d834:	d9800717 	ldw	r6,28(sp)
  80d838:	dc000c17 	ldw	r16,48(sp)
  80d83c:	d9400615 	stw	r5,24(sp)
  80d840:	3c403836 	bltu	r7,r17,80d924 <__divdf3+0x1e0>
  80d844:	89c03626 	beq	r17,r7,80d920 <__divdf3+0x1dc>
  80d848:	0015883a 	mov	r10,zero
  80d84c:	001d883a 	mov	r14,zero
  80d850:	02c40034 	movhi	r11,4096
  80d854:	001f883a 	mov	r15,zero
  80d858:	003f883a 	mov	ra,zero
  80d85c:	04800f44 	movi	r18,61
  80d860:	00000f06 	br	80d8a0 <__divdf3+0x15c>
  80d864:	601d883a 	mov	r14,r12
  80d868:	681f883a 	mov	r15,r13
  80d86c:	400d883a 	mov	r6,r8
  80d870:	100f883a 	mov	r7,r2
  80d874:	3191883a 	add	r8,r6,r6
  80d878:	5808d07a 	srli	r4,r11,1
  80d87c:	4185803a 	cmpltu	r2,r8,r6
  80d880:	39d3883a 	add	r9,r7,r7
  80d884:	28c6b03a 	or	r3,r5,r3
  80d888:	1245883a 	add	r2,r2,r9
  80d88c:	1815883a 	mov	r10,r3
  80d890:	2017883a 	mov	r11,r4
  80d894:	400d883a 	mov	r6,r8
  80d898:	100f883a 	mov	r7,r2
  80d89c:	fc801726 	beq	ra,r18,80d8fc <__divdf3+0x1b8>
  80d8a0:	580a97fa 	slli	r5,r11,31
  80d8a4:	5006d07a 	srli	r3,r10,1
  80d8a8:	ffc00044 	addi	ra,ra,1
  80d8ac:	3c7ff136 	bltu	r7,r17,80d874 <__divdf3+0x130>
  80d8b0:	3411c83a 	sub	r8,r6,r16
  80d8b4:	3205803a 	cmpltu	r2,r6,r8
  80d8b8:	3c53c83a 	sub	r9,r7,r17
  80d8bc:	7298b03a 	or	r12,r14,r10
  80d8c0:	7adab03a 	or	r13,r15,r11
  80d8c4:	4885c83a 	sub	r2,r9,r2
  80d8c8:	89ffe61e 	bne	r17,r7,80d864 <__divdf3+0x120>
  80d8cc:	343fe936 	bltu	r6,r16,80d874 <__divdf3+0x130>
  80d8d0:	003fe406 	br	80d864 <__divdf3+0x120>
  80d8d4:	9809883a 	mov	r4,r19
  80d8d8:	d9800415 	stw	r6,16(sp)
  80d8dc:	0803f700 	call	803f70 <__pack_d>
  80d8e0:	dfc01217 	ldw	ra,72(sp)
  80d8e4:	dcc01117 	ldw	r19,68(sp)
  80d8e8:	dc801017 	ldw	r18,64(sp)
  80d8ec:	dc400f17 	ldw	r17,60(sp)
  80d8f0:	dc000e17 	ldw	r16,56(sp)
  80d8f4:	dec01304 	addi	sp,sp,76
  80d8f8:	f800283a 	ret
  80d8fc:	00803fc4 	movi	r2,255
  80d900:	7090703a 	and	r8,r14,r2
  80d904:	00802004 	movi	r2,128
  80d908:	0007883a 	mov	r3,zero
  80d90c:	0013883a 	mov	r9,zero
  80d910:	40800d26 	beq	r8,r2,80d948 <__divdf3+0x204>
  80d914:	dbc00815 	stw	r15,32(sp)
  80d918:	db800715 	stw	r14,28(sp)
  80d91c:	003fab06 	br	80d7cc <__divdf3+0x88>
  80d920:	343fc92e 	bgeu	r6,r16,80d848 <__divdf3+0x104>
  80d924:	3185883a 	add	r2,r6,r6
  80d928:	1189803a 	cmpltu	r4,r2,r6
  80d92c:	39c7883a 	add	r3,r7,r7
  80d930:	20c9883a 	add	r4,r4,r3
  80d934:	297fffc4 	addi	r5,r5,-1
  80d938:	100d883a 	mov	r6,r2
  80d93c:	200f883a 	mov	r7,r4
  80d940:	d9400615 	stw	r5,24(sp)
  80d944:	003fc006 	br	80d848 <__divdf3+0x104>
  80d948:	483ff21e 	bne	r9,zero,80d914 <__divdf3+0x1d0>
  80d94c:	01004004 	movi	r4,256
  80d950:	7104703a 	and	r2,r14,r4
  80d954:	10c4b03a 	or	r2,r2,r3
  80d958:	103fee1e 	bne	r2,zero,80d914 <__divdf3+0x1d0>
  80d95c:	31c4b03a 	or	r2,r6,r7
  80d960:	103fec26 	beq	r2,zero,80d914 <__divdf3+0x1d0>
  80d964:	7205883a 	add	r2,r14,r8
  80d968:	1391803a 	cmpltu	r8,r2,r14
  80d96c:	43d1883a 	add	r8,r8,r15
  80d970:	013fc004 	movi	r4,-256
  80d974:	111c703a 	and	r14,r2,r4
  80d978:	401f883a 	mov	r15,r8
  80d97c:	003fe506 	br	80d914 <__divdf3+0x1d0>
  80d980:	8009883a 	mov	r4,r16
  80d984:	003f9206 	br	80d7d0 <__divdf3+0x8c>
  80d988:	9809883a 	mov	r4,r19
  80d98c:	d8000715 	stw	zero,28(sp)
  80d990:	d8000815 	stw	zero,32(sp)
  80d994:	d8000615 	stw	zero,24(sp)
  80d998:	003f8d06 	br	80d7d0 <__divdf3+0x8c>

0080d99c <__eqdf2>:
  80d99c:	deffef04 	addi	sp,sp,-68
  80d9a0:	dc400f15 	stw	r17,60(sp)
  80d9a4:	dc400404 	addi	r17,sp,16
  80d9a8:	2005883a 	mov	r2,r4
  80d9ac:	2807883a 	mov	r3,r5
  80d9b0:	dc000e15 	stw	r16,56(sp)
  80d9b4:	d809883a 	mov	r4,sp
  80d9b8:	880b883a 	mov	r5,r17
  80d9bc:	dc000904 	addi	r16,sp,36
  80d9c0:	d8c00115 	stw	r3,4(sp)
  80d9c4:	d8800015 	stw	r2,0(sp)
  80d9c8:	d9800215 	stw	r6,8(sp)
  80d9cc:	dfc01015 	stw	ra,64(sp)
  80d9d0:	d9c00315 	stw	r7,12(sp)
  80d9d4:	08042840 	call	804284 <__unpack_d>
  80d9d8:	d9000204 	addi	r4,sp,8
  80d9dc:	800b883a 	mov	r5,r16
  80d9e0:	08042840 	call	804284 <__unpack_d>
  80d9e4:	d8800417 	ldw	r2,16(sp)
  80d9e8:	00c00044 	movi	r3,1
  80d9ec:	180d883a 	mov	r6,r3
  80d9f0:	1880062e 	bgeu	r3,r2,80da0c <__eqdf2+0x70>
  80d9f4:	d8800917 	ldw	r2,36(sp)
  80d9f8:	8809883a 	mov	r4,r17
  80d9fc:	800b883a 	mov	r5,r16
  80da00:	1880022e 	bgeu	r3,r2,80da0c <__eqdf2+0x70>
  80da04:	08043bc0 	call	8043bc <__fpcmp_parts_d>
  80da08:	100d883a 	mov	r6,r2
  80da0c:	3005883a 	mov	r2,r6
  80da10:	dfc01017 	ldw	ra,64(sp)
  80da14:	dc400f17 	ldw	r17,60(sp)
  80da18:	dc000e17 	ldw	r16,56(sp)
  80da1c:	dec01104 	addi	sp,sp,68
  80da20:	f800283a 	ret

0080da24 <__nedf2>:
  80da24:	deffef04 	addi	sp,sp,-68
  80da28:	dc400f15 	stw	r17,60(sp)
  80da2c:	dc400404 	addi	r17,sp,16
  80da30:	2005883a 	mov	r2,r4
  80da34:	2807883a 	mov	r3,r5
  80da38:	dc000e15 	stw	r16,56(sp)
  80da3c:	d809883a 	mov	r4,sp
  80da40:	880b883a 	mov	r5,r17
  80da44:	dc000904 	addi	r16,sp,36
  80da48:	d8c00115 	stw	r3,4(sp)
  80da4c:	d8800015 	stw	r2,0(sp)
  80da50:	d9800215 	stw	r6,8(sp)
  80da54:	dfc01015 	stw	ra,64(sp)
  80da58:	d9c00315 	stw	r7,12(sp)
  80da5c:	08042840 	call	804284 <__unpack_d>
  80da60:	d9000204 	addi	r4,sp,8
  80da64:	800b883a 	mov	r5,r16
  80da68:	08042840 	call	804284 <__unpack_d>
  80da6c:	d8800417 	ldw	r2,16(sp)
  80da70:	00c00044 	movi	r3,1
  80da74:	180d883a 	mov	r6,r3
  80da78:	1880062e 	bgeu	r3,r2,80da94 <__nedf2+0x70>
  80da7c:	d8800917 	ldw	r2,36(sp)
  80da80:	8809883a 	mov	r4,r17
  80da84:	800b883a 	mov	r5,r16
  80da88:	1880022e 	bgeu	r3,r2,80da94 <__nedf2+0x70>
  80da8c:	08043bc0 	call	8043bc <__fpcmp_parts_d>
  80da90:	100d883a 	mov	r6,r2
  80da94:	3005883a 	mov	r2,r6
  80da98:	dfc01017 	ldw	ra,64(sp)
  80da9c:	dc400f17 	ldw	r17,60(sp)
  80daa0:	dc000e17 	ldw	r16,56(sp)
  80daa4:	dec01104 	addi	sp,sp,68
  80daa8:	f800283a 	ret

0080daac <__gedf2>:
  80daac:	deffef04 	addi	sp,sp,-68
  80dab0:	dc400f15 	stw	r17,60(sp)
  80dab4:	dc400404 	addi	r17,sp,16
  80dab8:	2005883a 	mov	r2,r4
  80dabc:	2807883a 	mov	r3,r5
  80dac0:	dc000e15 	stw	r16,56(sp)
  80dac4:	d809883a 	mov	r4,sp
  80dac8:	880b883a 	mov	r5,r17
  80dacc:	dc000904 	addi	r16,sp,36
  80dad0:	d8c00115 	stw	r3,4(sp)
  80dad4:	d8800015 	stw	r2,0(sp)
  80dad8:	d9800215 	stw	r6,8(sp)
  80dadc:	dfc01015 	stw	ra,64(sp)
  80dae0:	d9c00315 	stw	r7,12(sp)
  80dae4:	08042840 	call	804284 <__unpack_d>
  80dae8:	d9000204 	addi	r4,sp,8
  80daec:	800b883a 	mov	r5,r16
  80daf0:	08042840 	call	804284 <__unpack_d>
  80daf4:	d8800417 	ldw	r2,16(sp)
  80daf8:	00c00044 	movi	r3,1
  80dafc:	01bfffc4 	movi	r6,-1
  80db00:	1880062e 	bgeu	r3,r2,80db1c <__gedf2+0x70>
  80db04:	d8800917 	ldw	r2,36(sp)
  80db08:	8809883a 	mov	r4,r17
  80db0c:	800b883a 	mov	r5,r16
  80db10:	1880022e 	bgeu	r3,r2,80db1c <__gedf2+0x70>
  80db14:	08043bc0 	call	8043bc <__fpcmp_parts_d>
  80db18:	100d883a 	mov	r6,r2
  80db1c:	3005883a 	mov	r2,r6
  80db20:	dfc01017 	ldw	ra,64(sp)
  80db24:	dc400f17 	ldw	r17,60(sp)
  80db28:	dc000e17 	ldw	r16,56(sp)
  80db2c:	dec01104 	addi	sp,sp,68
  80db30:	f800283a 	ret

0080db34 <__ltdf2>:
  80db34:	deffef04 	addi	sp,sp,-68
  80db38:	dc400f15 	stw	r17,60(sp)
  80db3c:	dc400404 	addi	r17,sp,16
  80db40:	2005883a 	mov	r2,r4
  80db44:	2807883a 	mov	r3,r5
  80db48:	dc000e15 	stw	r16,56(sp)
  80db4c:	d809883a 	mov	r4,sp
  80db50:	880b883a 	mov	r5,r17
  80db54:	dc000904 	addi	r16,sp,36
  80db58:	d8c00115 	stw	r3,4(sp)
  80db5c:	d8800015 	stw	r2,0(sp)
  80db60:	d9800215 	stw	r6,8(sp)
  80db64:	dfc01015 	stw	ra,64(sp)
  80db68:	d9c00315 	stw	r7,12(sp)
  80db6c:	08042840 	call	804284 <__unpack_d>
  80db70:	d9000204 	addi	r4,sp,8
  80db74:	800b883a 	mov	r5,r16
  80db78:	08042840 	call	804284 <__unpack_d>
  80db7c:	d8800417 	ldw	r2,16(sp)
  80db80:	00c00044 	movi	r3,1
  80db84:	180d883a 	mov	r6,r3
  80db88:	1880062e 	bgeu	r3,r2,80dba4 <__ltdf2+0x70>
  80db8c:	d8800917 	ldw	r2,36(sp)
  80db90:	8809883a 	mov	r4,r17
  80db94:	800b883a 	mov	r5,r16
  80db98:	1880022e 	bgeu	r3,r2,80dba4 <__ltdf2+0x70>
  80db9c:	08043bc0 	call	8043bc <__fpcmp_parts_d>
  80dba0:	100d883a 	mov	r6,r2
  80dba4:	3005883a 	mov	r2,r6
  80dba8:	dfc01017 	ldw	ra,64(sp)
  80dbac:	dc400f17 	ldw	r17,60(sp)
  80dbb0:	dc000e17 	ldw	r16,56(sp)
  80dbb4:	dec01104 	addi	sp,sp,68
  80dbb8:	f800283a 	ret

0080dbbc <__muldi3>:
  80dbbc:	defff204 	addi	sp,sp,-56
  80dbc0:	df000c15 	stw	fp,48(sp)
  80dbc4:	3038d43a 	srli	fp,r6,16
  80dbc8:	dd000815 	stw	r20,32(sp)
  80dbcc:	dc400515 	stw	r17,20(sp)
  80dbd0:	2028d43a 	srli	r20,r4,16
  80dbd4:	247fffcc 	andi	r17,r4,65535
  80dbd8:	dc000415 	stw	r16,16(sp)
  80dbdc:	343fffcc 	andi	r16,r6,65535
  80dbe0:	dcc00715 	stw	r19,28(sp)
  80dbe4:	d9000015 	stw	r4,0(sp)
  80dbe8:	2827883a 	mov	r19,r5
  80dbec:	8809883a 	mov	r4,r17
  80dbf0:	d9400115 	stw	r5,4(sp)
  80dbf4:	800b883a 	mov	r5,r16
  80dbf8:	d9800215 	stw	r6,8(sp)
  80dbfc:	dfc00d15 	stw	ra,52(sp)
  80dc00:	d9c00315 	stw	r7,12(sp)
  80dc04:	dd800a15 	stw	r22,40(sp)
  80dc08:	dd400915 	stw	r21,36(sp)
  80dc0c:	302d883a 	mov	r22,r6
  80dc10:	ddc00b15 	stw	r23,44(sp)
  80dc14:	dc800615 	stw	r18,24(sp)
  80dc18:	0803eb80 	call	803eb8 <__mulsi3>
  80dc1c:	8809883a 	mov	r4,r17
  80dc20:	e00b883a 	mov	r5,fp
  80dc24:	102b883a 	mov	r21,r2
  80dc28:	0803eb80 	call	803eb8 <__mulsi3>
  80dc2c:	800b883a 	mov	r5,r16
  80dc30:	a009883a 	mov	r4,r20
  80dc34:	1023883a 	mov	r17,r2
  80dc38:	0803eb80 	call	803eb8 <__mulsi3>
  80dc3c:	a009883a 	mov	r4,r20
  80dc40:	e00b883a 	mov	r5,fp
  80dc44:	1021883a 	mov	r16,r2
  80dc48:	0803eb80 	call	803eb8 <__mulsi3>
  80dc4c:	a8ffffcc 	andi	r3,r21,65535
  80dc50:	a82ad43a 	srli	r21,r21,16
  80dc54:	8c23883a 	add	r17,r17,r16
  80dc58:	1011883a 	mov	r8,r2
  80dc5c:	ac6b883a 	add	r21,r21,r17
  80dc60:	a804943a 	slli	r2,r21,16
  80dc64:	b009883a 	mov	r4,r22
  80dc68:	980b883a 	mov	r5,r19
  80dc6c:	10c7883a 	add	r3,r2,r3
  80dc70:	a812d43a 	srli	r9,r21,16
  80dc74:	180d883a 	mov	r6,r3
  80dc78:	ac00022e 	bgeu	r21,r16,80dc84 <__muldi3+0xc8>
  80dc7c:	00800074 	movhi	r2,1
  80dc80:	4091883a 	add	r8,r8,r2
  80dc84:	4267883a 	add	r19,r8,r9
  80dc88:	302d883a 	mov	r22,r6
  80dc8c:	0803eb80 	call	803eb8 <__mulsi3>
  80dc90:	d9400317 	ldw	r5,12(sp)
  80dc94:	d9000017 	ldw	r4,0(sp)
  80dc98:	1023883a 	mov	r17,r2
  80dc9c:	0803eb80 	call	803eb8 <__mulsi3>
  80dca0:	14cb883a 	add	r5,r2,r19
  80dca4:	894b883a 	add	r5,r17,r5
  80dca8:	b005883a 	mov	r2,r22
  80dcac:	2807883a 	mov	r3,r5
  80dcb0:	dfc00d17 	ldw	ra,52(sp)
  80dcb4:	df000c17 	ldw	fp,48(sp)
  80dcb8:	ddc00b17 	ldw	r23,44(sp)
  80dcbc:	dd800a17 	ldw	r22,40(sp)
  80dcc0:	dd400917 	ldw	r21,36(sp)
  80dcc4:	dd000817 	ldw	r20,32(sp)
  80dcc8:	dcc00717 	ldw	r19,28(sp)
  80dccc:	dc800617 	ldw	r18,24(sp)
  80dcd0:	dc400517 	ldw	r17,20(sp)
  80dcd4:	dc000417 	ldw	r16,16(sp)
  80dcd8:	dec00e04 	addi	sp,sp,56
  80dcdc:	f800283a 	ret

0080dce0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80dce0:	defff804 	addi	sp,sp,-32
  80dce4:	dfc00715 	stw	ra,28(sp)
  80dce8:	df000615 	stw	fp,24(sp)
  80dcec:	df000604 	addi	fp,sp,24
  80dcf0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80dcf4:	e0bffc17 	ldw	r2,-16(fp)
  80dcf8:	1004803a 	cmplt	r2,r2,zero
  80dcfc:	1000091e 	bne	r2,zero,80dd24 <close+0x44>
  80dd00:	e13ffc17 	ldw	r4,-16(fp)
  80dd04:	01400304 	movi	r5,12
  80dd08:	0803eb80 	call	803eb8 <__mulsi3>
  80dd0c:	1007883a 	mov	r3,r2
  80dd10:	00802074 	movhi	r2,129
  80dd14:	108cdb04 	addi	r2,r2,13164
  80dd18:	1887883a 	add	r3,r3,r2
  80dd1c:	e0ffff15 	stw	r3,-4(fp)
  80dd20:	00000106 	br	80dd28 <close+0x48>
  80dd24:	e03fff15 	stw	zero,-4(fp)
  80dd28:	e0bfff17 	ldw	r2,-4(fp)
  80dd2c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80dd30:	e0bffb17 	ldw	r2,-20(fp)
  80dd34:	1005003a 	cmpeq	r2,r2,zero
  80dd38:	10001d1e 	bne	r2,zero,80ddb0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80dd3c:	e0bffb17 	ldw	r2,-20(fp)
  80dd40:	10800017 	ldw	r2,0(r2)
  80dd44:	10800417 	ldw	r2,16(r2)
  80dd48:	1005003a 	cmpeq	r2,r2,zero
  80dd4c:	1000071e 	bne	r2,zero,80dd6c <close+0x8c>
  80dd50:	e0bffb17 	ldw	r2,-20(fp)
  80dd54:	10800017 	ldw	r2,0(r2)
  80dd58:	10800417 	ldw	r2,16(r2)
  80dd5c:	e13ffb17 	ldw	r4,-20(fp)
  80dd60:	103ee83a 	callr	r2
  80dd64:	e0bffe15 	stw	r2,-8(fp)
  80dd68:	00000106 	br	80dd70 <close+0x90>
  80dd6c:	e03ffe15 	stw	zero,-8(fp)
  80dd70:	e0bffe17 	ldw	r2,-8(fp)
  80dd74:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80dd78:	e13ffc17 	ldw	r4,-16(fp)
  80dd7c:	080e7580 	call	80e758 <alt_release_fd>
    if (rval < 0)
  80dd80:	e0bffa17 	ldw	r2,-24(fp)
  80dd84:	1004403a 	cmpge	r2,r2,zero
  80dd88:	1000071e 	bne	r2,zero,80dda8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80dd8c:	080dde00 	call	80dde0 <alt_get_errno>
  80dd90:	e0fffa17 	ldw	r3,-24(fp)
  80dd94:	00c7c83a 	sub	r3,zero,r3
  80dd98:	10c00015 	stw	r3,0(r2)
      return -1;
  80dd9c:	00bfffc4 	movi	r2,-1
  80dda0:	e0bffd15 	stw	r2,-12(fp)
  80dda4:	00000806 	br	80ddc8 <close+0xe8>
    }
    return 0;
  80dda8:	e03ffd15 	stw	zero,-12(fp)
  80ddac:	00000606 	br	80ddc8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ddb0:	080dde00 	call	80dde0 <alt_get_errno>
  80ddb4:	1007883a 	mov	r3,r2
  80ddb8:	00801444 	movi	r2,81
  80ddbc:	18800015 	stw	r2,0(r3)
    return -1;
  80ddc0:	00bfffc4 	movi	r2,-1
  80ddc4:	e0bffd15 	stw	r2,-12(fp)
  80ddc8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80ddcc:	e037883a 	mov	sp,fp
  80ddd0:	dfc00117 	ldw	ra,4(sp)
  80ddd4:	df000017 	ldw	fp,0(sp)
  80ddd8:	dec00204 	addi	sp,sp,8
  80dddc:	f800283a 	ret

0080dde0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dde0:	defffd04 	addi	sp,sp,-12
  80dde4:	dfc00215 	stw	ra,8(sp)
  80dde8:	df000115 	stw	fp,4(sp)
  80ddec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ddf0:	00802074 	movhi	r2,129
  80ddf4:	1091b704 	addi	r2,r2,18140
  80ddf8:	10800017 	ldw	r2,0(r2)
  80ddfc:	1005003a 	cmpeq	r2,r2,zero
  80de00:	1000061e 	bne	r2,zero,80de1c <alt_get_errno+0x3c>
  80de04:	00802074 	movhi	r2,129
  80de08:	1091b704 	addi	r2,r2,18140
  80de0c:	10800017 	ldw	r2,0(r2)
  80de10:	103ee83a 	callr	r2
  80de14:	e0bfff15 	stw	r2,-4(fp)
  80de18:	00000306 	br	80de28 <alt_get_errno+0x48>
  80de1c:	00802074 	movhi	r2,129
  80de20:	10993204 	addi	r2,r2,25800
  80de24:	e0bfff15 	stw	r2,-4(fp)
  80de28:	e0bfff17 	ldw	r2,-4(fp)
}
  80de2c:	e037883a 	mov	sp,fp
  80de30:	dfc00117 	ldw	ra,4(sp)
  80de34:	df000017 	ldw	fp,0(sp)
  80de38:	dec00204 	addi	sp,sp,8
  80de3c:	f800283a 	ret

0080de40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80de40:	defffc04 	addi	sp,sp,-16
  80de44:	df000315 	stw	fp,12(sp)
  80de48:	df000304 	addi	fp,sp,12
  80de4c:	e13ffd15 	stw	r4,-12(fp)
  80de50:	e17ffe15 	stw	r5,-8(fp)
  80de54:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80de58:	e0bfff17 	ldw	r2,-4(fp)
}
  80de5c:	e037883a 	mov	sp,fp
  80de60:	df000017 	ldw	fp,0(sp)
  80de64:	dec00104 	addi	sp,sp,4
  80de68:	f800283a 	ret

0080de6c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80de6c:	defffd04 	addi	sp,sp,-12
  80de70:	df000215 	stw	fp,8(sp)
  80de74:	df000204 	addi	fp,sp,8
  80de78:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80de7c:	e0bfff17 	ldw	r2,-4(fp)
  80de80:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80de84:	e0bffe17 	ldw	r2,-8(fp)
  80de88:	1005003a 	cmpeq	r2,r2,zero
  80de8c:	1000021e 	bne	r2,zero,80de98 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80de90:	002af070 	cmpltui	zero,zero,43969
  80de94:	00000106 	br	80de9c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80de98:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80de9c:	e037883a 	mov	sp,fp
  80dea0:	df000017 	ldw	fp,0(sp)
  80dea4:	dec00104 	addi	sp,sp,4
  80dea8:	f800283a 	ret

0080deac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80deac:	defffd04 	addi	sp,sp,-12
  80deb0:	dfc00215 	stw	ra,8(sp)
  80deb4:	df000115 	stw	fp,4(sp)
  80deb8:	df000104 	addi	fp,sp,4
  80debc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80dec0:	e13fff17 	ldw	r4,-4(fp)
  80dec4:	080de6c0 	call	80de6c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80dec8:	003fff06 	br	80dec8 <_exit+0x1c>

0080decc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80decc:	defff904 	addi	sp,sp,-28
  80ded0:	dfc00615 	stw	ra,24(sp)
  80ded4:	df000515 	stw	fp,20(sp)
  80ded8:	df000504 	addi	fp,sp,20
  80dedc:	e13ffc15 	stw	r4,-16(fp)
  80dee0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dee4:	e0bffc17 	ldw	r2,-16(fp)
  80dee8:	1004803a 	cmplt	r2,r2,zero
  80deec:	1000091e 	bne	r2,zero,80df14 <fstat+0x48>
  80def0:	e13ffc17 	ldw	r4,-16(fp)
  80def4:	01400304 	movi	r5,12
  80def8:	0803eb80 	call	803eb8 <__mulsi3>
  80defc:	1007883a 	mov	r3,r2
  80df00:	00802074 	movhi	r2,129
  80df04:	108cdb04 	addi	r2,r2,13164
  80df08:	1887883a 	add	r3,r3,r2
  80df0c:	e0ffff15 	stw	r3,-4(fp)
  80df10:	00000106 	br	80df18 <fstat+0x4c>
  80df14:	e03fff15 	stw	zero,-4(fp)
  80df18:	e0bfff17 	ldw	r2,-4(fp)
  80df1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80df20:	e0bffb17 	ldw	r2,-20(fp)
  80df24:	1005003a 	cmpeq	r2,r2,zero
  80df28:	1000121e 	bne	r2,zero,80df74 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80df2c:	e0bffb17 	ldw	r2,-20(fp)
  80df30:	10800017 	ldw	r2,0(r2)
  80df34:	10800817 	ldw	r2,32(r2)
  80df38:	1005003a 	cmpeq	r2,r2,zero
  80df3c:	1000081e 	bne	r2,zero,80df60 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80df40:	e0bffb17 	ldw	r2,-20(fp)
  80df44:	10800017 	ldw	r2,0(r2)
  80df48:	10800817 	ldw	r2,32(r2)
  80df4c:	e13ffb17 	ldw	r4,-20(fp)
  80df50:	e17ffd17 	ldw	r5,-12(fp)
  80df54:	103ee83a 	callr	r2
  80df58:	e0bffe15 	stw	r2,-8(fp)
  80df5c:	00000b06 	br	80df8c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80df60:	e0fffd17 	ldw	r3,-12(fp)
  80df64:	00880004 	movi	r2,8192
  80df68:	18800115 	stw	r2,4(r3)
      return 0;
  80df6c:	e03ffe15 	stw	zero,-8(fp)
  80df70:	00000606 	br	80df8c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80df74:	080dfa40 	call	80dfa4 <alt_get_errno>
  80df78:	1007883a 	mov	r3,r2
  80df7c:	00801444 	movi	r2,81
  80df80:	18800015 	stw	r2,0(r3)
    return -1;
  80df84:	00bfffc4 	movi	r2,-1
  80df88:	e0bffe15 	stw	r2,-8(fp)
  80df8c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80df90:	e037883a 	mov	sp,fp
  80df94:	dfc00117 	ldw	ra,4(sp)
  80df98:	df000017 	ldw	fp,0(sp)
  80df9c:	dec00204 	addi	sp,sp,8
  80dfa0:	f800283a 	ret

0080dfa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dfa4:	defffd04 	addi	sp,sp,-12
  80dfa8:	dfc00215 	stw	ra,8(sp)
  80dfac:	df000115 	stw	fp,4(sp)
  80dfb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dfb4:	00802074 	movhi	r2,129
  80dfb8:	1091b704 	addi	r2,r2,18140
  80dfbc:	10800017 	ldw	r2,0(r2)
  80dfc0:	1005003a 	cmpeq	r2,r2,zero
  80dfc4:	1000061e 	bne	r2,zero,80dfe0 <alt_get_errno+0x3c>
  80dfc8:	00802074 	movhi	r2,129
  80dfcc:	1091b704 	addi	r2,r2,18140
  80dfd0:	10800017 	ldw	r2,0(r2)
  80dfd4:	103ee83a 	callr	r2
  80dfd8:	e0bfff15 	stw	r2,-4(fp)
  80dfdc:	00000306 	br	80dfec <alt_get_errno+0x48>
  80dfe0:	00802074 	movhi	r2,129
  80dfe4:	10993204 	addi	r2,r2,25800
  80dfe8:	e0bfff15 	stw	r2,-4(fp)
  80dfec:	e0bfff17 	ldw	r2,-4(fp)
}
  80dff0:	e037883a 	mov	sp,fp
  80dff4:	dfc00117 	ldw	ra,4(sp)
  80dff8:	df000017 	ldw	fp,0(sp)
  80dffc:	dec00204 	addi	sp,sp,8
  80e000:	f800283a 	ret

0080e004 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80e004:	deffef04 	addi	sp,sp,-68
  80e008:	df001015 	stw	fp,64(sp)
  80e00c:	df001004 	addi	fp,sp,64
  80e010:	e13ffc15 	stw	r4,-16(fp)
  80e014:	e17ffd15 	stw	r5,-12(fp)
  80e018:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80e01c:	00bffa84 	movi	r2,-22
  80e020:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e024:	e0bffc17 	ldw	r2,-16(fp)
  80e028:	10800828 	cmpgeui	r2,r2,32
  80e02c:	1000601e 	bne	r2,zero,80e1b0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e030:	0005303a 	rdctl	r2,status
  80e034:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e038:	e0fff917 	ldw	r3,-28(fp)
  80e03c:	00bfff84 	movi	r2,-2
  80e040:	1884703a 	and	r2,r3,r2
  80e044:	1001703a 	wrctl	status,r2
  
  return context;
  80e048:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80e04c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80e050:	e0bffc17 	ldw	r2,-16(fp)
  80e054:	00c02074 	movhi	r3,129
  80e058:	18d94e04 	addi	r3,r3,25912
  80e05c:	100490fa 	slli	r2,r2,3
  80e060:	10c7883a 	add	r3,r2,r3
  80e064:	e0bffe17 	ldw	r2,-8(fp)
  80e068:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80e06c:	e0bffc17 	ldw	r2,-16(fp)
  80e070:	00c02074 	movhi	r3,129
  80e074:	18d94e04 	addi	r3,r3,25912
  80e078:	100490fa 	slli	r2,r2,3
  80e07c:	10c5883a 	add	r2,r2,r3
  80e080:	10c00104 	addi	r3,r2,4
  80e084:	e0bffd17 	ldw	r2,-12(fp)
  80e088:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80e08c:	e0bffe17 	ldw	r2,-8(fp)
  80e090:	1005003a 	cmpeq	r2,r2,zero
  80e094:	1000201e 	bne	r2,zero,80e118 <alt_irq_register+0x114>
  80e098:	e0bffc17 	ldw	r2,-16(fp)
  80e09c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0a0:	0005303a 	rdctl	r2,status
  80e0a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0a8:	e0fff617 	ldw	r3,-40(fp)
  80e0ac:	00bfff84 	movi	r2,-2
  80e0b0:	1884703a 	and	r2,r3,r2
  80e0b4:	1001703a 	wrctl	status,r2
  
  return context;
  80e0b8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e0bc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80e0c0:	e0fff717 	ldw	r3,-36(fp)
  80e0c4:	00800044 	movi	r2,1
  80e0c8:	10c4983a 	sll	r2,r2,r3
  80e0cc:	1007883a 	mov	r3,r2
  80e0d0:	00802074 	movhi	r2,129
  80e0d4:	10993304 	addi	r2,r2,25804
  80e0d8:	10800017 	ldw	r2,0(r2)
  80e0dc:	1886b03a 	or	r3,r3,r2
  80e0e0:	00802074 	movhi	r2,129
  80e0e4:	10993304 	addi	r2,r2,25804
  80e0e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e0ec:	00802074 	movhi	r2,129
  80e0f0:	10993304 	addi	r2,r2,25804
  80e0f4:	10800017 	ldw	r2,0(r2)
  80e0f8:	100170fa 	wrctl	ienable,r2
  80e0fc:	e0bff817 	ldw	r2,-32(fp)
  80e100:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e104:	e0bff517 	ldw	r2,-44(fp)
  80e108:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e10c:	0005883a 	mov	r2,zero
  80e110:	e0bfff15 	stw	r2,-4(fp)
  80e114:	00002006 	br	80e198 <alt_irq_register+0x194>
  80e118:	e0bffc17 	ldw	r2,-16(fp)
  80e11c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e120:	0005303a 	rdctl	r2,status
  80e124:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e128:	e0fff217 	ldw	r3,-56(fp)
  80e12c:	00bfff84 	movi	r2,-2
  80e130:	1884703a 	and	r2,r3,r2
  80e134:	1001703a 	wrctl	status,r2
  
  return context;
  80e138:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e13c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80e140:	e0fff317 	ldw	r3,-52(fp)
  80e144:	00800044 	movi	r2,1
  80e148:	10c4983a 	sll	r2,r2,r3
  80e14c:	0084303a 	nor	r2,zero,r2
  80e150:	1007883a 	mov	r3,r2
  80e154:	00802074 	movhi	r2,129
  80e158:	10993304 	addi	r2,r2,25804
  80e15c:	10800017 	ldw	r2,0(r2)
  80e160:	1886703a 	and	r3,r3,r2
  80e164:	00802074 	movhi	r2,129
  80e168:	10993304 	addi	r2,r2,25804
  80e16c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e170:	00802074 	movhi	r2,129
  80e174:	10993304 	addi	r2,r2,25804
  80e178:	10800017 	ldw	r2,0(r2)
  80e17c:	100170fa 	wrctl	ienable,r2
  80e180:	e0bff417 	ldw	r2,-48(fp)
  80e184:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e188:	e0bff117 	ldw	r2,-60(fp)
  80e18c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e190:	0005883a 	mov	r2,zero
  80e194:	e0bfff15 	stw	r2,-4(fp)
  80e198:	e0bfff17 	ldw	r2,-4(fp)
  80e19c:	e0bffb15 	stw	r2,-20(fp)
  80e1a0:	e0bffa17 	ldw	r2,-24(fp)
  80e1a4:	e0bff015 	stw	r2,-64(fp)
  80e1a8:	e0bff017 	ldw	r2,-64(fp)
  80e1ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80e1b0:	e0bffb17 	ldw	r2,-20(fp)
}
  80e1b4:	e037883a 	mov	sp,fp
  80e1b8:	df000017 	ldw	fp,0(sp)
  80e1bc:	dec00104 	addi	sp,sp,4
  80e1c0:	f800283a 	ret

0080e1c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e1c4:	deffeb04 	addi	sp,sp,-84
  80e1c8:	dfc01415 	stw	ra,80(sp)
  80e1cc:	df001315 	stw	fp,76(sp)
  80e1d0:	df001304 	addi	fp,sp,76
  80e1d4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e1d8:	e0bffd17 	ldw	r2,-12(fp)
  80e1dc:	1004803a 	cmplt	r2,r2,zero
  80e1e0:	1000091e 	bne	r2,zero,80e208 <isatty+0x44>
  80e1e4:	e13ffd17 	ldw	r4,-12(fp)
  80e1e8:	01400304 	movi	r5,12
  80e1ec:	0803eb80 	call	803eb8 <__mulsi3>
  80e1f0:	1007883a 	mov	r3,r2
  80e1f4:	00802074 	movhi	r2,129
  80e1f8:	108cdb04 	addi	r2,r2,13164
  80e1fc:	1887883a 	add	r3,r3,r2
  80e200:	e0ffff15 	stw	r3,-4(fp)
  80e204:	00000106 	br	80e20c <isatty+0x48>
  80e208:	e03fff15 	stw	zero,-4(fp)
  80e20c:	e0bfff17 	ldw	r2,-4(fp)
  80e210:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80e214:	e0bfed17 	ldw	r2,-76(fp)
  80e218:	1005003a 	cmpeq	r2,r2,zero
  80e21c:	10000f1e 	bne	r2,zero,80e25c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e220:	e0bfed17 	ldw	r2,-76(fp)
  80e224:	10800017 	ldw	r2,0(r2)
  80e228:	10800817 	ldw	r2,32(r2)
  80e22c:	1004c03a 	cmpne	r2,r2,zero
  80e230:	1000031e 	bne	r2,zero,80e240 <isatty+0x7c>
    {
      return 1;
  80e234:	00800044 	movi	r2,1
  80e238:	e0bffe15 	stw	r2,-8(fp)
  80e23c:	00000c06 	br	80e270 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e240:	e17fee04 	addi	r5,fp,-72
  80e244:	e13ffd17 	ldw	r4,-12(fp)
  80e248:	080decc0 	call	80decc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e24c:	e0bfef17 	ldw	r2,-68(fp)
  80e250:	10880020 	cmpeqi	r2,r2,8192
  80e254:	e0bffe15 	stw	r2,-8(fp)
  80e258:	00000506 	br	80e270 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e25c:	080e2880 	call	80e288 <alt_get_errno>
  80e260:	1007883a 	mov	r3,r2
  80e264:	00801444 	movi	r2,81
  80e268:	18800015 	stw	r2,0(r3)
    return 0;
  80e26c:	e03ffe15 	stw	zero,-8(fp)
  80e270:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e274:	e037883a 	mov	sp,fp
  80e278:	dfc00117 	ldw	ra,4(sp)
  80e27c:	df000017 	ldw	fp,0(sp)
  80e280:	dec00204 	addi	sp,sp,8
  80e284:	f800283a 	ret

0080e288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e288:	defffd04 	addi	sp,sp,-12
  80e28c:	dfc00215 	stw	ra,8(sp)
  80e290:	df000115 	stw	fp,4(sp)
  80e294:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e298:	00802074 	movhi	r2,129
  80e29c:	1091b704 	addi	r2,r2,18140
  80e2a0:	10800017 	ldw	r2,0(r2)
  80e2a4:	1005003a 	cmpeq	r2,r2,zero
  80e2a8:	1000061e 	bne	r2,zero,80e2c4 <alt_get_errno+0x3c>
  80e2ac:	00802074 	movhi	r2,129
  80e2b0:	1091b704 	addi	r2,r2,18140
  80e2b4:	10800017 	ldw	r2,0(r2)
  80e2b8:	103ee83a 	callr	r2
  80e2bc:	e0bfff15 	stw	r2,-4(fp)
  80e2c0:	00000306 	br	80e2d0 <alt_get_errno+0x48>
  80e2c4:	00802074 	movhi	r2,129
  80e2c8:	10993204 	addi	r2,r2,25800
  80e2cc:	e0bfff15 	stw	r2,-4(fp)
  80e2d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e2d4:	e037883a 	mov	sp,fp
  80e2d8:	dfc00117 	ldw	ra,4(sp)
  80e2dc:	df000017 	ldw	fp,0(sp)
  80e2e0:	dec00204 	addi	sp,sp,8
  80e2e4:	f800283a 	ret

0080e2e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e2e8:	defffe04 	addi	sp,sp,-8
  80e2ec:	dfc00115 	stw	ra,4(sp)
  80e2f0:	df000015 	stw	fp,0(sp)
  80e2f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e2f8:	01002074 	movhi	r4,129
  80e2fc:	2111be04 	addi	r4,r4,18168
  80e300:	01402074 	movhi	r5,129
  80e304:	294a8c04 	addi	r5,r5,10800
  80e308:	01802074 	movhi	r6,129
  80e30c:	3191be04 	addi	r6,r6,18168
  80e310:	080e3680 	call	80e368 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e314:	01002034 	movhi	r4,128
  80e318:	21000804 	addi	r4,r4,32
  80e31c:	01402034 	movhi	r5,128
  80e320:	29400804 	addi	r5,r5,32
  80e324:	01802034 	movhi	r6,128
  80e328:	31806d04 	addi	r6,r6,436
  80e32c:	080e3680 	call	80e368 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e330:	01002074 	movhi	r4,129
  80e334:	21066004 	addi	r4,r4,6528
  80e338:	01402074 	movhi	r5,129
  80e33c:	29466004 	addi	r5,r5,6528
  80e340:	01802074 	movhi	r6,129
  80e344:	318a8c04 	addi	r6,r6,10800
  80e348:	080e3680 	call	80e368 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e34c:	08109540 	call	810954 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e350:	0810b4c0 	call	810b4c <alt_icache_flush_all>
}
  80e354:	e037883a 	mov	sp,fp
  80e358:	dfc00117 	ldw	ra,4(sp)
  80e35c:	df000017 	ldw	fp,0(sp)
  80e360:	dec00204 	addi	sp,sp,8
  80e364:	f800283a 	ret

0080e368 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e368:	defffc04 	addi	sp,sp,-16
  80e36c:	df000315 	stw	fp,12(sp)
  80e370:	df000304 	addi	fp,sp,12
  80e374:	e13ffd15 	stw	r4,-12(fp)
  80e378:	e17ffe15 	stw	r5,-8(fp)
  80e37c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e380:	e0fffe17 	ldw	r3,-8(fp)
  80e384:	e0bffd17 	ldw	r2,-12(fp)
  80e388:	18800e26 	beq	r3,r2,80e3c4 <alt_load_section+0x5c>
  {
    while( to != end )
  80e38c:	00000a06 	br	80e3b8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80e390:	e0bffd17 	ldw	r2,-12(fp)
  80e394:	10c00017 	ldw	r3,0(r2)
  80e398:	e0bffe17 	ldw	r2,-8(fp)
  80e39c:	10c00015 	stw	r3,0(r2)
  80e3a0:	e0bffe17 	ldw	r2,-8(fp)
  80e3a4:	10800104 	addi	r2,r2,4
  80e3a8:	e0bffe15 	stw	r2,-8(fp)
  80e3ac:	e0bffd17 	ldw	r2,-12(fp)
  80e3b0:	10800104 	addi	r2,r2,4
  80e3b4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e3b8:	e0fffe17 	ldw	r3,-8(fp)
  80e3bc:	e0bfff17 	ldw	r2,-4(fp)
  80e3c0:	18bff31e 	bne	r3,r2,80e390 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80e3c4:	e037883a 	mov	sp,fp
  80e3c8:	df000017 	ldw	fp,0(sp)
  80e3cc:	dec00104 	addi	sp,sp,4
  80e3d0:	f800283a 	ret

0080e3d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e3d4:	defff804 	addi	sp,sp,-32
  80e3d8:	dfc00715 	stw	ra,28(sp)
  80e3dc:	df000615 	stw	fp,24(sp)
  80e3e0:	df000604 	addi	fp,sp,24
  80e3e4:	e13ffc15 	stw	r4,-16(fp)
  80e3e8:	e17ffd15 	stw	r5,-12(fp)
  80e3ec:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e3f0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e3f4:	e0bffc17 	ldw	r2,-16(fp)
  80e3f8:	1004803a 	cmplt	r2,r2,zero
  80e3fc:	1000091e 	bne	r2,zero,80e424 <lseek+0x50>
  80e400:	e13ffc17 	ldw	r4,-16(fp)
  80e404:	01400304 	movi	r5,12
  80e408:	0803eb80 	call	803eb8 <__mulsi3>
  80e40c:	1007883a 	mov	r3,r2
  80e410:	00802074 	movhi	r2,129
  80e414:	108cdb04 	addi	r2,r2,13164
  80e418:	1887883a 	add	r3,r3,r2
  80e41c:	e0ffff15 	stw	r3,-4(fp)
  80e420:	00000106 	br	80e428 <lseek+0x54>
  80e424:	e03fff15 	stw	zero,-4(fp)
  80e428:	e0bfff17 	ldw	r2,-4(fp)
  80e42c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80e430:	e0bffb17 	ldw	r2,-20(fp)
  80e434:	1005003a 	cmpeq	r2,r2,zero
  80e438:	1000111e 	bne	r2,zero,80e480 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e43c:	e0bffb17 	ldw	r2,-20(fp)
  80e440:	10800017 	ldw	r2,0(r2)
  80e444:	10800717 	ldw	r2,28(r2)
  80e448:	1005003a 	cmpeq	r2,r2,zero
  80e44c:	1000091e 	bne	r2,zero,80e474 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e450:	e0bffb17 	ldw	r2,-20(fp)
  80e454:	10800017 	ldw	r2,0(r2)
  80e458:	10800717 	ldw	r2,28(r2)
  80e45c:	e13ffb17 	ldw	r4,-20(fp)
  80e460:	e17ffd17 	ldw	r5,-12(fp)
  80e464:	e1bffe17 	ldw	r6,-8(fp)
  80e468:	103ee83a 	callr	r2
  80e46c:	e0bffa15 	stw	r2,-24(fp)
  80e470:	00000506 	br	80e488 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e474:	00bfde84 	movi	r2,-134
  80e478:	e0bffa15 	stw	r2,-24(fp)
  80e47c:	00000206 	br	80e488 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e480:	00bfebc4 	movi	r2,-81
  80e484:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80e488:	e0bffa17 	ldw	r2,-24(fp)
  80e48c:	1004403a 	cmpge	r2,r2,zero
  80e490:	1000071e 	bne	r2,zero,80e4b0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80e494:	080e4c80 	call	80e4c8 <alt_get_errno>
  80e498:	1007883a 	mov	r3,r2
  80e49c:	e0bffa17 	ldw	r2,-24(fp)
  80e4a0:	0085c83a 	sub	r2,zero,r2
  80e4a4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e4a8:	00bfffc4 	movi	r2,-1
  80e4ac:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80e4b0:	e0bffa17 	ldw	r2,-24(fp)
}
  80e4b4:	e037883a 	mov	sp,fp
  80e4b8:	dfc00117 	ldw	ra,4(sp)
  80e4bc:	df000017 	ldw	fp,0(sp)
  80e4c0:	dec00204 	addi	sp,sp,8
  80e4c4:	f800283a 	ret

0080e4c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e4c8:	defffd04 	addi	sp,sp,-12
  80e4cc:	dfc00215 	stw	ra,8(sp)
  80e4d0:	df000115 	stw	fp,4(sp)
  80e4d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e4d8:	00802074 	movhi	r2,129
  80e4dc:	1091b704 	addi	r2,r2,18140
  80e4e0:	10800017 	ldw	r2,0(r2)
  80e4e4:	1005003a 	cmpeq	r2,r2,zero
  80e4e8:	1000061e 	bne	r2,zero,80e504 <alt_get_errno+0x3c>
  80e4ec:	00802074 	movhi	r2,129
  80e4f0:	1091b704 	addi	r2,r2,18140
  80e4f4:	10800017 	ldw	r2,0(r2)
  80e4f8:	103ee83a 	callr	r2
  80e4fc:	e0bfff15 	stw	r2,-4(fp)
  80e500:	00000306 	br	80e510 <alt_get_errno+0x48>
  80e504:	00802074 	movhi	r2,129
  80e508:	10993204 	addi	r2,r2,25800
  80e50c:	e0bfff15 	stw	r2,-4(fp)
  80e510:	e0bfff17 	ldw	r2,-4(fp)
}
  80e514:	e037883a 	mov	sp,fp
  80e518:	dfc00117 	ldw	ra,4(sp)
  80e51c:	df000017 	ldw	fp,0(sp)
  80e520:	dec00204 	addi	sp,sp,8
  80e524:	f800283a 	ret

0080e528 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e528:	defffd04 	addi	sp,sp,-12
  80e52c:	dfc00215 	stw	ra,8(sp)
  80e530:	df000115 	stw	fp,4(sp)
  80e534:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e538:	0009883a 	mov	r4,zero
  80e53c:	080ea400 	call	80ea40 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e540:	080ea740 	call	80ea74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e544:	01002074 	movhi	r4,129
  80e548:	2109dc04 	addi	r4,r4,10096
  80e54c:	01402074 	movhi	r5,129
  80e550:	2949dc04 	addi	r5,r5,10096
  80e554:	01802074 	movhi	r6,129
  80e558:	3189dc04 	addi	r6,r6,10096
  80e55c:	0810f200 	call	810f20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e560:	0810a840 	call	810a84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e564:	01002074 	movhi	r4,129
  80e568:	2102ba04 	addi	r4,r4,2792
  80e56c:	08117540 	call	811754 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e570:	d1279917 	ldw	r4,-24988(gp)
  80e574:	d1679a17 	ldw	r5,-24984(gp)
  80e578:	d1a79b17 	ldw	r6,-24980(gp)
  80e57c:	08027180 	call	802718 <main>
  80e580:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e584:	01000044 	movi	r4,1
  80e588:	080dce00 	call	80dce0 <close>
  exit (result);
  80e58c:	e13fff17 	ldw	r4,-4(fp)
  80e590:	08044840 	call	804484 <exit>

0080e594 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e594:	defffe04 	addi	sp,sp,-8
  80e598:	df000115 	stw	fp,4(sp)
  80e59c:	df000104 	addi	fp,sp,4
  80e5a0:	e13fff15 	stw	r4,-4(fp)
}
  80e5a4:	e037883a 	mov	sp,fp
  80e5a8:	df000017 	ldw	fp,0(sp)
  80e5ac:	dec00104 	addi	sp,sp,4
  80e5b0:	f800283a 	ret

0080e5b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e5b4:	defffe04 	addi	sp,sp,-8
  80e5b8:	df000115 	stw	fp,4(sp)
  80e5bc:	df000104 	addi	fp,sp,4
  80e5c0:	e13fff15 	stw	r4,-4(fp)
}
  80e5c4:	e037883a 	mov	sp,fp
  80e5c8:	df000017 	ldw	fp,0(sp)
  80e5cc:	dec00104 	addi	sp,sp,4
  80e5d0:	f800283a 	ret

0080e5d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e5d4:	defff704 	addi	sp,sp,-36
  80e5d8:	dfc00815 	stw	ra,32(sp)
  80e5dc:	df000715 	stw	fp,28(sp)
  80e5e0:	df000704 	addi	fp,sp,28
  80e5e4:	e13ffb15 	stw	r4,-20(fp)
  80e5e8:	e17ffc15 	stw	r5,-16(fp)
  80e5ec:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e5f0:	e0bffb17 	ldw	r2,-20(fp)
  80e5f4:	1004803a 	cmplt	r2,r2,zero
  80e5f8:	1000091e 	bne	r2,zero,80e620 <read+0x4c>
  80e5fc:	e13ffb17 	ldw	r4,-20(fp)
  80e600:	01400304 	movi	r5,12
  80e604:	0803eb80 	call	803eb8 <__mulsi3>
  80e608:	1007883a 	mov	r3,r2
  80e60c:	00802074 	movhi	r2,129
  80e610:	108cdb04 	addi	r2,r2,13164
  80e614:	1887883a 	add	r3,r3,r2
  80e618:	e0ffff15 	stw	r3,-4(fp)
  80e61c:	00000106 	br	80e624 <read+0x50>
  80e620:	e03fff15 	stw	zero,-4(fp)
  80e624:	e0bfff17 	ldw	r2,-4(fp)
  80e628:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e62c:	e0bffa17 	ldw	r2,-24(fp)
  80e630:	1005003a 	cmpeq	r2,r2,zero
  80e634:	1000241e 	bne	r2,zero,80e6c8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e638:	e0bffa17 	ldw	r2,-24(fp)
  80e63c:	10800217 	ldw	r2,8(r2)
  80e640:	108000cc 	andi	r2,r2,3
  80e644:	10800060 	cmpeqi	r2,r2,1
  80e648:	10001a1e 	bne	r2,zero,80e6b4 <read+0xe0>
  80e64c:	e0bffa17 	ldw	r2,-24(fp)
  80e650:	10800017 	ldw	r2,0(r2)
  80e654:	10800517 	ldw	r2,20(r2)
  80e658:	1005003a 	cmpeq	r2,r2,zero
  80e65c:	1000151e 	bne	r2,zero,80e6b4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e660:	e0bffa17 	ldw	r2,-24(fp)
  80e664:	10800017 	ldw	r2,0(r2)
  80e668:	10800517 	ldw	r2,20(r2)
  80e66c:	e17ffc17 	ldw	r5,-16(fp)
  80e670:	e1bffd17 	ldw	r6,-12(fp)
  80e674:	e13ffa17 	ldw	r4,-24(fp)
  80e678:	103ee83a 	callr	r2
  80e67c:	e0bff915 	stw	r2,-28(fp)
  80e680:	e0bff917 	ldw	r2,-28(fp)
  80e684:	1004403a 	cmpge	r2,r2,zero
  80e688:	1000071e 	bne	r2,zero,80e6a8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80e68c:	080e6f80 	call	80e6f8 <alt_get_errno>
  80e690:	e0fff917 	ldw	r3,-28(fp)
  80e694:	00c7c83a 	sub	r3,zero,r3
  80e698:	10c00015 	stw	r3,0(r2)
          return -1;
  80e69c:	00bfffc4 	movi	r2,-1
  80e6a0:	e0bffe15 	stw	r2,-8(fp)
  80e6a4:	00000e06 	br	80e6e0 <read+0x10c>
        }
        return rval;
  80e6a8:	e0bff917 	ldw	r2,-28(fp)
  80e6ac:	e0bffe15 	stw	r2,-8(fp)
  80e6b0:	00000b06 	br	80e6e0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e6b4:	080e6f80 	call	80e6f8 <alt_get_errno>
  80e6b8:	1007883a 	mov	r3,r2
  80e6bc:	00800344 	movi	r2,13
  80e6c0:	18800015 	stw	r2,0(r3)
  80e6c4:	00000406 	br	80e6d8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e6c8:	080e6f80 	call	80e6f8 <alt_get_errno>
  80e6cc:	1007883a 	mov	r3,r2
  80e6d0:	00801444 	movi	r2,81
  80e6d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e6d8:	00bfffc4 	movi	r2,-1
  80e6dc:	e0bffe15 	stw	r2,-8(fp)
  80e6e0:	e0bffe17 	ldw	r2,-8(fp)
}
  80e6e4:	e037883a 	mov	sp,fp
  80e6e8:	dfc00117 	ldw	ra,4(sp)
  80e6ec:	df000017 	ldw	fp,0(sp)
  80e6f0:	dec00204 	addi	sp,sp,8
  80e6f4:	f800283a 	ret

0080e6f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e6f8:	defffd04 	addi	sp,sp,-12
  80e6fc:	dfc00215 	stw	ra,8(sp)
  80e700:	df000115 	stw	fp,4(sp)
  80e704:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e708:	00802074 	movhi	r2,129
  80e70c:	1091b704 	addi	r2,r2,18140
  80e710:	10800017 	ldw	r2,0(r2)
  80e714:	1005003a 	cmpeq	r2,r2,zero
  80e718:	1000061e 	bne	r2,zero,80e734 <alt_get_errno+0x3c>
  80e71c:	00802074 	movhi	r2,129
  80e720:	1091b704 	addi	r2,r2,18140
  80e724:	10800017 	ldw	r2,0(r2)
  80e728:	103ee83a 	callr	r2
  80e72c:	e0bfff15 	stw	r2,-4(fp)
  80e730:	00000306 	br	80e740 <alt_get_errno+0x48>
  80e734:	00802074 	movhi	r2,129
  80e738:	10993204 	addi	r2,r2,25800
  80e73c:	e0bfff15 	stw	r2,-4(fp)
  80e740:	e0bfff17 	ldw	r2,-4(fp)
}
  80e744:	e037883a 	mov	sp,fp
  80e748:	dfc00117 	ldw	ra,4(sp)
  80e74c:	df000017 	ldw	fp,0(sp)
  80e750:	dec00204 	addi	sp,sp,8
  80e754:	f800283a 	ret

0080e758 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e758:	defffc04 	addi	sp,sp,-16
  80e75c:	dfc00315 	stw	ra,12(sp)
  80e760:	df000215 	stw	fp,8(sp)
  80e764:	dc000115 	stw	r16,4(sp)
  80e768:	df000104 	addi	fp,sp,4
  80e76c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e770:	e0bfff17 	ldw	r2,-4(fp)
  80e774:	108000d0 	cmplti	r2,r2,3
  80e778:	10000f1e 	bne	r2,zero,80e7b8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e77c:	e13fff17 	ldw	r4,-4(fp)
  80e780:	04002074 	movhi	r16,129
  80e784:	840cdb04 	addi	r16,r16,13164
  80e788:	01400304 	movi	r5,12
  80e78c:	0803eb80 	call	803eb8 <__mulsi3>
  80e790:	1405883a 	add	r2,r2,r16
  80e794:	10800204 	addi	r2,r2,8
  80e798:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e79c:	e13fff17 	ldw	r4,-4(fp)
  80e7a0:	04002074 	movhi	r16,129
  80e7a4:	840cdb04 	addi	r16,r16,13164
  80e7a8:	01400304 	movi	r5,12
  80e7ac:	0803eb80 	call	803eb8 <__mulsi3>
  80e7b0:	1405883a 	add	r2,r2,r16
  80e7b4:	10000015 	stw	zero,0(r2)
  }
}
  80e7b8:	e037883a 	mov	sp,fp
  80e7bc:	dfc00217 	ldw	ra,8(sp)
  80e7c0:	df000117 	ldw	fp,4(sp)
  80e7c4:	dc000017 	ldw	r16,0(sp)
  80e7c8:	dec00304 	addi	sp,sp,12
  80e7cc:	f800283a 	ret

0080e7d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e7d0:	defff804 	addi	sp,sp,-32
  80e7d4:	df000715 	stw	fp,28(sp)
  80e7d8:	df000704 	addi	fp,sp,28
  80e7dc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e7e0:	0005303a 	rdctl	r2,status
  80e7e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e7e8:	e0fffb17 	ldw	r3,-20(fp)
  80e7ec:	00bfff84 	movi	r2,-2
  80e7f0:	1884703a 	and	r2,r3,r2
  80e7f4:	1001703a 	wrctl	status,r2
  
  return context;
  80e7f8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e7fc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e800:	d0a01e17 	ldw	r2,-32648(gp)
  80e804:	10c000c4 	addi	r3,r2,3
  80e808:	00bfff04 	movi	r2,-4
  80e80c:	1884703a 	and	r2,r3,r2
  80e810:	d0a01e15 	stw	r2,-32648(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e814:	d0e01e17 	ldw	r3,-32648(gp)
  80e818:	e0bffe17 	ldw	r2,-8(fp)
  80e81c:	1887883a 	add	r3,r3,r2
  80e820:	00804034 	movhi	r2,256
  80e824:	10800004 	addi	r2,r2,0
  80e828:	10c0072e 	bgeu	r2,r3,80e848 <sbrk+0x78>
  80e82c:	e0bffd17 	ldw	r2,-12(fp)
  80e830:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e834:	e0bffa17 	ldw	r2,-24(fp)
  80e838:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e83c:	00bfffc4 	movi	r2,-1
  80e840:	e0bfff15 	stw	r2,-4(fp)
  80e844:	00000c06 	br	80e878 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80e848:	d0a01e17 	ldw	r2,-32648(gp)
  80e84c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80e850:	d0e01e17 	ldw	r3,-32648(gp)
  80e854:	e0bffe17 	ldw	r2,-8(fp)
  80e858:	1885883a 	add	r2,r3,r2
  80e85c:	d0a01e15 	stw	r2,-32648(gp)
  80e860:	e0bffd17 	ldw	r2,-12(fp)
  80e864:	e0bff915 	stw	r2,-28(fp)
  80e868:	e0bff917 	ldw	r2,-28(fp)
  80e86c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e870:	e0bffc17 	ldw	r2,-16(fp)
  80e874:	e0bfff15 	stw	r2,-4(fp)
  80e878:	e0bfff17 	ldw	r2,-4(fp)
} 
  80e87c:	e037883a 	mov	sp,fp
  80e880:	df000017 	ldw	fp,0(sp)
  80e884:	dec00104 	addi	sp,sp,4
  80e888:	f800283a 	ret

0080e88c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80e88c:	defffd04 	addi	sp,sp,-12
  80e890:	dfc00215 	stw	ra,8(sp)
  80e894:	df000115 	stw	fp,4(sp)
  80e898:	df000104 	addi	fp,sp,4
  80e89c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80e8a0:	e13fff17 	ldw	r4,-4(fp)
  80e8a4:	08107f80 	call	8107f8 <alt_busy_sleep>
}
  80e8a8:	e037883a 	mov	sp,fp
  80e8ac:	dfc00117 	ldw	ra,4(sp)
  80e8b0:	df000017 	ldw	fp,0(sp)
  80e8b4:	dec00204 	addi	sp,sp,8
  80e8b8:	f800283a 	ret

0080e8bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e8bc:	defff704 	addi	sp,sp,-36
  80e8c0:	dfc00815 	stw	ra,32(sp)
  80e8c4:	df000715 	stw	fp,28(sp)
  80e8c8:	df000704 	addi	fp,sp,28
  80e8cc:	e13ffb15 	stw	r4,-20(fp)
  80e8d0:	e17ffc15 	stw	r5,-16(fp)
  80e8d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e8d8:	e0bffb17 	ldw	r2,-20(fp)
  80e8dc:	1004803a 	cmplt	r2,r2,zero
  80e8e0:	1000091e 	bne	r2,zero,80e908 <write+0x4c>
  80e8e4:	e13ffb17 	ldw	r4,-20(fp)
  80e8e8:	01400304 	movi	r5,12
  80e8ec:	0803eb80 	call	803eb8 <__mulsi3>
  80e8f0:	1007883a 	mov	r3,r2
  80e8f4:	00802074 	movhi	r2,129
  80e8f8:	108cdb04 	addi	r2,r2,13164
  80e8fc:	1887883a 	add	r3,r3,r2
  80e900:	e0ffff15 	stw	r3,-4(fp)
  80e904:	00000106 	br	80e90c <write+0x50>
  80e908:	e03fff15 	stw	zero,-4(fp)
  80e90c:	e0bfff17 	ldw	r2,-4(fp)
  80e910:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e914:	e0bffa17 	ldw	r2,-24(fp)
  80e918:	1005003a 	cmpeq	r2,r2,zero
  80e91c:	1000241e 	bne	r2,zero,80e9b0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e920:	e0bffa17 	ldw	r2,-24(fp)
  80e924:	10800217 	ldw	r2,8(r2)
  80e928:	108000cc 	andi	r2,r2,3
  80e92c:	1005003a 	cmpeq	r2,r2,zero
  80e930:	10001a1e 	bne	r2,zero,80e99c <write+0xe0>
  80e934:	e0bffa17 	ldw	r2,-24(fp)
  80e938:	10800017 	ldw	r2,0(r2)
  80e93c:	10800617 	ldw	r2,24(r2)
  80e940:	1005003a 	cmpeq	r2,r2,zero
  80e944:	1000151e 	bne	r2,zero,80e99c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e948:	e0bffa17 	ldw	r2,-24(fp)
  80e94c:	10800017 	ldw	r2,0(r2)
  80e950:	10800617 	ldw	r2,24(r2)
  80e954:	e17ffc17 	ldw	r5,-16(fp)
  80e958:	e1bffd17 	ldw	r6,-12(fp)
  80e95c:	e13ffa17 	ldw	r4,-24(fp)
  80e960:	103ee83a 	callr	r2
  80e964:	e0bff915 	stw	r2,-28(fp)
  80e968:	e0bff917 	ldw	r2,-28(fp)
  80e96c:	1004403a 	cmpge	r2,r2,zero
  80e970:	1000071e 	bne	r2,zero,80e990 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80e974:	080e9e00 	call	80e9e0 <alt_get_errno>
  80e978:	e0fff917 	ldw	r3,-28(fp)
  80e97c:	00c7c83a 	sub	r3,zero,r3
  80e980:	10c00015 	stw	r3,0(r2)
        return -1;
  80e984:	00bfffc4 	movi	r2,-1
  80e988:	e0bffe15 	stw	r2,-8(fp)
  80e98c:	00000e06 	br	80e9c8 <write+0x10c>
      }
      return rval;
  80e990:	e0bff917 	ldw	r2,-28(fp)
  80e994:	e0bffe15 	stw	r2,-8(fp)
  80e998:	00000b06 	br	80e9c8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e99c:	080e9e00 	call	80e9e0 <alt_get_errno>
  80e9a0:	1007883a 	mov	r3,r2
  80e9a4:	00800344 	movi	r2,13
  80e9a8:	18800015 	stw	r2,0(r3)
  80e9ac:	00000406 	br	80e9c0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e9b0:	080e9e00 	call	80e9e0 <alt_get_errno>
  80e9b4:	1007883a 	mov	r3,r2
  80e9b8:	00801444 	movi	r2,81
  80e9bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e9c0:	00bfffc4 	movi	r2,-1
  80e9c4:	e0bffe15 	stw	r2,-8(fp)
  80e9c8:	e0bffe17 	ldw	r2,-8(fp)
}
  80e9cc:	e037883a 	mov	sp,fp
  80e9d0:	dfc00117 	ldw	ra,4(sp)
  80e9d4:	df000017 	ldw	fp,0(sp)
  80e9d8:	dec00204 	addi	sp,sp,8
  80e9dc:	f800283a 	ret

0080e9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e9e0:	defffd04 	addi	sp,sp,-12
  80e9e4:	dfc00215 	stw	ra,8(sp)
  80e9e8:	df000115 	stw	fp,4(sp)
  80e9ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e9f0:	00802074 	movhi	r2,129
  80e9f4:	1091b704 	addi	r2,r2,18140
  80e9f8:	10800017 	ldw	r2,0(r2)
  80e9fc:	1005003a 	cmpeq	r2,r2,zero
  80ea00:	1000061e 	bne	r2,zero,80ea1c <alt_get_errno+0x3c>
  80ea04:	00802074 	movhi	r2,129
  80ea08:	1091b704 	addi	r2,r2,18140
  80ea0c:	10800017 	ldw	r2,0(r2)
  80ea10:	103ee83a 	callr	r2
  80ea14:	e0bfff15 	stw	r2,-4(fp)
  80ea18:	00000306 	br	80ea28 <alt_get_errno+0x48>
  80ea1c:	00802074 	movhi	r2,129
  80ea20:	10993204 	addi	r2,r2,25800
  80ea24:	e0bfff15 	stw	r2,-4(fp)
  80ea28:	e0bfff17 	ldw	r2,-4(fp)
}
  80ea2c:	e037883a 	mov	sp,fp
  80ea30:	dfc00117 	ldw	ra,4(sp)
  80ea34:	df000017 	ldw	fp,0(sp)
  80ea38:	dec00204 	addi	sp,sp,8
  80ea3c:	f800283a 	ret

0080ea40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ea40:	defffd04 	addi	sp,sp,-12
  80ea44:	dfc00215 	stw	ra,8(sp)
  80ea48:	df000115 	stw	fp,4(sp)
  80ea4c:	df000104 	addi	fp,sp,4
  80ea50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  80ea54:	08114200 	call	811420 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ea58:	00800044 	movi	r2,1
  80ea5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ea60:	e037883a 	mov	sp,fp
  80ea64:	dfc00117 	ldw	ra,4(sp)
  80ea68:	df000017 	ldw	fp,0(sp)
  80ea6c:	dec00204 	addi	sp,sp,8
  80ea70:	f800283a 	ret

0080ea74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ea74:	defffe04 	addi	sp,sp,-8
  80ea78:	dfc00115 	stw	ra,4(sp)
  80ea7c:	df000015 	stw	fp,0(sp)
  80ea80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80ea84:	01004034 	movhi	r4,256
  80ea88:	21040004 	addi	r4,r4,4096
  80ea8c:	000b883a 	mov	r5,zero
  80ea90:	01800084 	movi	r6,2
  80ea94:	01c0fa04 	movi	r7,1000
  80ea98:	08106140 	call	810614 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80ea9c:	01002074 	movhi	r4,129
  80eaa0:	210d4504 	addi	r4,r4,13588
  80eaa4:	000b883a 	mov	r5,zero
  80eaa8:	000d883a 	mov	r6,zero
  80eaac:	080ec680 	call	80ec68 <altera_avalon_jtag_uart_init>
  80eab0:	01002074 	movhi	r4,129
  80eab4:	210d3b04 	addi	r4,r4,13548
  80eab8:	080eae80 	call	80eae8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80eabc:	01002074 	movhi	r4,129
  80eac0:	21115d04 	addi	r4,r4,17780
  80eac4:	08104100 	call	810410 <altera_avalon_lcd_16207_init>
  80eac8:	01002074 	movhi	r4,129
  80eacc:	21115304 	addi	r4,r4,17740
  80ead0:	080eae80 	call	80eae8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
  80ead4:	e037883a 	mov	sp,fp
  80ead8:	dfc00117 	ldw	ra,4(sp)
  80eadc:	df000017 	ldw	fp,0(sp)
  80eae0:	dec00204 	addi	sp,sp,8
  80eae4:	f800283a 	ret

0080eae8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80eae8:	defffd04 	addi	sp,sp,-12
  80eaec:	dfc00215 	stw	ra,8(sp)
  80eaf0:	df000115 	stw	fp,4(sp)
  80eaf4:	df000104 	addi	fp,sp,4
  80eaf8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80eafc:	e13fff17 	ldw	r4,-4(fp)
  80eb00:	01402074 	movhi	r5,129
  80eb04:	2951b404 	addi	r5,r5,18128
  80eb08:	08109700 	call	810970 <alt_dev_llist_insert>
}
  80eb0c:	e037883a 	mov	sp,fp
  80eb10:	dfc00117 	ldw	ra,4(sp)
  80eb14:	df000017 	ldw	fp,0(sp)
  80eb18:	dec00204 	addi	sp,sp,8
  80eb1c:	f800283a 	ret

0080eb20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80eb20:	defffa04 	addi	sp,sp,-24
  80eb24:	dfc00515 	stw	ra,20(sp)
  80eb28:	df000415 	stw	fp,16(sp)
  80eb2c:	df000404 	addi	fp,sp,16
  80eb30:	e13ffd15 	stw	r4,-12(fp)
  80eb34:	e17ffe15 	stw	r5,-8(fp)
  80eb38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80eb3c:	e0bffd17 	ldw	r2,-12(fp)
  80eb40:	10800017 	ldw	r2,0(r2)
  80eb44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80eb48:	e0bffc17 	ldw	r2,-16(fp)
  80eb4c:	11000a04 	addi	r4,r2,40
  80eb50:	e0bffd17 	ldw	r2,-12(fp)
  80eb54:	11c00217 	ldw	r7,8(r2)
  80eb58:	e17ffe17 	ldw	r5,-8(fp)
  80eb5c:	e1bfff17 	ldw	r6,-4(fp)
  80eb60:	080f1680 	call	80f168 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80eb64:	e037883a 	mov	sp,fp
  80eb68:	dfc00117 	ldw	ra,4(sp)
  80eb6c:	df000017 	ldw	fp,0(sp)
  80eb70:	dec00204 	addi	sp,sp,8
  80eb74:	f800283a 	ret

0080eb78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80eb78:	defffa04 	addi	sp,sp,-24
  80eb7c:	dfc00515 	stw	ra,20(sp)
  80eb80:	df000415 	stw	fp,16(sp)
  80eb84:	df000404 	addi	fp,sp,16
  80eb88:	e13ffd15 	stw	r4,-12(fp)
  80eb8c:	e17ffe15 	stw	r5,-8(fp)
  80eb90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80eb94:	e0bffd17 	ldw	r2,-12(fp)
  80eb98:	10800017 	ldw	r2,0(r2)
  80eb9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80eba0:	e0bffc17 	ldw	r2,-16(fp)
  80eba4:	11000a04 	addi	r4,r2,40
  80eba8:	e0bffd17 	ldw	r2,-12(fp)
  80ebac:	11c00217 	ldw	r7,8(r2)
  80ebb0:	e17ffe17 	ldw	r5,-8(fp)
  80ebb4:	e1bfff17 	ldw	r6,-4(fp)
  80ebb8:	080f38c0 	call	80f38c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ebbc:	e037883a 	mov	sp,fp
  80ebc0:	dfc00117 	ldw	ra,4(sp)
  80ebc4:	df000017 	ldw	fp,0(sp)
  80ebc8:	dec00204 	addi	sp,sp,8
  80ebcc:	f800283a 	ret

0080ebd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ebd0:	defffc04 	addi	sp,sp,-16
  80ebd4:	dfc00315 	stw	ra,12(sp)
  80ebd8:	df000215 	stw	fp,8(sp)
  80ebdc:	df000204 	addi	fp,sp,8
  80ebe0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ebe4:	e0bfff17 	ldw	r2,-4(fp)
  80ebe8:	10800017 	ldw	r2,0(r2)
  80ebec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ebf0:	e0bffe17 	ldw	r2,-8(fp)
  80ebf4:	11000a04 	addi	r4,r2,40
  80ebf8:	e0bfff17 	ldw	r2,-4(fp)
  80ebfc:	11400217 	ldw	r5,8(r2)
  80ec00:	080f0000 	call	80f000 <altera_avalon_jtag_uart_close>
}
  80ec04:	e037883a 	mov	sp,fp
  80ec08:	dfc00117 	ldw	ra,4(sp)
  80ec0c:	df000017 	ldw	fp,0(sp)
  80ec10:	dec00204 	addi	sp,sp,8
  80ec14:	f800283a 	ret

0080ec18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ec18:	defffa04 	addi	sp,sp,-24
  80ec1c:	dfc00515 	stw	ra,20(sp)
  80ec20:	df000415 	stw	fp,16(sp)
  80ec24:	df000404 	addi	fp,sp,16
  80ec28:	e13ffd15 	stw	r4,-12(fp)
  80ec2c:	e17ffe15 	stw	r5,-8(fp)
  80ec30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ec34:	e0bffd17 	ldw	r2,-12(fp)
  80ec38:	10800017 	ldw	r2,0(r2)
  80ec3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ec40:	e0bffc17 	ldw	r2,-16(fp)
  80ec44:	11000a04 	addi	r4,r2,40
  80ec48:	e17ffe17 	ldw	r5,-8(fp)
  80ec4c:	e1bfff17 	ldw	r6,-4(fp)
  80ec50:	080f0740 	call	80f074 <altera_avalon_jtag_uart_ioctl>
}
  80ec54:	e037883a 	mov	sp,fp
  80ec58:	dfc00117 	ldw	ra,4(sp)
  80ec5c:	df000017 	ldw	fp,0(sp)
  80ec60:	dec00204 	addi	sp,sp,8
  80ec64:	f800283a 	ret

0080ec68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ec68:	defffa04 	addi	sp,sp,-24
  80ec6c:	dfc00515 	stw	ra,20(sp)
  80ec70:	df000415 	stw	fp,16(sp)
  80ec74:	df000404 	addi	fp,sp,16
  80ec78:	e13ffd15 	stw	r4,-12(fp)
  80ec7c:	e17ffe15 	stw	r5,-8(fp)
  80ec80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ec84:	e0fffd17 	ldw	r3,-12(fp)
  80ec88:	00800044 	movi	r2,1
  80ec8c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ec90:	e0bffd17 	ldw	r2,-12(fp)
  80ec94:	10800017 	ldw	r2,0(r2)
  80ec98:	11000104 	addi	r4,r2,4
  80ec9c:	e0bffd17 	ldw	r2,-12(fp)
  80eca0:	10800817 	ldw	r2,32(r2)
  80eca4:	1007883a 	mov	r3,r2
  80eca8:	2005883a 	mov	r2,r4
  80ecac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ecb0:	e13ffe17 	ldw	r4,-8(fp)
  80ecb4:	e17fff17 	ldw	r5,-4(fp)
  80ecb8:	d8000015 	stw	zero,0(sp)
  80ecbc:	01802074 	movhi	r6,129
  80ecc0:	31bb4a04 	addi	r6,r6,-4824
  80ecc4:	e1fffd17 	ldw	r7,-12(fp)
  80ecc8:	0810b7c0 	call	810b7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ecdc:	00802074 	movhi	r2,129
  80ece0:	10993704 	addi	r2,r2,25820
  80ece4:	10800017 	ldw	r2,0(r2)
  80ece8:	100b883a 	mov	r5,r2
  80ecec:	01802074 	movhi	r6,129
  80ecf0:	31bbd404 	addi	r6,r6,-4272
  80ecf4:	e1fffd17 	ldw	r7,-12(fp)
  80ecf8:	08106a40 	call	8106a4 <alt_alarm_start>
  80ecfc:	1004403a 	cmpge	r2,r2,zero
  80ed00:	1000041e 	bne	r2,zero,80ed14 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ed04:	e0fffd17 	ldw	r3,-12(fp)
  80ed08:	00a00034 	movhi	r2,32768
  80ed0c:	10bfffc4 	addi	r2,r2,-1
  80ed10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80ed14:	e037883a 	mov	sp,fp
  80ed18:	dfc00117 	ldw	ra,4(sp)
  80ed1c:	df000017 	ldw	fp,0(sp)
  80ed20:	dec00204 	addi	sp,sp,8
  80ed24:	f800283a 	ret

0080ed28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ed28:	defff804 	addi	sp,sp,-32
  80ed2c:	df000715 	stw	fp,28(sp)
  80ed30:	df000704 	addi	fp,sp,28
  80ed34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ed38:	e0bfff17 	ldw	r2,-4(fp)
  80ed3c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80ed40:	e0bffe17 	ldw	r2,-8(fp)
  80ed44:	10800017 	ldw	r2,0(r2)
  80ed48:	e0bffd15 	stw	r2,-12(fp)
  80ed4c:	00000006 	br	80ed50 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ed50:	e0bffd17 	ldw	r2,-12(fp)
  80ed54:	10800104 	addi	r2,r2,4
  80ed58:	10800037 	ldwio	r2,0(r2)
  80ed5c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ed60:	e0bffc17 	ldw	r2,-16(fp)
  80ed64:	1080c00c 	andi	r2,r2,768
  80ed68:	1005003a 	cmpeq	r2,r2,zero
  80ed6c:	1000741e 	bne	r2,zero,80ef40 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ed70:	e0bffc17 	ldw	r2,-16(fp)
  80ed74:	1080400c 	andi	r2,r2,256
  80ed78:	1005003a 	cmpeq	r2,r2,zero
  80ed7c:	1000351e 	bne	r2,zero,80ee54 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ed80:	00800074 	movhi	r2,1
  80ed84:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ed88:	e0bffe17 	ldw	r2,-8(fp)
  80ed8c:	10800a17 	ldw	r2,40(r2)
  80ed90:	10800044 	addi	r2,r2,1
  80ed94:	1081ffcc 	andi	r2,r2,2047
  80ed98:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80ed9c:	e0bffe17 	ldw	r2,-8(fp)
  80eda0:	10c00b17 	ldw	r3,44(r2)
  80eda4:	e0bffa17 	ldw	r2,-24(fp)
  80eda8:	18801626 	beq	r3,r2,80ee04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80edac:	e0bffd17 	ldw	r2,-12(fp)
  80edb0:	10800037 	ldwio	r2,0(r2)
  80edb4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80edb8:	e0bffb17 	ldw	r2,-20(fp)
  80edbc:	10a0000c 	andi	r2,r2,32768
  80edc0:	1005003a 	cmpeq	r2,r2,zero
  80edc4:	10000f1e 	bne	r2,zero,80ee04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80edc8:	e0bffe17 	ldw	r2,-8(fp)
  80edcc:	10c00a17 	ldw	r3,40(r2)
  80edd0:	e0bffb17 	ldw	r2,-20(fp)
  80edd4:	1009883a 	mov	r4,r2
  80edd8:	e0bffe17 	ldw	r2,-8(fp)
  80eddc:	1885883a 	add	r2,r3,r2
  80ede0:	10800e04 	addi	r2,r2,56
  80ede4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ede8:	e0bffe17 	ldw	r2,-8(fp)
  80edec:	10800a17 	ldw	r2,40(r2)
  80edf0:	10800044 	addi	r2,r2,1
  80edf4:	10c1ffcc 	andi	r3,r2,2047
  80edf8:	e0bffe17 	ldw	r2,-8(fp)
  80edfc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ee00:	003fe106 	br	80ed88 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ee04:	e0bffb17 	ldw	r2,-20(fp)
  80ee08:	10bfffec 	andhi	r2,r2,65535
  80ee0c:	1005003a 	cmpeq	r2,r2,zero
  80ee10:	1000101e 	bne	r2,zero,80ee54 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ee14:	e0bffe17 	ldw	r2,-8(fp)
  80ee18:	10c00817 	ldw	r3,32(r2)
  80ee1c:	00bfff84 	movi	r2,-2
  80ee20:	1886703a 	and	r3,r3,r2
  80ee24:	e0bffe17 	ldw	r2,-8(fp)
  80ee28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ee2c:	e0bffd17 	ldw	r2,-12(fp)
  80ee30:	11000104 	addi	r4,r2,4
  80ee34:	e0bffe17 	ldw	r2,-8(fp)
  80ee38:	10800817 	ldw	r2,32(r2)
  80ee3c:	1007883a 	mov	r3,r2
  80ee40:	2005883a 	mov	r2,r4
  80ee44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ee48:	e0bffd17 	ldw	r2,-12(fp)
  80ee4c:	10800104 	addi	r2,r2,4
  80ee50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ee54:	e0bffc17 	ldw	r2,-16(fp)
  80ee58:	1080800c 	andi	r2,r2,512
  80ee5c:	1005003a 	cmpeq	r2,r2,zero
  80ee60:	103fbb1e 	bne	r2,zero,80ed50 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ee64:	e0bffc17 	ldw	r2,-16(fp)
  80ee68:	10bfffec 	andhi	r2,r2,65535
  80ee6c:	1004d43a 	srli	r2,r2,16
  80ee70:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ee74:	00001506 	br	80eecc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ee78:	e13ffd17 	ldw	r4,-12(fp)
  80ee7c:	e0bffe17 	ldw	r2,-8(fp)
  80ee80:	10c00d17 	ldw	r3,52(r2)
  80ee84:	e0bffe17 	ldw	r2,-8(fp)
  80ee88:	1885883a 	add	r2,r3,r2
  80ee8c:	10820e04 	addi	r2,r2,2104
  80ee90:	10800003 	ldbu	r2,0(r2)
  80ee94:	10c03fcc 	andi	r3,r2,255
  80ee98:	18c0201c 	xori	r3,r3,128
  80ee9c:	18ffe004 	addi	r3,r3,-128
  80eea0:	2005883a 	mov	r2,r4
  80eea4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eea8:	e0bffe17 	ldw	r2,-8(fp)
  80eeac:	10800d17 	ldw	r2,52(r2)
  80eeb0:	10800044 	addi	r2,r2,1
  80eeb4:	10c1ffcc 	andi	r3,r2,2047
  80eeb8:	e0bffe17 	ldw	r2,-8(fp)
  80eebc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80eec0:	e0bff917 	ldw	r2,-28(fp)
  80eec4:	10bfffc4 	addi	r2,r2,-1
  80eec8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80eecc:	e0bff917 	ldw	r2,-28(fp)
  80eed0:	1005003a 	cmpeq	r2,r2,zero
  80eed4:	1000051e 	bne	r2,zero,80eeec <altera_avalon_jtag_uart_irq+0x1c4>
  80eed8:	e0bffe17 	ldw	r2,-8(fp)
  80eedc:	10c00d17 	ldw	r3,52(r2)
  80eee0:	e0bffe17 	ldw	r2,-8(fp)
  80eee4:	10800c17 	ldw	r2,48(r2)
  80eee8:	18bfe31e 	bne	r3,r2,80ee78 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80eeec:	e0bff917 	ldw	r2,-28(fp)
  80eef0:	1005003a 	cmpeq	r2,r2,zero
  80eef4:	103f961e 	bne	r2,zero,80ed50 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80eef8:	e0bffe17 	ldw	r2,-8(fp)
  80eefc:	10c00817 	ldw	r3,32(r2)
  80ef00:	00bfff44 	movi	r2,-3
  80ef04:	1886703a 	and	r3,r3,r2
  80ef08:	e0bffe17 	ldw	r2,-8(fp)
  80ef0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ef10:	e0bffe17 	ldw	r2,-8(fp)
  80ef14:	10800017 	ldw	r2,0(r2)
  80ef18:	11000104 	addi	r4,r2,4
  80ef1c:	e0bffe17 	ldw	r2,-8(fp)
  80ef20:	10800817 	ldw	r2,32(r2)
  80ef24:	1007883a 	mov	r3,r2
  80ef28:	2005883a 	mov	r2,r4
  80ef2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ef30:	e0bffd17 	ldw	r2,-12(fp)
  80ef34:	10800104 	addi	r2,r2,4
  80ef38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80ef3c:	003f8406 	br	80ed50 <altera_avalon_jtag_uart_irq+0x28>
}
  80ef40:	e037883a 	mov	sp,fp
  80ef44:	df000017 	ldw	fp,0(sp)
  80ef48:	dec00104 	addi	sp,sp,4
  80ef4c:	f800283a 	ret

0080ef50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ef50:	defffc04 	addi	sp,sp,-16
  80ef54:	df000315 	stw	fp,12(sp)
  80ef58:	df000304 	addi	fp,sp,12
  80ef5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ef60:	e0bfff17 	ldw	r2,-4(fp)
  80ef64:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ef68:	e0bffe17 	ldw	r2,-8(fp)
  80ef6c:	10800017 	ldw	r2,0(r2)
  80ef70:	10800104 	addi	r2,r2,4
  80ef74:	10800037 	ldwio	r2,0(r2)
  80ef78:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ef7c:	e0bffd17 	ldw	r2,-12(fp)
  80ef80:	1081000c 	andi	r2,r2,1024
  80ef84:	1005003a 	cmpeq	r2,r2,zero
  80ef88:	10000c1e 	bne	r2,zero,80efbc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ef8c:	e0bffe17 	ldw	r2,-8(fp)
  80ef90:	10800017 	ldw	r2,0(r2)
  80ef94:	11000104 	addi	r4,r2,4
  80ef98:	e0bffe17 	ldw	r2,-8(fp)
  80ef9c:	10800817 	ldw	r2,32(r2)
  80efa0:	10810014 	ori	r2,r2,1024
  80efa4:	1007883a 	mov	r3,r2
  80efa8:	2005883a 	mov	r2,r4
  80efac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80efb0:	e0bffe17 	ldw	r2,-8(fp)
  80efb4:	10000915 	stw	zero,36(r2)
  80efb8:	00000a06 	br	80efe4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80efbc:	e0bffe17 	ldw	r2,-8(fp)
  80efc0:	10c00917 	ldw	r3,36(r2)
  80efc4:	00a00034 	movhi	r2,32768
  80efc8:	10bfff04 	addi	r2,r2,-4
  80efcc:	10c00536 	bltu	r2,r3,80efe4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80efd0:	e0bffe17 	ldw	r2,-8(fp)
  80efd4:	10800917 	ldw	r2,36(r2)
  80efd8:	10c00044 	addi	r3,r2,1
  80efdc:	e0bffe17 	ldw	r2,-8(fp)
  80efe0:	10c00915 	stw	r3,36(r2)
  80efe4:	00802074 	movhi	r2,129
  80efe8:	10993704 	addi	r2,r2,25820
  80efec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80eff0:	e037883a 	mov	sp,fp
  80eff4:	df000017 	ldw	fp,0(sp)
  80eff8:	dec00104 	addi	sp,sp,4
  80effc:	f800283a 	ret

0080f000 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f000:	defffc04 	addi	sp,sp,-16
  80f004:	df000315 	stw	fp,12(sp)
  80f008:	df000304 	addi	fp,sp,12
  80f00c:	e13ffd15 	stw	r4,-12(fp)
  80f010:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f014:	00000706 	br	80f034 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80f018:	e0bffe17 	ldw	r2,-8(fp)
  80f01c:	1090000c 	andi	r2,r2,16384
  80f020:	1005003a 	cmpeq	r2,r2,zero
  80f024:	1000031e 	bne	r2,zero,80f034 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80f028:	00bffd44 	movi	r2,-11
  80f02c:	e0bfff15 	stw	r2,-4(fp)
  80f030:	00000b06 	br	80f060 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f034:	e0bffd17 	ldw	r2,-12(fp)
  80f038:	10c00d17 	ldw	r3,52(r2)
  80f03c:	e0bffd17 	ldw	r2,-12(fp)
  80f040:	10800c17 	ldw	r2,48(r2)
  80f044:	18800526 	beq	r3,r2,80f05c <altera_avalon_jtag_uart_close+0x5c>
  80f048:	e0bffd17 	ldw	r2,-12(fp)
  80f04c:	10c00917 	ldw	r3,36(r2)
  80f050:	e0bffd17 	ldw	r2,-12(fp)
  80f054:	10800117 	ldw	r2,4(r2)
  80f058:	18bfef36 	bltu	r3,r2,80f018 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f05c:	e03fff15 	stw	zero,-4(fp)
  80f060:	e0bfff17 	ldw	r2,-4(fp)
}
  80f064:	e037883a 	mov	sp,fp
  80f068:	df000017 	ldw	fp,0(sp)
  80f06c:	dec00104 	addi	sp,sp,4
  80f070:	f800283a 	ret

0080f074 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f074:	defff804 	addi	sp,sp,-32
  80f078:	df000715 	stw	fp,28(sp)
  80f07c:	df000704 	addi	fp,sp,28
  80f080:	e13ffb15 	stw	r4,-20(fp)
  80f084:	e17ffc15 	stw	r5,-16(fp)
  80f088:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80f08c:	00bff9c4 	movi	r2,-25
  80f090:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80f094:	e0bffc17 	ldw	r2,-16(fp)
  80f098:	e0bfff15 	stw	r2,-4(fp)
  80f09c:	e0ffff17 	ldw	r3,-4(fp)
  80f0a0:	189a8060 	cmpeqi	r2,r3,27137
  80f0a4:	1000041e 	bne	r2,zero,80f0b8 <altera_avalon_jtag_uart_ioctl+0x44>
  80f0a8:	e0ffff17 	ldw	r3,-4(fp)
  80f0ac:	189a80a0 	cmpeqi	r2,r3,27138
  80f0b0:	10001b1e 	bne	r2,zero,80f120 <altera_avalon_jtag_uart_ioctl+0xac>
  80f0b4:	00002706 	br	80f154 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f0b8:	e0bffb17 	ldw	r2,-20(fp)
  80f0bc:	10c00117 	ldw	r3,4(r2)
  80f0c0:	00a00034 	movhi	r2,32768
  80f0c4:	10bfffc4 	addi	r2,r2,-1
  80f0c8:	18802226 	beq	r3,r2,80f154 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80f0cc:	e0bffd17 	ldw	r2,-12(fp)
  80f0d0:	10800017 	ldw	r2,0(r2)
  80f0d4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f0d8:	e0bff917 	ldw	r2,-28(fp)
  80f0dc:	10800090 	cmplti	r2,r2,2
  80f0e0:	1000071e 	bne	r2,zero,80f100 <altera_avalon_jtag_uart_ioctl+0x8c>
  80f0e4:	e0fff917 	ldw	r3,-28(fp)
  80f0e8:	00a00034 	movhi	r2,32768
  80f0ec:	10bfffc4 	addi	r2,r2,-1
  80f0f0:	18800326 	beq	r3,r2,80f100 <altera_avalon_jtag_uart_ioctl+0x8c>
  80f0f4:	e0bff917 	ldw	r2,-28(fp)
  80f0f8:	e0bffe15 	stw	r2,-8(fp)
  80f0fc:	00000306 	br	80f10c <altera_avalon_jtag_uart_ioctl+0x98>
  80f100:	00e00034 	movhi	r3,32768
  80f104:	18ffff84 	addi	r3,r3,-2
  80f108:	e0fffe15 	stw	r3,-8(fp)
  80f10c:	e0bffb17 	ldw	r2,-20(fp)
  80f110:	e0fffe17 	ldw	r3,-8(fp)
  80f114:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80f118:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80f11c:	00000d06 	br	80f154 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f120:	e0bffb17 	ldw	r2,-20(fp)
  80f124:	10c00117 	ldw	r3,4(r2)
  80f128:	00a00034 	movhi	r2,32768
  80f12c:	10bfffc4 	addi	r2,r2,-1
  80f130:	18800826 	beq	r3,r2,80f154 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f134:	e13ffd17 	ldw	r4,-12(fp)
  80f138:	e0bffb17 	ldw	r2,-20(fp)
  80f13c:	10c00917 	ldw	r3,36(r2)
  80f140:	e0bffb17 	ldw	r2,-20(fp)
  80f144:	10800117 	ldw	r2,4(r2)
  80f148:	1885803a 	cmpltu	r2,r3,r2
  80f14c:	20800015 	stw	r2,0(r4)
      rc = 0;
  80f150:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80f154:	e0bffa17 	ldw	r2,-24(fp)
}
  80f158:	e037883a 	mov	sp,fp
  80f15c:	df000017 	ldw	fp,0(sp)
  80f160:	dec00104 	addi	sp,sp,4
  80f164:	f800283a 	ret

0080f168 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f168:	defff204 	addi	sp,sp,-56
  80f16c:	dfc00d15 	stw	ra,52(sp)
  80f170:	df000c15 	stw	fp,48(sp)
  80f174:	df000c04 	addi	fp,sp,48
  80f178:	e13ffb15 	stw	r4,-20(fp)
  80f17c:	e17ffc15 	stw	r5,-16(fp)
  80f180:	e1bffd15 	stw	r6,-12(fp)
  80f184:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80f188:	e0bffc17 	ldw	r2,-16(fp)
  80f18c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f190:	00004806 	br	80f2b4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f194:	e0bffb17 	ldw	r2,-20(fp)
  80f198:	10800a17 	ldw	r2,40(r2)
  80f19c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f1a0:	e0bffb17 	ldw	r2,-20(fp)
  80f1a4:	10800b17 	ldw	r2,44(r2)
  80f1a8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80f1ac:	e0fff717 	ldw	r3,-36(fp)
  80f1b0:	e0bff617 	ldw	r2,-40(fp)
  80f1b4:	18800536 	bltu	r3,r2,80f1cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f1b8:	e0bff717 	ldw	r2,-36(fp)
  80f1bc:	e0fff617 	ldw	r3,-40(fp)
  80f1c0:	10c5c83a 	sub	r2,r2,r3
  80f1c4:	e0bff815 	stw	r2,-32(fp)
  80f1c8:	00000406 	br	80f1dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f1cc:	00820004 	movi	r2,2048
  80f1d0:	e0fff617 	ldw	r3,-40(fp)
  80f1d4:	10c5c83a 	sub	r2,r2,r3
  80f1d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80f1dc:	e0bff817 	ldw	r2,-32(fp)
  80f1e0:	1005003a 	cmpeq	r2,r2,zero
  80f1e4:	10001f1e 	bne	r2,zero,80f264 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80f1e8:	e0fffd17 	ldw	r3,-12(fp)
  80f1ec:	e0bff817 	ldw	r2,-32(fp)
  80f1f0:	1880022e 	bgeu	r3,r2,80f1fc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80f1f4:	e0bffd17 	ldw	r2,-12(fp)
  80f1f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f1fc:	e0bffb17 	ldw	r2,-20(fp)
  80f200:	10c00e04 	addi	r3,r2,56
  80f204:	e0bff617 	ldw	r2,-40(fp)
  80f208:	1887883a 	add	r3,r3,r2
  80f20c:	e0bffa17 	ldw	r2,-24(fp)
  80f210:	1009883a 	mov	r4,r2
  80f214:	180b883a 	mov	r5,r3
  80f218:	e1bff817 	ldw	r6,-32(fp)
  80f21c:	080a4a80 	call	80a4a8 <memcpy>
      ptr   += n;
  80f220:	e0fff817 	ldw	r3,-32(fp)
  80f224:	e0bffa17 	ldw	r2,-24(fp)
  80f228:	10c5883a 	add	r2,r2,r3
  80f22c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80f230:	e0fffd17 	ldw	r3,-12(fp)
  80f234:	e0bff817 	ldw	r2,-32(fp)
  80f238:	1885c83a 	sub	r2,r3,r2
  80f23c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f240:	e0fff617 	ldw	r3,-40(fp)
  80f244:	e0bff817 	ldw	r2,-32(fp)
  80f248:	1885883a 	add	r2,r3,r2
  80f24c:	10c1ffcc 	andi	r3,r2,2047
  80f250:	e0bffb17 	ldw	r2,-20(fp)
  80f254:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f258:	e0bffd17 	ldw	r2,-12(fp)
  80f25c:	10800048 	cmpgei	r2,r2,1
  80f260:	103fcc1e 	bne	r2,zero,80f194 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80f264:	e0fffa17 	ldw	r3,-24(fp)
  80f268:	e0bffc17 	ldw	r2,-16(fp)
  80f26c:	1880141e 	bne	r3,r2,80f2c0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f270:	e0bffe17 	ldw	r2,-8(fp)
  80f274:	1090000c 	andi	r2,r2,16384
  80f278:	1004c03a 	cmpne	r2,r2,zero
  80f27c:	1000101e 	bne	r2,zero,80f2c0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f280:	e0bffb17 	ldw	r2,-20(fp)
  80f284:	10c00a17 	ldw	r3,40(r2)
  80f288:	e0bff717 	ldw	r2,-36(fp)
  80f28c:	1880051e 	bne	r3,r2,80f2a4 <altera_avalon_jtag_uart_read+0x13c>
  80f290:	e0bffb17 	ldw	r2,-20(fp)
  80f294:	10c00917 	ldw	r3,36(r2)
  80f298:	e0bffb17 	ldw	r2,-20(fp)
  80f29c:	10800117 	ldw	r2,4(r2)
  80f2a0:	18bff736 	bltu	r3,r2,80f280 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f2a4:	e0bffb17 	ldw	r2,-20(fp)
  80f2a8:	10c00a17 	ldw	r3,40(r2)
  80f2ac:	e0bff717 	ldw	r2,-36(fp)
  80f2b0:	18800326 	beq	r3,r2,80f2c0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f2b4:	e0bffd17 	ldw	r2,-12(fp)
  80f2b8:	10800048 	cmpgei	r2,r2,1
  80f2bc:	103fb51e 	bne	r2,zero,80f194 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f2c0:	e0fffa17 	ldw	r3,-24(fp)
  80f2c4:	e0bffc17 	ldw	r2,-16(fp)
  80f2c8:	18801926 	beq	r3,r2,80f330 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2cc:	0005303a 	rdctl	r2,status
  80f2d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2d4:	e0fff517 	ldw	r3,-44(fp)
  80f2d8:	00bfff84 	movi	r2,-2
  80f2dc:	1884703a 	and	r2,r3,r2
  80f2e0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2e4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f2e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f2ec:	e0bffb17 	ldw	r2,-20(fp)
  80f2f0:	10800817 	ldw	r2,32(r2)
  80f2f4:	10c00054 	ori	r3,r2,1
  80f2f8:	e0bffb17 	ldw	r2,-20(fp)
  80f2fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f300:	e0bffb17 	ldw	r2,-20(fp)
  80f304:	10800017 	ldw	r2,0(r2)
  80f308:	11000104 	addi	r4,r2,4
  80f30c:	e0bffb17 	ldw	r2,-20(fp)
  80f310:	10800817 	ldw	r2,32(r2)
  80f314:	1007883a 	mov	r3,r2
  80f318:	2005883a 	mov	r2,r4
  80f31c:	10c00035 	stwio	r3,0(r2)
  80f320:	e0bff917 	ldw	r2,-28(fp)
  80f324:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f328:	e0bff417 	ldw	r2,-48(fp)
  80f32c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f330:	e0fffa17 	ldw	r3,-24(fp)
  80f334:	e0bffc17 	ldw	r2,-16(fp)
  80f338:	18800526 	beq	r3,r2,80f350 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80f33c:	e0fffa17 	ldw	r3,-24(fp)
  80f340:	e0bffc17 	ldw	r2,-16(fp)
  80f344:	1887c83a 	sub	r3,r3,r2
  80f348:	e0ffff15 	stw	r3,-4(fp)
  80f34c:	00000906 	br	80f374 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80f350:	e0bffe17 	ldw	r2,-8(fp)
  80f354:	1090000c 	andi	r2,r2,16384
  80f358:	1005003a 	cmpeq	r2,r2,zero
  80f35c:	1000031e 	bne	r2,zero,80f36c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f360:	00bffd44 	movi	r2,-11
  80f364:	e0bfff15 	stw	r2,-4(fp)
  80f368:	00000206 	br	80f374 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80f36c:	00bffec4 	movi	r2,-5
  80f370:	e0bfff15 	stw	r2,-4(fp)
  80f374:	e0bfff17 	ldw	r2,-4(fp)
}
  80f378:	e037883a 	mov	sp,fp
  80f37c:	dfc00117 	ldw	ra,4(sp)
  80f380:	df000017 	ldw	fp,0(sp)
  80f384:	dec00204 	addi	sp,sp,8
  80f388:	f800283a 	ret

0080f38c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f38c:	defff204 	addi	sp,sp,-56
  80f390:	dfc00d15 	stw	ra,52(sp)
  80f394:	df000c15 	stw	fp,48(sp)
  80f398:	df000c04 	addi	fp,sp,48
  80f39c:	e13ffb15 	stw	r4,-20(fp)
  80f3a0:	e17ffc15 	stw	r5,-16(fp)
  80f3a4:	e1bffd15 	stw	r6,-12(fp)
  80f3a8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f3ac:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f3b0:	e0bffc17 	ldw	r2,-16(fp)
  80f3b4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f3b8:	00003a06 	br	80f4a4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f3bc:	e0bffb17 	ldw	r2,-20(fp)
  80f3c0:	10800c17 	ldw	r2,48(r2)
  80f3c4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80f3c8:	e0bffb17 	ldw	r2,-20(fp)
  80f3cc:	10800d17 	ldw	r2,52(r2)
  80f3d0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80f3d4:	e0fffa17 	ldw	r3,-24(fp)
  80f3d8:	e0bff917 	ldw	r2,-28(fp)
  80f3dc:	1880062e 	bgeu	r3,r2,80f3f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f3e0:	e0fff917 	ldw	r3,-28(fp)
  80f3e4:	e0bffa17 	ldw	r2,-24(fp)
  80f3e8:	1885c83a 	sub	r2,r3,r2
  80f3ec:	10bfffc4 	addi	r2,r2,-1
  80f3f0:	e0bff815 	stw	r2,-32(fp)
  80f3f4:	00000c06 	br	80f428 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80f3f8:	e0bff917 	ldw	r2,-28(fp)
  80f3fc:	1005003a 	cmpeq	r2,r2,zero
  80f400:	1000051e 	bne	r2,zero,80f418 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f404:	00820004 	movi	r2,2048
  80f408:	e0fffa17 	ldw	r3,-24(fp)
  80f40c:	10c5c83a 	sub	r2,r2,r3
  80f410:	e0bff815 	stw	r2,-32(fp)
  80f414:	00000406 	br	80f428 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f418:	0081ffc4 	movi	r2,2047
  80f41c:	e0fffa17 	ldw	r3,-24(fp)
  80f420:	10c5c83a 	sub	r2,r2,r3
  80f424:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80f428:	e0bff817 	ldw	r2,-32(fp)
  80f42c:	1005003a 	cmpeq	r2,r2,zero
  80f430:	10001f1e 	bne	r2,zero,80f4b0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80f434:	e0fffd17 	ldw	r3,-12(fp)
  80f438:	e0bff817 	ldw	r2,-32(fp)
  80f43c:	1880022e 	bgeu	r3,r2,80f448 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80f440:	e0bffd17 	ldw	r2,-12(fp)
  80f444:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f448:	e0bffb17 	ldw	r2,-20(fp)
  80f44c:	10c20e04 	addi	r3,r2,2104
  80f450:	e0bffa17 	ldw	r2,-24(fp)
  80f454:	1885883a 	add	r2,r3,r2
  80f458:	e0fffc17 	ldw	r3,-16(fp)
  80f45c:	1009883a 	mov	r4,r2
  80f460:	180b883a 	mov	r5,r3
  80f464:	e1bff817 	ldw	r6,-32(fp)
  80f468:	080a4a80 	call	80a4a8 <memcpy>
      ptr   += n;
  80f46c:	e0fff817 	ldw	r3,-32(fp)
  80f470:	e0bffc17 	ldw	r2,-16(fp)
  80f474:	10c5883a 	add	r2,r2,r3
  80f478:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80f47c:	e0fffd17 	ldw	r3,-12(fp)
  80f480:	e0bff817 	ldw	r2,-32(fp)
  80f484:	1885c83a 	sub	r2,r3,r2
  80f488:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f48c:	e0fffa17 	ldw	r3,-24(fp)
  80f490:	e0bff817 	ldw	r2,-32(fp)
  80f494:	1885883a 	add	r2,r3,r2
  80f498:	10c1ffcc 	andi	r3,r2,2047
  80f49c:	e0bffb17 	ldw	r2,-20(fp)
  80f4a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f4a4:	e0bffd17 	ldw	r2,-12(fp)
  80f4a8:	10800048 	cmpgei	r2,r2,1
  80f4ac:	103fc31e 	bne	r2,zero,80f3bc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f4b0:	0005303a 	rdctl	r2,status
  80f4b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f4b8:	e0fff517 	ldw	r3,-44(fp)
  80f4bc:	00bfff84 	movi	r2,-2
  80f4c0:	1884703a 	and	r2,r3,r2
  80f4c4:	1001703a 	wrctl	status,r2
  
  return context;
  80f4c8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f4cc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f4d0:	e0bffb17 	ldw	r2,-20(fp)
  80f4d4:	10800817 	ldw	r2,32(r2)
  80f4d8:	10c00094 	ori	r3,r2,2
  80f4dc:	e0bffb17 	ldw	r2,-20(fp)
  80f4e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f4e4:	e0bffb17 	ldw	r2,-20(fp)
  80f4e8:	10800017 	ldw	r2,0(r2)
  80f4ec:	11000104 	addi	r4,r2,4
  80f4f0:	e0bffb17 	ldw	r2,-20(fp)
  80f4f4:	10800817 	ldw	r2,32(r2)
  80f4f8:	1007883a 	mov	r3,r2
  80f4fc:	2005883a 	mov	r2,r4
  80f500:	10c00035 	stwio	r3,0(r2)
  80f504:	e0bff717 	ldw	r2,-36(fp)
  80f508:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f50c:	e0bff417 	ldw	r2,-48(fp)
  80f510:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f514:	e0bffd17 	ldw	r2,-12(fp)
  80f518:	10800050 	cmplti	r2,r2,1
  80f51c:	1000111e 	bne	r2,zero,80f564 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80f520:	e0bffe17 	ldw	r2,-8(fp)
  80f524:	1090000c 	andi	r2,r2,16384
  80f528:	1004c03a 	cmpne	r2,r2,zero
  80f52c:	1000101e 	bne	r2,zero,80f570 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f530:	e0bffb17 	ldw	r2,-20(fp)
  80f534:	10c00d17 	ldw	r3,52(r2)
  80f538:	e0bff917 	ldw	r2,-28(fp)
  80f53c:	1880051e 	bne	r3,r2,80f554 <altera_avalon_jtag_uart_write+0x1c8>
  80f540:	e0bffb17 	ldw	r2,-20(fp)
  80f544:	10c00917 	ldw	r3,36(r2)
  80f548:	e0bffb17 	ldw	r2,-20(fp)
  80f54c:	10800117 	ldw	r2,4(r2)
  80f550:	18bff736 	bltu	r3,r2,80f530 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80f554:	e0bffb17 	ldw	r2,-20(fp)
  80f558:	10c00d17 	ldw	r3,52(r2)
  80f55c:	e0bff917 	ldw	r2,-28(fp)
  80f560:	18800326 	beq	r3,r2,80f570 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80f564:	e0bffd17 	ldw	r2,-12(fp)
  80f568:	10800048 	cmpgei	r2,r2,1
  80f56c:	103fcd1e 	bne	r2,zero,80f4a4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f570:	e0fffc17 	ldw	r3,-16(fp)
  80f574:	e0bff617 	ldw	r2,-40(fp)
  80f578:	18800526 	beq	r3,r2,80f590 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80f57c:	e0fffc17 	ldw	r3,-16(fp)
  80f580:	e0bff617 	ldw	r2,-40(fp)
  80f584:	1887c83a 	sub	r3,r3,r2
  80f588:	e0ffff15 	stw	r3,-4(fp)
  80f58c:	00000906 	br	80f5b4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80f590:	e0bffe17 	ldw	r2,-8(fp)
  80f594:	1090000c 	andi	r2,r2,16384
  80f598:	1005003a 	cmpeq	r2,r2,zero
  80f59c:	1000031e 	bne	r2,zero,80f5ac <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80f5a0:	00bffd44 	movi	r2,-11
  80f5a4:	e0bfff15 	stw	r2,-4(fp)
  80f5a8:	00000206 	br	80f5b4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80f5ac:	00bffec4 	movi	r2,-5
  80f5b0:	e0bfff15 	stw	r2,-4(fp)
  80f5b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f5b8:	e037883a 	mov	sp,fp
  80f5bc:	dfc00117 	ldw	ra,4(sp)
  80f5c0:	df000017 	ldw	fp,0(sp)
  80f5c4:	dec00204 	addi	sp,sp,8
  80f5c8:	f800283a 	ret

0080f5cc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80f5cc:	defffa04 	addi	sp,sp,-24
  80f5d0:	dfc00515 	stw	ra,20(sp)
  80f5d4:	df000415 	stw	fp,16(sp)
  80f5d8:	df000404 	addi	fp,sp,16
  80f5dc:	e13ffe15 	stw	r4,-8(fp)
  80f5e0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80f5e4:	e0bffe17 	ldw	r2,-8(fp)
  80f5e8:	10800017 	ldw	r2,0(r2)
  80f5ec:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f5f0:	008003f4 	movhi	r2,15
  80f5f4:	10909004 	addi	r2,r2,16960
  80f5f8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f5fc:	e0bffe17 	ldw	r2,-8(fp)
  80f600:	10800803 	ldbu	r2,32(r2)
  80f604:	10803fcc 	andi	r2,r2,255
  80f608:	1080201c 	xori	r2,r2,128
  80f60c:	10bfe004 	addi	r2,r2,-128
  80f610:	1004c03a 	cmpne	r2,r2,zero
  80f614:	1000161e 	bne	r2,zero,80f670 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f618:	00000a06 	br	80f644 <lcd_write_command+0x78>
    if (--i == 0)
  80f61c:	e0bffc17 	ldw	r2,-16(fp)
  80f620:	10bfffc4 	addi	r2,r2,-1
  80f624:	e0bffc15 	stw	r2,-16(fp)
  80f628:	e0bffc17 	ldw	r2,-16(fp)
  80f62c:	1004c03a 	cmpne	r2,r2,zero
  80f630:	1000041e 	bne	r2,zero,80f644 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80f634:	e0fffe17 	ldw	r3,-8(fp)
  80f638:	00800044 	movi	r2,1
  80f63c:	18800805 	stb	r2,32(r3)
      return;
  80f640:	00000b06 	br	80f670 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f644:	e0bffd17 	ldw	r2,-12(fp)
  80f648:	10800104 	addi	r2,r2,4
  80f64c:	10800037 	ldwio	r2,0(r2)
  80f650:	1080200c 	andi	r2,r2,128
  80f654:	1004c03a 	cmpne	r2,r2,zero
  80f658:	103ff01e 	bne	r2,zero,80f61c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f65c:	01001904 	movi	r4,100
  80f660:	080e88c0 	call	80e88c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80f664:	e0bffd17 	ldw	r2,-12(fp)
  80f668:	e0ffff03 	ldbu	r3,-4(fp)
  80f66c:	10c00035 	stwio	r3,0(r2)
}
  80f670:	e037883a 	mov	sp,fp
  80f674:	dfc00117 	ldw	ra,4(sp)
  80f678:	df000017 	ldw	fp,0(sp)
  80f67c:	dec00204 	addi	sp,sp,8
  80f680:	f800283a 	ret

0080f684 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80f684:	defffa04 	addi	sp,sp,-24
  80f688:	dfc00515 	stw	ra,20(sp)
  80f68c:	df000415 	stw	fp,16(sp)
  80f690:	df000404 	addi	fp,sp,16
  80f694:	e13ffe15 	stw	r4,-8(fp)
  80f698:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80f69c:	e0bffe17 	ldw	r2,-8(fp)
  80f6a0:	10800017 	ldw	r2,0(r2)
  80f6a4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f6a8:	008003f4 	movhi	r2,15
  80f6ac:	10909004 	addi	r2,r2,16960
  80f6b0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f6b4:	e0bffe17 	ldw	r2,-8(fp)
  80f6b8:	10800803 	ldbu	r2,32(r2)
  80f6bc:	10803fcc 	andi	r2,r2,255
  80f6c0:	1080201c 	xori	r2,r2,128
  80f6c4:	10bfe004 	addi	r2,r2,-128
  80f6c8:	1004c03a 	cmpne	r2,r2,zero
  80f6cc:	10001d1e 	bne	r2,zero,80f744 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f6d0:	00000a06 	br	80f6fc <lcd_write_data+0x78>
    if (--i == 0)
  80f6d4:	e0bffc17 	ldw	r2,-16(fp)
  80f6d8:	10bfffc4 	addi	r2,r2,-1
  80f6dc:	e0bffc15 	stw	r2,-16(fp)
  80f6e0:	e0bffc17 	ldw	r2,-16(fp)
  80f6e4:	1004c03a 	cmpne	r2,r2,zero
  80f6e8:	1000041e 	bne	r2,zero,80f6fc <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80f6ec:	e0fffe17 	ldw	r3,-8(fp)
  80f6f0:	00800044 	movi	r2,1
  80f6f4:	18800805 	stb	r2,32(r3)
      return;
  80f6f8:	00001206 	br	80f744 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f6fc:	e0bffd17 	ldw	r2,-12(fp)
  80f700:	10800104 	addi	r2,r2,4
  80f704:	10800037 	ldwio	r2,0(r2)
  80f708:	1080200c 	andi	r2,r2,128
  80f70c:	1004c03a 	cmpne	r2,r2,zero
  80f710:	103ff01e 	bne	r2,zero,80f6d4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f714:	01001904 	movi	r4,100
  80f718:	080e88c0 	call	80e88c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80f71c:	e0bffd17 	ldw	r2,-12(fp)
  80f720:	10800204 	addi	r2,r2,8
  80f724:	e0ffff03 	ldbu	r3,-4(fp)
  80f728:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80f72c:	e0bffe17 	ldw	r2,-8(fp)
  80f730:	108008c3 	ldbu	r2,35(r2)
  80f734:	10800044 	addi	r2,r2,1
  80f738:	1007883a 	mov	r3,r2
  80f73c:	e0bffe17 	ldw	r2,-8(fp)
  80f740:	10c008c5 	stb	r3,35(r2)
}
  80f744:	e037883a 	mov	sp,fp
  80f748:	dfc00117 	ldw	ra,4(sp)
  80f74c:	df000017 	ldw	fp,0(sp)
  80f750:	dec00204 	addi	sp,sp,8
  80f754:	f800283a 	ret

0080f758 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80f758:	defffb04 	addi	sp,sp,-20
  80f75c:	dfc00415 	stw	ra,16(sp)
  80f760:	df000315 	stw	fp,12(sp)
  80f764:	dc000215 	stw	r16,8(sp)
  80f768:	df000204 	addi	fp,sp,8
  80f76c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80f770:	e13fff17 	ldw	r4,-4(fp)
  80f774:	01400044 	movi	r5,1
  80f778:	080f5cc0 	call	80f5cc <lcd_write_command>

  sp->x = 0;
  80f77c:	e0bfff17 	ldw	r2,-4(fp)
  80f780:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80f784:	e0bfff17 	ldw	r2,-4(fp)
  80f788:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80f78c:	e0bfff17 	ldw	r2,-4(fp)
  80f790:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f794:	e03ffe15 	stw	zero,-8(fp)
  80f798:	00001c06 	br	80f80c <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80f79c:	e13ffe17 	ldw	r4,-8(fp)
  80f7a0:	014018c4 	movi	r5,99
  80f7a4:	0803eb80 	call	803eb8 <__mulsi3>
  80f7a8:	10c01004 	addi	r3,r2,64
  80f7ac:	e0bfff17 	ldw	r2,-4(fp)
  80f7b0:	1889883a 	add	r4,r3,r2
  80f7b4:	01400804 	movi	r5,32
  80f7b8:	01801444 	movi	r6,81
  80f7bc:	08044bc0 	call	8044bc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80f7c0:	e13ffe17 	ldw	r4,-8(fp)
  80f7c4:	014018c4 	movi	r5,99
  80f7c8:	0803eb80 	call	803eb8 <__mulsi3>
  80f7cc:	10c00c04 	addi	r3,r2,48
  80f7d0:	e0bfff17 	ldw	r2,-4(fp)
  80f7d4:	1889883a 	add	r4,r3,r2
  80f7d8:	01400804 	movi	r5,32
  80f7dc:	01800404 	movi	r6,16
  80f7e0:	08044bc0 	call	8044bc <memset>
    sp->line[y].width = 0;
  80f7e4:	e13ffe17 	ldw	r4,-8(fp)
  80f7e8:	e43fff17 	ldw	r16,-4(fp)
  80f7ec:	014018c4 	movi	r5,99
  80f7f0:	0803eb80 	call	803eb8 <__mulsi3>
  80f7f4:	1405883a 	add	r2,r2,r16
  80f7f8:	10802404 	addi	r2,r2,144
  80f7fc:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f800:	e0bffe17 	ldw	r2,-8(fp)
  80f804:	10800044 	addi	r2,r2,1
  80f808:	e0bffe15 	stw	r2,-8(fp)
  80f80c:	e0bffe17 	ldw	r2,-8(fp)
  80f810:	10800090 	cmplti	r2,r2,2
  80f814:	103fe11e 	bne	r2,zero,80f79c <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80f818:	e037883a 	mov	sp,fp
  80f81c:	dfc00217 	ldw	ra,8(sp)
  80f820:	df000117 	ldw	fp,4(sp)
  80f824:	dc000017 	ldw	r16,0(sp)
  80f828:	dec00304 	addi	sp,sp,12
  80f82c:	f800283a 	ret

0080f830 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80f830:	defff404 	addi	sp,sp,-48
  80f834:	dfc00b15 	stw	ra,44(sp)
  80f838:	df000a15 	stw	fp,40(sp)
  80f83c:	dc800915 	stw	r18,36(sp)
  80f840:	dc400815 	stw	r17,32(sp)
  80f844:	dc000715 	stw	r16,28(sp)
  80f848:	df000704 	addi	fp,sp,28
  80f84c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80f850:	e0bfff17 	ldw	r2,-4(fp)
  80f854:	10800943 	ldbu	r2,37(r2)
  80f858:	10803fcc 	andi	r2,r2,255
  80f85c:	1080201c 	xori	r2,r2,128
  80f860:	10bfe004 	addi	r2,r2,-128
  80f864:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f868:	e03ffe15 	stw	zero,-8(fp)
  80f86c:	00006a06 	br	80fa18 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
  80f870:	e13ffe17 	ldw	r4,-8(fp)
  80f874:	e43fff17 	ldw	r16,-4(fp)
  80f878:	014018c4 	movi	r5,99
  80f87c:	0803eb80 	call	803eb8 <__mulsi3>
  80f880:	1405883a 	add	r2,r2,r16
  80f884:	10802404 	addi	r2,r2,144
  80f888:	10800043 	ldbu	r2,1(r2)
  80f88c:	10803fcc 	andi	r2,r2,255
  80f890:	1080201c 	xori	r2,r2,128
  80f894:	10bfe004 	addi	r2,r2,-128
  80f898:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80f89c:	e13ffe17 	ldw	r4,-8(fp)
  80f8a0:	e43fff17 	ldw	r16,-4(fp)
  80f8a4:	014018c4 	movi	r5,99
  80f8a8:	0803eb80 	call	803eb8 <__mulsi3>
  80f8ac:	1405883a 	add	r2,r2,r16
  80f8b0:	10802404 	addi	r2,r2,144
  80f8b4:	10800083 	ldbu	r2,2(r2)
  80f8b8:	11003fcc 	andi	r4,r2,255
  80f8bc:	e17ffc17 	ldw	r5,-16(fp)
  80f8c0:	0803eb80 	call	803eb8 <__mulsi3>
  80f8c4:	1005d23a 	srai	r2,r2,8
  80f8c8:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80f8cc:	e0fffa17 	ldw	r3,-24(fp)
  80f8d0:	e0bffb17 	ldw	r2,-20(fp)
  80f8d4:	18800116 	blt	r3,r2,80f8dc <lcd_repaint_screen+0xac>
      offset = 0;
  80f8d8:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f8dc:	e03ffd15 	stw	zero,-12(fp)
  80f8e0:	00004706 	br	80fa00 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80f8e4:	e47ffe17 	ldw	r17,-8(fp)
  80f8e8:	e0fffd17 	ldw	r3,-12(fp)
  80f8ec:	e0bffa17 	ldw	r2,-24(fp)
  80f8f0:	1889883a 	add	r4,r3,r2
  80f8f4:	e17ffb17 	ldw	r5,-20(fp)
  80f8f8:	0803e480 	call	803e48 <__modsi3>
  80f8fc:	1025883a 	mov	r18,r2
  80f900:	e43fff17 	ldw	r16,-4(fp)
  80f904:	8809883a 	mov	r4,r17
  80f908:	014018c4 	movi	r5,99
  80f90c:	0803eb80 	call	803eb8 <__mulsi3>
  80f910:	1405883a 	add	r2,r2,r16
  80f914:	1485883a 	add	r2,r2,r18
  80f918:	10801004 	addi	r2,r2,64
  80f91c:	10800003 	ldbu	r2,0(r2)
  80f920:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80f924:	e13ffe17 	ldw	r4,-8(fp)
  80f928:	e47ffd17 	ldw	r17,-12(fp)
  80f92c:	e43fff17 	ldw	r16,-4(fp)
  80f930:	014018c4 	movi	r5,99
  80f934:	0803eb80 	call	803eb8 <__mulsi3>
  80f938:	1405883a 	add	r2,r2,r16
  80f93c:	1445883a 	add	r2,r2,r17
  80f940:	10800c04 	addi	r2,r2,48
  80f944:	10800003 	ldbu	r2,0(r2)
  80f948:	10c03fcc 	andi	r3,r2,255
  80f94c:	18c0201c 	xori	r3,r3,128
  80f950:	18ffe004 	addi	r3,r3,-128
  80f954:	e0bff947 	ldb	r2,-27(fp)
  80f958:	18802626 	beq	r3,r2,80f9f4 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
  80f95c:	e0fffe17 	ldw	r3,-8(fp)
  80f960:	d0a01f04 	addi	r2,gp,-32644
  80f964:	1885883a 	add	r2,r3,r2
  80f968:	10800003 	ldbu	r2,0(r2)
  80f96c:	1007883a 	mov	r3,r2
  80f970:	e0bffd17 	ldw	r2,-12(fp)
  80f974:	1885883a 	add	r2,r3,r2
  80f978:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80f97c:	e0fff903 	ldbu	r3,-28(fp)
  80f980:	e0bfff17 	ldw	r2,-4(fp)
  80f984:	108008c3 	ldbu	r2,35(r2)
  80f988:	10803fcc 	andi	r2,r2,255
  80f98c:	1080201c 	xori	r2,r2,128
  80f990:	10bfe004 	addi	r2,r2,-128
  80f994:	18800926 	beq	r3,r2,80f9bc <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80f998:	e0fff903 	ldbu	r3,-28(fp)
  80f99c:	00bfe004 	movi	r2,-128
  80f9a0:	1884b03a 	or	r2,r3,r2
  80f9a4:	11403fcc 	andi	r5,r2,255
  80f9a8:	e13fff17 	ldw	r4,-4(fp)
  80f9ac:	080f5cc0 	call	80f5cc <lcd_write_command>
          sp->address = address;
  80f9b0:	e0fff903 	ldbu	r3,-28(fp)
  80f9b4:	e0bfff17 	ldw	r2,-4(fp)
  80f9b8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80f9bc:	e0bff943 	ldbu	r2,-27(fp)
  80f9c0:	11403fcc 	andi	r5,r2,255
  80f9c4:	e13fff17 	ldw	r4,-4(fp)
  80f9c8:	080f6840 	call	80f684 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80f9cc:	e13ffe17 	ldw	r4,-8(fp)
  80f9d0:	e47ffd17 	ldw	r17,-12(fp)
  80f9d4:	e43fff17 	ldw	r16,-4(fp)
  80f9d8:	014018c4 	movi	r5,99
  80f9dc:	0803eb80 	call	803eb8 <__mulsi3>
  80f9e0:	1405883a 	add	r2,r2,r16
  80f9e4:	1445883a 	add	r2,r2,r17
  80f9e8:	10c00c04 	addi	r3,r2,48
  80f9ec:	e0bff943 	ldbu	r2,-27(fp)
  80f9f0:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f9f4:	e0bffd17 	ldw	r2,-12(fp)
  80f9f8:	10800044 	addi	r2,r2,1
  80f9fc:	e0bffd15 	stw	r2,-12(fp)
  80fa00:	e0bffd17 	ldw	r2,-12(fp)
  80fa04:	10800410 	cmplti	r2,r2,16
  80fa08:	103fb61e 	bne	r2,zero,80f8e4 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fa0c:	e0bffe17 	ldw	r2,-8(fp)
  80fa10:	10800044 	addi	r2,r2,1
  80fa14:	e0bffe15 	stw	r2,-8(fp)
  80fa18:	e0bffe17 	ldw	r2,-8(fp)
  80fa1c:	10800090 	cmplti	r2,r2,2
  80fa20:	103f931e 	bne	r2,zero,80f870 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80fa24:	e037883a 	mov	sp,fp
  80fa28:	dfc00417 	ldw	ra,16(sp)
  80fa2c:	df000317 	ldw	fp,12(sp)
  80fa30:	dc800217 	ldw	r18,8(sp)
  80fa34:	dc400117 	ldw	r17,4(sp)
  80fa38:	dc000017 	ldw	r16,0(sp)
  80fa3c:	dec00504 	addi	sp,sp,20
  80fa40:	f800283a 	ret

0080fa44 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80fa44:	defffb04 	addi	sp,sp,-20
  80fa48:	dfc00415 	stw	ra,16(sp)
  80fa4c:	df000315 	stw	fp,12(sp)
  80fa50:	dc000215 	stw	r16,8(sp)
  80fa54:	df000204 	addi	fp,sp,8
  80fa58:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fa5c:	e03ffe15 	stw	zero,-8(fp)
  80fa60:	00002106 	br	80fae8 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80fa64:	e0bffe17 	ldw	r2,-8(fp)
  80fa68:	10800048 	cmpgei	r2,r2,1
  80fa6c:	1000121e 	bne	r2,zero,80fab8 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80fa70:	e13ffe17 	ldw	r4,-8(fp)
  80fa74:	014018c4 	movi	r5,99
  80fa78:	0803eb80 	call	803eb8 <__mulsi3>
  80fa7c:	10c01004 	addi	r3,r2,64
  80fa80:	e0bfff17 	ldw	r2,-4(fp)
  80fa84:	18a1883a 	add	r16,r3,r2
  80fa88:	e0bffe17 	ldw	r2,-8(fp)
  80fa8c:	11000044 	addi	r4,r2,1
  80fa90:	014018c4 	movi	r5,99
  80fa94:	0803eb80 	call	803eb8 <__mulsi3>
  80fa98:	10c01004 	addi	r3,r2,64
  80fa9c:	e0bfff17 	ldw	r2,-4(fp)
  80faa0:	1885883a 	add	r2,r3,r2
  80faa4:	8009883a 	mov	r4,r16
  80faa8:	100b883a 	mov	r5,r2
  80faac:	01801404 	movi	r6,80
  80fab0:	080a4a80 	call	80a4a8 <memcpy>
  80fab4:	00000906 	br	80fadc <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80fab8:	e13ffe17 	ldw	r4,-8(fp)
  80fabc:	014018c4 	movi	r5,99
  80fac0:	0803eb80 	call	803eb8 <__mulsi3>
  80fac4:	10c01004 	addi	r3,r2,64
  80fac8:	e0bfff17 	ldw	r2,-4(fp)
  80facc:	1889883a 	add	r4,r3,r2
  80fad0:	01400804 	movi	r5,32
  80fad4:	01801404 	movi	r6,80
  80fad8:	08044bc0 	call	8044bc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fadc:	e0bffe17 	ldw	r2,-8(fp)
  80fae0:	10800044 	addi	r2,r2,1
  80fae4:	e0bffe15 	stw	r2,-8(fp)
  80fae8:	e0bffe17 	ldw	r2,-8(fp)
  80faec:	10800090 	cmplti	r2,r2,2
  80faf0:	103fdc1e 	bne	r2,zero,80fa64 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80faf4:	e0bfff17 	ldw	r2,-4(fp)
  80faf8:	10800883 	ldbu	r2,34(r2)
  80fafc:	10bfffc4 	addi	r2,r2,-1
  80fb00:	1007883a 	mov	r3,r2
  80fb04:	e0bfff17 	ldw	r2,-4(fp)
  80fb08:	10c00885 	stb	r3,34(r2)
}
  80fb0c:	e037883a 	mov	sp,fp
  80fb10:	dfc00217 	ldw	ra,8(sp)
  80fb14:	df000117 	ldw	fp,4(sp)
  80fb18:	dc000017 	ldw	r16,0(sp)
  80fb1c:	dec00304 	addi	sp,sp,12
  80fb20:	f800283a 	ret

0080fb24 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80fb24:	defff804 	addi	sp,sp,-32
  80fb28:	dfc00715 	stw	ra,28(sp)
  80fb2c:	df000615 	stw	fp,24(sp)
  80fb30:	df000604 	addi	fp,sp,24
  80fb34:	e13ffd15 	stw	r4,-12(fp)
  80fb38:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80fb3c:	e03ffc15 	stw	zero,-16(fp)
  80fb40:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80fb44:	e0bffd17 	ldw	r2,-12(fp)
  80fb48:	10800a03 	ldbu	r2,40(r2)
  80fb4c:	10803fcc 	andi	r2,r2,255
  80fb50:	1080201c 	xori	r2,r2,128
  80fb54:	10bfe004 	addi	r2,r2,-128
  80fb58:	108016d8 	cmpnei	r2,r2,91
  80fb5c:	10004d1e 	bne	r2,zero,80fc94 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
  80fb60:	e0bffd17 	ldw	r2,-12(fp)
  80fb64:	10800a04 	addi	r2,r2,40
  80fb68:	10800044 	addi	r2,r2,1
  80fb6c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80fb70:	00000f06 	br	80fbb0 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80fb74:	e13ffc17 	ldw	r4,-16(fp)
  80fb78:	01400284 	movi	r5,10
  80fb7c:	0803eb80 	call	803eb8 <__mulsi3>
  80fb80:	1007883a 	mov	r3,r2
  80fb84:	e0bffa17 	ldw	r2,-24(fp)
  80fb88:	10800003 	ldbu	r2,0(r2)
  80fb8c:	10803fcc 	andi	r2,r2,255
  80fb90:	1080201c 	xori	r2,r2,128
  80fb94:	10bfe004 	addi	r2,r2,-128
  80fb98:	1885883a 	add	r2,r3,r2
  80fb9c:	10bff404 	addi	r2,r2,-48
  80fba0:	e0bffc15 	stw	r2,-16(fp)
  80fba4:	e0bffa17 	ldw	r2,-24(fp)
  80fba8:	10800044 	addi	r2,r2,1
  80fbac:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80fbb0:	e0bffa17 	ldw	r2,-24(fp)
  80fbb4:	10800003 	ldbu	r2,0(r2)
  80fbb8:	10803fcc 	andi	r2,r2,255
  80fbbc:	1080201c 	xori	r2,r2,128
  80fbc0:	10bfe004 	addi	r2,r2,-128
  80fbc4:	1007883a 	mov	r3,r2
  80fbc8:	00802074 	movhi	r2,129
  80fbcc:	1091bd04 	addi	r2,r2,18164
  80fbd0:	10800017 	ldw	r2,0(r2)
  80fbd4:	1885883a 	add	r2,r3,r2
  80fbd8:	10800003 	ldbu	r2,0(r2)
  80fbdc:	10803fcc 	andi	r2,r2,255
  80fbe0:	1080010c 	andi	r2,r2,4
  80fbe4:	1004c03a 	cmpne	r2,r2,zero
  80fbe8:	103fe21e 	bne	r2,zero,80fb74 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80fbec:	e0bffa17 	ldw	r2,-24(fp)
  80fbf0:	10800003 	ldbu	r2,0(r2)
  80fbf4:	10803fcc 	andi	r2,r2,255
  80fbf8:	1080201c 	xori	r2,r2,128
  80fbfc:	10bfe004 	addi	r2,r2,-128
  80fc00:	10800ed8 	cmpnei	r2,r2,59
  80fc04:	1000251e 	bne	r2,zero,80fc9c <lcd_handle_escape+0x178>
    {
      ptr++;
  80fc08:	e0bffa17 	ldw	r2,-24(fp)
  80fc0c:	10800044 	addi	r2,r2,1
  80fc10:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80fc14:	00000f06 	br	80fc54 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80fc18:	e13ffb17 	ldw	r4,-20(fp)
  80fc1c:	01400284 	movi	r5,10
  80fc20:	0803eb80 	call	803eb8 <__mulsi3>
  80fc24:	1007883a 	mov	r3,r2
  80fc28:	e0bffa17 	ldw	r2,-24(fp)
  80fc2c:	10800003 	ldbu	r2,0(r2)
  80fc30:	10803fcc 	andi	r2,r2,255
  80fc34:	1080201c 	xori	r2,r2,128
  80fc38:	10bfe004 	addi	r2,r2,-128
  80fc3c:	1885883a 	add	r2,r3,r2
  80fc40:	10bff404 	addi	r2,r2,-48
  80fc44:	e0bffb15 	stw	r2,-20(fp)
  80fc48:	e0bffa17 	ldw	r2,-24(fp)
  80fc4c:	10800044 	addi	r2,r2,1
  80fc50:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80fc54:	e0bffa17 	ldw	r2,-24(fp)
  80fc58:	10800003 	ldbu	r2,0(r2)
  80fc5c:	10803fcc 	andi	r2,r2,255
  80fc60:	1080201c 	xori	r2,r2,128
  80fc64:	10bfe004 	addi	r2,r2,-128
  80fc68:	1007883a 	mov	r3,r2
  80fc6c:	00802074 	movhi	r2,129
  80fc70:	1091bd04 	addi	r2,r2,18164
  80fc74:	10800017 	ldw	r2,0(r2)
  80fc78:	1885883a 	add	r2,r3,r2
  80fc7c:	10800003 	ldbu	r2,0(r2)
  80fc80:	10803fcc 	andi	r2,r2,255
  80fc84:	1080010c 	andi	r2,r2,4
  80fc88:	1004c03a 	cmpne	r2,r2,zero
  80fc8c:	103fe21e 	bne	r2,zero,80fc18 <lcd_handle_escape+0xf4>
  80fc90:	00000206 	br	80fc9c <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80fc94:	00bfffc4 	movi	r2,-1
  80fc98:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80fc9c:	e0bffe07 	ldb	r2,-8(fp)
  80fca0:	e0bfff15 	stw	r2,-4(fp)
  80fca4:	e0ffff17 	ldw	r3,-4(fp)
  80fca8:	188012a0 	cmpeqi	r2,r3,74
  80fcac:	10002f1e 	bne	r2,zero,80fd6c <lcd_handle_escape+0x248>
  80fcb0:	e0ffff17 	ldw	r3,-4(fp)
  80fcb4:	188012c8 	cmpgei	r2,r3,75
  80fcb8:	1000041e 	bne	r2,zero,80fccc <lcd_handle_escape+0x1a8>
  80fcbc:	e0ffff17 	ldw	r3,-4(fp)
  80fcc0:	18801220 	cmpeqi	r2,r3,72
  80fcc4:	1000081e 	bne	r2,zero,80fce8 <lcd_handle_escape+0x1c4>
  80fcc8:	00004a06 	br	80fdf4 <lcd_handle_escape+0x2d0>
  80fccc:	e0ffff17 	ldw	r3,-4(fp)
  80fcd0:	188012e0 	cmpeqi	r2,r3,75
  80fcd4:	10002b1e 	bne	r2,zero,80fd84 <lcd_handle_escape+0x260>
  80fcd8:	e0ffff17 	ldw	r3,-4(fp)
  80fcdc:	188019a0 	cmpeqi	r2,r3,102
  80fce0:	1000011e 	bne	r2,zero,80fce8 <lcd_handle_escape+0x1c4>
  80fce4:	00004306 	br	80fdf4 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80fce8:	e0bffb17 	ldw	r2,-20(fp)
  80fcec:	10800050 	cmplti	r2,r2,1
  80fcf0:	1000051e 	bne	r2,zero,80fd08 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
  80fcf4:	e0bffb17 	ldw	r2,-20(fp)
  80fcf8:	10bfffc4 	addi	r2,r2,-1
  80fcfc:	1007883a 	mov	r3,r2
  80fd00:	e0bffd17 	ldw	r2,-12(fp)
  80fd04:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80fd08:	e0bffc17 	ldw	r2,-16(fp)
  80fd0c:	10800050 	cmplti	r2,r2,1
  80fd10:	1000381e 	bne	r2,zero,80fdf4 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
  80fd14:	e0bffc17 	ldw	r2,-16(fp)
  80fd18:	10bfffc4 	addi	r2,r2,-1
  80fd1c:	1007883a 	mov	r3,r2
  80fd20:	e0bffd17 	ldw	r2,-12(fp)
  80fd24:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80fd28:	e0bffd17 	ldw	r2,-12(fp)
  80fd2c:	10800883 	ldbu	r2,34(r2)
  80fd30:	10803fcc 	andi	r2,r2,255
  80fd34:	10800170 	cmpltui	r2,r2,5
  80fd38:	1000061e 	bne	r2,zero,80fd54 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
  80fd3c:	e0fffd17 	ldw	r3,-12(fp)
  80fd40:	00800104 	movi	r2,4
  80fd44:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80fd48:	00000206 	br	80fd54 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
  80fd4c:	e13ffd17 	ldw	r4,-12(fp)
  80fd50:	080fa440 	call	80fa44 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80fd54:	e0bffd17 	ldw	r2,-12(fp)
  80fd58:	10800883 	ldbu	r2,34(r2)
  80fd5c:	10803fcc 	andi	r2,r2,255
  80fd60:	108000e8 	cmpgeui	r2,r2,3
  80fd64:	103ff91e 	bne	r2,zero,80fd4c <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
  80fd68:	00002206 	br	80fdf4 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80fd6c:	e0bffc17 	ldw	r2,-16(fp)
  80fd70:	10800098 	cmpnei	r2,r2,2
  80fd74:	10001f1e 	bne	r2,zero,80fdf4 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
  80fd78:	e13ffd17 	ldw	r4,-12(fp)
  80fd7c:	080f7580 	call	80f758 <lcd_clear_screen>
    break;
  80fd80:	00001c06 	br	80fdf4 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80fd84:	e0bffc17 	ldw	r2,-16(fp)
  80fd88:	10800048 	cmpgei	r2,r2,1
  80fd8c:	1000191e 	bne	r2,zero,80fdf4 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80fd90:	e0bffd17 	ldw	r2,-12(fp)
  80fd94:	10800843 	ldbu	r2,33(r2)
  80fd98:	10803fcc 	andi	r2,r2,255
  80fd9c:	10801428 	cmpgeui	r2,r2,80
  80fda0:	1000141e 	bne	r2,zero,80fdf4 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80fda4:	e0bffd17 	ldw	r2,-12(fp)
  80fda8:	10800883 	ldbu	r2,34(r2)
  80fdac:	11003fcc 	andi	r4,r2,255
  80fdb0:	014018c4 	movi	r5,99
  80fdb4:	0803eb80 	call	803eb8 <__mulsi3>
  80fdb8:	10c01004 	addi	r3,r2,64
  80fdbc:	e0bffd17 	ldw	r2,-12(fp)
  80fdc0:	1887883a 	add	r3,r3,r2
  80fdc4:	e0bffd17 	ldw	r2,-12(fp)
  80fdc8:	10800843 	ldbu	r2,33(r2)
  80fdcc:	10803fcc 	andi	r2,r2,255
  80fdd0:	1889883a 	add	r4,r3,r2
  80fdd4:	e0bffd17 	ldw	r2,-12(fp)
  80fdd8:	10800843 	ldbu	r2,33(r2)
  80fddc:	10c03fcc 	andi	r3,r2,255
  80fde0:	00801404 	movi	r2,80
  80fde4:	10c5c83a 	sub	r2,r2,r3
  80fde8:	100d883a 	mov	r6,r2
  80fdec:	01400804 	movi	r5,32
  80fdf0:	08044bc0 	call	8044bc <memset>
    }
    break;
  }
}
  80fdf4:	e037883a 	mov	sp,fp
  80fdf8:	dfc00117 	ldw	ra,4(sp)
  80fdfc:	df000017 	ldw	fp,0(sp)
  80fe00:	dec00204 	addi	sp,sp,8
  80fe04:	f800283a 	ret

0080fe08 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80fe08:	defff004 	addi	sp,sp,-64
  80fe0c:	dfc00f15 	stw	ra,60(sp)
  80fe10:	df000e15 	stw	fp,56(sp)
  80fe14:	dc800d15 	stw	r18,52(sp)
  80fe18:	dc400c15 	stw	r17,48(sp)
  80fe1c:	dc000b15 	stw	r16,44(sp)
  80fe20:	df000b04 	addi	fp,sp,44
  80fe24:	e13ffc15 	stw	r4,-16(fp)
  80fe28:	e17ffd15 	stw	r5,-12(fp)
  80fe2c:	e1bffe15 	stw	r6,-8(fp)
  80fe30:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80fe34:	e0bffe17 	ldw	r2,-8(fp)
  80fe38:	1007883a 	mov	r3,r2
  80fe3c:	e0bffd17 	ldw	r2,-12(fp)
  80fe40:	10c5883a 	add	r2,r2,r3
  80fe44:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80fe48:	e0fffc17 	ldw	r3,-16(fp)
  80fe4c:	00800044 	movi	r2,1
  80fe50:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80fe54:	0000a306 	br	8100e4 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
  80fe58:	e0bffd17 	ldw	r2,-12(fp)
  80fe5c:	10800003 	ldbu	r2,0(r2)
  80fe60:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80fe64:	e0bffc17 	ldw	r2,-16(fp)
  80fe68:	10800903 	ldbu	r2,36(r2)
  80fe6c:	10803fcc 	andi	r2,r2,255
  80fe70:	1080201c 	xori	r2,r2,128
  80fe74:	10bfe004 	addi	r2,r2,-128
  80fe78:	1004803a 	cmplt	r2,r2,zero
  80fe7c:	10003b1e 	bne	r2,zero,80ff6c <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
  80fe80:	e0bffc17 	ldw	r2,-16(fp)
  80fe84:	10800903 	ldbu	r2,36(r2)
  80fe88:	10803fcc 	andi	r2,r2,255
  80fe8c:	1080201c 	xori	r2,r2,128
  80fe90:	10bfe004 	addi	r2,r2,-128
  80fe94:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80fe98:	e0bff717 	ldw	r2,-36(fp)
  80fe9c:	1004c03a 	cmpne	r2,r2,zero
  80fea0:	1000031e 	bne	r2,zero,80feb0 <altera_avalon_lcd_16207_write+0xa8>
  80fea4:	e0bff807 	ldb	r2,-32(fp)
  80fea8:	108016d8 	cmpnei	r2,r2,91
  80feac:	1000111e 	bne	r2,zero,80fef4 <altera_avalon_lcd_16207_write+0xec>
  80feb0:	e0bff717 	ldw	r2,-36(fp)
  80feb4:	1005003a 	cmpeq	r2,r2,zero
  80feb8:	10001a1e 	bne	r2,zero,80ff24 <altera_avalon_lcd_16207_write+0x11c>
  80febc:	e0bff807 	ldb	r2,-32(fp)
  80fec0:	1007883a 	mov	r3,r2
  80fec4:	00802074 	movhi	r2,129
  80fec8:	1091bd04 	addi	r2,r2,18164
  80fecc:	10800017 	ldw	r2,0(r2)
  80fed0:	1885883a 	add	r2,r3,r2
  80fed4:	10800003 	ldbu	r2,0(r2)
  80fed8:	10803fcc 	andi	r2,r2,255
  80fedc:	1080010c 	andi	r2,r2,4
  80fee0:	1004c03a 	cmpne	r2,r2,zero
  80fee4:	10000f1e 	bne	r2,zero,80ff24 <altera_avalon_lcd_16207_write+0x11c>
  80fee8:	e0bff807 	ldb	r2,-32(fp)
  80feec:	10800ee0 	cmpeqi	r2,r2,59
  80fef0:	10000c1e 	bne	r2,zero,80ff24 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80fef4:	e0fff717 	ldw	r3,-36(fp)
  80fef8:	e0bffc17 	ldw	r2,-16(fp)
  80fefc:	1885883a 	add	r2,r3,r2
  80ff00:	10800a04 	addi	r2,r2,40
  80ff04:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80ff08:	e17ff807 	ldb	r5,-32(fp)
  80ff0c:	e13ffc17 	ldw	r4,-16(fp)
  80ff10:	080fb240 	call	80fb24 <lcd_handle_escape>

        sp->esccount = -1;
  80ff14:	e0fffc17 	ldw	r3,-16(fp)
  80ff18:	00bfffc4 	movi	r2,-1
  80ff1c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80ff20:	00006d06 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80ff24:	e0bffc17 	ldw	r2,-16(fp)
  80ff28:	10800903 	ldbu	r2,36(r2)
  80ff2c:	10803fcc 	andi	r2,r2,255
  80ff30:	108001e8 	cmpgeui	r2,r2,7
  80ff34:	1000681e 	bne	r2,zero,8100d8 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
  80ff38:	e0fff717 	ldw	r3,-36(fp)
  80ff3c:	e0bffc17 	ldw	r2,-16(fp)
  80ff40:	1885883a 	add	r2,r3,r2
  80ff44:	10c00a04 	addi	r3,r2,40
  80ff48:	e0bff803 	ldbu	r2,-32(fp)
  80ff4c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80ff50:	e0bffc17 	ldw	r2,-16(fp)
  80ff54:	10800903 	ldbu	r2,36(r2)
  80ff58:	10800044 	addi	r2,r2,1
  80ff5c:	1007883a 	mov	r3,r2
  80ff60:	e0bffc17 	ldw	r2,-16(fp)
  80ff64:	10c00905 	stb	r3,36(r2)
  80ff68:	00005b06 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
  80ff6c:	e0bff807 	ldb	r2,-32(fp)
  80ff70:	108006d8 	cmpnei	r2,r2,27
  80ff74:	1000031e 	bne	r2,zero,80ff84 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
  80ff78:	e0bffc17 	ldw	r2,-16(fp)
  80ff7c:	10000905 	stb	zero,36(r2)
  80ff80:	00005506 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
  80ff84:	e0bff807 	ldb	r2,-32(fp)
  80ff88:	10800358 	cmpnei	r2,r2,13
  80ff8c:	1000031e 	bne	r2,zero,80ff9c <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
  80ff90:	e0bffc17 	ldw	r2,-16(fp)
  80ff94:	10000845 	stb	zero,33(r2)
  80ff98:	00004f06 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
  80ff9c:	e0bff807 	ldb	r2,-32(fp)
  80ffa0:	10800298 	cmpnei	r2,r2,10
  80ffa4:	1000101e 	bne	r2,zero,80ffe8 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
  80ffa8:	e0bffc17 	ldw	r2,-16(fp)
  80ffac:	10000845 	stb	zero,33(r2)
      sp->y++;
  80ffb0:	e0bffc17 	ldw	r2,-16(fp)
  80ffb4:	10800883 	ldbu	r2,34(r2)
  80ffb8:	10800044 	addi	r2,r2,1
  80ffbc:	1007883a 	mov	r3,r2
  80ffc0:	e0bffc17 	ldw	r2,-16(fp)
  80ffc4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80ffc8:	e0bffc17 	ldw	r2,-16(fp)
  80ffcc:	10800883 	ldbu	r2,34(r2)
  80ffd0:	10803fcc 	andi	r2,r2,255
  80ffd4:	108000f0 	cmpltui	r2,r2,3
  80ffd8:	10003f1e 	bne	r2,zero,8100d8 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
  80ffdc:	e13ffc17 	ldw	r4,-16(fp)
  80ffe0:	080fa440 	call	80fa44 <lcd_scroll_up>
  80ffe4:	00003c06 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
  80ffe8:	e0bff807 	ldb	r2,-32(fp)
  80ffec:	10800218 	cmpnei	r2,r2,8
  80fff0:	10000c1e 	bne	r2,zero,810024 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
  80fff4:	e0bffc17 	ldw	r2,-16(fp)
  80fff8:	10800843 	ldbu	r2,33(r2)
  80fffc:	10803fcc 	andi	r2,r2,255
  810000:	1005003a 	cmpeq	r2,r2,zero
  810004:	1000341e 	bne	r2,zero,8100d8 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
  810008:	e0bffc17 	ldw	r2,-16(fp)
  81000c:	10800843 	ldbu	r2,33(r2)
  810010:	10bfffc4 	addi	r2,r2,-1
  810014:	1007883a 	mov	r3,r2
  810018:	e0bffc17 	ldw	r2,-16(fp)
  81001c:	10c00845 	stb	r3,33(r2)
  810020:	00002d06 	br	8100d8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
  810024:	e0bff807 	ldb	r2,-32(fp)
  810028:	1007883a 	mov	r3,r2
  81002c:	00802074 	movhi	r2,129
  810030:	1091bd04 	addi	r2,r2,18164
  810034:	10800017 	ldw	r2,0(r2)
  810038:	1885883a 	add	r2,r3,r2
  81003c:	10800003 	ldbu	r2,0(r2)
  810040:	10803fcc 	andi	r2,r2,255
  810044:	1080201c 	xori	r2,r2,128
  810048:	10bfe004 	addi	r2,r2,-128
  81004c:	108025cc 	andi	r2,r2,151
  810050:	1005003a 	cmpeq	r2,r2,zero
  810054:	1000201e 	bne	r2,zero,8100d8 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810058:	e0bffc17 	ldw	r2,-16(fp)
  81005c:	10800883 	ldbu	r2,34(r2)
  810060:	10803fcc 	andi	r2,r2,255
  810064:	108000b0 	cmpltui	r2,r2,2
  810068:	1000021e 	bne	r2,zero,810074 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  81006c:	e13ffc17 	ldw	r4,-16(fp)
  810070:	080fa440 	call	80fa44 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810074:	e0bffc17 	ldw	r2,-16(fp)
  810078:	10800843 	ldbu	r2,33(r2)
  81007c:	10803fcc 	andi	r2,r2,255
  810080:	10801428 	cmpgeui	r2,r2,80
  810084:	10000e1e 	bne	r2,zero,8100c0 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
  810088:	e0bffc17 	ldw	r2,-16(fp)
  81008c:	10800883 	ldbu	r2,34(r2)
  810090:	11003fcc 	andi	r4,r2,255
  810094:	e0bffc17 	ldw	r2,-16(fp)
  810098:	10800843 	ldbu	r2,33(r2)
  81009c:	14403fcc 	andi	r17,r2,255
  8100a0:	e43ffc17 	ldw	r16,-16(fp)
  8100a4:	014018c4 	movi	r5,99
  8100a8:	0803eb80 	call	803eb8 <__mulsi3>
  8100ac:	1405883a 	add	r2,r2,r16
  8100b0:	1445883a 	add	r2,r2,r17
  8100b4:	10c01004 	addi	r3,r2,64
  8100b8:	e0bff803 	ldbu	r2,-32(fp)
  8100bc:	18800005 	stb	r2,0(r3)

      sp->x++;
  8100c0:	e0bffc17 	ldw	r2,-16(fp)
  8100c4:	10800843 	ldbu	r2,33(r2)
  8100c8:	10800044 	addi	r2,r2,1
  8100cc:	1007883a 	mov	r3,r2
  8100d0:	e0bffc17 	ldw	r2,-16(fp)
  8100d4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8100d8:	e0bffd17 	ldw	r2,-12(fp)
  8100dc:	10800044 	addi	r2,r2,1
  8100e0:	e0bffd15 	stw	r2,-12(fp)
  8100e4:	e0fffd17 	ldw	r3,-12(fp)
  8100e8:	e0bffb17 	ldw	r2,-20(fp)
  8100ec:	18bf5a36 	bltu	r3,r2,80fe58 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8100f0:	00800404 	movi	r2,16
  8100f4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8100f8:	e03ffa15 	stw	zero,-24(fp)
  8100fc:	00003906 	br	8101e4 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810100:	00801404 	movi	r2,80
  810104:	e0bff615 	stw	r2,-40(fp)
  810108:	00001206 	br	810154 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
  81010c:	e13ffa17 	ldw	r4,-24(fp)
  810110:	e0bff617 	ldw	r2,-40(fp)
  810114:	147fffc4 	addi	r17,r2,-1
  810118:	e43ffc17 	ldw	r16,-16(fp)
  81011c:	014018c4 	movi	r5,99
  810120:	0803eb80 	call	803eb8 <__mulsi3>
  810124:	1405883a 	add	r2,r2,r16
  810128:	1445883a 	add	r2,r2,r17
  81012c:	10801004 	addi	r2,r2,64
  810130:	10800003 	ldbu	r2,0(r2)
  810134:	10803fcc 	andi	r2,r2,255
  810138:	1080201c 	xori	r2,r2,128
  81013c:	10bfe004 	addi	r2,r2,-128
  810140:	10800818 	cmpnei	r2,r2,32
  810144:	1000061e 	bne	r2,zero,810160 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810148:	e0bff617 	ldw	r2,-40(fp)
  81014c:	10bfffc4 	addi	r2,r2,-1
  810150:	e0bff615 	stw	r2,-40(fp)
  810154:	e0bff617 	ldw	r2,-40(fp)
  810158:	10800048 	cmpgei	r2,r2,1
  81015c:	103feb1e 	bne	r2,zero,81010c <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  810160:	e0bff617 	ldw	r2,-40(fp)
  810164:	10800448 	cmpgei	r2,r2,17
  810168:	1000031e 	bne	r2,zero,810178 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
  81016c:	00800404 	movi	r2,16
  810170:	e0bff615 	stw	r2,-40(fp)
  810174:	00000306 	br	810184 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
  810178:	e0bff617 	ldw	r2,-40(fp)
  81017c:	10800044 	addi	r2,r2,1
  810180:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  810184:	e13ffa17 	ldw	r4,-24(fp)
  810188:	e0bff617 	ldw	r2,-40(fp)
  81018c:	1023883a 	mov	r17,r2
  810190:	e43ffc17 	ldw	r16,-16(fp)
  810194:	014018c4 	movi	r5,99
  810198:	0803eb80 	call	803eb8 <__mulsi3>
  81019c:	1405883a 	add	r2,r2,r16
  8101a0:	10802404 	addi	r2,r2,144
  8101a4:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
  8101a8:	e0fff917 	ldw	r3,-28(fp)
  8101ac:	e0bff617 	ldw	r2,-40(fp)
  8101b0:	1880020e 	bge	r3,r2,8101bc <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
  8101b4:	e0bff617 	ldw	r2,-40(fp)
  8101b8:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8101bc:	e13ffa17 	ldw	r4,-24(fp)
  8101c0:	e43ffc17 	ldw	r16,-16(fp)
  8101c4:	014018c4 	movi	r5,99
  8101c8:	0803eb80 	call	803eb8 <__mulsi3>
  8101cc:	1405883a 	add	r2,r2,r16
  8101d0:	10802404 	addi	r2,r2,144
  8101d4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8101d8:	e0bffa17 	ldw	r2,-24(fp)
  8101dc:	10800044 	addi	r2,r2,1
  8101e0:	e0bffa15 	stw	r2,-24(fp)
  8101e4:	e0bffa17 	ldw	r2,-24(fp)
  8101e8:	10800090 	cmplti	r2,r2,2
  8101ec:	103fc41e 	bne	r2,zero,810100 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8101f0:	e0bff917 	ldw	r2,-28(fp)
  8101f4:	10800448 	cmpgei	r2,r2,17
  8101f8:	1000031e 	bne	r2,zero,810208 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
  8101fc:	e0bffc17 	ldw	r2,-16(fp)
  810200:	10000985 	stb	zero,38(r2)
  810204:	00003106 	br	8102cc <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
  810208:	e0bff917 	ldw	r2,-28(fp)
  81020c:	1085883a 	add	r2,r2,r2
  810210:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  810214:	e0bff917 	ldw	r2,-28(fp)
  810218:	1007883a 	mov	r3,r2
  81021c:	e0bffc17 	ldw	r2,-16(fp)
  810220:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810224:	e03ffa15 	stw	zero,-24(fp)
  810228:	00002506 	br	8102c0 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81022c:	e13ffa17 	ldw	r4,-24(fp)
  810230:	e43ffc17 	ldw	r16,-16(fp)
  810234:	014018c4 	movi	r5,99
  810238:	0803eb80 	call	803eb8 <__mulsi3>
  81023c:	1405883a 	add	r2,r2,r16
  810240:	10802404 	addi	r2,r2,144
  810244:	10800043 	ldbu	r2,1(r2)
  810248:	10803fcc 	andi	r2,r2,255
  81024c:	1080201c 	xori	r2,r2,128
  810250:	10bfe004 	addi	r2,r2,-128
  810254:	10800450 	cmplti	r2,r2,17
  810258:	1000161e 	bne	r2,zero,8102b4 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81025c:	e4bffa17 	ldw	r18,-24(fp)
  810260:	e13ffa17 	ldw	r4,-24(fp)
  810264:	e43ffc17 	ldw	r16,-16(fp)
  810268:	014018c4 	movi	r5,99
  81026c:	0803eb80 	call	803eb8 <__mulsi3>
  810270:	1405883a 	add	r2,r2,r16
  810274:	10802404 	addi	r2,r2,144
  810278:	10800043 	ldbu	r2,1(r2)
  81027c:	10803fcc 	andi	r2,r2,255
  810280:	1080201c 	xori	r2,r2,128
  810284:	10bfe004 	addi	r2,r2,-128
  810288:	1008923a 	slli	r4,r2,8
  81028c:	e17ff917 	ldw	r5,-28(fp)
  810290:	0803de80 	call	803de8 <__divsi3>
  810294:	1023883a 	mov	r17,r2
  810298:	e43ffc17 	ldw	r16,-16(fp)
  81029c:	9009883a 	mov	r4,r18
  8102a0:	014018c4 	movi	r5,99
  8102a4:	0803eb80 	call	803eb8 <__mulsi3>
  8102a8:	1405883a 	add	r2,r2,r16
  8102ac:	10802404 	addi	r2,r2,144
  8102b0:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8102b4:	e0bffa17 	ldw	r2,-24(fp)
  8102b8:	10800044 	addi	r2,r2,1
  8102bc:	e0bffa15 	stw	r2,-24(fp)
  8102c0:	e0bffa17 	ldw	r2,-24(fp)
  8102c4:	10800090 	cmplti	r2,r2,2
  8102c8:	103fd81e 	bne	r2,zero,81022c <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8102cc:	e0bffc17 	ldw	r2,-16(fp)
  8102d0:	10800943 	ldbu	r2,37(r2)
  8102d4:	10803fcc 	andi	r2,r2,255
  8102d8:	1080201c 	xori	r2,r2,128
  8102dc:	10bfe004 	addi	r2,r2,-128
  8102e0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8102e4:	e13ffc17 	ldw	r4,-16(fp)
  8102e8:	080f8300 	call	80f830 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8102ec:	e0bffc17 	ldw	r2,-16(fp)
  8102f0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8102f4:	e0bffc17 	ldw	r2,-16(fp)
  8102f8:	10800943 	ldbu	r2,37(r2)
  8102fc:	10c03fcc 	andi	r3,r2,255
  810300:	18c0201c 	xori	r3,r3,128
  810304:	18ffe004 	addi	r3,r3,-128
  810308:	e0bff517 	ldw	r2,-44(fp)
  81030c:	18800426 	beq	r3,r2,810320 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  810310:	e0fffc17 	ldw	r3,-16(fp)
  810314:	00800044 	movi	r2,1
  810318:	188009c5 	stb	r2,39(r3)
  }
  81031c:	003feb06 	br	8102cc <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  810320:	e0bffe17 	ldw	r2,-8(fp)
}
  810324:	e037883a 	mov	sp,fp
  810328:	dfc00417 	ldw	ra,16(sp)
  81032c:	df000317 	ldw	fp,12(sp)
  810330:	dc800217 	ldw	r18,8(sp)
  810334:	dc400117 	ldw	r17,4(sp)
  810338:	dc000017 	ldw	r16,0(sp)
  81033c:	dec00504 	addi	sp,sp,20
  810340:	f800283a 	ret

00810344 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  810344:	defffc04 	addi	sp,sp,-16
  810348:	dfc00315 	stw	ra,12(sp)
  81034c:	df000215 	stw	fp,8(sp)
  810350:	df000204 	addi	fp,sp,8
  810354:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810358:	e0bfff17 	ldw	r2,-4(fp)
  81035c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  810360:	e0bffe17 	ldw	r2,-8(fp)
  810364:	10800943 	ldbu	r2,37(r2)
  810368:	10803fcc 	andi	r2,r2,255
  81036c:	1080201c 	xori	r2,r2,128
  810370:	10bfe004 	addi	r2,r2,-128
  810374:	10c00044 	addi	r3,r2,1
  810378:	e0bffe17 	ldw	r2,-8(fp)
  81037c:	10800983 	ldbu	r2,38(r2)
  810380:	10803fcc 	andi	r2,r2,255
  810384:	1080201c 	xori	r2,r2,128
  810388:	10bfe004 	addi	r2,r2,-128
  81038c:	18800316 	blt	r3,r2,81039c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  810390:	e0bffe17 	ldw	r2,-8(fp)
  810394:	10000945 	stb	zero,37(r2)
  810398:	00000606 	br	8103b4 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81039c:	e0bffe17 	ldw	r2,-8(fp)
  8103a0:	10800943 	ldbu	r2,37(r2)
  8103a4:	10800044 	addi	r2,r2,1
  8103a8:	1007883a 	mov	r3,r2
  8103ac:	e0bffe17 	ldw	r2,-8(fp)
  8103b0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8103b4:	e0bffe17 	ldw	r2,-8(fp)
  8103b8:	10800983 	ldbu	r2,38(r2)
  8103bc:	10803fcc 	andi	r2,r2,255
  8103c0:	1080201c 	xori	r2,r2,128
  8103c4:	10bfe004 	addi	r2,r2,-128
  8103c8:	10800050 	cmplti	r2,r2,1
  8103cc:	1000091e 	bne	r2,zero,8103f4 <alt_lcd_16207_timeout+0xb0>
  8103d0:	e0bffe17 	ldw	r2,-8(fp)
  8103d4:	108009c3 	ldbu	r2,39(r2)
  8103d8:	10803fcc 	andi	r2,r2,255
  8103dc:	1080201c 	xori	r2,r2,128
  8103e0:	10bfe004 	addi	r2,r2,-128
  8103e4:	1004c03a 	cmpne	r2,r2,zero
  8103e8:	1000021e 	bne	r2,zero,8103f4 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8103ec:	e13ffe17 	ldw	r4,-8(fp)
  8103f0:	080f8300 	call	80f830 <lcd_repaint_screen>

  return sp->period;
  8103f4:	e0bffe17 	ldw	r2,-8(fp)
  8103f8:	10800717 	ldw	r2,28(r2)
}
  8103fc:	e037883a 	mov	sp,fp
  810400:	dfc00117 	ldw	ra,4(sp)
  810404:	df000017 	ldw	fp,0(sp)
  810408:	dec00204 	addi	sp,sp,8
  81040c:	f800283a 	ret

00810410 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  810410:	defffc04 	addi	sp,sp,-16
  810414:	dfc00315 	stw	ra,12(sp)
  810418:	df000215 	stw	fp,8(sp)
  81041c:	df000204 	addi	fp,sp,8
  810420:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  810424:	e0bfff17 	ldw	r2,-4(fp)
  810428:	10800017 	ldw	r2,0(r2)
  81042c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810430:	e0bfff17 	ldw	r2,-4(fp)
  810434:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810438:	010ea604 	movi	r4,15000
  81043c:	080e88c0 	call	80e88c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810440:	e0bffe17 	ldw	r2,-8(fp)
  810444:	1007883a 	mov	r3,r2
  810448:	00800c04 	movi	r2,48
  81044c:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  810450:	01040104 	movi	r4,4100
  810454:	080e88c0 	call	80e88c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810458:	e0bffe17 	ldw	r2,-8(fp)
  81045c:	1007883a 	mov	r3,r2
  810460:	00800c04 	movi	r2,48
  810464:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810468:	0100fa04 	movi	r4,1000
  81046c:	080e88c0 	call	80e88c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810470:	e0bffe17 	ldw	r2,-8(fp)
  810474:	1007883a 	mov	r3,r2
  810478:	00800c04 	movi	r2,48
  81047c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810480:	e13fff17 	ldw	r4,-4(fp)
  810484:	01400e04 	movi	r5,56
  810488:	080f5cc0 	call	80f5cc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81048c:	e13fff17 	ldw	r4,-4(fp)
  810490:	01400204 	movi	r5,8
  810494:	080f5cc0 	call	80f5cc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  810498:	e13fff17 	ldw	r4,-4(fp)
  81049c:	080f7580 	call	80f758 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8104a0:	e13fff17 	ldw	r4,-4(fp)
  8104a4:	01400184 	movi	r5,6
  8104a8:	080f5cc0 	call	80f5cc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8104ac:	e13fff17 	ldw	r4,-4(fp)
  8104b0:	01400304 	movi	r5,12
  8104b4:	080f5cc0 	call	80f5cc <lcd_write_command>

  sp->esccount = -1;
  8104b8:	e0ffff17 	ldw	r3,-4(fp)
  8104bc:	00bfffc4 	movi	r2,-1
  8104c0:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  8104c4:	e0bfff17 	ldw	r2,-4(fp)
  8104c8:	11000a04 	addi	r4,r2,40
  8104cc:	000b883a 	mov	r5,zero
  8104d0:	01800204 	movi	r6,8
  8104d4:	08044bc0 	call	8044bc <memset>

  sp->scrollpos = 0;
  8104d8:	e0bfff17 	ldw	r2,-4(fp)
  8104dc:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8104e0:	e0bfff17 	ldw	r2,-4(fp)
  8104e4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8104e8:	e0bfff17 	ldw	r2,-4(fp)
  8104ec:	100009c5 	stb	zero,39(r2)
  8104f0:	00802074 	movhi	r2,129
  8104f4:	10993704 	addi	r2,r2,25820
  8104f8:	10800017 	ldw	r2,0(r2)
  8104fc:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  810500:	01400284 	movi	r5,10
  810504:	0803ea80 	call	803ea8 <__udivsi3>
  810508:	1007883a 	mov	r3,r2
  81050c:	e0bfff17 	ldw	r2,-4(fp)
  810510:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  810514:	e0bfff17 	ldw	r2,-4(fp)
  810518:	11000104 	addi	r4,r2,4
  81051c:	e0bfff17 	ldw	r2,-4(fp)
  810520:	10800717 	ldw	r2,28(r2)
  810524:	100b883a 	mov	r5,r2
  810528:	01802074 	movhi	r6,129
  81052c:	3180d104 	addi	r6,r6,836
  810530:	e1ffff17 	ldw	r7,-4(fp)
  810534:	08106a40 	call	8106a4 <alt_alarm_start>
}
  810538:	e037883a 	mov	sp,fp
  81053c:	dfc00117 	ldw	ra,4(sp)
  810540:	df000017 	ldw	fp,0(sp)
  810544:	dec00204 	addi	sp,sp,8
  810548:	f800283a 	ret

0081054c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81054c:	defffa04 	addi	sp,sp,-24
  810550:	dfc00515 	stw	ra,20(sp)
  810554:	df000415 	stw	fp,16(sp)
  810558:	df000404 	addi	fp,sp,16
  81055c:	e13ffd15 	stw	r4,-12(fp)
  810560:	e17ffe15 	stw	r5,-8(fp)
  810564:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  810568:	e0bffd17 	ldw	r2,-12(fp)
  81056c:	10800017 	ldw	r2,0(r2)
  810570:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  810574:	e0bffc17 	ldw	r2,-16(fp)
  810578:	11000a04 	addi	r4,r2,40
  81057c:	e0bffd17 	ldw	r2,-12(fp)
  810580:	11c00217 	ldw	r7,8(r2)
  810584:	e17ffe17 	ldw	r5,-8(fp)
  810588:	e1bfff17 	ldw	r6,-4(fp)
  81058c:	080fe080 	call	80fe08 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  810590:	e037883a 	mov	sp,fp
  810594:	dfc00117 	ldw	ra,4(sp)
  810598:	df000017 	ldw	fp,0(sp)
  81059c:	dec00204 	addi	sp,sp,8
  8105a0:	f800283a 	ret

008105a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8105a4:	defffa04 	addi	sp,sp,-24
  8105a8:	dfc00515 	stw	ra,20(sp)
  8105ac:	df000415 	stw	fp,16(sp)
  8105b0:	df000404 	addi	fp,sp,16
  8105b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8105b8:	e0bfff17 	ldw	r2,-4(fp)
  8105bc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8105c0:	e0bfff17 	ldw	r2,-4(fp)
  8105c4:	10800104 	addi	r2,r2,4
  8105c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105cc:	0005303a 	rdctl	r2,status
  8105d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105d4:	e0fffd17 	ldw	r3,-12(fp)
  8105d8:	00bfff84 	movi	r2,-2
  8105dc:	1884703a 	and	r2,r3,r2
  8105e0:	1001703a 	wrctl	status,r2
  
  return context;
  8105e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8105e8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8105ec:	08113140 	call	811314 <alt_tick>
  8105f0:	e0bffe17 	ldw	r2,-8(fp)
  8105f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105f8:	e0bffc17 	ldw	r2,-16(fp)
  8105fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  810600:	e037883a 	mov	sp,fp
  810604:	dfc00117 	ldw	ra,4(sp)
  810608:	df000017 	ldw	fp,0(sp)
  81060c:	dec00204 	addi	sp,sp,8
  810610:	f800283a 	ret

00810614 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810614:	defff804 	addi	sp,sp,-32
  810618:	dfc00715 	stw	ra,28(sp)
  81061c:	df000615 	stw	fp,24(sp)
  810620:	df000604 	addi	fp,sp,24
  810624:	e13ffc15 	stw	r4,-16(fp)
  810628:	e17ffd15 	stw	r5,-12(fp)
  81062c:	e1bffe15 	stw	r6,-8(fp)
  810630:	e1ffff15 	stw	r7,-4(fp)
  810634:	e0bfff17 	ldw	r2,-4(fp)
  810638:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81063c:	00802074 	movhi	r2,129
  810640:	10993704 	addi	r2,r2,25820
  810644:	10800017 	ldw	r2,0(r2)
  810648:	1004c03a 	cmpne	r2,r2,zero
  81064c:	1000041e 	bne	r2,zero,810660 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  810650:	00c02074 	movhi	r3,129
  810654:	18d93704 	addi	r3,r3,25820
  810658:	e0bffb17 	ldw	r2,-20(fp)
  81065c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810660:	e0bffc17 	ldw	r2,-16(fp)
  810664:	10800104 	addi	r2,r2,4
  810668:	1007883a 	mov	r3,r2
  81066c:	008001c4 	movi	r2,7
  810670:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810674:	d8000015 	stw	zero,0(sp)
  810678:	e13ffd17 	ldw	r4,-12(fp)
  81067c:	e17ffe17 	ldw	r5,-8(fp)
  810680:	01802074 	movhi	r6,129
  810684:	31816904 	addi	r6,r6,1444
  810688:	e1fffc17 	ldw	r7,-16(fp)
  81068c:	0810b7c0 	call	810b7c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810690:	e037883a 	mov	sp,fp
  810694:	dfc00117 	ldw	ra,4(sp)
  810698:	df000017 	ldw	fp,0(sp)
  81069c:	dec00204 	addi	sp,sp,8
  8106a0:	f800283a 	ret

008106a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8106a4:	defff404 	addi	sp,sp,-48
  8106a8:	df000b15 	stw	fp,44(sp)
  8106ac:	df000b04 	addi	fp,sp,44
  8106b0:	e13ffb15 	stw	r4,-20(fp)
  8106b4:	e17ffc15 	stw	r5,-16(fp)
  8106b8:	e1bffd15 	stw	r6,-12(fp)
  8106bc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8106c0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8106c4:	00802074 	movhi	r2,129
  8106c8:	10993704 	addi	r2,r2,25820
  8106cc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8106d0:	1005003a 	cmpeq	r2,r2,zero
  8106d4:	1000411e 	bne	r2,zero,8107dc <alt_alarm_start+0x138>
  {
    if (alarm)
  8106d8:	e0bffb17 	ldw	r2,-20(fp)
  8106dc:	1005003a 	cmpeq	r2,r2,zero
  8106e0:	10003b1e 	bne	r2,zero,8107d0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8106e4:	e0fffb17 	ldw	r3,-20(fp)
  8106e8:	e0bffd17 	ldw	r2,-12(fp)
  8106ec:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8106f0:	e0fffb17 	ldw	r3,-20(fp)
  8106f4:	e0bffe17 	ldw	r2,-8(fp)
  8106f8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106fc:	0005303a 	rdctl	r2,status
  810700:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810704:	e0fff817 	ldw	r3,-32(fp)
  810708:	00bfff84 	movi	r2,-2
  81070c:	1884703a 	and	r2,r3,r2
  810710:	1001703a 	wrctl	status,r2
  
  return context;
  810714:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810718:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81071c:	00802074 	movhi	r2,129
  810720:	10993804 	addi	r2,r2,25824
  810724:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810728:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81072c:	e0fffc17 	ldw	r3,-16(fp)
  810730:	e0bff917 	ldw	r2,-28(fp)
  810734:	1885883a 	add	r2,r3,r2
  810738:	10c00044 	addi	r3,r2,1
  81073c:	e0bffb17 	ldw	r2,-20(fp)
  810740:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810744:	e0bffb17 	ldw	r2,-20(fp)
  810748:	10c00217 	ldw	r3,8(r2)
  81074c:	e0bff917 	ldw	r2,-28(fp)
  810750:	1880042e 	bgeu	r3,r2,810764 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810754:	e0fffb17 	ldw	r3,-20(fp)
  810758:	00800044 	movi	r2,1
  81075c:	18800405 	stb	r2,16(r3)
  810760:	00000206 	br	81076c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810764:	e0bffb17 	ldw	r2,-20(fp)
  810768:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81076c:	e0fffb17 	ldw	r3,-20(fp)
  810770:	00802074 	movhi	r2,129
  810774:	1091bb04 	addi	r2,r2,18156
  810778:	e0bff615 	stw	r2,-40(fp)
  81077c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810780:	e0fff717 	ldw	r3,-36(fp)
  810784:	e0bff617 	ldw	r2,-40(fp)
  810788:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81078c:	e0bff617 	ldw	r2,-40(fp)
  810790:	10c00017 	ldw	r3,0(r2)
  810794:	e0bff717 	ldw	r2,-36(fp)
  810798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81079c:	e0bff617 	ldw	r2,-40(fp)
  8107a0:	10c00017 	ldw	r3,0(r2)
  8107a4:	e0bff717 	ldw	r2,-36(fp)
  8107a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8107ac:	e0fff617 	ldw	r3,-40(fp)
  8107b0:	e0bff717 	ldw	r2,-36(fp)
  8107b4:	18800015 	stw	r2,0(r3)
  8107b8:	e0bffa17 	ldw	r2,-24(fp)
  8107bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107c0:	e0bff517 	ldw	r2,-44(fp)
  8107c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8107c8:	e03fff15 	stw	zero,-4(fp)
  8107cc:	00000506 	br	8107e4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8107d0:	00bffa84 	movi	r2,-22
  8107d4:	e0bfff15 	stw	r2,-4(fp)
  8107d8:	00000206 	br	8107e4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8107dc:	00bfde84 	movi	r2,-134
  8107e0:	e0bfff15 	stw	r2,-4(fp)
  8107e4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8107e8:	e037883a 	mov	sp,fp
  8107ec:	df000017 	ldw	fp,0(sp)
  8107f0:	dec00104 	addi	sp,sp,4
  8107f4:	f800283a 	ret

008107f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8107f8:	defffa04 	addi	sp,sp,-24
  8107fc:	dfc00515 	stw	ra,20(sp)
  810800:	df000415 	stw	fp,16(sp)
  810804:	df000404 	addi	fp,sp,16
  810808:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81080c:	008000c4 	movi	r2,3
  810810:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  810814:	e13ffc17 	ldw	r4,-16(fp)
  810818:	014003f4 	movhi	r5,15
  81081c:	29509004 	addi	r5,r5,16960
  810820:	0803eb80 	call	803eb8 <__mulsi3>
  810824:	100b883a 	mov	r5,r2
  810828:	0100bef4 	movhi	r4,763
  81082c:	213c2004 	addi	r4,r4,-3968
  810830:	0803ea80 	call	803ea8 <__udivsi3>
  810834:	100b883a 	mov	r5,r2
  810838:	01200034 	movhi	r4,32768
  81083c:	213fffc4 	addi	r4,r4,-1
  810840:	0803ea80 	call	803ea8 <__udivsi3>
  810844:	100b883a 	mov	r5,r2
  810848:	e13fff17 	ldw	r4,-4(fp)
  81084c:	0803ea80 	call	803ea8 <__udivsi3>
  810850:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  810854:	e0bffd17 	ldw	r2,-12(fp)
  810858:	1005003a 	cmpeq	r2,r2,zero
  81085c:	10002a1e 	bne	r2,zero,810908 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  810860:	e03ffe15 	stw	zero,-8(fp)
  810864:	00001706 	br	8108c4 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  810868:	00a00034 	movhi	r2,32768
  81086c:	10bfffc4 	addi	r2,r2,-1
  810870:	10bfffc4 	addi	r2,r2,-1
  810874:	103ffe1e 	bne	r2,zero,810870 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  810878:	e13ffc17 	ldw	r4,-16(fp)
  81087c:	014003f4 	movhi	r5,15
  810880:	29509004 	addi	r5,r5,16960
  810884:	0803eb80 	call	803eb8 <__mulsi3>
  810888:	100b883a 	mov	r5,r2
  81088c:	0100bef4 	movhi	r4,763
  810890:	213c2004 	addi	r4,r4,-3968
  810894:	0803ea80 	call	803ea8 <__udivsi3>
  810898:	100b883a 	mov	r5,r2
  81089c:	01200034 	movhi	r4,32768
  8108a0:	213fffc4 	addi	r4,r4,-1
  8108a4:	0803ea80 	call	803ea8 <__udivsi3>
  8108a8:	1007883a 	mov	r3,r2
  8108ac:	e0bfff17 	ldw	r2,-4(fp)
  8108b0:	10c5c83a 	sub	r2,r2,r3
  8108b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8108b8:	e0bffe17 	ldw	r2,-8(fp)
  8108bc:	10800044 	addi	r2,r2,1
  8108c0:	e0bffe15 	stw	r2,-8(fp)
  8108c4:	e0fffe17 	ldw	r3,-8(fp)
  8108c8:	e0bffd17 	ldw	r2,-12(fp)
  8108cc:	18bfe616 	blt	r3,r2,810868 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8108d0:	e13ffc17 	ldw	r4,-16(fp)
  8108d4:	014003f4 	movhi	r5,15
  8108d8:	29509004 	addi	r5,r5,16960
  8108dc:	0803eb80 	call	803eb8 <__mulsi3>
  8108e0:	100b883a 	mov	r5,r2
  8108e4:	0100bef4 	movhi	r4,763
  8108e8:	213c2004 	addi	r4,r4,-3968
  8108ec:	0803ea80 	call	803ea8 <__udivsi3>
  8108f0:	1009883a 	mov	r4,r2
  8108f4:	e17fff17 	ldw	r5,-4(fp)
  8108f8:	0803eb80 	call	803eb8 <__mulsi3>
  8108fc:	10bfffc4 	addi	r2,r2,-1
  810900:	103ffe1e 	bne	r2,zero,8108fc <alt_busy_sleep+0x104>
  810904:	00000d06 	br	81093c <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  810908:	e13ffc17 	ldw	r4,-16(fp)
  81090c:	014003f4 	movhi	r5,15
  810910:	29509004 	addi	r5,r5,16960
  810914:	0803eb80 	call	803eb8 <__mulsi3>
  810918:	100b883a 	mov	r5,r2
  81091c:	0100bef4 	movhi	r4,763
  810920:	213c2004 	addi	r4,r4,-3968
  810924:	0803ea80 	call	803ea8 <__udivsi3>
  810928:	1009883a 	mov	r4,r2
  81092c:	e17fff17 	ldw	r5,-4(fp)
  810930:	0803eb80 	call	803eb8 <__mulsi3>
  810934:	10bfffc4 	addi	r2,r2,-1
  810938:	00bffe16 	blt	zero,r2,810934 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81093c:	0005883a 	mov	r2,zero
}
  810940:	e037883a 	mov	sp,fp
  810944:	dfc00117 	ldw	ra,4(sp)
  810948:	df000017 	ldw	fp,0(sp)
  81094c:	dec00204 	addi	sp,sp,8
  810950:	f800283a 	ret

00810954 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810954:	deffff04 	addi	sp,sp,-4
  810958:	df000015 	stw	fp,0(sp)
  81095c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810960:	e037883a 	mov	sp,fp
  810964:	df000017 	ldw	fp,0(sp)
  810968:	dec00104 	addi	sp,sp,4
  81096c:	f800283a 	ret

00810970 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810970:	defff904 	addi	sp,sp,-28
  810974:	dfc00615 	stw	ra,24(sp)
  810978:	df000515 	stw	fp,20(sp)
  81097c:	df000504 	addi	fp,sp,20
  810980:	e13ffd15 	stw	r4,-12(fp)
  810984:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810988:	e0bffd17 	ldw	r2,-12(fp)
  81098c:	1005003a 	cmpeq	r2,r2,zero
  810990:	1000041e 	bne	r2,zero,8109a4 <alt_dev_llist_insert+0x34>
  810994:	e0bffd17 	ldw	r2,-12(fp)
  810998:	10800217 	ldw	r2,8(r2)
  81099c:	1004c03a 	cmpne	r2,r2,zero
  8109a0:	1000071e 	bne	r2,zero,8109c0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8109a4:	0810a240 	call	810a24 <alt_get_errno>
  8109a8:	1007883a 	mov	r3,r2
  8109ac:	00800584 	movi	r2,22
  8109b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8109b4:	00bffa84 	movi	r2,-22
  8109b8:	e0bfff15 	stw	r2,-4(fp)
  8109bc:	00001306 	br	810a0c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8109c0:	e0fffd17 	ldw	r3,-12(fp)
  8109c4:	e0bffe17 	ldw	r2,-8(fp)
  8109c8:	e0bffb15 	stw	r2,-20(fp)
  8109cc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8109d0:	e0fffc17 	ldw	r3,-16(fp)
  8109d4:	e0bffb17 	ldw	r2,-20(fp)
  8109d8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8109dc:	e0bffb17 	ldw	r2,-20(fp)
  8109e0:	10c00017 	ldw	r3,0(r2)
  8109e4:	e0bffc17 	ldw	r2,-16(fp)
  8109e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8109ec:	e0bffb17 	ldw	r2,-20(fp)
  8109f0:	10c00017 	ldw	r3,0(r2)
  8109f4:	e0bffc17 	ldw	r2,-16(fp)
  8109f8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8109fc:	e0fffb17 	ldw	r3,-20(fp)
  810a00:	e0bffc17 	ldw	r2,-16(fp)
  810a04:	18800015 	stw	r2,0(r3)

  return 0;  
  810a08:	e03fff15 	stw	zero,-4(fp)
  810a0c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a10:	e037883a 	mov	sp,fp
  810a14:	dfc00117 	ldw	ra,4(sp)
  810a18:	df000017 	ldw	fp,0(sp)
  810a1c:	dec00204 	addi	sp,sp,8
  810a20:	f800283a 	ret

00810a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a24:	defffd04 	addi	sp,sp,-12
  810a28:	dfc00215 	stw	ra,8(sp)
  810a2c:	df000115 	stw	fp,4(sp)
  810a30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810a34:	00802074 	movhi	r2,129
  810a38:	1091b704 	addi	r2,r2,18140
  810a3c:	10800017 	ldw	r2,0(r2)
  810a40:	1005003a 	cmpeq	r2,r2,zero
  810a44:	1000061e 	bne	r2,zero,810a60 <alt_get_errno+0x3c>
  810a48:	00802074 	movhi	r2,129
  810a4c:	1091b704 	addi	r2,r2,18140
  810a50:	10800017 	ldw	r2,0(r2)
  810a54:	103ee83a 	callr	r2
  810a58:	e0bfff15 	stw	r2,-4(fp)
  810a5c:	00000306 	br	810a6c <alt_get_errno+0x48>
  810a60:	00802074 	movhi	r2,129
  810a64:	10993204 	addi	r2,r2,25800
  810a68:	e0bfff15 	stw	r2,-4(fp)
  810a6c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a70:	e037883a 	mov	sp,fp
  810a74:	dfc00117 	ldw	ra,4(sp)
  810a78:	df000017 	ldw	fp,0(sp)
  810a7c:	dec00204 	addi	sp,sp,8
  810a80:	f800283a 	ret

00810a84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810a84:	defffd04 	addi	sp,sp,-12
  810a88:	dfc00215 	stw	ra,8(sp)
  810a8c:	df000115 	stw	fp,4(sp)
  810a90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810a94:	00bfff04 	movi	r2,-4
  810a98:	00c02074 	movhi	r3,129
  810a9c:	18c66004 	addi	r3,r3,6528
  810aa0:	1885883a 	add	r2,r3,r2
  810aa4:	e0bfff15 	stw	r2,-4(fp)
  810aa8:	00000606 	br	810ac4 <_do_ctors+0x40>
        (*ctor) (); 
  810aac:	e0bfff17 	ldw	r2,-4(fp)
  810ab0:	10800017 	ldw	r2,0(r2)
  810ab4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810ab8:	e0bfff17 	ldw	r2,-4(fp)
  810abc:	10bfff04 	addi	r2,r2,-4
  810ac0:	e0bfff15 	stw	r2,-4(fp)
  810ac4:	e0ffff17 	ldw	r3,-4(fp)
  810ac8:	00802074 	movhi	r2,129
  810acc:	10865f04 	addi	r2,r2,6524
  810ad0:	18bff62e 	bgeu	r3,r2,810aac <_do_ctors+0x28>
        (*ctor) (); 
}
  810ad4:	e037883a 	mov	sp,fp
  810ad8:	dfc00117 	ldw	ra,4(sp)
  810adc:	df000017 	ldw	fp,0(sp)
  810ae0:	dec00204 	addi	sp,sp,8
  810ae4:	f800283a 	ret

00810ae8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810ae8:	defffd04 	addi	sp,sp,-12
  810aec:	dfc00215 	stw	ra,8(sp)
  810af0:	df000115 	stw	fp,4(sp)
  810af4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810af8:	00bfff04 	movi	r2,-4
  810afc:	00c02074 	movhi	r3,129
  810b00:	18c66004 	addi	r3,r3,6528
  810b04:	1885883a 	add	r2,r3,r2
  810b08:	e0bfff15 	stw	r2,-4(fp)
  810b0c:	00000606 	br	810b28 <_do_dtors+0x40>
        (*dtor) (); 
  810b10:	e0bfff17 	ldw	r2,-4(fp)
  810b14:	10800017 	ldw	r2,0(r2)
  810b18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810b1c:	e0bfff17 	ldw	r2,-4(fp)
  810b20:	10bfff04 	addi	r2,r2,-4
  810b24:	e0bfff15 	stw	r2,-4(fp)
  810b28:	e0ffff17 	ldw	r3,-4(fp)
  810b2c:	00802074 	movhi	r2,129
  810b30:	10866004 	addi	r2,r2,6528
  810b34:	18bff62e 	bgeu	r3,r2,810b10 <_do_dtors+0x28>
        (*dtor) (); 
}
  810b38:	e037883a 	mov	sp,fp
  810b3c:	dfc00117 	ldw	ra,4(sp)
  810b40:	df000017 	ldw	fp,0(sp)
  810b44:	dec00204 	addi	sp,sp,8
  810b48:	f800283a 	ret

00810b4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810b4c:	defffe04 	addi	sp,sp,-8
  810b50:	dfc00115 	stw	ra,4(sp)
  810b54:	df000015 	stw	fp,0(sp)
  810b58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810b5c:	0009883a 	mov	r4,zero
  810b60:	01440004 	movi	r5,4096
  810b64:	08116c40 	call	8116c4 <alt_icache_flush>
#endif
}
  810b68:	e037883a 	mov	sp,fp
  810b6c:	dfc00117 	ldw	ra,4(sp)
  810b70:	df000017 	ldw	fp,0(sp)
  810b74:	dec00204 	addi	sp,sp,8
  810b78:	f800283a 	ret

00810b7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810b7c:	defff904 	addi	sp,sp,-28
  810b80:	dfc00615 	stw	ra,24(sp)
  810b84:	df000515 	stw	fp,20(sp)
  810b88:	df000504 	addi	fp,sp,20
  810b8c:	e13ffc15 	stw	r4,-16(fp)
  810b90:	e17ffd15 	stw	r5,-12(fp)
  810b94:	e1bffe15 	stw	r6,-8(fp)
  810b98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810b9c:	e0800217 	ldw	r2,8(fp)
  810ba0:	d8800015 	stw	r2,0(sp)
  810ba4:	e13ffc17 	ldw	r4,-16(fp)
  810ba8:	e17ffd17 	ldw	r5,-12(fp)
  810bac:	e1bffe17 	ldw	r6,-8(fp)
  810bb0:	e1ffff17 	ldw	r7,-4(fp)
  810bb4:	0810d500 	call	810d50 <alt_iic_isr_register>
}  
  810bb8:	e037883a 	mov	sp,fp
  810bbc:	dfc00117 	ldw	ra,4(sp)
  810bc0:	df000017 	ldw	fp,0(sp)
  810bc4:	dec00204 	addi	sp,sp,8
  810bc8:	f800283a 	ret

00810bcc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810bcc:	defff904 	addi	sp,sp,-28
  810bd0:	df000615 	stw	fp,24(sp)
  810bd4:	df000604 	addi	fp,sp,24
  810bd8:	e13ffe15 	stw	r4,-8(fp)
  810bdc:	e17fff15 	stw	r5,-4(fp)
  810be0:	e0bfff17 	ldw	r2,-4(fp)
  810be4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810be8:	0005303a 	rdctl	r2,status
  810bec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810bf0:	e0fffb17 	ldw	r3,-20(fp)
  810bf4:	00bfff84 	movi	r2,-2
  810bf8:	1884703a 	and	r2,r3,r2
  810bfc:	1001703a 	wrctl	status,r2
  
  return context;
  810c00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810c04:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  810c08:	e0fffc17 	ldw	r3,-16(fp)
  810c0c:	00800044 	movi	r2,1
  810c10:	10c4983a 	sll	r2,r2,r3
  810c14:	1007883a 	mov	r3,r2
  810c18:	00802074 	movhi	r2,129
  810c1c:	10993304 	addi	r2,r2,25804
  810c20:	10800017 	ldw	r2,0(r2)
  810c24:	1886b03a 	or	r3,r3,r2
  810c28:	00802074 	movhi	r2,129
  810c2c:	10993304 	addi	r2,r2,25804
  810c30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810c34:	00802074 	movhi	r2,129
  810c38:	10993304 	addi	r2,r2,25804
  810c3c:	10800017 	ldw	r2,0(r2)
  810c40:	100170fa 	wrctl	ienable,r2
  810c44:	e0bffd17 	ldw	r2,-12(fp)
  810c48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c4c:	e0bffa17 	ldw	r2,-24(fp)
  810c50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810c54:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  810c58:	e037883a 	mov	sp,fp
  810c5c:	df000017 	ldw	fp,0(sp)
  810c60:	dec00104 	addi	sp,sp,4
  810c64:	f800283a 	ret

00810c68 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810c68:	defff904 	addi	sp,sp,-28
  810c6c:	df000615 	stw	fp,24(sp)
  810c70:	df000604 	addi	fp,sp,24
  810c74:	e13ffe15 	stw	r4,-8(fp)
  810c78:	e17fff15 	stw	r5,-4(fp)
  810c7c:	e0bfff17 	ldw	r2,-4(fp)
  810c80:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c84:	0005303a 	rdctl	r2,status
  810c88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c8c:	e0fffb17 	ldw	r3,-20(fp)
  810c90:	00bfff84 	movi	r2,-2
  810c94:	1884703a 	and	r2,r3,r2
  810c98:	1001703a 	wrctl	status,r2
  
  return context;
  810c9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810ca0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810ca4:	e0fffc17 	ldw	r3,-16(fp)
  810ca8:	00800044 	movi	r2,1
  810cac:	10c4983a 	sll	r2,r2,r3
  810cb0:	0084303a 	nor	r2,zero,r2
  810cb4:	1007883a 	mov	r3,r2
  810cb8:	00802074 	movhi	r2,129
  810cbc:	10993304 	addi	r2,r2,25804
  810cc0:	10800017 	ldw	r2,0(r2)
  810cc4:	1886703a 	and	r3,r3,r2
  810cc8:	00802074 	movhi	r2,129
  810ccc:	10993304 	addi	r2,r2,25804
  810cd0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810cd4:	00802074 	movhi	r2,129
  810cd8:	10993304 	addi	r2,r2,25804
  810cdc:	10800017 	ldw	r2,0(r2)
  810ce0:	100170fa 	wrctl	ienable,r2
  810ce4:	e0bffd17 	ldw	r2,-12(fp)
  810ce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810cec:	e0bffa17 	ldw	r2,-24(fp)
  810cf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810cf4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  810cf8:	e037883a 	mov	sp,fp
  810cfc:	df000017 	ldw	fp,0(sp)
  810d00:	dec00104 	addi	sp,sp,4
  810d04:	f800283a 	ret

00810d08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810d08:	defffc04 	addi	sp,sp,-16
  810d0c:	df000315 	stw	fp,12(sp)
  810d10:	df000304 	addi	fp,sp,12
  810d14:	e13ffe15 	stw	r4,-8(fp)
  810d18:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810d1c:	000530fa 	rdctl	r2,ienable
  810d20:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810d24:	e0ffff17 	ldw	r3,-4(fp)
  810d28:	00800044 	movi	r2,1
  810d2c:	10c4983a 	sll	r2,r2,r3
  810d30:	1007883a 	mov	r3,r2
  810d34:	e0bffd17 	ldw	r2,-12(fp)
  810d38:	1884703a 	and	r2,r3,r2
  810d3c:	1004c03a 	cmpne	r2,r2,zero
}
  810d40:	e037883a 	mov	sp,fp
  810d44:	df000017 	ldw	fp,0(sp)
  810d48:	dec00104 	addi	sp,sp,4
  810d4c:	f800283a 	ret

00810d50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810d50:	defff404 	addi	sp,sp,-48
  810d54:	dfc00b15 	stw	ra,44(sp)
  810d58:	df000a15 	stw	fp,40(sp)
  810d5c:	df000a04 	addi	fp,sp,40
  810d60:	e13ffb15 	stw	r4,-20(fp)
  810d64:	e17ffc15 	stw	r5,-16(fp)
  810d68:	e1bffd15 	stw	r6,-12(fp)
  810d6c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  810d70:	00bffa84 	movi	r2,-22
  810d74:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  810d78:	e0bffc17 	ldw	r2,-16(fp)
  810d7c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810d80:	e0bff917 	ldw	r2,-28(fp)
  810d84:	10800808 	cmpgei	r2,r2,32
  810d88:	1000291e 	bne	r2,zero,810e30 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d8c:	0005303a 	rdctl	r2,status
  810d90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d94:	e0fff717 	ldw	r3,-36(fp)
  810d98:	00bfff84 	movi	r2,-2
  810d9c:	1884703a 	and	r2,r3,r2
  810da0:	1001703a 	wrctl	status,r2
  
  return context;
  810da4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  810da8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  810dac:	e0bff917 	ldw	r2,-28(fp)
  810db0:	00c02074 	movhi	r3,129
  810db4:	18d94e04 	addi	r3,r3,25912
  810db8:	100490fa 	slli	r2,r2,3
  810dbc:	10c7883a 	add	r3,r2,r3
  810dc0:	e0bffd17 	ldw	r2,-12(fp)
  810dc4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  810dc8:	e0bff917 	ldw	r2,-28(fp)
  810dcc:	00c02074 	movhi	r3,129
  810dd0:	18d94e04 	addi	r3,r3,25912
  810dd4:	100490fa 	slli	r2,r2,3
  810dd8:	10c5883a 	add	r2,r2,r3
  810ddc:	10c00104 	addi	r3,r2,4
  810de0:	e0bffe17 	ldw	r2,-8(fp)
  810de4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  810de8:	e0bffd17 	ldw	r2,-12(fp)
  810dec:	1005003a 	cmpeq	r2,r2,zero
  810df0:	1000051e 	bne	r2,zero,810e08 <alt_iic_isr_register+0xb8>
  810df4:	e17ff917 	ldw	r5,-28(fp)
  810df8:	e13ffb17 	ldw	r4,-20(fp)
  810dfc:	0810bcc0 	call	810bcc <alt_ic_irq_enable>
  810e00:	e0bfff15 	stw	r2,-4(fp)
  810e04:	00000406 	br	810e18 <alt_iic_isr_register+0xc8>
  810e08:	e17ff917 	ldw	r5,-28(fp)
  810e0c:	e13ffb17 	ldw	r4,-20(fp)
  810e10:	0810c680 	call	810c68 <alt_ic_irq_disable>
  810e14:	e0bfff15 	stw	r2,-4(fp)
  810e18:	e0bfff17 	ldw	r2,-4(fp)
  810e1c:	e0bffa15 	stw	r2,-24(fp)
  810e20:	e0bff817 	ldw	r2,-32(fp)
  810e24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e28:	e0bff617 	ldw	r2,-40(fp)
  810e2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  810e30:	e0bffa17 	ldw	r2,-24(fp)
}
  810e34:	e037883a 	mov	sp,fp
  810e38:	dfc00117 	ldw	ra,4(sp)
  810e3c:	df000017 	ldw	fp,0(sp)
  810e40:	dec00204 	addi	sp,sp,8
  810e44:	f800283a 	ret

00810e48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  810e48:	defff804 	addi	sp,sp,-32
  810e4c:	dfc00715 	stw	ra,28(sp)
  810e50:	df000615 	stw	fp,24(sp)
  810e54:	dc000515 	stw	r16,20(sp)
  810e58:	df000504 	addi	fp,sp,20
  810e5c:	e13ffc15 	stw	r4,-16(fp)
  810e60:	e17ffd15 	stw	r5,-12(fp)
  810e64:	e1bffe15 	stw	r6,-8(fp)
  810e68:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  810e6c:	e13ffd17 	ldw	r4,-12(fp)
  810e70:	e17ffe17 	ldw	r5,-8(fp)
  810e74:	e1bfff17 	ldw	r6,-4(fp)
  810e78:	08110900 	call	811090 <open>
  810e7c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  810e80:	e0bffb17 	ldw	r2,-20(fp)
  810e84:	1004803a 	cmplt	r2,r2,zero
  810e88:	10001f1e 	bne	r2,zero,810f08 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  810e8c:	e13ffb17 	ldw	r4,-20(fp)
  810e90:	04002074 	movhi	r16,129
  810e94:	840cdb04 	addi	r16,r16,13164
  810e98:	01400304 	movi	r5,12
  810e9c:	0803eb80 	call	803eb8 <__mulsi3>
  810ea0:	1405883a 	add	r2,r2,r16
  810ea4:	10c00017 	ldw	r3,0(r2)
  810ea8:	e0bffc17 	ldw	r2,-16(fp)
  810eac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  810eb0:	e13ffb17 	ldw	r4,-20(fp)
  810eb4:	04002074 	movhi	r16,129
  810eb8:	840cdb04 	addi	r16,r16,13164
  810ebc:	01400304 	movi	r5,12
  810ec0:	0803eb80 	call	803eb8 <__mulsi3>
  810ec4:	1405883a 	add	r2,r2,r16
  810ec8:	10800104 	addi	r2,r2,4
  810ecc:	10c00017 	ldw	r3,0(r2)
  810ed0:	e0bffc17 	ldw	r2,-16(fp)
  810ed4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810ed8:	e13ffb17 	ldw	r4,-20(fp)
  810edc:	04002074 	movhi	r16,129
  810ee0:	840cdb04 	addi	r16,r16,13164
  810ee4:	01400304 	movi	r5,12
  810ee8:	0803eb80 	call	803eb8 <__mulsi3>
  810eec:	1405883a 	add	r2,r2,r16
  810ef0:	10800204 	addi	r2,r2,8
  810ef4:	10c00017 	ldw	r3,0(r2)
  810ef8:	e0bffc17 	ldw	r2,-16(fp)
  810efc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  810f00:	e13ffb17 	ldw	r4,-20(fp)
  810f04:	080e7580 	call	80e758 <alt_release_fd>
  }
} 
  810f08:	e037883a 	mov	sp,fp
  810f0c:	dfc00217 	ldw	ra,8(sp)
  810f10:	df000117 	ldw	fp,4(sp)
  810f14:	dc000017 	ldw	r16,0(sp)
  810f18:	dec00304 	addi	sp,sp,12
  810f1c:	f800283a 	ret

00810f20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  810f20:	defffb04 	addi	sp,sp,-20
  810f24:	dfc00415 	stw	ra,16(sp)
  810f28:	df000315 	stw	fp,12(sp)
  810f2c:	df000304 	addi	fp,sp,12
  810f30:	e13ffd15 	stw	r4,-12(fp)
  810f34:	e17ffe15 	stw	r5,-8(fp)
  810f38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  810f3c:	01002074 	movhi	r4,129
  810f40:	210cde04 	addi	r4,r4,13176
  810f44:	e17ffd17 	ldw	r5,-12(fp)
  810f48:	01800044 	movi	r6,1
  810f4c:	01c07fc4 	movi	r7,511
  810f50:	0810e480 	call	810e48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  810f54:	01002074 	movhi	r4,129
  810f58:	210cdb04 	addi	r4,r4,13164
  810f5c:	e17ffe17 	ldw	r5,-8(fp)
  810f60:	000d883a 	mov	r6,zero
  810f64:	01c07fc4 	movi	r7,511
  810f68:	0810e480 	call	810e48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  810f6c:	01002074 	movhi	r4,129
  810f70:	210ce104 	addi	r4,r4,13188
  810f74:	e17fff17 	ldw	r5,-4(fp)
  810f78:	01800044 	movi	r6,1
  810f7c:	01c07fc4 	movi	r7,511
  810f80:	0810e480 	call	810e48 <alt_open_fd>
}  
  810f84:	e037883a 	mov	sp,fp
  810f88:	dfc00117 	ldw	ra,4(sp)
  810f8c:	df000017 	ldw	fp,0(sp)
  810f90:	dec00204 	addi	sp,sp,8
  810f94:	f800283a 	ret

00810f98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810f98:	defffa04 	addi	sp,sp,-24
  810f9c:	dfc00515 	stw	ra,20(sp)
  810fa0:	df000415 	stw	fp,16(sp)
  810fa4:	dc000315 	stw	r16,12(sp)
  810fa8:	df000304 	addi	fp,sp,12
  810fac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810fb0:	e0bffe17 	ldw	r2,-8(fp)
  810fb4:	10800217 	ldw	r2,8(r2)
  810fb8:	10d00034 	orhi	r3,r2,16384
  810fbc:	e0bffe17 	ldw	r2,-8(fp)
  810fc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810fc4:	e03ffd15 	stw	zero,-12(fp)
  810fc8:	00002306 	br	811058 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810fcc:	e13ffd17 	ldw	r4,-12(fp)
  810fd0:	04002074 	movhi	r16,129
  810fd4:	840cdb04 	addi	r16,r16,13164
  810fd8:	01400304 	movi	r5,12
  810fdc:	0803eb80 	call	803eb8 <__mulsi3>
  810fe0:	1405883a 	add	r2,r2,r16
  810fe4:	10c00017 	ldw	r3,0(r2)
  810fe8:	e0bffe17 	ldw	r2,-8(fp)
  810fec:	10800017 	ldw	r2,0(r2)
  810ff0:	1880161e 	bne	r3,r2,81104c <alt_file_locked+0xb4>
  810ff4:	e13ffd17 	ldw	r4,-12(fp)
  810ff8:	04002074 	movhi	r16,129
  810ffc:	840cdb04 	addi	r16,r16,13164
  811000:	01400304 	movi	r5,12
  811004:	0803eb80 	call	803eb8 <__mulsi3>
  811008:	1405883a 	add	r2,r2,r16
  81100c:	10800204 	addi	r2,r2,8
  811010:	10800017 	ldw	r2,0(r2)
  811014:	1004403a 	cmpge	r2,r2,zero
  811018:	10000c1e 	bne	r2,zero,81104c <alt_file_locked+0xb4>
  81101c:	e13ffd17 	ldw	r4,-12(fp)
  811020:	01400304 	movi	r5,12
  811024:	0803eb80 	call	803eb8 <__mulsi3>
  811028:	1007883a 	mov	r3,r2
  81102c:	00802074 	movhi	r2,129
  811030:	108cdb04 	addi	r2,r2,13164
  811034:	1887883a 	add	r3,r3,r2
  811038:	e0bffe17 	ldw	r2,-8(fp)
  81103c:	18800326 	beq	r3,r2,81104c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811040:	00bffcc4 	movi	r2,-13
  811044:	e0bfff15 	stw	r2,-4(fp)
  811048:	00000a06 	br	811074 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81104c:	e0bffd17 	ldw	r2,-12(fp)
  811050:	10800044 	addi	r2,r2,1
  811054:	e0bffd15 	stw	r2,-12(fp)
  811058:	00802074 	movhi	r2,129
  81105c:	1091b604 	addi	r2,r2,18136
  811060:	10800017 	ldw	r2,0(r2)
  811064:	1007883a 	mov	r3,r2
  811068:	e0bffd17 	ldw	r2,-12(fp)
  81106c:	18bfd72e 	bgeu	r3,r2,810fcc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811070:	e03fff15 	stw	zero,-4(fp)
  811074:	e0bfff17 	ldw	r2,-4(fp)
}
  811078:	e037883a 	mov	sp,fp
  81107c:	dfc00217 	ldw	ra,8(sp)
  811080:	df000117 	ldw	fp,4(sp)
  811084:	dc000017 	ldw	r16,0(sp)
  811088:	dec00304 	addi	sp,sp,12
  81108c:	f800283a 	ret

00811090 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811090:	defff404 	addi	sp,sp,-48
  811094:	dfc00b15 	stw	ra,44(sp)
  811098:	df000a15 	stw	fp,40(sp)
  81109c:	df000a04 	addi	fp,sp,40
  8110a0:	e13ffb15 	stw	r4,-20(fp)
  8110a4:	e17ffc15 	stw	r5,-16(fp)
  8110a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8110ac:	00bfffc4 	movi	r2,-1
  8110b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8110b4:	00bffb44 	movi	r2,-19
  8110b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8110bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8110c0:	e13ffb17 	ldw	r4,-20(fp)
  8110c4:	01402074 	movhi	r5,129
  8110c8:	2951b404 	addi	r5,r5,18128
  8110cc:	08114400 	call	811440 <alt_find_dev>
  8110d0:	e0bffa15 	stw	r2,-24(fp)
  8110d4:	e0bffa17 	ldw	r2,-24(fp)
  8110d8:	1004c03a 	cmpne	r2,r2,zero
  8110dc:	1000051e 	bne	r2,zero,8110f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8110e0:	e13ffb17 	ldw	r4,-20(fp)
  8110e4:	08114d40 	call	8114d4 <alt_find_file>
  8110e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8110ec:	00800044 	movi	r2,1
  8110f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8110f4:	e0bffa17 	ldw	r2,-24(fp)
  8110f8:	1005003a 	cmpeq	r2,r2,zero
  8110fc:	1000311e 	bne	r2,zero,8111c4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811100:	e13ffa17 	ldw	r4,-24(fp)
  811104:	08115f40 	call	8115f4 <alt_get_fd>
  811108:	e0bff815 	stw	r2,-32(fp)
  81110c:	e0bff817 	ldw	r2,-32(fp)
  811110:	1004403a 	cmpge	r2,r2,zero
  811114:	1000031e 	bne	r2,zero,811124 <open+0x94>
    {
      status = index;
  811118:	e0bff817 	ldw	r2,-32(fp)
  81111c:	e0bff715 	stw	r2,-36(fp)
  811120:	00002a06 	br	8111cc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811124:	e13ff817 	ldw	r4,-32(fp)
  811128:	01400304 	movi	r5,12
  81112c:	0803eb80 	call	803eb8 <__mulsi3>
  811130:	1007883a 	mov	r3,r2
  811134:	00802074 	movhi	r2,129
  811138:	108cdb04 	addi	r2,r2,13164
  81113c:	1885883a 	add	r2,r3,r2
  811140:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811144:	e0fffc17 	ldw	r3,-16(fp)
  811148:	00900034 	movhi	r2,16384
  81114c:	10bfffc4 	addi	r2,r2,-1
  811150:	1886703a 	and	r3,r3,r2
  811154:	e0bff917 	ldw	r2,-28(fp)
  811158:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81115c:	e0bff617 	ldw	r2,-40(fp)
  811160:	1004c03a 	cmpne	r2,r2,zero
  811164:	1000061e 	bne	r2,zero,811180 <open+0xf0>
  811168:	e13ff917 	ldw	r4,-28(fp)
  81116c:	0810f980 	call	810f98 <alt_file_locked>
  811170:	e0bff715 	stw	r2,-36(fp)
  811174:	e0bff717 	ldw	r2,-36(fp)
  811178:	1004803a 	cmplt	r2,r2,zero
  81117c:	1000131e 	bne	r2,zero,8111cc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811180:	e0bffa17 	ldw	r2,-24(fp)
  811184:	10800317 	ldw	r2,12(r2)
  811188:	1005003a 	cmpeq	r2,r2,zero
  81118c:	1000091e 	bne	r2,zero,8111b4 <open+0x124>
  811190:	e0bffa17 	ldw	r2,-24(fp)
  811194:	10800317 	ldw	r2,12(r2)
  811198:	e13ff917 	ldw	r4,-28(fp)
  81119c:	e17ffb17 	ldw	r5,-20(fp)
  8111a0:	e1bffc17 	ldw	r6,-16(fp)
  8111a4:	e1fffd17 	ldw	r7,-12(fp)
  8111a8:	103ee83a 	callr	r2
  8111ac:	e0bfff15 	stw	r2,-4(fp)
  8111b0:	00000106 	br	8111b8 <open+0x128>
  8111b4:	e03fff15 	stw	zero,-4(fp)
  8111b8:	e0bfff17 	ldw	r2,-4(fp)
  8111bc:	e0bff715 	stw	r2,-36(fp)
  8111c0:	00000206 	br	8111cc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8111c4:	00bffb44 	movi	r2,-19
  8111c8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8111cc:	e0bff717 	ldw	r2,-36(fp)
  8111d0:	1004403a 	cmpge	r2,r2,zero
  8111d4:	1000091e 	bne	r2,zero,8111fc <open+0x16c>
  {
    alt_release_fd (index);  
  8111d8:	e13ff817 	ldw	r4,-32(fp)
  8111dc:	080e7580 	call	80e758 <alt_release_fd>
    ALT_ERRNO = -status;
  8111e0:	081121c0 	call	81121c <alt_get_errno>
  8111e4:	e0fff717 	ldw	r3,-36(fp)
  8111e8:	00c7c83a 	sub	r3,zero,r3
  8111ec:	10c00015 	stw	r3,0(r2)
    return -1;
  8111f0:	00bfffc4 	movi	r2,-1
  8111f4:	e0bffe15 	stw	r2,-8(fp)
  8111f8:	00000206 	br	811204 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  8111fc:	e0bff817 	ldw	r2,-32(fp)
  811200:	e0bffe15 	stw	r2,-8(fp)
  811204:	e0bffe17 	ldw	r2,-8(fp)
}
  811208:	e037883a 	mov	sp,fp
  81120c:	dfc00117 	ldw	ra,4(sp)
  811210:	df000017 	ldw	fp,0(sp)
  811214:	dec00204 	addi	sp,sp,8
  811218:	f800283a 	ret

0081121c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81121c:	defffd04 	addi	sp,sp,-12
  811220:	dfc00215 	stw	ra,8(sp)
  811224:	df000115 	stw	fp,4(sp)
  811228:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81122c:	00802074 	movhi	r2,129
  811230:	1091b704 	addi	r2,r2,18140
  811234:	10800017 	ldw	r2,0(r2)
  811238:	1005003a 	cmpeq	r2,r2,zero
  81123c:	1000061e 	bne	r2,zero,811258 <alt_get_errno+0x3c>
  811240:	00802074 	movhi	r2,129
  811244:	1091b704 	addi	r2,r2,18140
  811248:	10800017 	ldw	r2,0(r2)
  81124c:	103ee83a 	callr	r2
  811250:	e0bfff15 	stw	r2,-4(fp)
  811254:	00000306 	br	811264 <alt_get_errno+0x48>
  811258:	00802074 	movhi	r2,129
  81125c:	10993204 	addi	r2,r2,25800
  811260:	e0bfff15 	stw	r2,-4(fp)
  811264:	e0bfff17 	ldw	r2,-4(fp)
}
  811268:	e037883a 	mov	sp,fp
  81126c:	dfc00117 	ldw	ra,4(sp)
  811270:	df000017 	ldw	fp,0(sp)
  811274:	dec00204 	addi	sp,sp,8
  811278:	f800283a 	ret

0081127c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81127c:	defffa04 	addi	sp,sp,-24
  811280:	df000515 	stw	fp,20(sp)
  811284:	df000504 	addi	fp,sp,20
  811288:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81128c:	0005303a 	rdctl	r2,status
  811290:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811294:	e0fffd17 	ldw	r3,-12(fp)
  811298:	00bfff84 	movi	r2,-2
  81129c:	1884703a 	and	r2,r3,r2
  8112a0:	1001703a 	wrctl	status,r2
  
  return context;
  8112a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8112a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8112ac:	e0bfff17 	ldw	r2,-4(fp)
  8112b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8112b4:	e0bffc17 	ldw	r2,-16(fp)
  8112b8:	10c00017 	ldw	r3,0(r2)
  8112bc:	e0bffc17 	ldw	r2,-16(fp)
  8112c0:	10800117 	ldw	r2,4(r2)
  8112c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8112c8:	e0bffc17 	ldw	r2,-16(fp)
  8112cc:	10c00117 	ldw	r3,4(r2)
  8112d0:	e0bffc17 	ldw	r2,-16(fp)
  8112d4:	10800017 	ldw	r2,0(r2)
  8112d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8112dc:	e0fffc17 	ldw	r3,-16(fp)
  8112e0:	e0bffc17 	ldw	r2,-16(fp)
  8112e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8112e8:	e0fffc17 	ldw	r3,-16(fp)
  8112ec:	e0bffc17 	ldw	r2,-16(fp)
  8112f0:	18800015 	stw	r2,0(r3)
  8112f4:	e0bffe17 	ldw	r2,-8(fp)
  8112f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112fc:	e0bffb17 	ldw	r2,-20(fp)
  811300:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811304:	e037883a 	mov	sp,fp
  811308:	df000017 	ldw	fp,0(sp)
  81130c:	dec00104 	addi	sp,sp,4
  811310:	f800283a 	ret

00811314 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811314:	defffb04 	addi	sp,sp,-20
  811318:	dfc00415 	stw	ra,16(sp)
  81131c:	df000315 	stw	fp,12(sp)
  811320:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811324:	d0a02017 	ldw	r2,-32640(gp)
  811328:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81132c:	d0a79d17 	ldw	r2,-24972(gp)
  811330:	10800044 	addi	r2,r2,1
  811334:	d0a79d15 	stw	r2,-24972(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811338:	00003106 	br	811400 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81133c:	e0bffe17 	ldw	r2,-8(fp)
  811340:	10800017 	ldw	r2,0(r2)
  811344:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811348:	e0bffe17 	ldw	r2,-8(fp)
  81134c:	10800403 	ldbu	r2,16(r2)
  811350:	10803fcc 	andi	r2,r2,255
  811354:	1005003a 	cmpeq	r2,r2,zero
  811358:	1000051e 	bne	r2,zero,811370 <alt_tick+0x5c>
  81135c:	d0a79d17 	ldw	r2,-24972(gp)
  811360:	1004c03a 	cmpne	r2,r2,zero
  811364:	1000021e 	bne	r2,zero,811370 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811368:	e0bffe17 	ldw	r2,-8(fp)
  81136c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811370:	e0bffe17 	ldw	r2,-8(fp)
  811374:	10c00217 	ldw	r3,8(r2)
  811378:	d0a79d17 	ldw	r2,-24972(gp)
  81137c:	10c01e36 	bltu	r2,r3,8113f8 <alt_tick+0xe4>
  811380:	e0bffe17 	ldw	r2,-8(fp)
  811384:	10800403 	ldbu	r2,16(r2)
  811388:	10803fcc 	andi	r2,r2,255
  81138c:	1004c03a 	cmpne	r2,r2,zero
  811390:	1000191e 	bne	r2,zero,8113f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811394:	e0bffe17 	ldw	r2,-8(fp)
  811398:	10c00317 	ldw	r3,12(r2)
  81139c:	e0bffe17 	ldw	r2,-8(fp)
  8113a0:	11000517 	ldw	r4,20(r2)
  8113a4:	183ee83a 	callr	r3
  8113a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8113ac:	e0bffd17 	ldw	r2,-12(fp)
  8113b0:	1004c03a 	cmpne	r2,r2,zero
  8113b4:	1000031e 	bne	r2,zero,8113c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8113b8:	e13ffe17 	ldw	r4,-8(fp)
  8113bc:	081127c0 	call	81127c <alt_alarm_stop>
  8113c0:	00000d06 	br	8113f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8113c4:	e0bffe17 	ldw	r2,-8(fp)
  8113c8:	10c00217 	ldw	r3,8(r2)
  8113cc:	e0bffd17 	ldw	r2,-12(fp)
  8113d0:	1887883a 	add	r3,r3,r2
  8113d4:	e0bffe17 	ldw	r2,-8(fp)
  8113d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8113dc:	e0bffe17 	ldw	r2,-8(fp)
  8113e0:	10c00217 	ldw	r3,8(r2)
  8113e4:	d0a79d17 	ldw	r2,-24972(gp)
  8113e8:	1880032e 	bgeu	r3,r2,8113f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8113ec:	e0fffe17 	ldw	r3,-8(fp)
  8113f0:	00800044 	movi	r2,1
  8113f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8113f8:	e0bfff17 	ldw	r2,-4(fp)
  8113fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811400:	d0e02004 	addi	r3,gp,-32640
  811404:	e0bffe17 	ldw	r2,-8(fp)
  811408:	10ffcc1e 	bne	r2,r3,81133c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81140c:	e037883a 	mov	sp,fp
  811410:	dfc00117 	ldw	ra,4(sp)
  811414:	df000017 	ldw	fp,0(sp)
  811418:	dec00204 	addi	sp,sp,8
  81141c:	f800283a 	ret

00811420 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  811420:	deffff04 	addi	sp,sp,-4
  811424:	df000015 	stw	fp,0(sp)
  811428:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81142c:	000170fa 	wrctl	ienable,zero
}
  811430:	e037883a 	mov	sp,fp
  811434:	df000017 	ldw	fp,0(sp)
  811438:	dec00104 	addi	sp,sp,4
  81143c:	f800283a 	ret

00811440 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811440:	defff904 	addi	sp,sp,-28
  811444:	dfc00615 	stw	ra,24(sp)
  811448:	df000515 	stw	fp,20(sp)
  81144c:	df000504 	addi	fp,sp,20
  811450:	e13ffd15 	stw	r4,-12(fp)
  811454:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811458:	e0bffe17 	ldw	r2,-8(fp)
  81145c:	10800017 	ldw	r2,0(r2)
  811460:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  811464:	e13ffd17 	ldw	r4,-12(fp)
  811468:	0804ebc0 	call	804ebc <strlen>
  81146c:	10800044 	addi	r2,r2,1
  811470:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811474:	00000d06 	br	8114ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811478:	e0bffc17 	ldw	r2,-16(fp)
  81147c:	11000217 	ldw	r4,8(r2)
  811480:	e1bffb17 	ldw	r6,-20(fp)
  811484:	e17ffd17 	ldw	r5,-12(fp)
  811488:	08117680 	call	811768 <memcmp>
  81148c:	1004c03a 	cmpne	r2,r2,zero
  811490:	1000031e 	bne	r2,zero,8114a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811494:	e0bffc17 	ldw	r2,-16(fp)
  811498:	e0bfff15 	stw	r2,-4(fp)
  81149c:	00000706 	br	8114bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8114a0:	e0bffc17 	ldw	r2,-16(fp)
  8114a4:	10800017 	ldw	r2,0(r2)
  8114a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8114ac:	e0fffe17 	ldw	r3,-8(fp)
  8114b0:	e0bffc17 	ldw	r2,-16(fp)
  8114b4:	10fff01e 	bne	r2,r3,811478 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8114b8:	e03fff15 	stw	zero,-4(fp)
  8114bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8114c0:	e037883a 	mov	sp,fp
  8114c4:	dfc00117 	ldw	ra,4(sp)
  8114c8:	df000017 	ldw	fp,0(sp)
  8114cc:	dec00204 	addi	sp,sp,8
  8114d0:	f800283a 	ret

008114d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8114d4:	defffa04 	addi	sp,sp,-24
  8114d8:	dfc00515 	stw	ra,20(sp)
  8114dc:	df000415 	stw	fp,16(sp)
  8114e0:	df000404 	addi	fp,sp,16
  8114e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8114e8:	00802074 	movhi	r2,129
  8114ec:	1091b204 	addi	r2,r2,18120
  8114f0:	10800017 	ldw	r2,0(r2)
  8114f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8114f8:	00003306 	br	8115c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8114fc:	e0bffd17 	ldw	r2,-12(fp)
  811500:	11000217 	ldw	r4,8(r2)
  811504:	0804ebc0 	call	804ebc <strlen>
  811508:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81150c:	e0bffd17 	ldw	r2,-12(fp)
  811510:	10c00217 	ldw	r3,8(r2)
  811514:	e0bffc17 	ldw	r2,-16(fp)
  811518:	1885883a 	add	r2,r3,r2
  81151c:	10bfffc4 	addi	r2,r2,-1
  811520:	10800003 	ldbu	r2,0(r2)
  811524:	10803fcc 	andi	r2,r2,255
  811528:	1080201c 	xori	r2,r2,128
  81152c:	10bfe004 	addi	r2,r2,-128
  811530:	10800bd8 	cmpnei	r2,r2,47
  811534:	1000031e 	bne	r2,zero,811544 <alt_find_file+0x70>
    {
      len -= 1;
  811538:	e0bffc17 	ldw	r2,-16(fp)
  81153c:	10bfffc4 	addi	r2,r2,-1
  811540:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811544:	e0bffc17 	ldw	r2,-16(fp)
  811548:	1007883a 	mov	r3,r2
  81154c:	e0bffe17 	ldw	r2,-8(fp)
  811550:	1885883a 	add	r2,r3,r2
  811554:	10800003 	ldbu	r2,0(r2)
  811558:	10803fcc 	andi	r2,r2,255
  81155c:	1080201c 	xori	r2,r2,128
  811560:	10bfe004 	addi	r2,r2,-128
  811564:	10800be0 	cmpeqi	r2,r2,47
  811568:	10000a1e 	bne	r2,zero,811594 <alt_find_file+0xc0>
  81156c:	e0bffc17 	ldw	r2,-16(fp)
  811570:	1007883a 	mov	r3,r2
  811574:	e0bffe17 	ldw	r2,-8(fp)
  811578:	1885883a 	add	r2,r3,r2
  81157c:	10800003 	ldbu	r2,0(r2)
  811580:	10803fcc 	andi	r2,r2,255
  811584:	1080201c 	xori	r2,r2,128
  811588:	10bfe004 	addi	r2,r2,-128
  81158c:	1004c03a 	cmpne	r2,r2,zero
  811590:	10000a1e 	bne	r2,zero,8115bc <alt_find_file+0xe8>
  811594:	e0bffd17 	ldw	r2,-12(fp)
  811598:	11000217 	ldw	r4,8(r2)
  81159c:	e1bffc17 	ldw	r6,-16(fp)
  8115a0:	e17ffe17 	ldw	r5,-8(fp)
  8115a4:	08117680 	call	811768 <memcmp>
  8115a8:	1004c03a 	cmpne	r2,r2,zero
  8115ac:	1000031e 	bne	r2,zero,8115bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8115b0:	e0bffd17 	ldw	r2,-12(fp)
  8115b4:	e0bfff15 	stw	r2,-4(fp)
  8115b8:	00000806 	br	8115dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8115bc:	e0bffd17 	ldw	r2,-12(fp)
  8115c0:	10800017 	ldw	r2,0(r2)
  8115c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8115c8:	00c02074 	movhi	r3,129
  8115cc:	18d1b204 	addi	r3,r3,18120
  8115d0:	e0bffd17 	ldw	r2,-12(fp)
  8115d4:	10ffc91e 	bne	r2,r3,8114fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8115d8:	e03fff15 	stw	zero,-4(fp)
  8115dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8115e0:	e037883a 	mov	sp,fp
  8115e4:	dfc00117 	ldw	ra,4(sp)
  8115e8:	df000017 	ldw	fp,0(sp)
  8115ec:	dec00204 	addi	sp,sp,8
  8115f0:	f800283a 	ret

008115f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8115f4:	defffa04 	addi	sp,sp,-24
  8115f8:	dfc00515 	stw	ra,20(sp)
  8115fc:	df000415 	stw	fp,16(sp)
  811600:	dc000315 	stw	r16,12(sp)
  811604:	df000304 	addi	fp,sp,12
  811608:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81160c:	00bffa04 	movi	r2,-24
  811610:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811614:	e03ffe15 	stw	zero,-8(fp)
  811618:	00002006 	br	81169c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  81161c:	e13ffe17 	ldw	r4,-8(fp)
  811620:	04002074 	movhi	r16,129
  811624:	840cdb04 	addi	r16,r16,13164
  811628:	01400304 	movi	r5,12
  81162c:	0803eb80 	call	803eb8 <__mulsi3>
  811630:	1405883a 	add	r2,r2,r16
  811634:	10800017 	ldw	r2,0(r2)
  811638:	1004c03a 	cmpne	r2,r2,zero
  81163c:	1000141e 	bne	r2,zero,811690 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  811640:	e13ffe17 	ldw	r4,-8(fp)
  811644:	04002074 	movhi	r16,129
  811648:	840cdb04 	addi	r16,r16,13164
  81164c:	01400304 	movi	r5,12
  811650:	0803eb80 	call	803eb8 <__mulsi3>
  811654:	1407883a 	add	r3,r2,r16
  811658:	e0bfff17 	ldw	r2,-4(fp)
  81165c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  811660:	00802074 	movhi	r2,129
  811664:	1091b604 	addi	r2,r2,18136
  811668:	10c00017 	ldw	r3,0(r2)
  81166c:	e0bffe17 	ldw	r2,-8(fp)
  811670:	1880040e 	bge	r3,r2,811684 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  811674:	00c02074 	movhi	r3,129
  811678:	18d1b604 	addi	r3,r3,18136
  81167c:	e0bffe17 	ldw	r2,-8(fp)
  811680:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  811684:	e0bffe17 	ldw	r2,-8(fp)
  811688:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81168c:	00000606 	br	8116a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811690:	e0bffe17 	ldw	r2,-8(fp)
  811694:	10800044 	addi	r2,r2,1
  811698:	e0bffe15 	stw	r2,-8(fp)
  81169c:	e0bffe17 	ldw	r2,-8(fp)
  8116a0:	10800810 	cmplti	r2,r2,32
  8116a4:	103fdd1e 	bne	r2,zero,81161c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8116a8:	e0bffd17 	ldw	r2,-12(fp)
}
  8116ac:	e037883a 	mov	sp,fp
  8116b0:	dfc00217 	ldw	ra,8(sp)
  8116b4:	df000117 	ldw	fp,4(sp)
  8116b8:	dc000017 	ldw	r16,0(sp)
  8116bc:	dec00304 	addi	sp,sp,12
  8116c0:	f800283a 	ret

008116c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8116c4:	defffb04 	addi	sp,sp,-20
  8116c8:	df000415 	stw	fp,16(sp)
  8116cc:	df000404 	addi	fp,sp,16
  8116d0:	e13ffe15 	stw	r4,-8(fp)
  8116d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8116d8:	e0bfff17 	ldw	r2,-4(fp)
  8116dc:	10840070 	cmpltui	r2,r2,4097
  8116e0:	1000021e 	bne	r2,zero,8116ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8116e4:	00840004 	movi	r2,4096
  8116e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8116ec:	e0fffe17 	ldw	r3,-8(fp)
  8116f0:	e0bfff17 	ldw	r2,-4(fp)
  8116f4:	1885883a 	add	r2,r3,r2
  8116f8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8116fc:	e0bffe17 	ldw	r2,-8(fp)
  811700:	e0bffd15 	stw	r2,-12(fp)
  811704:	00000506 	br	81171c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811708:	e0bffd17 	ldw	r2,-12(fp)
  81170c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811710:	e0bffd17 	ldw	r2,-12(fp)
  811714:	10800804 	addi	r2,r2,32
  811718:	e0bffd15 	stw	r2,-12(fp)
  81171c:	e0fffd17 	ldw	r3,-12(fp)
  811720:	e0bffc17 	ldw	r2,-16(fp)
  811724:	18bff836 	bltu	r3,r2,811708 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811728:	e0bffe17 	ldw	r2,-8(fp)
  81172c:	108007cc 	andi	r2,r2,31
  811730:	1005003a 	cmpeq	r2,r2,zero
  811734:	1000021e 	bne	r2,zero,811740 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811738:	e0bffd17 	ldw	r2,-12(fp)
  81173c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811740:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811744:	e037883a 	mov	sp,fp
  811748:	df000017 	ldw	fp,0(sp)
  81174c:	dec00104 	addi	sp,sp,4
  811750:	f800283a 	ret

00811754 <atexit>:
  811754:	200b883a 	mov	r5,r4
  811758:	000d883a 	mov	r6,zero
  81175c:	0009883a 	mov	r4,zero
  811760:	000f883a 	mov	r7,zero
  811764:	08117dc1 	jmpi	8117dc <__register_exitproc>

00811768 <memcmp>:
  811768:	00c000c4 	movi	r3,3
  81176c:	1980032e 	bgeu	r3,r6,81177c <memcmp+0x14>
  811770:	2144b03a 	or	r2,r4,r5
  811774:	10c4703a 	and	r2,r2,r3
  811778:	10000f26 	beq	r2,zero,8117b8 <memcmp+0x50>
  81177c:	31ffffc4 	addi	r7,r6,-1
  811780:	3000061e 	bne	r6,zero,81179c <memcmp+0x34>
  811784:	00000a06 	br	8117b0 <memcmp+0x48>
  811788:	39ffffc4 	addi	r7,r7,-1
  81178c:	00bfffc4 	movi	r2,-1
  811790:	21000044 	addi	r4,r4,1
  811794:	29400044 	addi	r5,r5,1
  811798:	38800526 	beq	r7,r2,8117b0 <memcmp+0x48>
  81179c:	20c00003 	ldbu	r3,0(r4)
  8117a0:	28800003 	ldbu	r2,0(r5)
  8117a4:	18bff826 	beq	r3,r2,811788 <memcmp+0x20>
  8117a8:	1885c83a 	sub	r2,r3,r2
  8117ac:	f800283a 	ret
  8117b0:	0005883a 	mov	r2,zero
  8117b4:	f800283a 	ret
  8117b8:	180f883a 	mov	r7,r3
  8117bc:	20c00017 	ldw	r3,0(r4)
  8117c0:	28800017 	ldw	r2,0(r5)
  8117c4:	18bfed1e 	bne	r3,r2,81177c <memcmp+0x14>
  8117c8:	31bfff04 	addi	r6,r6,-4
  8117cc:	21000104 	addi	r4,r4,4
  8117d0:	29400104 	addi	r5,r5,4
  8117d4:	39bff936 	bltu	r7,r6,8117bc <memcmp+0x54>
  8117d8:	003fe806 	br	81177c <memcmp+0x14>

008117dc <__register_exitproc>:
  8117dc:	defffa04 	addi	sp,sp,-24
  8117e0:	00802074 	movhi	r2,129
  8117e4:	1091ad04 	addi	r2,r2,18100
  8117e8:	dc000015 	stw	r16,0(sp)
  8117ec:	14000017 	ldw	r16,0(r2)
  8117f0:	dd000415 	stw	r20,16(sp)
  8117f4:	2829883a 	mov	r20,r5
  8117f8:	81405217 	ldw	r5,328(r16)
  8117fc:	dcc00315 	stw	r19,12(sp)
  811800:	dc800215 	stw	r18,8(sp)
  811804:	dc400115 	stw	r17,4(sp)
  811808:	dfc00515 	stw	ra,20(sp)
  81180c:	2023883a 	mov	r17,r4
  811810:	3027883a 	mov	r19,r6
  811814:	3825883a 	mov	r18,r7
  811818:	28002526 	beq	r5,zero,8118b0 <__register_exitproc+0xd4>
  81181c:	29000117 	ldw	r4,4(r5)
  811820:	008007c4 	movi	r2,31
  811824:	11002716 	blt	r2,r4,8118c4 <__register_exitproc+0xe8>
  811828:	8800101e 	bne	r17,zero,81186c <__register_exitproc+0x90>
  81182c:	2105883a 	add	r2,r4,r4
  811830:	1085883a 	add	r2,r2,r2
  811834:	20c00044 	addi	r3,r4,1
  811838:	1145883a 	add	r2,r2,r5
  81183c:	0009883a 	mov	r4,zero
  811840:	15000215 	stw	r20,8(r2)
  811844:	28c00115 	stw	r3,4(r5)
  811848:	2005883a 	mov	r2,r4
  81184c:	dfc00517 	ldw	ra,20(sp)
  811850:	dd000417 	ldw	r20,16(sp)
  811854:	dcc00317 	ldw	r19,12(sp)
  811858:	dc800217 	ldw	r18,8(sp)
  81185c:	dc400117 	ldw	r17,4(sp)
  811860:	dc000017 	ldw	r16,0(sp)
  811864:	dec00604 	addi	sp,sp,24
  811868:	f800283a 	ret
  81186c:	29802204 	addi	r6,r5,136
  811870:	00800044 	movi	r2,1
  811874:	110e983a 	sll	r7,r2,r4
  811878:	30c04017 	ldw	r3,256(r6)
  81187c:	2105883a 	add	r2,r4,r4
  811880:	1085883a 	add	r2,r2,r2
  811884:	1185883a 	add	r2,r2,r6
  811888:	19c6b03a 	or	r3,r3,r7
  81188c:	14802015 	stw	r18,128(r2)
  811890:	14c00015 	stw	r19,0(r2)
  811894:	00800084 	movi	r2,2
  811898:	30c04015 	stw	r3,256(r6)
  81189c:	88bfe31e 	bne	r17,r2,81182c <__register_exitproc+0x50>
  8118a0:	30804117 	ldw	r2,260(r6)
  8118a4:	11c4b03a 	or	r2,r2,r7
  8118a8:	30804115 	stw	r2,260(r6)
  8118ac:	003fdf06 	br	81182c <__register_exitproc+0x50>
  8118b0:	00802074 	movhi	r2,129
  8118b4:	10998e04 	addi	r2,r2,26168
  8118b8:	100b883a 	mov	r5,r2
  8118bc:	80805215 	stw	r2,328(r16)
  8118c0:	003fd606 	br	81181c <__register_exitproc+0x40>
  8118c4:	00800034 	movhi	r2,0
  8118c8:	10800004 	addi	r2,r2,0
  8118cc:	1000021e 	bne	r2,zero,8118d8 <__register_exitproc+0xfc>
  8118d0:	013fffc4 	movi	r4,-1
  8118d4:	003fdc06 	br	811848 <__register_exitproc+0x6c>
  8118d8:	01006404 	movi	r4,400
  8118dc:	103ee83a 	callr	r2
  8118e0:	1007883a 	mov	r3,r2
  8118e4:	103ffa26 	beq	r2,zero,8118d0 <__register_exitproc+0xf4>
  8118e8:	80805217 	ldw	r2,328(r16)
  8118ec:	180b883a 	mov	r5,r3
  8118f0:	18000115 	stw	zero,4(r3)
  8118f4:	18800015 	stw	r2,0(r3)
  8118f8:	80c05215 	stw	r3,328(r16)
  8118fc:	18006215 	stw	zero,392(r3)
  811900:	18006315 	stw	zero,396(r3)
  811904:	0009883a 	mov	r4,zero
  811908:	883fc826 	beq	r17,zero,81182c <__register_exitproc+0x50>
  81190c:	003fd706 	br	81186c <__register_exitproc+0x90>
  811910:	00000010 	cmplti	zero,zero,0
  811914:	00000000 	call	0 <__reset-0x800000>
  811918:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  81191c:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  811920:	001b0c0b 	ldhu	zero,27696(zero)
  811924:	00000028 	cmpgeui	zero,zero,0
  811928:	00000018 	cmpnei	zero,zero,0
  81192c:	0080c6b4 	movhi	r2,794
  811930:	0000066c 	andhi	zero,zero,25
  811934:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  811938:	910a9074 	orhi	r4,r18,10817
  81193c:	94089209 	0x94089209
  811940:	97049606 	br	812b9c <impure_data+0x6c>
  811944:	93019f03 	ldbu	r12,1660(r18)
  811948:	9c059507 	ldb	r16,5716(r19)
  81194c:	00000002 	0x2
  811950:	00000028 	cmpgeui	zero,zero,0
  811954:	00000044 	movi	zero,1
  811958:	0080cd20 	cmpeqi	r2,zero,820
  81195c:	00000660 	cmpeqi	zero,zero,25
  811960:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  811964:	92099170 	cmpltui	r8,r18,9797
  811968:	96069408 	cmpgei	et,r18,6736
  81196c:	9c039704 	addi	r16,r19,3676
  811970:	90019f02 	0x90019f02
  811974:	9507930a 	0x9507930a
  811978:	00000005 	stb	zero,0(zero)
  81197c:	00806fb4 	movhi	r2,446
