#include "lab1_phase2.h"
#include <io.h>
#include <stdio.h>

#define MIN_PERIOD 13
#define MAX_PERIOD 15
#define PERIOD_INCR 1

#define MIN_DUTY_CYCLE 1
#define MAX_DUTY_CYCLE 5
#define DUTY_CYCLE_INCR 1

#define MIN_GRANULARITY 1
#define MAX_GRANULARITY 101
#define GRANULARITY_INCR 10

//#define INTERRUPTS
#define POLLING

int num_captured = 0;

#ifdef POLLING
int main (void) {
	int i, x, y, z;
	for (x = MIN_PERIOD; x < MAX_PERIOD; x += PERIOD_INCR) {
		for (y = MIN_DUTY_CYCLE; y < MAX_DUTY_CYCLE; y += DUTY_CYCLE_INCR) {
			for (z = MIN_GRANULARITY; z < MAX_GRANULARITY; z += GRANULARITY_INCR) {
				printf("\n\nPeriod: %d\t\tDuty Cycle: %d\tGranularity: %d\n", x, y, z);
				init(x, y);
				/*for (i = 0; i < 100; i++) {
					while(IORD(PIO_PULSE_BASE, 0) == 0) {}
					IOWR(PIO_RESPONSE_BASE, 0, 1);
					background(z);
					while(IORD(PIO_PULSE_BASE, 0) == 1) {}
					IOWR(PIO_RESPONSE_BASE, 0, 0);
				}*/
				while (num_captured < 100) {
					if (IORD(PIO_PULSE_BASE, 0) == 1) {
						IOWR(PIO_RESPONSE_BASE, 0, 1);
						while(IORD(PIO_PULSE_BASE, 0) == 1) {
							//background(z);
						}
						IOWR(PIO_RESPONSE_BASE, 0, 0);
						num_captured++;
					} else {
						background(z);
					}
				}
				finalize();
				printf("-------------------------------------------------------------\n");
			}
		}
	}
}
#endif

#ifdef INTERRUPTS

int i, x, y, z;
static void pulse_ISR(void* context, alt_u32 id)
{
	int pulse = IORD(PIO_PULSE_BASE, 0);
	if (pulse == 1) {
		IOWR(PIO_RESPONSE_BASE, 0, 1);
		num_captured++;
	} else {
		IOWR(PIO_RESPONSE_BASE, 0, 0);
	}
	IOWR(PIO_PULSE_BASE, 3, 0);
}

int main (void) {
	IOWR(PIO_PULSE_BASE, 3, 0);
	alt_irq_register( PIO_PULSE_IRQ, (void*)0, pulse_ISR );
	IOWR(PIO_PULSE_BASE, 2, 0xf);
	for (x = MIN_PERIOD; x < MAX_PERIOD; x += PERIOD_INCR) {
		for (y = MIN_DUTY_CYCLE; y < MAX_DUTY_CYCLE; y += DUTY_CYCLE_INCR) {
			for (z = MIN_GRANULARITY; z < MAX_GRANULARITY; z += GRANULARITY_INCR) {
				num_captured = 0;
				init(x, y);
				while (num_captured < 100) {
					background(z);
				}
				finalize();
			}
		}
	}

	return 0;
}

#endif
